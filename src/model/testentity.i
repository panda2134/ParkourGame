#line 1 "testentity.cpp"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\testentity.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\block.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./boundingbox.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/direction.h"



namespace parkour {
enum Direction {
    UP, 
    DOWN, 
    LEFT, 
    RIGHT, 
    UNKNOWN
};

Direction getOppositeFace(Direction face);
}

#line 17 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/direction.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./boundingbox.h"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/geometryhelper.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\utils\\consts.h"



namespace parkour {



const int TICKS_PER_SEC = 300;




const double TICK_LENGTH = 1.0 / TICKS_PER_SEC;




const int TICKS_PER_FRAME = 5;




const double EPSILON = 1e-5;




const double GRAVITY = 18;




const double STAND_UPON_DELTA = 0.05;




const double MAX_VELOCITY = 50;




const double MAX_ACCELERATION = 20;




const double ENTITY_COLLISION_RANGE = 8;




const double DYING_ANIMATION_TICKS = TICKS_PER_SEC * 0.5;




const int WORLD_HEIGHT = 16;




const int BLOCK_TEXTURE_SIZE = 16;




const int TEXTURE_MAP_SIZE = 512;




const double FALL_DAMAGE_MULTIPLIER = .5;




const double FALL_DAMAGE_SPEED = 12.0;




const double JUMP_SPEED = 10.0;




const double WALK_SPEED = 6.0;




const double EXPLOSION_DAMAGE_MULTIPLIER = 3.0;




const double EXPLOSION_RADIUS_MULTIPLIER = 1.0;




const double BOUNCE_BOTTOM_ATTENUATION = 0.1;




const double VOID_DAMAGE_PER_TICK = 0.2;




const double CAMERA_MOVE_TICKS = 1 * (TICKS_PER_SEC / TICKS_PER_FRAME);




const double SCREEN_EDGE_OUTER_WIDTH_MULTIPLIER = 0.2;




const double SCREEN_EDGE_INNER_WIDTH_MULTIPLIER = 0.45;



const double TNT_EXPLOSION_POWER = 7;
}

#line 131 "c:\\users\\panda2134\\documents\\parkourgame\\src\\utils\\consts.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/geometryhelper.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"
#line 1 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"












































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"







#pragma once


















    
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    
    

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
            
        

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    #line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





























#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"


#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    


#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    } 

    





#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

#pragma pack(pop)
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    



    





















#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    


        
    #line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
















    

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    

#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"





#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
    
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"








    


#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
        
    

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



    
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"








    
        
    

#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


        




    #line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
    


#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {









    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    

#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













    


        
    #line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;






#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















    

#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


 
  
   
  

#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
 





#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







    











        
    #line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    

#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

























__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        


    #line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    






        
    #line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        
    #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"















#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        


            
        #line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        



    #line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    



#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
              
        

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    



#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



    
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 2007 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"

__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"





    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"









#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"
    
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#pragma once










































































































































































































 
  
   
  

#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 





#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

  
























































































#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"
 #line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xkeycheck.h"





#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"



















    

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"



    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"



    

#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"


    

#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
            
        

#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
    #line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"


    

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"

#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
        
    #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\crtdefs.h"
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 

#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
  
 #line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 


#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"










 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





 





  
 #line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


  
 #line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"






 





#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
  

#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 

#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
 



#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 


#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 


#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"






 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"









#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"









#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"










#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"









 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
 



#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 
#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 


#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 


  
 #line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"







 





#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 




#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 






#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 





#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 






#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 





#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 






#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 






#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 





#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 





#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 






#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 









#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"



 





#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 









#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 








#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"




 






  
 

#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
  
 

#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
  
 

#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"













































 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
 


#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"


 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"














 


  
 #line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 792 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





		












 

 
 





#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"

#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals_core.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	using value_type = _Ty;
	using type = integral_constant;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	[[nodiscard]] constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	using type = _Ty;
	};

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	using type = _Ty2;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	using type = _Ty1;
	};

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

template<class _Ty,
	class _Uty>
	inline constexpr bool is_same_v = is_same<_Ty, _Uty>::value;

	
template<class _Ty>
	struct remove_const
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

	
template<class _Ty>
	struct remove_volatile
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

	
template<class _Ty>
	struct remove_cv
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_cv<const volatile _Ty>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_integral_v = is_integral<_Ty>::value;

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;

	
template<class _Ty>
	struct is_arithmetic
		: bool_constant<is_integral_v<_Ty>
			|| is_floating_point_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;

	
template<class _Ty>
	struct remove_reference
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtr1common"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using :: ptrdiff_t; using :: size_t;
typedef double max_align_t;	


	
enum class byte : unsigned char { };

template<class _IntType,
	enable_if_t<is_integral_v<_IntType>, int> = 0>
	[[nodiscard]] constexpr byte operator<<(const byte _Arg, const _IntType _Shift) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) << _Shift)));
	}

template<class _IntType,
	enable_if_t<is_integral_v<_IntType>, int> = 0>
	[[nodiscard]] constexpr byte operator>>(const byte _Arg, const _IntType _Shift) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) >> _Shift)));
	}

[[nodiscard]] constexpr byte operator|(const byte _Left, const byte _Right) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) | static_cast<unsigned int>(_Right))));
	}

[[nodiscard]] constexpr byte operator&(const byte _Left, const byte _Right) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) & static_cast<unsigned int>(_Right))));
	}

[[nodiscard]] constexpr byte operator^(const byte _Left, const byte _Right) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(
		static_cast<unsigned int>(_Left) ^ static_cast<unsigned int>(_Right))));
	}

[[nodiscard]] constexpr byte operator~(const byte _Arg) noexcept
	{	
	return (static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(_Arg))));
	}

template<class _IntType,
	enable_if_t<is_integral_v<_IntType>, int> = 0>
	constexpr byte& operator<<=(byte& _Arg, const _IntType _Shift) noexcept
	{	
	return (_Arg = _Arg << _Shift);
	}

template<class _IntType,
	enable_if_t<is_integral_v<_IntType>, int> = 0>
	constexpr byte& operator>>=(byte& _Arg, const _IntType _Shift) noexcept
	{	
	return (_Arg = _Arg >> _Shift);
	}

constexpr byte& operator|=(byte& _Left, const byte _Right) noexcept
	{	
	return (_Left = _Left | _Right);
	}

constexpr byte& operator&=(byte& _Left, const byte _Right) noexcept
	{	
	return (_Left = _Left & _Right);
	}

constexpr byte& operator^=(byte& _Left, const byte _Right) noexcept
	{	
	return (_Left = _Left ^ _Right);
	}

template<class _IntType,
	enable_if_t<is_integral_v<_IntType>, int> = 0>
	[[nodiscard]] constexpr _IntType to_integer(const byte _Arg) noexcept
	{	
	return (static_cast<_IntType>(_Arg));
	}
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"

}

using ::std:: max_align_t;	



#pragma warning(pop)
#pragma pack(pop)

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport) 
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize_base(
      void* _Block
    );

 
__declspec(dllimport) 
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);




     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );

#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"



 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );




















































































#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"





      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {


































     
    
    __declspec(dllimport) errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

     
    
    __declspec(dllimport) errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

     
    __declspec(dllimport) double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
    __declspec(dllimport) float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) double __cdecl _wtof(
          wchar_t const* _String
        );

     
    __declspec(dllimport) double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) int __cdecl _wtoi(
          wchar_t const* _String
        );

     
    __declspec(dllimport) int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) long __cdecl _wtol(
          wchar_t const* _String
        );

     
    __declspec(dllimport) long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
    __declspec(dllimport) long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
    __declspec(dllimport) errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
    __declspec(dllimport) errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
    __declspec(dllimport) __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
    __declspec(dllimport) __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
    __declspec(dllimport) __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
    __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

    
    

     
     
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );

    

    
    __declspec(dllimport) errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(pop)

    __declspec(dllimport) void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

    __declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

        
        

        
        __declspec(dllimport) errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );

        

          __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        __declspec(dllimport) wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
        __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

         
        __declspec(dllimport) int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
        __declspec(dllimport) errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

        __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"

        __declspec(dllimport) int __cdecl _wsystem(
              wchar_t const* _Command
            );

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"



} __pragma(pack(pop))
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__pragma(pack(push, 8)) extern "C" {




    
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );













    __declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
    __declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    

    typedef int (__cdecl* _onexit_t)(void);
    


#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


    
    
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

    
     _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"












#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);




    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);

    
    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);
    

    __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);
    

    __declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int*      __cdecl __p__fmode  (void);








    
    
    
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540)

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);



#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
        
    #line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    


        
    #line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"



 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1021 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




















 
 
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#pragma warning(pop)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }




 
__declspec(dllimport) errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );

#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"




__declspec(dllimport) int*       __cdecl __p___argc (void);
__declspec(dllimport) char***    __cdecl __p___argv (void);
__declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);






    
    
    
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

__declspec(dllimport) char***    __cdecl __p__environ (void);
__declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);


    
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"







    
    
#line 1181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    


#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"









    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
    __declspec(dllimport) int __cdecl putenv(
          char const* _EnvString
        );

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))
#line 1368 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdlib.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\math.h"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {

#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 




    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
    #line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"










#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
    typedef float  float_t;
    typedef double double_t;
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"















    
        extern double const _HUGE;
    

#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


    
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"





      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

      __declspec(dllimport) double    __cdecl acosh(  double _X);
      __declspec(dllimport) double    __cdecl asinh(  double _X);
      __declspec(dllimport) double    __cdecl atanh(  double _X);
      __declspec(dllimport)  double    __cdecl atof(  char const* _String);
      __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
      __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
      __declspec(dllimport) double    __cdecl cbrt(  double _X);
      __declspec(dllimport) double    __cdecl ceil(  double _X);
      __declspec(dllimport) double    __cdecl _chgsign(  double _X);
      __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
      __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
      __declspec(dllimport) double    __cdecl erf(  double _X);
      __declspec(dllimport) double    __cdecl erfc(  double _X);
      __declspec(dllimport) double    __cdecl exp2(  double _X);
      __declspec(dllimport) double    __cdecl expm1(  double _X);
      __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl floor(  double _X);
      __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
      __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
      __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
      __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
      __declspec(dllimport) int       __cdecl ilogb(  double _X);
      __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
      __declspec(dllimport) double    __cdecl lgamma(  double _X);
      __declspec(dllimport) long long __cdecl llrint(  double _X);
      __declspec(dllimport) long long __cdecl llround(  double _X);
      __declspec(dllimport) double    __cdecl log1p(  double _X);
      __declspec(dllimport) double    __cdecl log2(  double _X);
      __declspec(dllimport) double    __cdecl logb(  double _X);
      __declspec(dllimport) long      __cdecl lrint(  double _X);
      __declspec(dllimport) long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

      __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
      __declspec(dllimport) double __cdecl nan(  char const* _X);
      __declspec(dllimport) double __cdecl nearbyint(  double _X);
      __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
      __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
      __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
      __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
      __declspec(dllimport) double __cdecl rint(  double _X);
      __declspec(dllimport) double __cdecl round(  double _X);
      __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
      __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
      __declspec(dllimport) double __cdecl tgamma(  double _X);
      __declspec(dllimport) double __cdecl trunc(  double _X);
      __declspec(dllimport) double __cdecl _j0(  double _X );
      __declspec(dllimport) double __cdecl _j1(  double _X );
      __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
      __declspec(dllimport) double __cdecl _y0(  double _X);
      __declspec(dllimport) double __cdecl _y1(  double _X);
      __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

      __declspec(dllimport) float     __cdecl acoshf(  float _X);
      __declspec(dllimport) float     __cdecl asinhf(  float _X);
      __declspec(dllimport) float     __cdecl atanhf(  float _X);
      __declspec(dllimport) float     __cdecl cbrtf(  float _X);
      __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
      __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
      __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
      __declspec(dllimport) float     __cdecl erff(  float _X);
      __declspec(dllimport) float     __cdecl erfcf(  float _X);
      __declspec(dllimport) float     __cdecl expm1f(  float _X);
      __declspec(dllimport) float     __cdecl exp2f(  float _X);
      __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
      __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
      __declspec(dllimport) int       __cdecl ilogbf(  float _X);
      __declspec(dllimport) float     __cdecl lgammaf(  float _X);
      __declspec(dllimport) long long __cdecl llrintf(  float _X);
      __declspec(dllimport) long long __cdecl llroundf(  float _X);
      __declspec(dllimport) float     __cdecl log1pf(  float _X);
      __declspec(dllimport) float     __cdecl log2f(  float _X);
      __declspec(dllimport) float     __cdecl logbf(  float _X);
      __declspec(dllimport) long      __cdecl lrintf(  float _X);
      __declspec(dllimport) long      __cdecl lroundf(  float _X);
      __declspec(dllimport) float     __cdecl nanf(  char const* _X);
      __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
      __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
      __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
      __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
      __declspec(dllimport) float     __cdecl rintf(  float _X);
      __declspec(dllimport) float     __cdecl roundf(  float _X);
      __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
      __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
      __declspec(dllimport) float     __cdecl tgammaf(  float _X);
      __declspec(dllimport) float     __cdecl truncf(  float _X);

    



#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    

          __declspec(dllimport) float __cdecl _logbf(  float _X);
          __declspec(dllimport) float __cdecl _nextafterf(  float _X,   float _Y);
          __declspec(dllimport) int   __cdecl _finitef(  float _X);
          __declspec(dllimport) int   __cdecl _isnanf(  float _X);
          __declspec(dllimport) int   __cdecl _fpclassf(  float _X);

          __declspec(dllimport) int   __cdecl _set_FMA3_enable(  int _Flag);
          __declspec(dllimport) int   __cdecl _get_FMA3_enable(void);

    




#line 606 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"



    

          __declspec(dllimport) float __cdecl acosf(  float _X);
          __declspec(dllimport) float __cdecl asinf(  float _X);
          __declspec(dllimport) float __cdecl atan2f(  float _Y,   float _X);
          __declspec(dllimport) float __cdecl atanf(  float _X);
          __declspec(dllimport) float __cdecl ceilf(  float _X);
          __declspec(dllimport) float __cdecl cosf(  float _X);
          __declspec(dllimport) float __cdecl coshf(  float _X);
          __declspec(dllimport) float __cdecl expf(  float _X);

    









































#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    



#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }

    #line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

    

          __declspec(dllimport) float __cdecl floorf(  float _X);
          __declspec(dllimport) float __cdecl fmodf(  float _X,   float _Y);

    











#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }

    

          __declspec(dllimport) float  __cdecl log10f(  float _X);
          __declspec(dllimport) float  __cdecl logf(  float _X);
          __declspec(dllimport) float  __cdecl modff(  float _X,   float *_Y);
          __declspec(dllimport) float  __cdecl powf(  float _X,   float _Y);
          __declspec(dllimport) float  __cdecl sinf(  float _X);
          __declspec(dllimport) float  __cdecl sinhf(  float _X);
          __declspec(dllimport) float  __cdecl sqrtf(  float _X);
          __declspec(dllimport) float  __cdecl tanf(  float _X);
          __declspec(dllimport) float  __cdecl tanhf(  float _X);

    

















































#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

      __declspec(dllimport) long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

      __declspec(dllimport) long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

      __declspec(dllimport) long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

      __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

      __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

      __declspec(dllimport) long double __cdecl erfl(  long double _X);
      __declspec(dllimport) long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

      __declspec(dllimport) long double __cdecl exp2l(  long double _X);
      __declspec(dllimport) long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

      __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

      __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
      __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

      __declspec(dllimport) int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

      __declspec(dllimport) long double __cdecl lgammal(  long double _X);
      __declspec(dllimport) long long __cdecl llrintl(  long double _X);
      __declspec(dllimport) long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

      __declspec(dllimport) long double __cdecl log1pl(  long double _X);
      __declspec(dllimport) long double __cdecl log2l(  long double _X);
      __declspec(dllimport) long double __cdecl logbl(  long double _X);
      __declspec(dllimport) long __cdecl lrintl(  long double _X);
      __declspec(dllimport) long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

      __declspec(dllimport) long double __cdecl nanl(  char const* _X);
      __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
      __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

      __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
      __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
      __declspec(dllimport) long double __cdecl rintl(  long double _X);
      __declspec(dllimport) long double __cdecl roundl(  long double _X);
      __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
      __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

      __declspec(dllimport) long double __cdecl tgammal(  long double _X);
      __declspec(dllimport) long double __cdecl truncl(  long double _X);

    



#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"



    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details."))   __declspec(dllimport) double __cdecl j0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details."))   __declspec(dllimport) double __cdecl j1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details."))   __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details."))   __declspec(dllimport) double __cdecl y0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details."))   __declspec(dllimport) double __cdecl y1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details."))   __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    #line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"

#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"


#pragma warning(pop)

} __pragma(pack(pop))
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_math.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\math.h"




#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}



#pragma warning(pop)
#pragma pack(pop)

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(nullptr), _Last(nullptr)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	[[nodiscard]] constexpr const _Elem * begin() const noexcept
		{	
		return (_First);
		}

	[[nodiscard]] constexpr const _Elem * end() const noexcept
		{	
		return (_Last);
		}

	[[nodiscard]] constexpr size_t size() const noexcept
		{	
		return (static_cast<size_t>(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem>
	[[nodiscard]] constexpr const _Elem * begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem>
	[[nodiscard]] constexpr const _Elem * end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\initializer_list"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class>
	
	inline constexpr bool _Always_false = false;

		
 



















#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct not_equal_to
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty = void>
	struct greater
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<class _Ty = void>
	struct greater_equal
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty = void>
	struct less_equal
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct not_equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			!= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			> static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct greater_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			>= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less_equal<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			<= static_cast<_Ty2&&>(_Right));
		}
	};

		
template<class _Ty>
	[[nodiscard]] constexpr _Ty * addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}

template<class _Ty>
	const _Ty * addressof(const _Ty&&) = delete;

		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}
}




 





 #line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 



#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 #line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 








 #line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 



 

#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"




















 





#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"





















 





#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"












 






































#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 #pragma warning(disable: 4180)	

namespace std {
	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral_v<_Ty>,
		"integer_sequence<T, I...> requires T to be an integral type.");

	using value_type = _Ty;

	[[nodiscard]] static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Conjunction
	{	
	using type = _First;
	};

template<class _True,
	class _Next,
	class... _Rest>
	struct _Conjunction<true, _True, _Next, _Rest...>
	{	
	using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct conjunction
		: true_type
	{	
	};

template<class _First,
	class... _Rest>
	struct conjunction<_First, _Rest...>
		: _Conjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	inline constexpr bool conjunction_v = conjunction<_Traits...>::value;

	
template<bool _First_value,
	class _First,
	class... _Rest>
	struct _Disjunction
	{	
	using type = _First;
	};

template<class _False,
	class _Next,
	class... _Rest>
	struct _Disjunction<false, _False, _Next, _Rest...>
	{	
	using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
	};

template<class... _Traits>
	struct disjunction
		: false_type
	{	
	};

template<class _First,
	class... _Rest>
	struct disjunction<_First, _Rest...>
		: _Disjunction<_First::value, _First, _Rest...>::type
	{	
		
	};

template<class... _Traits>
	inline constexpr bool disjunction_v = disjunction<_Traits...>::value;

	
template<class _Trait>
	struct negation
		: bool_constant<!static_cast<bool>(_Trait::value)>
	{	
	};

template<class _Trait>
	inline constexpr bool negation_v = negation<_Trait>::value;

	
template<class _Ty,
	class... _Types>
	inline constexpr bool _Is_any_of_v = disjunction_v<is_same<_Ty, _Types>...>;

	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty1 first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	using _Bool_type = false_type;
	};











template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)   > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile  > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile & > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile && > : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)   noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)   noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile  noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile & noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...)  && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...)  && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile && noexcept> : _Arg_types<_Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };











template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_function_v = is_function<_Ty>::value;


template<class _Ty>
	struct _Is_memfunptr
	{	
	using _Bool_type = false_type;
	};














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)   > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const  > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile  > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile  > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  & > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const & > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile & > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile & > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  && > : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const && > : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile && > : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile && > : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)   noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)   noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const  noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const  noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile  noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile  noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile  noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile  noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int , int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  & noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  & noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const & noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const & noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile & noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile & noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile & noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile & noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  && noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  && noexcept> : _Arg_types< _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const && noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const && noexcept> : _Arg_types<const _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile && noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile && noexcept> : _Arg_types<volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile && noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile && noexcept> : _Arg_types<const volatile _Arg0 *, _Types...> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<!is_same_v<int &&, int&&>, _Ret (_Types...)>; };














template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile & noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile && noexcept> { using _Bool_type = true_type; [[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type; using _Class_type = _Arg0; using _Guide_type = enable_if<false>; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


template<class _Ty>
	inline constexpr bool is_void_v = is_void<_Ty>::value;

	
template<class... _Types>
	using void_t = void;

	
	
template<class _Ty>
	struct add_const
	{	
	using type = const _Ty;
	};

template<class _Ty>
	using add_const_t = const _Ty;

	
template<class _Ty>
	struct add_volatile
	{	
	using type = volatile _Ty;
	};

template<class _Ty>
	using add_volatile_t = volatile _Ty;

	
template<class _Ty>
	struct add_cv
	{	
	using type = const volatile _Ty;
	};

template<class _Ty>
	using add_cv_t = const volatile _Ty;

	
template<class _Ty,
	class = void>
	struct _Add_reference
	{	
	using _Lvalue = _Ty;
	using _Rvalue = _Ty;
	};

template<class _Ty>
	struct _Add_reference<_Ty, void_t<_Ty&>>
	{	
	using _Lvalue = _Ty&;
	using _Rvalue = _Ty&&;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	using type = typename _Add_reference<_Ty>::_Lvalue;
	};

template<class _Ty>
	using add_lvalue_reference_t = typename _Add_reference<_Ty>::_Lvalue;

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	using type = typename _Add_reference<_Ty>::_Rvalue;
	};

template<class _Ty>
	using add_rvalue_reference_t = typename _Add_reference<_Ty>::_Rvalue;

	
template<class _Ty>
	add_rvalue_reference_t<_Ty> declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	using type = _Ty;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	using type = _Ty;
	};

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

	
template<class _Ty>
	struct remove_all_extents
	{	
	using type = _Ty;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	using type = typename remove_all_extents<_Ty>::type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	using type = typename remove_all_extents<_Ty>::type;
	};

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

	
template<class _Ty>
	struct remove_pointer
	{	
	using type = _Ty;
	};








template<class _Ty> struct remove_pointer<_Ty * > { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * const> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * volatile> { using type = _Ty; }; template<class _Ty> struct remove_pointer<_Ty * const volatile> { using type = _Ty; };


template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

	
template<class _Ty,
	class = void>
	struct _Add_pointer
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty> *>>
	{	
	using type = remove_reference_t<_Ty> *;
	};

template<class _Ty>
	struct add_pointer
	{	
	using type = typename _Add_pointer<_Ty>::type;
	};

template<class _Ty>
	using add_pointer_t = typename _Add_pointer<_Ty>::type;

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_array_v = is_array<_Ty>::value;

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;

	
template<class _Ty>
	struct is_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_reference<_Ty&>
		: true_type
	{	
	};

template<class _Ty>
	struct is_reference<_Ty&&>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_reference_v = is_reference<_Ty>::value;

	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	using _Class_type = _Ty2;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<remove_cv_t<_Ty>>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty *>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * const>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * volatile>
		: true_type
	{	
	};

template<class _Ty>
	struct is_pointer<_Ty * const volatile>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_pointer_v = is_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_null_pointer
		: bool_constant<is_same_v<remove_cv_t<_Ty>, nullptr_t>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_null_pointer_v = is_same_v<remove_cv_t<_Ty>, nullptr_t>;

	
template<class _Ty>
	struct is_union
		: bool_constant<__is_union(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_union_v = __is_union(_Ty);

	
template<class _Ty>
	struct is_class
		: bool_constant<__is_class(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_class_v = __is_class(_Ty);

	
template<class _Ty>
	struct is_fundamental
		: bool_constant<is_arithmetic_v<_Ty>
		|| is_void_v<_Ty>
		|| is_null_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;

	
template<class _Ty>
	struct is_object
		: bool_constant<!is_function_v<_Ty>
		&& !is_reference_v<_Ty>
		&& !is_void_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_object_v = is_object<_Ty>::value;

	
template<class _From,
	class _To>
	struct is_convertible
		: bool_constant<__is_convertible_to(_From, _To)>
	{	
	};

template<class _From,
	class _To>
	inline constexpr bool is_convertible_v = __is_convertible_to(_From, _To);

	
template<class _Ty>
	struct is_enum
		: bool_constant<__is_enum(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_enum_v = __is_enum(_Ty);

	
template<class _Ty>
	struct is_compound
		: bool_constant<!is_fundamental_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_compound_v = is_compound<_Ty>::value;

	
template<class _Ty>
	struct is_member_pointer
		: bool_constant<is_member_object_pointer_v<_Ty>
		|| is_member_function_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;

	
template<class _Ty>
	struct is_scalar
		: bool_constant<is_arithmetic_v<_Ty>
		|| is_enum_v<_Ty>
		|| is_pointer_v<_Ty>
		|| is_member_pointer_v<_Ty>
		|| is_null_pointer_v<_Ty>>
	{	
	};

template<class _Ty>
	inline constexpr bool is_scalar_v = is_scalar<_Ty>::value;

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_const_v = is_const<_Ty>::value;

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_volatile_v = is_volatile<_Ty>::value;

	
template<class _Ty>
	struct is_pod
		: bool_constant<__is_pod(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_pod_v = __is_pod(_Ty);

	
template<class _Ty>
	struct is_empty
		: bool_constant<__is_empty(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_empty_v = __is_empty(_Ty);

	
template<class _Ty>
	struct is_polymorphic
		: bool_constant<__is_polymorphic(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_polymorphic_v = __is_polymorphic(_Ty);

	
template<class _Ty>
	struct is_abstract
		: bool_constant<__is_abstract(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_abstract_v = __is_abstract(_Ty);

	
template<class _Ty>
	struct is_final
		: bool_constant<__is_final(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_final_v = __is_final(_Ty);

	
template<class _Ty>
	struct is_standard_layout
		: bool_constant<__is_standard_layout(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_standard_layout_v = __is_standard_layout(_Ty);

	
template<class _Ty>
	struct [[deprecated("warning STL4013: " "std::is_literal_type and std::is_literal_type_v are deprecated in C++17. " "You can define _SILENCE_CXX17_IS_LITERAL_TYPE_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] is_literal_type
		: bool_constant<__is_literal_type(_Ty)>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	[[deprecated("warning STL4013: " "std::is_literal_type and std::is_literal_type_v are deprecated in C++17. " "You can define _SILENCE_CXX17_IS_LITERAL_TYPE_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] inline constexpr bool is_literal_type_v = __is_literal_type(_Ty);
#pragma warning(pop)

	
template<class _Ty>
	struct is_trivial
		: bool_constant<__is_trivial(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivial_v = __is_trivial(_Ty);

	
template<class _Ty>
	struct is_trivially_copyable
		: bool_constant<__is_trivially_copyable(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Ty);

	
template<class _Ty>
	struct has_virtual_destructor
		: bool_constant<__has_virtual_destructor(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Ty);


	
template<class _Ty>
	struct has_unique_object_representations
		: bool_constant<__has_unique_object_representations(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool has_unique_object_representations_v = __has_unique_object_representations(_Ty);

	
template<class _Ty>
	struct is_aggregate
		: bool_constant<__is_aggregate(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_aggregate_v = __is_aggregate(_Ty);
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

		
	
template<class _Ty,
	class... _Args>
	struct is_constructible
		: bool_constant<__is_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	inline constexpr bool is_constructible_v = __is_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_copy_constructible
		: bool_constant<__is_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_default_constructible
		: bool_constant<__is_constructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_default_constructible_v = __is_constructible(_Ty);

	
template<class _Ty,
	class = void>
	struct _Is_implicitly_default_constructible
		: false_type
	{	
	};

template<class _Ty>
	void _Implicitly_default_construct(const _Ty&);

template<class _Ty>
	struct _Is_implicitly_default_constructible<_Ty, void_t<decltype(_Implicitly_default_construct<_Ty>({}))>>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: bool_constant<__is_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_move_constructible_v = __is_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_assignable
		: bool_constant<__is_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	inline constexpr bool is_assignable_v = __is_assignable(_To, _From);

	
template<class _Ty>
	struct is_copy_assignable
		: bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_copy_assignable_v =
		__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_move_assignable
		: bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_move_assignable_v = __is_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_destructible
		: bool_constant<__is_destructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_destructible_v = __is_destructible(_Ty);

		
	
template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: bool_constant<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	inline constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: bool_constant<__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_copy_constructible_v =
		__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_trivially_default_constructible
		: bool_constant<__is_trivially_constructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Ty);

	
template<class _Ty>
	struct is_trivially_move_constructible
		: bool_constant<__is_trivially_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: bool_constant<__is_trivially_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	inline constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_To, _From);

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_copy_assignable_v =
		__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_trivially_move_assignable
		: bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_move_assignable_v =
		__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_trivially_destructible
		: bool_constant<__is_trivially_destructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_trivially_destructible_v = __is_trivially_destructible(_Ty);

		
	
template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

template<class _Ty,
	class... _Args>
	inline constexpr bool is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...);

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_copy_constructible_v =
		__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: bool_constant<__is_nothrow_constructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty);

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: bool_constant<__is_nothrow_constructible(_Ty, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty);

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: bool_constant<__is_nothrow_assignable(_To, _From)>
	{	
	};

template<class _To,
	class _From>
	inline constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From);

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_copy_assignable_v =
		__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty);

	
template<class _Ty>
	struct is_nothrow_destructible
		: bool_constant<__is_nothrow_destructible(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_destructible_v = __is_nothrow_destructible(_Ty);

	
#pragma warning(push)
#pragma warning(disable: 4296)	
template<class _Ty,
	bool = is_integral_v<_Ty>>
	struct _Sign_base
	{	
	using _Uty = remove_cv_t<_Ty>;
	using _Signed = bool_constant<_Uty(-1) < _Uty(0)>;
	using _Unsigned = bool_constant<_Uty(0) < _Uty(-1)>;
	};
#pragma warning(pop)

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	using _Signed = typename is_floating_point<_Ty>::type;
	using _Unsigned = false_type;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

template<class _Ty>
	inline constexpr bool is_signed_v = is_signed<_Ty>::value;

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

template<class _Ty>
	inline constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;

	
template<class _Ty>
	using _Is_nonbool_integral =
		bool_constant<is_integral_v<_Ty>
			&& !is_same_v<remove_cv_t<_Ty>, bool>>;

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(_Is_nonbool_integral<_Ty>::value || is_enum_v<_Ty>,
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	using _Signed =
		conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, long,
		conditional_t<sizeof(_Ty) == 1, signed char,
		conditional_t<sizeof(_Ty) == 2, short,
		conditional_t<sizeof(_Ty) == 4, int,
			long long
		>>>>;

	using _Unsigned =
		conditional_t<_Is_any_of_v<_Ty, long, unsigned long>, unsigned long,
		conditional_t<sizeof(_Ty) == 1, unsigned char,
		conditional_t<sizeof(_Ty) == 2, unsigned short,
		conditional_t<sizeof(_Ty) == 4, unsigned int,
			unsigned long long
		>>>>;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	using _Signed = const typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = const typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	using _Signed = volatile typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = volatile typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	using _Signed = const volatile typename _Change_sign<_Ty>::_Signed;
	using _Unsigned = const volatile typename _Change_sign<_Ty>::_Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	using type = typename _Change_sign<_Ty>::_Signed;
	};

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

	
template<class _Ty>
	struct make_unsigned
	{	
	using type = typename _Change_sign<_Ty>::_Unsigned;
	};

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

	
template<class _Rep>
	constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val)
	{	
	return (static_cast<make_unsigned_t<_Rep>>(_Val));
	}

	
template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

template<class _Ty>
	inline constexpr size_t alignment_of_v = alignof(_Ty);

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	using type = _Align_type<_Ty, _Len>;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
 
	struct type
		{
		alignas(_Align) char _Space[_Len];
		};
 














#line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	using type = typename _Aligned<_Len, _Align, double, _Align <= alignof(double)>::type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	using type = typename _Aligned<_Len, _Align, int, _Align <= alignof(int)>::type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	using type = typename _Aligned<_Len, _Align, short, _Align <= alignof(short)>::type;
	};

template<size_t _Len,
	size_t _Align = alignof(max_align_t)>
	struct aligned_storage
	{	
	using type = typename _Aligned<_Len, _Align, char, _Align <= alignof(char)>::type;
	};




template<size_t _Len,
	size_t _Align = alignof(max_align_t)>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
		: integral_constant<size_t, 0>
	{	
	};

template<size_t _Val>
	struct _Maximum<_Val>
		: integral_constant<size_t, _Val>
	{	
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;
	using type = aligned_storage_t<_Max_len, alignment_value>;
	};

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

	
template<class _Ty>
	struct underlying_type
	{	
	using type = __underlying_type(_Ty);
	};

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	inline constexpr size_t rank_v = rank<_Ty>::value;

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

template<class _Ty,
	unsigned int _Ix = 0>
	inline constexpr size_t extent_v = extent<_Ty, _Ix>::value;

	
template<class _Base,
	class _Derived>
	struct is_base_of
		: bool_constant<__is_base_of(_Base, _Derived)>
	{	
	};

template<class _Base,
	class _Derived>
	inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);

	
template<class _Ty>
	struct decay
	{	
	using _Ty1 = remove_reference_t<_Ty>;

	using type = conditional_t<is_array_v<_Ty1>,
		add_pointer_t<remove_extent_t<_Ty1>>,
		conditional_t<is_function_v<_Ty1>,
			add_pointer_t<_Ty1>,
			remove_cv_t<_Ty1>>>;
	};

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Decayed_cond_oper
	{
	};

template<class _Ty1,
	class _Ty2>
	struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>>
	{
	using type = decay_t<decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>())>;
	};

template<class... _Ty>
	struct common_type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<>
	struct common_type<>
	{
	};

template<class _Ty1>
	struct common_type<_Ty1>
		: common_type<_Ty1, _Ty1>
	{
	};

template<class _Ty1,
	class _Ty2,
	class _Decayed1 = decay_t<_Ty1>,
	class _Decayed2 = decay_t<_Ty2>>
	struct _Common_type2
		: common_type<_Decayed1, _Decayed2>
	{
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2>
		: _Decayed_cond_oper<_Ty1, _Ty2>
	{
	};

template<class _Ty1,
	class _Ty2>
	struct common_type<_Ty1, _Ty2>
		: _Common_type2<_Ty1, _Ty2>
	{
	};

template<class _Void,
	class _Ty1,
	class _Ty2,
	class... _Rest>
	struct _Common_type3
	{
	};

template<class _Ty1,
	class _Ty2,
	class... _Rest>
	struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
		: common_type<common_type_t<_Ty1, _Ty2>, _Rest...>
	{
	};

template<class _Ty1,
	class _Ty2,
	class... _Rest>
	struct common_type<_Ty1, _Ty2, _Rest...>
		: _Common_type3<void, _Ty1, _Ty2, _Rest...>
	{
	};













#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

	
template<class _Ty>
	struct _Identity
	{	
	using type = _Ty;
	};
template<class _Ty>
	using _Identity_t = typename _Identity<_Ty>::type;

	
template<class _Type,
	template <class...> class _Template>
	inline constexpr bool _Is_specialization_v = false;
template<template <class...> class _Template,
	class... _Types>
	inline constexpr bool _Is_specialization_v<_Template<_Types...>, _Template> = true;

template<class _Type,
	template <class...> class _Template>
	struct _Is_specialization
		: bool_constant<_Is_specialization_v<_Type, _Template>>
	{};

	
template<class _Ty>
	[[nodiscard]] constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty>
	[[nodiscard]] constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty>
	[[nodiscard]] constexpr remove_reference_t<_Ty>&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));
	}

		
template<class _Ty>
	[[nodiscard]] constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty> && is_copy_constructible_v<_Ty>,
		const _Ty&, _Ty&&>
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

template<class _Ty>
	class reference_wrapper;








































































































































































template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)))
#line 1780 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));

struct _Unforced
	{	
	};

	
template<class _To>
	void _Implicitly_convert_to(_To) noexcept;

template<class _From,
	class _To,
	bool = is_convertible_v<_From, _To>>
	struct _Is_nothrow_convertible
		: bool_constant<noexcept(_Implicitly_convert_to<_To>(::std:: declval<_From>()))>
	{	
	};

template<class _From,
	class _To>
	struct _Is_nothrow_convertible<_From, _To, false>
		: false_type
	{	
	};

template<class _Void,
	class... _Types>
	struct _Invoke_traits
	{	
	using _Is_invocable = false_type;
	using _Is_nothrow_invocable = false_type;
	template<class _Rx>
		using _Is_invocable_r = false_type;
	template<class _Rx>
		using _Is_nothrow_invocable_r = false_type;
	};

template<class... _Types>
	struct _Invoke_traits<void_t<decltype(::std:: invoke(::std:: declval<_Types>()...))>, _Types...>
	{	
	using type = decltype(::std:: invoke(::std:: declval<_Types>()...));
	using _Is_invocable = true_type;
	using _Is_nothrow_invocable = bool_constant<noexcept(::std:: invoke(::std:: declval<_Types>()...))>;
	template<class _Rx>
		using _Is_invocable_r = bool_constant<disjunction_v<is_void<_Rx>, is_convertible<type, _Rx>>>;
	template<class _Rx>
		using _Is_nothrow_invocable_r = bool_constant<conjunction_v<
			_Is_nothrow_invocable,
			disjunction<is_void<_Rx>, _Is_nothrow_convertible<type, _Rx>>>>;
	};

	
template<class _Fty>
	struct [[deprecated("warning STL4014: " "std::result_of and std::result_of_t are deprecated in C++17. " "They are superseded by std::invoke_result and std::invoke_result_t. " "You can define _SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] result_of
	{	
	static_assert(_Always_false<_Fty>,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Callable, class... _Args> struct [[deprecated("warning STL4014: " "std::result_of and std::result_of_t are deprecated in C++17. " "They are superseded by std::invoke_result and std::invoke_result_t. " "You can define _SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] result_of<_Callable __cdecl (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };    template<class _Callable, class... _Args> struct [[deprecated("warning STL4014: " "std::result_of and std::result_of_t are deprecated in C++17. " "They are superseded by std::invoke_result and std::invoke_result_t. " "You can define _SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] result_of<_Callable __vectorcall (_Args...)> : _Invoke_traits<void, _Callable, _Args...> { };


#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	using result_of_t [[deprecated("warning STL4014: " "std::result_of and std::result_of_t are deprecated in C++17. " "They are superseded by std::invoke_result and std::invoke_result_t. " "You can define _SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] = typename result_of<_Ty>::type;
#pragma warning(pop)

template<class _Callable,
	class... _Args>
	using _Invoke_result_t = typename _Invoke_traits<void, _Callable, _Args...>::type;

template<class _Rx,
	class _Callable,
	class... _Args>
	using _Is_invocable_r_ = typename _Invoke_traits<void, _Callable, _Args...>::template _Is_invocable_r<_Rx>;

template<class _Rx,
	class _Callable,
	class... _Args>
	struct _Is_invocable_r
		: _Is_invocable_r_<_Rx, _Callable, _Args...>
	{	
	};


	
template<class _Callable,
	class... _Args>
	struct invoke_result
		: _Invoke_traits<void, _Callable, _Args...>
	{	
	};

template<class _Callable,
	class... _Args>
	using invoke_result_t = typename _Invoke_traits<void, _Callable, _Args...>::type;

	
template<class _Callable,
	class... _Args>
	struct is_invocable
		: _Invoke_traits<void, _Callable, _Args...>::_Is_invocable
	{	
	};

template<class _Callable,
	class... _Args>
	inline constexpr bool is_invocable_v = _Invoke_traits<void, _Callable, _Args...>::_Is_invocable::value;

	
template<class _Callable,
	class... _Args>
	struct is_nothrow_invocable
		: _Invoke_traits<void, _Callable, _Args...>::_Is_nothrow_invocable
	{	
	};

template<class _Callable,
	class... _Args>
	inline constexpr bool is_nothrow_invocable_v =
		_Invoke_traits<void, _Callable, _Args...>::_Is_nothrow_invocable::value;

	
template<class _Rx,
	class _Callable,
	class... _Args>
	struct is_invocable_r
		: _Is_invocable_r_<_Rx, _Callable, _Args...>
	{	
	};

template<class _Rx,
	class _Callable,
	class... _Args>
	inline constexpr bool is_invocable_r_v = _Is_invocable_r_<_Rx, _Callable, _Args...>::value;

	
template<class _Rx,
	class _Callable,
	class... _Args>
	struct is_nothrow_invocable_r
		: _Invoke_traits<void, _Callable, _Args...>::template _Is_nothrow_invocable_r<_Rx>
	{	
	};

template<class _Rx,
	class _Callable,
	class... _Args>
	inline constexpr bool is_nothrow_invocable_r_v =
		_Invoke_traits<void, _Callable, _Args...>::template _Is_nothrow_invocable_r<_Rx>::value;
#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::result_type result_type;
	};
#pragma warning(pop)

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type>>
		: _Weak_result_type<_Ty>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::argument_type argument_type;
	};
#pragma warning(pop)

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type>>
		: _Weak_argument_type<_Ty>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::first_argument_type first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::second_argument_type second_argument_type;
	};
#pragma warning(pop)

template<class _Ty>
	struct _Weak_types
	{	
	using _Is_f_or_pf = _Is_function<remove_pointer_t<_Ty>>;
	using _Is_pmf = _Is_memfunptr<remove_cv_t<_Ty>>;
	using type = conditional_t<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		conditional_t<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty>>>;
	};

	
template<class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&>) noexcept;
template<class _Ty>
	void _Refwrap_ctor_fun(_Identity_t<_Ty&&>) = delete;

struct _Unique_tag_refwrap_has_ctor_from
	{	
	};

template<class _Ty,
	class _Uty,
	class = void>
	struct _Refwrap_has_ctor_from
		: false_type
	{
	};

template<class _Ty,
	class _Uty>
	struct _Refwrap_has_ctor_from<_Ty, _Uty, void_t<
		_Unique_tag_refwrap_has_ctor_from,	
		decltype(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))>>
		: true_type
	{
	};

template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
		"reference_wrapper<T> requires T to be an object type or a function type.");

	using type = _Ty;

	template<class _Uty,
		enable_if_t<conjunction_v<
			negation<is_same<remove_cv_t<remove_reference_t<_Uty>>, reference_wrapper>>,
			_Refwrap_has_ctor_from<_Ty, _Uty>>, int> = 0>
		reference_wrapper(_Uty&& _Val)
			noexcept(noexcept(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>())))
			{	
			_Ty& _Ref = ::std:: forward<_Uty>(_Val);
			_Ptr = ::std:: addressof(_Ref);
			}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	[[nodiscard]] _Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

private:
	_Ty * _Ptr;
	};


template<class _Ty>
	reference_wrapper(_Ty&)
		-> reference_wrapper<_Ty>;
#line 2083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

	
template<class _Ty>
	[[nodiscard]] inline reference_wrapper<_Ty> ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty>
	[[nodiscard]] inline reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty>
	[[nodiscard]] inline reference_wrapper<const _Ty> cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty>
	[[nodiscard]] inline reference_wrapper<const _Ty> cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		

template<class _Ty,
	class = enable_if_t<is_move_constructible_v<_Ty>
		&& is_move_assignable_v<_Ty>>> inline



#line 2132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>);
#line 2135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = enable_if_t<_Is_swappable<_Ty>::value>> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: bool_constant<conjunction_v<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>>
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			add_lvalue_reference_t<_Ty>,
			add_lvalue_reference_t<_Ty>>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
		: bool_constant<noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
					&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()))>
	{	
		
		
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: bool_constant<conjunction_v<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>>
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			add_lvalue_reference_t<_Ty>,
			add_lvalue_reference_t<_Ty>>::type
	{	
	};


		
template<class _Ty1,
	class _Ty2>
	struct is_swappable_with
		: _Is_swappable_with<_Ty1, _Ty2>::type
	{	
		
	};

template<class _Ty1,
	class _Ty2>
	inline constexpr bool is_swappable_with_v = is_swappable_with<_Ty1, _Ty2>::value;

		
template<class _Ty>
	struct is_swappable
		: _Is_swappable<_Ty>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_swappable_v = is_swappable<_Ty>::value;

		
template<class _Ty1,
	class _Ty2>
	struct is_nothrow_swappable_with
		: _Is_nothrow_swappable_with<_Ty1, _Ty2>::type
	{	
		
	};

template<class _Ty1,
	class _Ty2>
	inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_Ty1, _Ty2>::value;

		
template<class _Ty>
	struct is_nothrow_swappable
		: _Is_nothrow_swappable<_Ty>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Ty>::value;
#line 2256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

	
namespace _Has_ADL_swap_detail {
	void swap(); 

	template<class,
		class = void>
		struct _Has_ADL_swap
			: false_type
		{};
	template<class _Ty>
		struct _Has_ADL_swap<_Ty, void_t<decltype(swap(::std:: declval<_Ty&>(), ::std:: declval<_Ty&>()))>>
			: true_type
		{};
} 
using _Has_ADL_swap_detail::_Has_ADL_swap;

template<class _Ty>
	struct _Is_trivially_swappable
		: bool_constant<conjunction_v<
			is_trivially_destructible<_Ty>,
			is_trivially_move_constructible<_Ty>,
			is_trivially_move_assignable<_Ty>,
			negation<_Has_ADL_swap<_Ty>>>>
	{	
		
	};

template<class _Ty>
	inline constexpr bool _Is_trivially_swappable_v = _Is_trivially_swappable<_Ty>::value;

		
 


















































	
	
	

inline constexpr size_t _FNV_offset_basis = 14695981039346656037ULL;
inline constexpr size_t _FNV_prime = 1099511628211ULL;



#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"

[[nodiscard]] inline size_t _Fnv1a_append_bytes(size_t _Val,
	const unsigned char * const _First, const size_t _Count) noexcept
	{	
	for (size_t _Idx = 0; _Idx < _Count; ++_Idx)
		{
		_Val ^= static_cast<size_t>(_First[_Idx]);
		_Val *= _FNV_prime;
		}

	return (_Val);
	}

template<class _Ty>
	[[nodiscard]] inline size_t _Fnv1a_append_range(const size_t _Val,
		const _Ty * const _First, const _Ty * const _Last) noexcept
	{	
	static_assert(is_trivial_v<_Ty>, "Only trivial types can be directly hashed.");
	const auto _Firstb = reinterpret_cast<const unsigned char *>(_First);
	const auto _Lastb = reinterpret_cast<const unsigned char *>(_Last);
	return (_Fnv1a_append_bytes(_Val, _Firstb, static_cast<size_t>(_Lastb - _Firstb)));
	}

template<class _Kty>
	[[nodiscard]] inline size_t _Fnv1a_append_value(const size_t _Val, const _Kty& _Keyval) noexcept
	{	
	static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
	return (_Fnv1a_append_bytes(_Val,
		&reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty)));
	}

	
template<class _Kty>
	[[nodiscard]] inline size_t _Hash_representation(const _Kty& _Keyval) noexcept
	{	
	return (_Fnv1a_append_value(_FNV_offset_basis, _Keyval));
	}

	
template<class _Kty>
	[[nodiscard]] inline size_t _Hash_array_representation(
		const _Kty * const _First, const size_t _Count) noexcept
	{	
	static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
	return (_Fnv1a_append_bytes(_FNV_offset_basis,
		reinterpret_cast<const unsigned char *>(_First), _Count * sizeof(_Kty)));
	}

	
template<class _Kty>
	struct hash;

template<class _Kty,
	bool _Enabled>
	struct _Conditionally_enabled_hash
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Kty argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const _Kty& _Keyval) const
		noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval)))
		{	
		return (hash<_Kty>::_Do_hash(_Keyval));
		}
	};

template<class _Kty>
	struct _Conditionally_enabled_hash<_Kty, false>
	{	
	_Conditionally_enabled_hash() = delete;
	_Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
	_Conditionally_enabled_hash(_Conditionally_enabled_hash&&) = delete;
	_Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
	_Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
	};

	
template<class _Kty>
	struct hash
		: _Conditionally_enabled_hash<_Kty, !is_const_v<_Kty> && !is_volatile_v<_Kty>
			&& (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)>
	{	
	static size_t _Do_hash(const _Kty& _Keyval) noexcept
		{	
		return (_Hash_representation(_Keyval));
		}
	};

template<>
	struct hash<float>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef float argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;
	[[nodiscard]] size_t operator()(const float _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval));	
		}
	};

template<>
	struct hash<double>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef double argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;
	[[nodiscard]] size_t operator()(const double _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef long double argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;
	[[nodiscard]] size_t operator()(const long double _Keyval) const noexcept
		{	
		return (_Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval));	
		}
	};

template<>
	struct hash<nullptr_t>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef nullptr_t argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;
	[[nodiscard]] size_t operator()(nullptr_t) const noexcept
		{	
		void * _Null{};
		return (_Hash_representation(_Null));
		}
	};

		
template<class _Kty,
	class = void>
	struct _Is_nothrow_hashable
		: false_type
	{	
	};

template<class _Kty>
	struct _Is_nothrow_hashable<_Kty, void_t<decltype(hash<_Kty>{}(::std:: declval<const _Kty&>()))>>
		: bool_constant<noexcept(hash<_Kty>{}(::std:: declval<const _Kty&>()))>
	{	
	};

































































#line 2561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"








 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _Invoker_pmf_object { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_refwrap { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmf_pointer { template<class _Decayed, class _Ty1, class... _Types2> static inline auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _Invoker_pmd_object { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).*_Pmd); } }; struct _Invoker_pmd_refwrap { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).get().*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).get().*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).get().*_Pmd); } }; struct _Invoker_pmd_pointer { template<class _Decayed, class _Ty1> static inline auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)) -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd) { return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd); } }; struct _Invoker_functor { template<class _Callable, class... _Types> static inline auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...))) -> decltype(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)) { return (::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)); } }; template<class _Callable, class _Ty1, class _Removed_cvref = remove_cv_t<remove_reference_t<_Callable>>, bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>, bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>> struct _Invoker1; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, true, false> : conditional_t<is_base_of_v< typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmf_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _Invoker_pmf_refwrap, _Invoker_pmf_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, true> : conditional_t<is_base_of_v< typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _Invoker_pmd_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _Invoker_pmd_refwrap, _Invoker_pmd_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _Invoker_functor { }; template<class _Callable, class... _Types> struct _Invoker; template<class _Callable> struct _Invoker<_Callable> : _Invoker_functor { }; template<class _Callable, class _Ty1, class... _Types2> struct _Invoker<_Callable, _Ty1, _Types2...> : _Invoker1<_Callable, _Ty1> { }; template<class _Callable, class... _Types> inline auto invoke(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))) -> decltype(_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)) { return (_Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)); }


	
 
  #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
 #line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
struct _C__Invoker_pmf_object { template<class _Decayed, class _Ty1, class... _Types2> static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _C__Invoker_pmf_refwrap { template<class _Decayed, class _Ty1, class... _Types2> static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return ((::std:: forward<_Ty1>(_Arg1).get().*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _C__Invoker_pmf_pointer { template<class _Decayed, class _Ty1, class... _Types2> static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(noexcept(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...))) -> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)) { return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(::std:: forward<_Types2>(_Args2)...)); } }; struct _C__Invoker_pmd_object { template<class _Decayed, class _Ty1> static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).*_Pmd); } }; struct _C__Invoker_pmd_refwrap { template<class _Decayed, class _Ty1> static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept(::std:: forward<_Ty1>(_Arg1).get().*_Pmd)) -> decltype(::std:: forward<_Ty1>(_Arg1).get().*_Pmd) { return (::std:: forward<_Ty1>(_Arg1).get().*_Pmd); } }; struct _C__Invoker_pmd_pointer { template<class _Decayed, class _Ty1> static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)) -> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd) { return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd); } }; struct _C__Invoker_functor { template<class _Callable, class... _Types> static constexpr auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...))) -> decltype(::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)) { return (::std:: forward<_Callable>(_Obj)(::std:: forward<_Types>(_Args)...)); } }; template<class _Callable, class _Ty1, class _Removed_cvref = remove_cv_t<remove_reference_t<_Callable>>, bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>, bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>> struct _C__Invoker1; template<class _Callable, class _Ty1, class _Removed_cvref> struct _C__Invoker1<_Callable, _Ty1, _Removed_cvref, true, false> : conditional_t<is_base_of_v< typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _C__Invoker_pmf_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _C__Invoker_pmf_refwrap, _C__Invoker_pmf_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _C__Invoker1<_Callable, _Ty1, _Removed_cvref, false, true> : conditional_t<is_base_of_v< typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>, _C__Invoker_pmd_object, conditional_t<_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty1>>, reference_wrapper>, _C__Invoker_pmd_refwrap, _C__Invoker_pmd_pointer >> { }; template<class _Callable, class _Ty1, class _Removed_cvref> struct _C__Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _C__Invoker_functor { }; template<class _Callable, class... _Types> struct _C__Invoker; template<class _Callable> struct _C__Invoker<_Callable> : _C__Invoker_functor { }; template<class _Callable, class _Ty1, class... _Types2> struct _C__Invoker<_Callable, _Ty1, _Types2...> : _C__Invoker1<_Callable, _Ty1> { }; template<class _Callable, class... _Types> constexpr auto _C_invoke(_Callable&& _Obj, _Types&&... _Args) noexcept(noexcept(_C__Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))) -> decltype(_C__Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)) { return (_C__Invoker<_Callable, _Types...>::_Call( ::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...)); }
#line 16707568 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"



template<class _Rx,
	bool = is_void_v<_Rx>>
	struct _Invoker_ret
	{	
	};

template<class _Cv_void>
	struct _Invoker_ret<_Cv_void, true>
	{	
	template<class... _Valtys>
		static void _Call(_Valtys&&... _Vals)

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		::std:: invoke(::std:: forward<_Valtys>(_Vals)...);

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		}
	};

template<class _Rx>
	struct _Invoker_ret<_Rx, false>
	{	
	template<class... _Valtys>
		static _Rx _Call(_Valtys&&... _Vals)

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		}
	};

template<>
	struct _Invoker_ret<_Unforced, false>
	{	
	template<class... _Valtys>
		static auto _Call(_Valtys&&... _Vals)
		-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		{	

#line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
		}
	};

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 15732490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"
#line 15732491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\type_traits"





#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"







#pragma once




extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






















namespace std
{
    enum class align_val_t : size_t {};
}
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"



    namespace std
    {
        struct nothrow_t {

            explicit nothrow_t() = default;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
        };

        


            extern nothrow_t const nothrow;
        #line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
    }
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;


   
__declspec(allocator) void* __cdecl operator new(
    size_t           _Size,
    std::align_val_t _Al
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::align_val_t      _Al,
    std::nothrow_t const&
    ) noexcept;


   
__declspec(allocator) void* __cdecl operator new[](
    size_t           _Size,
    std::align_val_t _Al
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::align_val_t      _Al,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*            _Block,
    std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete(
    void*                 _Block,
    std::align_val_t      _Al,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void*            _Block,
    std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete[](
    void*                 _Block,
    std::align_val_t      _Al,
    std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*            _Block,
    size_t           _Size,
    std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete[](
    void*            _Block,
    size_t           _Size,
    std::align_val_t _Al
    ) noexcept;
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"

#pragma warning(push)
#pragma warning(disable: 4577) 
#pragma warning(disable: 4514) 

    
         
    inline void* __cdecl operator new(size_t _Size,   void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"


    
         
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#pragma warning(pop)



#pragma warning(pop)
#pragma pack(pop)

} 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"


extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_new_debug.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"











    

    
        
    #line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
        
    #line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
        
    #line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"













    
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\crtdbg.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )














#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

		

	







		
		


			
		#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"










































	
	






		


			
		#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
	




		

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
			
		#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
	

#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
		
	#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	
		

#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
			#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
		

#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"








	
		
	

#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"



























 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"




 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"














    
    
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"


    






#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\use_ansi.h"
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"




















#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 
  





#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   
  #line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  
 #line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 
  

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
   


     
   #line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  #line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

 








 

#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  
   
  

#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 

#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  


   
  #line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
 #line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 

#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  
 #line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"


 


  
 #line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

		





		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		
class __declspec(dllimport) _Lockit
	{	
public:
 
















#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
 #line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;
	};

 


































































  



  


  



  


  
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

class __declspec(dllimport) _Init_locks
	{	
public:
 










#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
 #line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);
	};

		

 
 
 
 

 
 

 





#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
  
 #line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"















#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
}
 #line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"





 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\yvals.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"







#pragma once



__pragma(pack(push, 8)) extern "C" {



#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"




#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"


    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
        
    

#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"














    








#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"




#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"

    
        


            #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
        #line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
    #line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"






#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"


    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"



#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"



















} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned _Ix);










    
    
    
    
    
    
    __declspec(dllimport) wint_t __cdecl fgetwc(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _fgetwchar(void);

    
    __declspec(dllimport) wint_t __cdecl fputwc(
             wchar_t _Character,
          FILE*   _Stream);

    
    __declspec(dllimport) wint_t __cdecl _fputwchar(
          wchar_t _Character
        );

     
    __declspec(dllimport) wint_t __cdecl getwc(
          FILE* _Stream
        );

     
    __declspec(dllimport) wint_t __cdecl getwchar(void);


    
     
    __declspec(dllimport) wchar_t* __cdecl fgetws(
          wchar_t* _Buffer,
                                  int      _BufferCount,
                               FILE*    _Stream
        );

    
    __declspec(dllimport) int __cdecl fputws(
           wchar_t const* _Buffer,
          FILE*          _Stream
        );

    
     
    __declspec(dllimport) wchar_t* __cdecl _getws_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s( wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __declspec(dllimport) wint_t __cdecl putwc(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl putwchar(
          wchar_t _Character
        );

    
    __declspec(dllimport) int __cdecl _putws(
          wchar_t const* _Buffer
        );

    
    __declspec(dllimport) wint_t __cdecl ungetwc(
             wint_t _Character,
          FILE*  _Stream
        );

     
    __declspec(dllimport) FILE * __cdecl _wfdopen(
            int            _FileHandle,
          wchar_t const* _Mode
        );

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode
        );

    
    __declspec(dllimport) errno_t __cdecl _wfopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode
        );

     
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl _wfreopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
          FILE*          _OldStream
        );

    
    __declspec(dllimport) errno_t __cdecl _wfreopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode,
                            FILE*          _OldStream
        );

     
    __declspec(dllimport) FILE* __cdecl _wfsopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
            int            _ShFlag
        );

    __declspec(dllimport) void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    

         
        __declspec(dllimport) FILE* __cdecl _wpopen(
              wchar_t const* _Command,
              wchar_t const* _Mode
            );

    #line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(dllimport) int __cdecl _wremove(
          wchar_t const* _FileName
        );

    
    

     
    __declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
          wchar_t const* _Directory,
          wchar_t const* _FilePrefix
        );

    

     
    
    __declspec(dllimport) errno_t __cdecl _wtmpnam_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wtmpnam_s( wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
    __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _fputwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _getwc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _putwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
    __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
             wint_t _Character,
          FILE*  _Stream
        );

    



#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    





    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl fwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl wprintf(
            wchar_t const* const _Format,
        ...)
    

#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wprintf_s(
                wchar_t const* const _Format,
            ...)
    

#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vfwscanf_l(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwscanf(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwscanf_s_l(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __inline int __cdecl _vwscanf_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwscanf_s_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwscanf_s_l(
                                           FILE*          const _Stream,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwscanf_s(
                                     FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
            wchar_t const* const _Format,
        ...)
    

#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wscanf_s_l(
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wscanf_s(
                wchar_t const* const _Format,
            ...)
    

#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
        



    

#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
    __declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                     va_list              _ArgList
        )
    

#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4793)

     
    
    __inline int __cdecl _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )
    

#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )
    

#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }
    #line 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl vswprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )
    

#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )
    

#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }
    #line 1369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)
    

#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl swprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    
    
    #pragma warning(disable:4793 4996)

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(   wchar_t *_Buffer,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(   wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
    
    __inline int __cdecl _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl swprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)
    

#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s( wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)
    

#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)
    

#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)
    

#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s( wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _scwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf(
            wchar_t const* const _Format,
        ...)
    

#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
        #pragma warning(push)
        #pragma warning(disable: 4141 4412 4793 4996 6054)

        

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int swprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
                #pragma warning(suppress: 28719)
                _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl vswprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                              va_list              _ArgList
                ) throw()
            {
                #pragma warning(suppress: 28719)
                return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int _swprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
            inline int __cdecl _vswprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                                                        va_list              _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }

        #line 1874 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

        #pragma warning(pop)
    #line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    




#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
     
    __declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                            unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    
    __inline int __cdecl _vswscanf_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswscanf(
                                 wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )
    

#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswscanf_s_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl vswscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    

#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
                                                 va_list              _ArgList
        )
    

#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                          wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t            _Locale,
        ...)
    

#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)
    

#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swscanf_s_l(
                                            wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl swscanf_s(
                                      wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)
    

#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
            wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)
    

#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s(
             wchar_t const* const _Buffer,
                                       size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)
    

#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    


#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"















    
    
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;





    
    __declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
               FILE*   _Stream,
          char*** _Base,
          char*** _Pointer,
          int**   _Count
        );


    
    
    
    
    
    

        
        __declspec(dllimport) errno_t __cdecl clearerr_s(
              FILE* _Stream
            );

        
        __declspec(dllimport) errno_t __cdecl fopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode
            );

        
         
        __declspec(dllimport) size_t __cdecl fread_s(
                void*  _Buffer,
                                    size_t _BufferSize,
                                                                            size_t _ElementSize,
                                                                            size_t _ElementCount,
                                                                         FILE*  _Stream
            );

        
        __declspec(dllimport) errno_t __cdecl freopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode,
                                FILE*       _OldStream
            );

         
        __declspec(dllimport) char* __cdecl gets_s(
              char*   _Buffer,
                               rsize_t _Size
            );

        
        __declspec(dllimport) errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );

         
        
        __declspec(dllimport) errno_t __cdecl tmpnam_s(
              char*   _Buffer,
                               rsize_t _Size
            );

    #line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    __declspec(dllimport) void __cdecl clearerr(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl fclose(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fcloseall(void);

     
    __declspec(dllimport) FILE* __cdecl _fdopen(
            int         _FileHandle,
          char const* _Mode
        );

     
    __declspec(dllimport) int __cdecl feof(
          FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl ferror(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl fflush(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl fgetc(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fgetchar(void);

     
    
    __declspec(dllimport) int __cdecl fgetpos(
          FILE*   _Stream,
            fpos_t* _Position
        );

     
    
    __declspec(dllimport) char* __cdecl fgets(
          char* _Buffer,
                               int   _MaxCount,
                            FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl _fileno(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _flushall(void);

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl fopen(
          char const* _FileName,
          char const* _Mode
        );


     
    
    __declspec(dllimport) int __cdecl fputc(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _fputchar(
          int _Character
        );

     
    
    __declspec(dllimport) int __cdecl fputs(
           char const* _Buffer,
          FILE*       _Stream
        );

    
    __declspec(dllimport) size_t __cdecl fread(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl freopen(
           char const* _FileName,
           char const* _Mode,
          FILE*       _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _fsopen(
          char const* _FileName,
          char const* _Mode,
            int         _ShFlag
        );

     
    
    __declspec(dllimport) int __cdecl fsetpos(
          FILE*         _Stream,
             fpos_t const* _Position
        );

     
    
    __declspec(dllimport) int __cdecl fseek(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

     
    
    __declspec(dllimport) int __cdecl _fseeki64(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     
    __declspec(dllimport) long __cdecl ftell(
          FILE* _Stream
        );

     
     
    __declspec(dllimport) __int64 __cdecl _ftelli64(
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl fwrite(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

     
     
    __declspec(dllimport) int __cdecl getc(
          FILE* _Stream
        );

     
    __declspec(dllimport) int __cdecl getchar(void);

     
    __declspec(dllimport) int __cdecl _getmaxstdio(void);

    extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __declspec(dllimport) int __cdecl _getw(
          FILE* _Stream
        );

    __declspec(dllimport) void __cdecl perror(
          char const* _ErrorMessage
        );

    

         
        
        __declspec(dllimport) int __cdecl _pclose(
              FILE* _Stream
            );

         
        __declspec(dllimport) FILE* __cdecl _popen(
              char const* _Command,
              char const* _Mode
            );

    #line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __declspec(dllimport) int __cdecl putc(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl putchar(
          int _Character
        );

    
    __declspec(dllimport) int __cdecl puts(
          char const* _Buffer
        );

     
    
    __declspec(dllimport) int __cdecl _putw(
             int   _Word,
          FILE* _Stream
        );

    __declspec(dllimport) int __cdecl remove(
          char const* _FileName
        );

     
    __declspec(dllimport) int __cdecl rename(
          char const* _OldFileName,
          char const* _NewFileName
        );

    __declspec(dllimport) int __cdecl _unlink(
          char const* _FileName
        );

    

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
        __declspec(dllimport) int __cdecl unlink(
              char const* _FileName
            );

    #line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    __declspec(dllimport) void __cdecl rewind(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) void __cdecl setbuf(
                                                      FILE* _Stream,
            char* _Buffer
        );

    
    __declspec(dllimport) int __cdecl _setmaxstdio(
          int _Maximum
        );

     
    
    __declspec(dllimport) int __cdecl setvbuf(
                               FILE*  _Stream,
            char*  _Buffer,
                                  int    _Mode,
                                  size_t _Size
        );

    


#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
          char const* _DirectoryName,
          char const* _FilePrefix
        );

    

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) FILE* __cdecl tmpfile(void);

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl tmpnam_s( char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#pragma warning(pop)

     
    
    __declspec(dllimport) int __cdecl ungetc(
             int   _Character,
          FILE* _Stream
        );



    
    
    
    
    
    __declspec(dllimport) void __cdecl _lock_file(
          FILE* _Stream
        );

    __declspec(dllimport) void __cdecl _unlock_file(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fclose_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fflush_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fgetc_nolock(
          FILE* _Stream
        );

     
    
    __declspec(dllimport) int __cdecl _fputc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl _fread_nolock(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

    
     
    __declspec(dllimport) size_t __cdecl _fread_nolock_s(
          void*  _Buffer,
                              size_t _BufferSize,
                                                                      size_t _ElementSize,
                                                                      size_t _ElementCount,
                                                                   FILE*  _Stream
        );

    
    __declspec(dllimport) int __cdecl _fseek_nolock(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

    
    __declspec(dllimport) int __cdecl _fseeki64_nolock(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
    __declspec(dllimport) long __cdecl _ftell_nolock(
          FILE* _Stream
        );

     
    __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) size_t __cdecl _fwrite_nolock(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

    
    __declspec(dllimport) int __cdecl _getc_nolock(
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _putc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    __declspec(dllimport) int __cdecl _ungetc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    
    
    



    














#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    __declspec(dllimport) int* __cdecl __p__commode(void);

    


        
    #line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    

#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfprintf_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfprintf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_s_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vfprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }
    #line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }
    #line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
    #line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl fprintf(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    __declspec(dllimport) int __cdecl _set_printf_count_output(
          int _Value
        );

    __declspec(dllimport) int __cdecl _get_printf_count_output(void);

    
    __inline int __cdecl _fprintf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl printf(
            char const* const _Format,
        ...)
    

#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl printf_s(
                char const* const _Format,
            ...)
    

#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p(
            char const* const _Format,
        ...)
    

#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _Arglist
        );

    
    __inline int __cdecl _vfscanf_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfscanf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }
    #line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfscanf_s_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    

        
        __inline int __cdecl vfscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }
    #line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
    #line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_s_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }
    #line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fscanf_s_l(
                                           FILE*       const _Stream,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fscanf_s(
                                     FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
            char const* const _Format,
        ...)
    

#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scanf_s_l(
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl scanf_s(
                char const* const _Format,
            ...)
    

#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    
    
    
    
     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    __declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
                                                     va_list           _ArgList
        )
    

#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )
    

#line 1409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    








#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl vsnprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
           char*       const _Buffer,
                                    char const* const _Format,
                                  _locale_t   const _Locale,
                                         va_list           _ArgList
        )
    

#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )
    

#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
        #pragma warning(pop)
    }
    #line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )
    

#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }
    #line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s( char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )
    

#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
                                                          va_list          _ArgList
        )
    

#line 1584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
    #line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsnprintf_s(
               char*       const _Buffer,
                                                           size_t      const _BufferCount,
                                                           size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )
    

#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }
    #line 1637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }
    #line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }
    #line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )
    

#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
    #line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)
    

#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4996)
    #pragma warning(disable: 28719) 
    #pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    #pragma warning(pop)

     
    
    __inline int __cdecl _sprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl sprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
            ...)
    

#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl sprintf_s( char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
        ...)
    

#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
        ...)
    

#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    








#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl snprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
        ...)
    

#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    #pragma warning(suppress:28719)    
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                           char const* const _Format,
        ...)
    

#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    #pragma warning(suppress:28719)    
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
        ...)
    

#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
        ...)
    

#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
        ...)
    

#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s( char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf(
            char const* const _Format,
        ...)
    

#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf_p(
            char const* const _Format,
        ...)
    

#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    
    
    
    
    __declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                            unsigned __int64 _Options,
                  char const*      _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vsscanf_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vsscanf(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }
    #line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsscanf_s_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        #pragma warning(push)
        #pragma warning(disable:6530)

        
        __inline int __cdecl vsscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 2227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }
    #line 2231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        #pragma warning(pop)

    #line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                          char const* const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                char const* const _Buffer,
            char const* const _Format,
        ...)
    

#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _sscanf_s_l(
                                            char const* const _Buffer,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl sscanf_s(
                                      char const* const _Buffer,
                char const* const _Format,
            ...)
    

#line 2309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

            #pragma warning(push)
            #pragma warning(disable: 4996) 
            _Result = vsscanf_s(_Buffer, _Format, _ArgList);
            #pragma warning(pop)

            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable:6530)

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                      char const* const _Format,
        ...)
    

#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    
    __inline int __cdecl _snscanf_s_l(
              char const* const _Buffer,
                                              size_t      const _BufferCount,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _snscanf_s(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                    char const* const _Format,
        ...)
    

#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(pop)

    

#line 2429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    
    
    
    
    

        

        


#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
        __declspec(dllimport) char* __cdecl tempnam(
              char const* _Directory,
              char const* _FilePrefix
            );

        

#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int   __cdecl fcloseall(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))    __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fgetchar(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))    __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))  __declspec(dllimport) int   __cdecl flushall(void);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))      __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))      __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))     __declspec(dllimport) int   __cdecl rmtmp(void);

    #line 2467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#line 2468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



} __pragma(pack(pop))
#line 2473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





 
 
 
 
 
 
 




namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdio"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {




    __declspec(dllimport) int* __cdecl _errno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
    __declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

    __declspec(dllimport) unsigned long* __cdecl __doserrno(void);
    

    __declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
    __declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"










































    
    
    
    
    
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\errno.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



 
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }
#pragma warning(suppress:4996) 
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

#pragma warning(suppress:4996) 
        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"

    












#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"





    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );

#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_memory.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
    
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
        



    #line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 
    #pragma warning(disable: 28719 28726 28727) 
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"









    


#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"

    
    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstring.h"
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







    
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"



#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#pragma warning(pop)

#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

#pragma warning(push)
#pragma warning(disable: 28719) 
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#pragma warning(pop)

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 265 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 

#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
    
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strset( char *_Destination,  int _Value);
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"





    
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );
    

    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
          char* _String,
               int   _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );

#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\string.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"

#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"









#pragma once





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {









    
     
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],   size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __declspec(dllimport) int __cdecl _cputws(
          wchar_t const* _Buffer
        );

          __declspec(dllimport) wint_t __cdecl _getwch  (void);
          __declspec(dllimport) wint_t __cdecl _getwche (void);
     __declspec(dllimport) wint_t __cdecl _putwch  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch(  wint_t  _Character);

          __declspec(dllimport) wint_t __cdecl _getwch_nolock  (void);
          __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
     __declspec(dllimport) wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )


#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)


#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)


#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)


#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)
    }
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)


#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)


#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wconio.h"



} __pragma(pack(pop))
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {











    

#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"
        
    #line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"

    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t*       __cdecl __pwctype_func(void);

    



        
        
    #line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"





















  __declspec(dllimport) int __cdecl iswalnum  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswalpha  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswascii  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswblank  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswcntrl  (  wint_t _C);


  __declspec(dllimport) int __cdecl iswdigit  (  wint_t _C);

  __declspec(dllimport) int __cdecl iswgraph  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswlower  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswprint  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswpunct  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswspace  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswupper  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswxdigit (  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsym (  wint_t _C);

  __declspec(dllimport) int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


  __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
  __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
  __declspec(dllimport) int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

  __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);



      __declspec(dllimport) int __cdecl isleadbyte(  int _C);
      __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"


















































































#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wctype.h"



} __pragma(pack(pop))
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wdirect.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {






 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );






 
__declspec(dllimport) int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wrmdir(
      wchar_t const* _Path
    );



} __pragma(pack(pop))
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"








#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_share.h"








#pragma once












    
    
    
    
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_share.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable:4820) 











    
    
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"

typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};














    
    
    
    
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"

 
__declspec(dllimport) int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
__declspec(dllimport) int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
__declspec(dllimport) int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );





    
    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

















#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wio.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wprocess.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {




    

        __declspec(dllimport) intptr_t __cdecl _wexecl(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecle(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclp(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexeclpe(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wexecv(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecve(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvp(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wexecvpe(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnl(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnle(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlp(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

        __declspec(dllimport) intptr_t __cdecl _wspawnv(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnve(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvp(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

        __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

        __declspec(dllimport) int __cdecl _wsystem(
              wchar_t const* _Command
            );

    #line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wprocess.h"
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wprocess.h"



} __pragma(pack(pop))
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"







#pragma once




    

    typedef unsigned short _ino_t; 

    
        typedef _ino_t ino_t;
    #line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"




    

    typedef unsigned int _dev_t; 

    
        typedef _dev_t dev_t;
    #line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"




    

    typedef long _off_t; 

    
        typedef _off_t off_t;
    #line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/types.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"

__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4820) 







struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};




    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"


















    
    
    
    
    
    
    
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"
















    
    
    
    
    
    
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"



__declspec(dllimport) int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




    















        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }

    #line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\sys/stat.h"


#pragma warning(pop)


} __pragma(pack(pop))
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"



__pragma(pack(push, 8)) extern "C" {








typedef wchar_t _Wint_t;





        
    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                int            _Category,
          wchar_t const* _Locale
        );

    
    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
            int            _Category,
          wchar_t const* _Locale
        );



    __declspec(dllimport) wint_t __cdecl btowc(
          int _Ch
        );

    __declspec(dllimport) size_t __cdecl mbrlen(
            char const* _Ch,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

    __declspec(dllimport) size_t __cdecl mbrtowc(
                                  wchar_t*    _DstCh,
            char const* _SrcCh,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

     
    __declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                                  size_t*      _Retval,
                  wchar_t*     _Dst,
                                       size_t       _Size,
                          char const** _PSrc,
                                       size_t       _N,
                                    mbstate_t*   _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t (&_Dest)[_Size],     char const** _PSource,   size_t _Count,   mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest,  char const** _PSrc,  size_t _Count,  mbstate_t* _State);
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

     
    __declspec(dllimport) errno_t __cdecl wcrtomb_s(
                                 size_t*    _Retval,
          char*      _Dst,
                                      size_t     _SizeInBytes,
                                      wchar_t    _Ch,
                               mbstate_t* _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(  size_t* _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 120 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t* _State);
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

     
    __declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                                  size_t*         _Retval,
          char*           _Dst,
                                                       size_t          _SizeInBytes,
                                    wchar_t const** _Src,
                                                       size_t          _Size,
                                                mbstate_t*      _State
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,   size_t _Count,   mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  wchar_t const** _PSource,  size_t _Count,  mbstate_t* _State);
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

    __declspec(dllimport) int __cdecl wctob(
          wint_t _WCh
        );

    

         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

    #line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4995 4996 6386)
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4996 6386)
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }

    

        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }

    #line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"

#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"



} __pragma(pack(pop))
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\wchar.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




typedef mbstate_t _Mbstatet;

namespace std {
#pragma warning(push)
#pragma warning(disable: 4995) 

using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;

#pragma warning(pop)
}



#pragma warning(pop)
#pragma pack(pop)

#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cwchar"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
using streamoff = long long;
using streamsize = long long;

		
template<class _Statetype>
	class fpos
	{	
public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(_Fileposition), _Fpos(0), _Mystate(_State)
		{	
		}

	[[nodiscard]] _Statetype state() const
		{	
		return (_Mystate);
		}

	void state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	operator streamoff() const
		{	
			
			
		return (_Myoff + _Fpos);
		}


	[[deprecated("warning STL4019: " "The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with " "workarounds for old versions of Visual C++. It will be removed in a future release, and in this " "release always returns 0. Please use standards-conforming mechanisms to manipulate fpos, such as " "conversions to and from streamoff, or an integral type, instead. If you are receiving this message " "while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use " "standards-conforming mechanisms, as it does for other compilers. You can define " "_SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to acknowledge that you have received this warning, " "or define _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely.")]] fpos_t seekpos() const noexcept
		{
		return {};
		}
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"

	[[nodiscard]] streamoff operator-(const fpos& _Right) const
		{	
		return (static_cast<streamoff>(*this) - static_cast<streamoff>(_Right));
		}

	fpos& operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	fpos& operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	[[nodiscard]] fpos operator+(streamoff _Off) const
		{	
		fpos _Tmp = *this;
		_Tmp += _Off;
		return (_Tmp);
		}

	[[nodiscard]] fpos operator-(streamoff _Off) const
		{	
		fpos _Tmp = *this;
		_Tmp -= _Off;
		return (_Tmp);
		}

	[[nodiscard]] bool operator==(const fpos& _Right) const
		{
		return (static_cast<streamoff>(*this) == static_cast<streamoff>(_Right));
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		[[nodiscard]] friend bool operator==(const fpos& _Left, const _Int _Right)
		{
		return (static_cast<streamoff>(_Left) == _Right);
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		[[nodiscard]] friend bool operator==(const _Int _Left, const fpos& _Right)
		{
		return (_Left == static_cast<streamoff>(_Right));
		}

	[[nodiscard]] bool operator!=(const fpos& _Right) const
		{
		return (static_cast<streamoff>(*this) != static_cast<streamoff>(_Right));
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		[[nodiscard]] friend bool operator!=(const fpos& _Left, const _Int _Right)
		{
		return (static_cast<streamoff>(_Left) != _Right);
		}

	template<class _Int,
		enable_if_t<is_integral_v<_Int>, int> = 0>
		[[nodiscard]] friend bool operator!=(const _Int _Left, const fpos& _Right)
		{
		return (_Left != static_cast<streamoff>(_Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

using streampos = fpos<_Mbstatet>;
using wstreampos = streampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	using char_type = _Elem;
	using int_type = _Int_type;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	[[nodiscard]] static constexpr int compare(  const _Elem * _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			{
			if (*_First1 != *_First2)
				{
				return (*_First1 < *_First2 ? -1 : +1);
				}
			}

		return (0);
		}

	[[nodiscard]] static constexpr size_t length(  const _Elem * _First) noexcept 
		{	
		size_t _Count = 0;
		while (*_First != _Elem())
			{
			++_Count;
			++_First;
			}

		return (_Count);
		}

	static _Elem * copy(  _Elem * const _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		return (static_cast<_Elem *>(:: memcpy(_First1, _First2, _Count * sizeof(_Elem))));
		}

	  static _Elem * _Copy_s(
		  _Elem * const _First1, const size_t _Dest_size,
		  const _Elem * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Dest_size) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	[[nodiscard]] static constexpr const _Elem * find(  const _Elem * _First,
		size_t _Count, const _Elem& _Ch) noexcept 
		{	
		for (; 0 < _Count; --_Count, ++_First)
			{
			if (*_First == _Ch)
				{
				return (_First);
				}
			}

		return (nullptr);
		}

	static _Elem * move(  _Elem * const _First1,
		  const _Elem * _First2, size_t _Count) noexcept 
		{	
		return (static_cast<_Elem *>(:: memmove(_First1, _First2, _Count * sizeof(_Elem))));
		}

	static _Elem * assign(  _Elem * const _First,
		size_t _Count, const _Elem _Ch) noexcept 
		{	
		_Elem * _Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			{
			*_Next = _Ch;
			}

		return (_First);
		}

	static constexpr void assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	[[nodiscard]] static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	[[nodiscard]] static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
		{	
		return (static_cast<_Elem>(_Meta));
		}

	[[nodiscard]] static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
		{	
		return (static_cast<int_type>(_Ch));
		}

	[[nodiscard]] static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	[[nodiscard]] static constexpr int_type eof() noexcept
		{	
		return (static_cast<int_type>((-1)));
		}
	};

		
template<class _Elem>
	struct _WChar_traits
	{	
	using char_type = _Elem;
	using int_type = unsigned short;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	[[nodiscard]] static constexpr int compare(  const _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	

		if constexpr (is_same_v<_Elem, wchar_t>)
			{
			return (__builtin_wmemcmp(_First1, _First2, _Count));
			}
		else
			{
			return (_Char_traits<_Elem, unsigned short>::compare(_First1, _First2, _Count));
			}



#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	[[nodiscard]] static constexpr size_t length(  const _Elem * _First) noexcept 
		{	

		if constexpr (is_same_v<_Elem, wchar_t>)
			{
			return (__builtin_wcslen(_First));
			}
		else
			{
			return (_Char_traits<_Elem, unsigned short>::length(_First));
			}


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	static _Elem * copy(  _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemcpy(reinterpret_cast<wchar_t *>(_First1),
			reinterpret_cast<const wchar_t *>(_First2), _Count)));
		}

	  static _Elem * _Copy_s(
			  _Elem * const _First1, const size_t _Size_in_words,
			  const _Elem * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Size_in_words) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	[[nodiscard]] static constexpr const _Elem * find(  const _Elem * _First,
			const size_t _Count, const _Elem& _Ch) noexcept 
		{	

		if constexpr (is_same_v<_Elem, wchar_t>)
			{
			return (__builtin_wmemchr(_First, _Ch, _Count));
			}
		else
			{
			return (_Char_traits<_Elem, unsigned short>::find(_First, _Count, _Ch));
			}



#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	static _Elem * move(  _Elem * const _First1,
			  const _Elem * const _First2, const size_t _Count) noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemmove(reinterpret_cast<wchar_t *>(_First1),
			reinterpret_cast<const wchar_t *>(_First2), _Count)));
		}

	static _Elem * assign(  _Elem * const _First, size_t _Count, _Elem _Ch)
			noexcept 
		{	
		return (reinterpret_cast<_Elem *>(:: wmemset(reinterpret_cast<wchar_t *>(_First), _Ch, _Count)));
		}

	static constexpr void assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	[[nodiscard]] static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr bool lt(const _Elem& _Left, const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	[[nodiscard]] static constexpr _Elem to_char_type(const int_type& _Meta) noexcept
		{	
		return (_Meta);
		}

	[[nodiscard]] static constexpr int_type to_int_type(const _Elem& _Ch) noexcept
		{	
		return (_Ch);
		}

	[[nodiscard]] static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : static_cast<int_type>(!eof()));
		}

	[[nodiscard]] static constexpr int_type eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};

		
template<class _Elem>
	struct char_traits
		: _Char_traits<_Elem, long>
	{	
	};

		
template<>
	struct char_traits<char16_t>
		: _WChar_traits<char16_t>
	{	
	};

using u16streampos = streampos;

		
template<>
	struct char_traits<char32_t>
		: _Char_traits<char32_t, unsigned int>
	{	
	};

using u32streampos = streampos;

		
template<>
	struct char_traits<wchar_t>
		: _WChar_traits<wchar_t>
	{	
	};

 
		
template<>
	struct char_traits<unsigned short>
		: _WChar_traits<unsigned short>
	{	
	};
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"

		
template<>
	struct char_traits<char>
	{	
	using char_type = char;
	using int_type = int;
	using pos_type = streampos;
	using off_type = streamoff;
	using state_type = _Mbstatet;

	[[nodiscard]] static constexpr int compare(  const char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	

		return (__builtin_memcmp(_First1, _First2, _Count));


#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	[[nodiscard]] static constexpr size_t length(  const char * const _First) noexcept 
		{	

		return (__builtin_strlen(_First));


#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	static char * copy(  char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	
		return (static_cast<char *>(:: memcpy(_First1, _First2, _Count)));
		}

	  static char * _Copy_s(
		  char * const _First1, const size_t _Size_in_bytes,
		  const char * const _First2, const size_t _Count) noexcept
		{	
		do { if (_Count <= _Size_in_bytes) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		return (copy(_First1, _First2, _Count));
		}

	[[nodiscard]] static constexpr const char * find(  const char * const _First,
		const size_t _Count, const char& _Ch) noexcept 
		{	

		return (__builtin_char_memchr(_First, _Ch, _Count));


#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
		}

	static char * move(  char * const _First1,
		  const char * const _First2, const size_t _Count) noexcept 
		{	
		return (static_cast<char *>(:: memmove(_First1, _First2, _Count)));
		}

	static char * assign(  char * const _First,
		const size_t _Count, const char _Ch) noexcept 
		{	
		return (static_cast<char *>(:: memset(_First, _Ch, _Count)));
		}

	static constexpr void assign(char& _Left, const char& _Right) noexcept
		{	
		_Left = _Right;
		}

	[[nodiscard]] static constexpr bool eq(const char& _Left, const char& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr bool lt(const char& _Left, const char& _Right) noexcept
		{	
		return (static_cast<unsigned char>(_Left) < static_cast<unsigned char>(_Right));
		}

	[[nodiscard]] static constexpr char to_char_type(const int_type& _Meta) noexcept
		{	
		return (static_cast<char>(_Meta));
		}

	[[nodiscard]] static constexpr int_type to_int_type(const char& _Ch) noexcept
		{	
		return (static_cast<unsigned char>(_Ch));
		}

	[[nodiscard]] static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	[[nodiscard]] static constexpr int_type not_eof(const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	[[nodiscard]] static constexpr int_type eof() noexcept
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_streambuf;

#pragma vtordisp(push, 2)	
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ostream;
#pragma vtordisp(pop)	

template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 #line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"

		
using ios = basic_ios<char, char_traits<char>>;
using streambuf = basic_streambuf<char, char_traits<char>>;
using istream = basic_istream<char, char_traits<char>>;
using ostream = basic_ostream<char, char_traits<char>>;
using iostream = basic_iostream<char, char_traits<char>>;
using stringbuf = basic_stringbuf<char, char_traits<char>, allocator<char>>;
using istringstream = basic_istringstream<char, char_traits<char>, allocator<char>>;
using ostringstream = basic_ostringstream<char, char_traits<char>, allocator<char>>;
using stringstream = basic_stringstream<char, char_traits<char>, allocator<char>>;
using filebuf = basic_filebuf<char, char_traits<char>>;
using ifstream = basic_ifstream<char, char_traits<char>>;
using ofstream = basic_ofstream<char, char_traits<char>>;
using fstream = basic_fstream<char, char_traits<char>>;

		
using wios = basic_ios<wchar_t, char_traits<wchar_t>>;
using wstreambuf = basic_streambuf<wchar_t, char_traits<wchar_t>>;
using wistream = basic_istream<wchar_t, char_traits<wchar_t>>;
using wostream = basic_ostream<wchar_t, char_traits<wchar_t>>;
using wiostream = basic_iostream<wchar_t, char_traits<wchar_t>>;
using wstringbuf = basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wistringstream = basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wostringstream = basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wstringstream = basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using wfilebuf = basic_filebuf<wchar_t, char_traits<wchar_t>>;
using wifstream = basic_ifstream<wchar_t, char_traits<wchar_t>>;
using wofstream = basic_ofstream<wchar_t, char_traits<wchar_t>>;
using wfstream = basic_fstream<wchar_t, char_traits<wchar_t>>;

 




#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Ty>
	 
	constexpr const _Ty& _Min_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Right < _Left))
	{	
	return (_Right < _Left ? _Right : _Left);
	}

		
template<class _Ty>
	 
	constexpr const _Ty& _Max_value(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Left < _Right))
	{	
	return (_Left < _Right ? _Right : _Left);
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size,
	class> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty,
	class> inline
	void swap(_Ty& _Left, _Ty& _Right)
		noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>)
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
	{	
	_Ty _Tmp = ::std:: move(_Left);
	_Left = ::std:: move(_Right);
	_Right = ::std:: move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	explicit piecewise_construct_t() = default;
	};

inline constexpr piecewise_construct_t piecewise_construct{};

		
template<class...>
	class tuple;

template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	using first_type = _Ty1;
	using second_type = _Ty2;

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_default_constructible<_Uty1>,
			is_default_constructible<_Uty2>,
			_Is_implicitly_default_constructible<_Uty1>,
			_Is_implicitly_default_constructible<_Uty2>
		>, int> = 0>
		constexpr pair()
			noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)	
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(), second()
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_default_constructible<_Uty1>,
			is_default_constructible<_Uty2>,
			negation<conjunction<
				_Is_implicitly_default_constructible<_Uty1>,
				_Is_implicitly_default_constructible<_Uty2>>>
		>, int> = 0>
		constexpr explicit pair()
			noexcept(is_nothrow_default_constructible_v<_Uty1> && is_nothrow_default_constructible_v<_Uty2>)	
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(), second()
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_copy_constructible<_Uty1>,
			is_copy_constructible<_Uty2>,
			is_convertible<const _Uty1&, _Uty1>,
			is_convertible<const _Uty2&, _Uty2>
		>, int> = 0>
		constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)	
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(_Val1), second(_Val2)
		{
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		enable_if_t<conjunction_v<
			is_copy_constructible<_Uty1>,
			is_copy_constructible<_Uty2>,
			negation<conjunction<
				is_convertible<const _Uty1&, _Uty1>,
				is_convertible<const _Uty2&, _Uty2>>>
		>, int> = 0>
		constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
			noexcept(is_nothrow_copy_constructible_v<_Uty1> && is_nothrow_copy_constructible_v<_Uty2>)	
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(_Val1), second(_Val2)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>,
			is_convertible<_Other2, _Ty2>
		>, int> = 0>
		constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			negation<conjunction<
				is_convertible<_Other1, _Ty1>,
				is_convertible<_Other2, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{
		}

	pair(const pair&) = default;
	pair(pair&&) = default;

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, const _Other1&>,
			is_constructible<_Ty2, const _Other2&>,
			is_convertible<const _Other1&, _Ty1>,
			is_convertible<const _Other2&, _Ty2>
		>, int> = 0>
		constexpr pair(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)	
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(_Right.first), second(_Right.second)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, const _Other1&>,
			is_constructible<_Ty2, const _Other2&>,
			negation<conjunction<
				is_convertible<const _Other1&, _Ty1>,
				is_convertible<const _Other2&, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&> && is_nothrow_constructible_v<_Ty2, const _Other2&>)	
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(_Right.first), second(_Right.second)
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			is_convertible<_Other1, _Ty1>,
			is_convertible<_Other2, _Ty2>
		>, int> = 0>
		constexpr pair(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{
		}

	template<class _Other1,
		class _Other2,
		enable_if_t<conjunction_v<
			is_constructible<_Ty1, _Other1>,
			is_constructible<_Ty2, _Other2>,
			negation<conjunction<
				is_convertible<_Other1, _Ty1>,
				is_convertible<_Other2, _Ty2>>>
		>, int> = 0>
		constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_constructible_v<_Ty1, _Other1> && is_nothrow_constructible_v<_Ty2, _Other2>)	
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{
		}

	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			index_sequence<_Indexes1...>,
			index_sequence<_Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2);

	pair& operator=(const volatile pair&) = delete;

	template<class _Other1 = _Ty1,
		class _Other2 = _Ty2,
		enable_if_t<conjunction_v<
			is_assignable<_Ty1&, const _Other1&>,
			is_assignable<_Ty2&, const _Other2&>
		>, int> = 0>
		pair& operator=(const pair<_Other1, _Other2>& _Right)
			noexcept(is_nothrow_assignable_v<_Ty1&, const _Other1&> && is_nothrow_assignable_v<_Ty2&, const _Other2&>)	
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		{
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	template<class _Other1 = _Ty1,
		class _Other2 = _Ty2,
		enable_if_t<conjunction_v<
			is_assignable<_Ty1&, _Other1>,
			is_assignable<_Ty2&, _Other2>
		>, int> = 0>
		pair& operator=(pair<_Other1, _Other2>&& _Right)
			noexcept(is_nothrow_assignable_v<_Ty1&, _Other1> && is_nothrow_assignable_v<_Ty2&, _Other2>)	
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		{
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	void swap(pair& _Right)
		noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
		{
		if (this != ::std:: addressof(_Right))
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}

	_Ty1 first;		
	_Ty2 second;	
	};


template<class _Ty1,
	class _Ty2>
	pair(_Ty1, _Ty2) -> pair<_Ty1, _Ty2>;
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"

template<class _Ty1,
	class _Ty2,
	class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	using type = _Ty;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty>>
	{	
	using type = _Ty&;
	};

	
template<class _Ty>
	using _Unrefwrap_t = typename _Unrefwrap_helper<decay_t<_Ty>>::type;

	
template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
	return (_Mypair(::std:: forward<_Ty1>(_Val1), ::std:: forward<_Ty2>(_Val2)));
	}

	namespace rel_ops
		{	
template<class _Ty>
	[[nodiscard]] inline bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	[[nodiscard]] inline bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	[[nodiscard]] inline bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	[[nodiscard]] inline bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
	
template<class _Tuple>
	struct tuple_size;

template<class _Tuple,
	class = void>
	struct _Tuple_size_sfinae
	{	
	};

template<class _Tuple>
	struct _Tuple_size_sfinae<_Tuple, void_t<decltype(tuple_size<_Tuple>::value)>>
		: integral_constant<size_t, tuple_size<_Tuple>::value>
	{	
	};

template<class _Tuple>
	struct tuple_size<const _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: _Tuple_size_sfinae<_Tuple>
	{	
	};

template<class _Ty>
	inline constexpr size_t tuple_size_v = tuple_size<_Ty>::value;

template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_const_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_volatile_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	using _Mybase = tuple_element<_Index, _Tuple>;
	using type = add_cv_t<typename _Mybase::type>;
	};

template<size_t _Index,
	class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

	
template<class _Ty,
	size_t _Size>
	class array;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
		: integral_constant<size_t, _Size>
	{	
	};

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size>>
	{	
	static_assert(_Idx < _Size, "array index out of bounds");

	using type = _Ty;
	};


	
template<class... _Types>
	struct tuple_size<tuple<_Types...>>
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};

template<size_t _Index>
	struct tuple_element<_Index, tuple<>>
	{	
	static_assert(_Always_false<integral_constant<size_t, _Index>>,
		"tuple index out of bounds");
	};

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...>>
	{	
	using type = _This;
	using _Ttype = tuple<_This, _Rest...>;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...>>
		: public tuple_element<_Index - 1, tuple<_Rest...>>
	{	
	};

	
template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2>>
	: integral_constant<size_t, 2>
	{	
	};

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	struct tuple_element<_Idx, pair<_Ty1, _Ty2>>
	{	
	static_assert(_Idx < 2, "pair index out of bounds");

	using type = conditional_t<_Idx == 0, _Ty1, _Ty2>;
	};

template<class _Ret,
	class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 0>) noexcept
	{	
	return (_Pr.first);
	}

template<class _Ret,
	class _Pair>
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 1>) noexcept
	{	
	return (_Pr.second);
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
		get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	using _Rtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
	return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1>
	[[nodiscard]] constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&
		get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	using _Ctype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
	return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1>
	[[nodiscard]] constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
		get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	using _RRtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1>
	[[nodiscard]] constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&
		get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	using _RRtype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] constexpr const _Ty1&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1>
	[[nodiscard]] constexpr const _Ty2&& get(const pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

	
template<class _Ty,
	class _Other = _Ty> inline
	_Ty exchange(_Ty& _Val, _Other&& _New_val)
	{	
	_Ty _Old_val = ::std:: move(_Val);
	_Val = ::std:: forward<_Other>(_New_val);
	return (_Old_val);
	}

	
template<class _Ty>
	[[nodiscard]] constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
	{	
	return (_Val);
	}

template<class _Ty>
	void as_const(const _Ty&&) = delete;


	
struct in_place_t
	{	
	explicit in_place_t() = default;
	};
inline constexpr in_place_t in_place{};

template<class>
	struct in_place_type_t
	{	
	explicit in_place_type_t() = default;
	};
template<class _Ty>
	inline constexpr in_place_type_t<_Ty> in_place_type{};

template<size_t>
	struct in_place_index_t
	{	
	explicit in_place_index_t() = default;
	};
template<size_t _Idx>
	inline constexpr in_place_index_t<_Idx> in_place_index{};
#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"







#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\utility"





#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {







    














#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 53 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"













#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qconfig.h"
















































#line 67 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtcore-config.h"













































#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 69 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"








#line 78 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"















#line 94 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 97 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"















































































































#line 113 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"


#line 116 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"

#line 118 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"





























































#line 180 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"









#line 190 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"
#line 191 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"





#line 197 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"






























































































#line 292 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsystemdetection.h"
#line 104 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"








































































#line 74 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"

#line 76 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"


#line 79 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"

#line 81 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"






































































































#line 184 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"


























#line 211 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"




































































































































#line 344 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"






















#line 367 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"















#line 383 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"

#line 385 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"



#line 389 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"













#line 403 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qprocessordetection.h"
#line 105 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"




















































































#line 86 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
















#line 103 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"








#line 112 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"










































































































































































































































































































































































































#line 507 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"









#line 517 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 520 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 523 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 526 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 532 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"




























































#line 593 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 594 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"











































































#line 670 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

































































































































































#line 832 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"






#line 839 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"







































































































#line 943 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"



       


       








       








       



       








       

















#line 999 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1002 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1003 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1004 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"



#line 1008 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"




































#line 1045 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"








#line 1055 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"






#line 1062 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"






#line 1069 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1070 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"








#line 1079 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1085 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1091 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"




#line 1096 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"












#line 1109 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1115 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"











#line 1127 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"







#line 1135 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1141 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"




#line 1146 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1152 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"











#line 1164 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1165 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"










#line 1176 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1179 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"








#line 1188 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1191 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1197 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

















#line 1215 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1218 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1221 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"









#line 1231 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1234 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1237 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1240 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1243 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"






















#line 1266 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"








#line 1275 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

































#line 1309 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"







#line 1317 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1318 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"





#line 1324 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

















#line 1342 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

#line 1344 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

#line 1346 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1347 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"



#line 1351 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

#line 1353 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 1354 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"













#line 1368 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"


#line 1371 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"



#line 1375 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"

#line 1377 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcompilerdetection.h"
#line 106 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"



#line 110 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 113 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

























#line 139 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"







#pragma once








typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;










































    
    
    




#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"




































#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdint.h"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t; using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t; using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;





















#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
}



#pragma warning(pop)
#pragma pack(pop)

#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cstdint"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"

#pragma once




 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 
 
extern "C" {
 #line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
 #line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
 double __cdecl _Cosh(double, double);
 short __cdecl _Dtest(double *);
 double __cdecl _Sinh(double, double);

 short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
 float __cdecl _FCosh(float, float);
 short __cdecl _FDtest(float *);
 float __cdecl _FSinh(float, float);

 short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
 long double __cdecl _LCosh(long double, long double);
 short __cdecl _LDtest(long double *);
 long double __cdecl _LSinh(long double, long double);

 short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 #line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ymath.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"








#pragma once





__pragma(pack(push, 8)) extern "C" {




    


        


            
        #line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
    #line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"



















    






        
    #line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
























































































































































#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"

    

#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"











__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);















__declspec(dllimport) unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );












 
__declspec(dllimport) int* __cdecl __fpecode(void);



 
__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












  __declspec(dllimport) double __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double __cdecl _chgsign(  double _X);
  __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl _logb(  double _X);
  __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
  __declspec(dllimport) int    __cdecl _finite(  double _X);
  __declspec(dllimport) int    __cdecl _isnan(  double _X);
  __declspec(dllimport) int    __cdecl _fpclass(  double _X);


      __declspec(dllimport) float __cdecl _scalbf(  float _X,   long _Y);
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"










    
    
    

    
    __declspec(dllimport) void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    

#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"



} __pragma(pack(pop))
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cfloat"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cfloat"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\climits"

#pragma once







#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\climits"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\climits"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"

#pragma once







#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"


 
#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
template<class _Ty1,
	class _Ty2>
	using _Common_float_type_t =
		conditional_t<is_same_v<_Ty1, long double> || is_same_v<_Ty2, long double>, long double,
		conditional_t<is_same_v<_Ty1, float> && is_same_v<_Ty2, float>, float,
		double>>;	
}







































template<class _Ty1,
	class _Ty2,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline
	::std:: _Common_float_type_t<_Ty1, _Ty2> pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;
	return (:: pow(static_cast<_Common>(_Left), static_cast<_Common>(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double acos(_Ty _Left) { return (:: acos(static_cast<double>(_Left))); }
extern "C"    double __cdecl asin(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double asin(_Ty _Left) { return (:: asin(static_cast<double>(_Left))); }
extern "C"    double __cdecl atan(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double atan(_Ty _Left) { return (:: atan(static_cast<double>(_Left))); }
extern "C"    double __cdecl atan2(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> atan2(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: atan2(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double ceil(_Ty _Left) { return (:: ceil(static_cast<double>(_Left))); }
extern "C"    double __cdecl cos(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double cos(_Ty _Left) { return (:: cos(static_cast<double>(_Left))); }
extern "C"    double __cdecl cosh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double cosh(_Ty _Left) { return (:: cosh(static_cast<double>(_Left))); }
extern "C"    double __cdecl exp(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double exp(_Ty _Left) { return (:: exp(static_cast<double>(_Left))); }

extern "C"    double __cdecl fabs(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double fabs(_Ty _Left) { return (:: fabs(static_cast<double>(_Left))); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double floor(_Ty _Left) { return (:: floor(static_cast<double>(_Left))); }
extern "C"    double __cdecl fmod(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmod(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmod(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double frexp(_Ty _Left,   int * _Arg2) { return (:: frexp(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp(static_cast<double>(_Left), _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double log(_Ty _Left) { return (:: log(static_cast<double>(_Left))); }
extern "C"    double __cdecl log10(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double log10(_Ty _Left) { return (:: log10(static_cast<double>(_Left))); }


extern "C"    double __cdecl sin(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double sin(_Ty _Left) { return (:: sin(static_cast<double>(_Left))); }
extern "C"    double __cdecl sinh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double sinh(_Ty _Left) { return (:: sinh(static_cast<double>(_Left))); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double sqrt(_Ty _Left) { return (:: sqrt(static_cast<double>(_Left))); }
extern "C"    double __cdecl tan(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double tan(_Ty _Left) { return (:: tan(static_cast<double>(_Left))); }
extern "C"    double __cdecl tanh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double tanh(_Ty _Left) { return (:: tanh(static_cast<double>(_Left))); }

		

		
















#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"

template<class _Ty1,
	class _Ty2,
	class _Ty3,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>
		&& ::std:: is_arithmetic_v<_Ty3>>> [[nodiscard]] inline
	::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, ::std:: _Common_float_type_t<_Ty2, _Ty3>>;

	if constexpr (::std:: is_same_v<_Common, float>)
		{
		return (:: fmaf(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right)));
		}
	else if constexpr (::std:: is_same_v<_Common, double>)
		{
		return (:: fma(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right)));
		}
	else
		{
		return (:: fmal(static_cast<_Common>(_Left), static_cast<_Common>(_Middle), static_cast<_Common>(_Right)));
		}


#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
	}

		















#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"

template<class _Ty1,
	class _Ty2,
	class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> inline
	::std:: _Common_float_type_t<_Ty1, _Ty2>
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>;

	if constexpr (::std:: is_same_v<_Common, float>)
		{
		return (:: remquof(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo));
		}
	else if constexpr (::std:: is_same_v<_Common, double>)
		{
		return (:: remquo(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo));
		}
	else
		{
		return (:: remquol(static_cast<_Common>(_Left), static_cast<_Common>(_Right), _Pquo));
		}


#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double acosh(_Ty _Left) { return (:: acosh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double asinh(_Ty _Left) { return (:: asinh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double atanh(_Ty _Left) { return (:: atanh(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double cbrt(_Ty _Left) { return (:: cbrt(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl copysign(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> copysign(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: copysign(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double erf(_Ty _Left) { return (:: erf(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double erfc(_Ty _Left) { return (:: erfc(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double expm1(_Ty _Left) { return (:: expm1(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double exp2(_Ty _Left) { return (:: exp2(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl fdim(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fdim(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fdim(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }

extern "C"   __declspec(dllimport) double __cdecl fmax(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmax(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmax(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl fmin(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> fmin(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: fmin(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl hypot(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> hypot(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: hypot(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline int ilogb(_Ty _Left) { return (:: ilogb(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double lgamma(_Ty _Left) { return (:: lgamma(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline long long llrint(_Ty _Left) { return (:: llrint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline long long llround(_Ty _Left) { return (:: llround(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double log1p(_Ty _Left) { return (:: log1p(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double log2(_Ty _Left) { return (:: log2(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double logb(_Ty _Left) { return (:: logb(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline long lrint(_Ty _Left) { return (:: lrint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline long lround(_Ty _Left) { return (:: lround(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double nearbyint(_Ty _Left) { return (:: nearbyint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> nextafter(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: nextafter(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(  double,   double); template<class _Ty1, class _Ty2, class = ::std:: enable_if_t<::std:: is_arithmetic_v<_Ty1> && ::std:: is_arithmetic_v<_Ty2>>> [[nodiscard]] inline ::std:: _Common_float_type_t<_Ty1, _Ty2> remainder(_Ty1 _Left, _Ty2 _Right) { using _Common = ::std:: _Common_float_type_t<_Ty1, _Ty2>; return (:: remainder(static_cast<_Common>(_Left), static_cast<_Common>(_Right))); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double rint(_Ty _Left) { return (:: rint(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double round(_Ty _Left) { return (:: round(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn(static_cast<double>(_Left), _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double tgamma(_Ty _Left) { return (:: tgamma(static_cast<double>(_Left))); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty, class = ::std:: enable_if_t<::std:: is_integral_v<_Ty>>> [[nodiscard]] inline double trunc(_Ty _Left) { return (:: trunc(static_cast<double>(_Left))); }









 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"
 #line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtgmath.h"





#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"

namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}


extern "C" {
 [[nodiscard]] double __stdcall __std_smf_assoc_laguerre(unsigned int, unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_assoc_laguerref(unsigned int, unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_assoc_legendre(unsigned int, unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_assoc_legendref(unsigned int, unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_beta(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_betaf(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_comp_ellint_1(double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_comp_ellint_1f(float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_comp_ellint_2(double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_comp_ellint_2f(float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_comp_ellint_3(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_comp_ellint_3f(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_cyl_bessel_i(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_cyl_bessel_if(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_cyl_bessel_j(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_cyl_bessel_jf(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_cyl_bessel_k(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_cyl_bessel_kf(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_cyl_neumann(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_cyl_neumannf(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_ellint_1(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_ellint_1f(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_ellint_2(double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_ellint_2f(float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_ellint_3(double, double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_ellint_3f(float, float, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_expint(double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_expintf(float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_hermite(unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_hermitef(unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_laguerre(unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_laguerref(unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_legendre(unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_legendref(unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_riemann_zeta(double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_riemann_zetaf(float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_sph_bessel(unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_sph_besself(unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_sph_legendre(unsigned int, unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_sph_legendref(unsigned int, unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_sph_neumann(unsigned int, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_sph_neumannf(unsigned int, float) noexcept;
 [[nodiscard]] double __stdcall __std_smf_hypot3(double, double, double) noexcept;
 [[nodiscard]] float __stdcall __std_smf_hypot3f(float, float, float) noexcept;
}

namespace std {

	
[[nodiscard]] inline double assoc_laguerre(const unsigned int _Degree, const unsigned int _Order,
	const double _Value)
	{
	return (__std_smf_assoc_laguerre(_Degree, _Order, _Value));
	}

	
[[nodiscard]] inline float assoc_laguerref(const unsigned int _Degree, const unsigned int _Order,
	const float _Value)
	{
	return (__std_smf_assoc_laguerref(_Degree, _Order, _Value));
	}

	
[[nodiscard]] inline long double assoc_laguerrel(const unsigned int _Degree, const unsigned int _Order,
	const long double _Value)
	{
	return (__std_smf_assoc_laguerre(_Degree, _Order, static_cast<double>(_Value)));
	}

	
[[nodiscard]] inline double assoc_legendre(const unsigned int _Degree, const unsigned int _Order,
	const double _Value)
	{
	return (__std_smf_assoc_legendre(_Degree, _Order, _Value));
	}

	
[[nodiscard]] inline float assoc_legendref(const unsigned int _Degree, const unsigned int _Order,
	const float _Value)
	{
	return (__std_smf_assoc_legendref(_Degree, _Order, _Value));
	}

	
[[nodiscard]] inline long double assoc_legendrel(const unsigned int _Degree, const unsigned int _Order,
	const long double _Value)
	{
	return (__std_smf_assoc_legendre(_Degree, _Order, static_cast<double>(_Value)));
	}

	
[[nodiscard]] inline double beta(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_beta(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float betaf(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_betaf(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double betal(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_beta(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double comp_ellint_1(const double _Arg)
	{
	return (__std_smf_comp_ellint_1(_Arg));
	}

	
[[nodiscard]] inline float comp_ellint_1f(const float _Arg)
	{
	return (__std_smf_comp_ellint_1f(_Arg));
	}

	
[[nodiscard]] inline long double comp_ellint_1l(const long double _Arg)
	{
	return (__std_smf_comp_ellint_1(static_cast<double>(_Arg)));
	}

	
[[nodiscard]] inline double comp_ellint_2(const double _Arg)
	{
	return (__std_smf_comp_ellint_2(_Arg));
	}

	
[[nodiscard]] inline float comp_ellint_2f(const float _Arg)
	{
	return (__std_smf_comp_ellint_2f(_Arg));
	}

	
[[nodiscard]] inline long double comp_ellint_2l(const long double _Arg)
	{
	return (__std_smf_comp_ellint_2(static_cast<double>(_Arg)));
	}

	
[[nodiscard]] inline double comp_ellint_3(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_comp_ellint_3(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float comp_ellint_3f(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_comp_ellint_3f(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double comp_ellint_3l(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_comp_ellint_3(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double cyl_bessel_i(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_cyl_bessel_i(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float cyl_bessel_if(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_cyl_bessel_if(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double cyl_bessel_il(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_cyl_bessel_i(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double cyl_bessel_j(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_cyl_bessel_j(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float cyl_bessel_jf(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_cyl_bessel_jf(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double cyl_bessel_jl(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_cyl_bessel_j(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double cyl_bessel_k(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_cyl_bessel_k(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float cyl_bessel_kf(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_cyl_bessel_kf(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double cyl_bessel_kl(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_cyl_bessel_k(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double cyl_neumann(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_cyl_neumann(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float cyl_neumannf(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_cyl_neumannf(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double cyl_neumannl(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_cyl_neumann(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double ellint_1(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_ellint_1(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float ellint_1f(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_ellint_1f(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double ellint_1l(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_ellint_1(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double ellint_2(const double _Arg1, const double _Arg2)
	{
	return (__std_smf_ellint_2(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float ellint_2f(const float _Arg1, const float _Arg2)
	{
	return (__std_smf_ellint_2f(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double ellint_2l(const long double _Arg1, const long double _Arg2)
	{
	return (__std_smf_ellint_2(static_cast<double>(_Arg1), static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double ellint_3(const double _Arg1, const double _Arg2, const double _Arg3)
	{
	return (__std_smf_ellint_3(_Arg1, _Arg2, _Arg3));
	}

	
[[nodiscard]] inline float ellint_3f(const float _Arg1, const float _Arg2, const float _Arg3)
	{
	return (__std_smf_ellint_3f(_Arg1, _Arg2, _Arg3));
	}

	
[[nodiscard]] inline long double ellint_3l(const long double _Arg1, const long double _Arg2,
	const long double _Arg3)
	{
	return (__std_smf_ellint_3(static_cast<double>(_Arg1), static_cast<double>(_Arg2),
		static_cast<double>(_Arg3)));
	}

	
[[nodiscard]] inline double expint(const double _Arg)
	{
	return (__std_smf_expint(_Arg));
	}

	
[[nodiscard]] inline float expintf(const float _Arg)
	{
	return (__std_smf_expintf(_Arg));
	}

	
[[nodiscard]] inline long double expintl(const long double _Arg)
	{
	return (__std_smf_expint(static_cast<double>(_Arg)));
	}

	
[[nodiscard]] inline double hermite(const unsigned int _Arg1, const double _Arg2)
	{
	return (__std_smf_hermite(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float hermitef(const unsigned int _Arg1, const float _Arg2)
	{
	return (__std_smf_hermitef(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double hermitel(const unsigned int _Arg1, const long double _Arg2)
	{
	return (__std_smf_hermite(_Arg1, static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double laguerre(const unsigned int _Arg1, const double _Arg2)
	{
	return (__std_smf_laguerre(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float laguerref(const unsigned int _Arg1, const float _Arg2)
	{
	return (__std_smf_laguerref(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double laguerrel(const unsigned int _Arg1, const long double _Arg2)
	{
	return (__std_smf_laguerre(_Arg1, static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double legendre(const unsigned int _Degree, const double _Value)
	{
	return (__std_smf_legendre(_Degree, _Value));
	}

	
[[nodiscard]] inline float legendref(const unsigned int _Degree, const float _Value)
	{
	return (__std_smf_legendref(_Degree, _Value));
	}

	
[[nodiscard]] inline long double legendrel(const unsigned int _Degree, const long double _Value)
	{
	return (__std_smf_legendre(_Degree, static_cast<double>(_Value)));
	}

	
[[nodiscard]] inline double riemann_zeta(const double _Arg)
	{
	return (__std_smf_riemann_zeta(_Arg));
	}

	
[[nodiscard]] inline float riemann_zetaf(const float _Arg)
	{
	return (__std_smf_riemann_zetaf(_Arg));
	}

	
[[nodiscard]] inline long double riemann_zetal(const long double _Arg)
	{
	return (__std_smf_riemann_zeta(static_cast<double>(_Arg)));
	}

	
[[nodiscard]] inline double sph_bessel(const unsigned int _Arg1, const double _Arg2)
	{
	return (__std_smf_sph_bessel(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float sph_besself(const unsigned int _Arg1, const float _Arg2)
	{
	return (__std_smf_sph_besself(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double sph_bessell(const unsigned int _Arg1, const long double _Arg2)
	{
	return (__std_smf_sph_bessel(_Arg1, static_cast<double>(_Arg2)));
	}

	
[[nodiscard]] inline double sph_legendre(const unsigned int _Arg1, const unsigned int _Arg2,
	const double _Theta)
	{
	return (__std_smf_sph_legendre(_Arg1, _Arg2, _Theta));
	}

	
[[nodiscard]] inline float sph_legendref(const unsigned int _Arg1, const unsigned int _Arg2,
	const float _Theta)
	{
	return (__std_smf_sph_legendref(_Arg1, _Arg2, _Theta));
	}

	
[[nodiscard]] inline long double sph_legendrel(const unsigned int _Arg1, const unsigned int _Arg2,
	const long double _Theta)
	{
	return (__std_smf_sph_legendre(_Arg1, _Arg2, static_cast<double>(_Theta)));
	}

	
[[nodiscard]] inline double sph_neumann(const unsigned int _Arg1, const double _Arg2)
	{
	return (__std_smf_sph_neumann(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline float sph_neumannf(const unsigned int _Arg1, const float _Arg2)
	{
	return (__std_smf_sph_neumannf(_Arg1, _Arg2));
	}

	
[[nodiscard]] inline long double sph_neumannl(const unsigned int _Arg1, const long double _Arg2)
	{
	return (__std_smf_sph_neumann(_Arg1, static_cast<double>(_Arg2)));
	}
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"

	
[[nodiscard]] inline double hypot(const double _Dx, const double _Dy, const double _Dz)
	{
	return (__std_smf_hypot3(_Dx, _Dy, _Dz));
	}

[[nodiscard]] inline float hypot(const float _Dx, const float _Dy, const float _Dz)
	{
	return (__std_smf_hypot3f(_Dx, _Dy, _Dz));
	}

[[nodiscard]] inline long double hypot(const long double _Dx, const long double _Dy,
	const long double _Dz)
	{
	return (__std_smf_hypot3(static_cast<double>(_Dx), static_cast<double>(_Dy),
		static_cast<double>(_Dz)));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3,
	enable_if_t<is_arithmetic_v<_Ty1> && is_arithmetic_v<_Ty2> && is_arithmetic_v<_Ty3>, int> = 0>
	[[nodiscard]] inline auto hypot(const _Ty1 _Dx, const _Ty2 _Dy, const _Ty3 _Dz)
	{	
		
		
	using _Common = _Common_float_type_t<_Ty1, _Common_float_type_t<_Ty2, _Ty3>>; 
	const auto _Result = __std_smf_hypot3(static_cast<double>(_Dx), static_cast<double>(_Dy),
		static_cast<double>(_Dz));
	return (static_cast<_Common>(_Result));
	}
}
#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"



#pragma warning(pop)
#pragma pack(pop)

#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cmath"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
enum float_denorm_style
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1
	};

		
enum float_round_style
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3
	};

		
struct _Num_base
	{	
	static constexpr float_denorm_style has_denorm = denorm_absent;
	static constexpr bool has_denorm_loss = false;
	static constexpr bool has_infinity = false;
	static constexpr bool has_quiet_NaN = false;
	static constexpr bool has_signaling_NaN = false;
	static constexpr bool is_bounded = false;
	static constexpr bool is_exact = false;
	static constexpr bool is_iec559 = false;
	static constexpr bool is_integer = false;
	static constexpr bool is_modulo = false;
	static constexpr bool is_signed = false;
	static constexpr bool is_specialized = false;
	static constexpr bool tinyness_before = false;
	static constexpr bool traps = false;
	static constexpr float_round_style round_style = round_toward_zero;
	static constexpr int digits = 0;
	static constexpr int digits10 = 0;
	static constexpr int max_digits10 = 0;
	static constexpr int max_exponent = 0;
	static constexpr int max_exponent10 = 0;
	static constexpr int min_exponent = 0;
	static constexpr int min_exponent10 = 0;
	static constexpr int radix = 0;
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	[[nodiscard]] static constexpr _Ty (min)() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty (max)() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty lowest() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty epsilon() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty round_error() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty denorm_min() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty infinity() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty quiet_NaN() noexcept
		{	
		return (_Ty());
		}

	[[nodiscard]] static constexpr _Ty signaling_NaN() noexcept
		{	
		return (_Ty());
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: _Num_base
	{	
	static constexpr bool is_bounded = true;
	static constexpr bool is_exact = true;
	static constexpr bool is_integer = true;
	static constexpr bool is_specialized = true;
	static constexpr int radix = 2;
	};

		
struct _Num_float_base
	: _Num_base
	{	
	static constexpr float_denorm_style has_denorm = denorm_present;
	static constexpr bool has_infinity = true;
	static constexpr bool has_quiet_NaN = true;
	static constexpr bool has_signaling_NaN = true;
	static constexpr bool is_bounded = true;
	static constexpr bool is_iec559 = true;
	static constexpr bool is_signed = true;
	static constexpr bool is_specialized = true;
	static constexpr float_round_style round_style = round_to_nearest;
	static constexpr int radix = 2;
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr char (min)() noexcept
		{	
		return ((-128));
		}

	[[nodiscard]] static constexpr char (max)() noexcept
		{	
		return (127);
		}

	[[nodiscard]] static constexpr char lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr char epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (-128) != 0;
	static constexpr bool is_modulo = (-128) == 0;
	static constexpr int digits = 8 - ((-128) != 0);
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr wchar_t (min)() noexcept
		{	
		return (0x0000);
		}

	[[nodiscard]] static constexpr wchar_t (max)() noexcept
		{	
		return (0xffff);
		}

	[[nodiscard]] static constexpr wchar_t lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr wchar_t epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr wchar_t round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr wchar_t denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr wchar_t infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr wchar_t quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr wchar_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};

		
template<> class numeric_limits<bool>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr bool (min)() noexcept
		{	
		return (false);
		}

	[[nodiscard]] static constexpr bool (max)() noexcept
		{	
		return (true);
		}

	[[nodiscard]] static constexpr bool lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr bool epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr bool round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr bool denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr bool infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr bool quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr bool signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr int digits = 1;
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr signed char (min)() noexcept
		{	
		return ((-128));
		}

	[[nodiscard]] static constexpr signed char (max)() noexcept
		{	
		return (127);
		}

	[[nodiscard]] static constexpr signed char lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr signed char epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr signed char round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr signed char denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr signed char infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr signed char quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr signed char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 7;
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr unsigned char (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char (max)() noexcept
		{	
		return (0xff);
		}

	[[nodiscard]] static constexpr unsigned char lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr unsigned char epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned char signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 8;
	static constexpr int digits10 = 2;
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr short (min)() noexcept
		{	
		return ((-32768));
		}

	[[nodiscard]] static constexpr short (max)() noexcept
		{	
		return (32767);
		}

	[[nodiscard]] static constexpr short lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr short epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr short round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr short denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr short infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr short quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr short signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 15;
	static constexpr int digits10 = 4;
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr unsigned short (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short (max)() noexcept
		{	
		return (0xffff);
		}

	[[nodiscard]] static constexpr unsigned short lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr unsigned short epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned short signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};
 #line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"

		
template<> class numeric_limits<char16_t>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr char16_t (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t (max)() noexcept
		{	
		return (0xffff);
		}

	[[nodiscard]] static constexpr char16_t lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr char16_t epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char16_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 16;
	static constexpr int digits10 = 4;
	};

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr int (min)() noexcept
		{	
		return ((-2147483647 - 1));
		}

	[[nodiscard]] static constexpr int (max)() noexcept
		{	
		return (2147483647);
		}

	[[nodiscard]] static constexpr int lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr int epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr int round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr int denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr int infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr int quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr int signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 31;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr unsigned int (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int (max)() noexcept
		{	
		return (0xffffffff);
		}

	[[nodiscard]] static constexpr unsigned int lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr unsigned int epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned int signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr long (min)() noexcept
		{	
		return ((-2147483647L - 1));
		}

	[[nodiscard]] static constexpr long (max)() noexcept
		{	
		return (2147483647L);
		}

	[[nodiscard]] static constexpr long lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr long epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long signaling_NaN() noexcept
		{	
		return (0);
		}

	static_assert(sizeof(int) == sizeof(long), "LLP64 assumption");
	static constexpr bool is_signed = true;
	static constexpr int digits = 31;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr unsigned long (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long (max)() noexcept
		{	
		return (0xffffffffUL);
		}

	[[nodiscard]] static constexpr unsigned long lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr unsigned long epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long signaling_NaN() noexcept
		{	
		return (0);
		}

	static_assert(sizeof(unsigned int) == sizeof(unsigned long), "LLP64 assumption");
	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<char32_t>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr char32_t (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t (max)() noexcept
		{	
		return (0xffffffff);
		}

	[[nodiscard]] static constexpr char32_t lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr char32_t epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr char32_t signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 32;
	static constexpr int digits10 = 9;
	};

		
template<> class numeric_limits<long long>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr long long (min)() noexcept
		{	
		return ((-9223372036854775807i64 - 1));
		}

	[[nodiscard]] static constexpr long long (max)() noexcept
		{	
		return (9223372036854775807i64);
		}

	[[nodiscard]] static constexpr long long lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr long long epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long long round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long long denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long long infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long long quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr long long signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = true;
	static constexpr int digits = 63;
	static constexpr int digits10 = 18;
	};

		
template<> class numeric_limits<unsigned long long>
	: public _Num_int_base
	{	
public:
	[[nodiscard]] static constexpr unsigned long long (min)() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long (max)() noexcept
		{	
		return (0xffffffffffffffffui64);
		}

	[[nodiscard]] static constexpr unsigned long long lowest() noexcept
		{	
		return ((min)());
		}

	[[nodiscard]] static constexpr unsigned long long epsilon() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long round_error() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long denorm_min() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long infinity() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long quiet_NaN() noexcept
		{	
		return (0);
		}

	[[nodiscard]] static constexpr unsigned long long signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = true;
	static constexpr int digits = 64;
	static constexpr int digits10 = 19;
	};

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	[[nodiscard]] static constexpr float (min)() noexcept
		{	
		return (1.175494351e-38F);
		}

	[[nodiscard]] static constexpr float (max)() noexcept
		{	
		return (3.402823466e+38F);
		}

	[[nodiscard]] static constexpr float lowest() noexcept
		{	
		return (-(max)());
		}

	[[nodiscard]] static constexpr float epsilon() noexcept
		{	
		return (1.192092896e-07F);
		}

	[[nodiscard]] static constexpr float round_error() noexcept
		{	
		return (0.5F);
		}

	[[nodiscard]] static constexpr float denorm_min() noexcept
		{	
		return (1.401298464e-45F);
		}

	[[nodiscard]] static constexpr float infinity() noexcept
		{	
		return (__builtin_huge_valf());
		}

	[[nodiscard]] static constexpr float quiet_NaN() noexcept
		{	
		return (__builtin_nanf("0"));
		}

	[[nodiscard]] static constexpr float signaling_NaN() noexcept
		{	
		return (__builtin_nansf("1"));
		}

	static constexpr int digits = 24;
	static constexpr int digits10 = 6;
	static constexpr int max_digits10 = 9;
	static constexpr int max_exponent = 128;
	static constexpr int max_exponent10 = 38;
	static constexpr int min_exponent = (-125);
	static constexpr int min_exponent10 = (-37);
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	[[nodiscard]] static constexpr double (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	[[nodiscard]] static constexpr double (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	[[nodiscard]] static constexpr double lowest() noexcept
		{	
		return (-(max)());
		}

	[[nodiscard]] static constexpr double epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	[[nodiscard]] static constexpr double round_error() noexcept
		{	
		return (0.5);
		}

	[[nodiscard]] static constexpr double denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	[[nodiscard]] static constexpr double infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	[[nodiscard]] static constexpr double quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	[[nodiscard]] static constexpr double signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = 53;
	static constexpr int digits10 = 15;
	static constexpr int max_digits10 = 17;
	static constexpr int max_exponent = 1024;
	static constexpr int max_exponent10 = 308;
	static constexpr int min_exponent = (-1021);
	static constexpr int min_exponent10 = (-307);
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	[[nodiscard]] static constexpr long double (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	[[nodiscard]] static constexpr long double (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	[[nodiscard]] static constexpr long double lowest() noexcept
		{	
		return (-(max)());
		}

	[[nodiscard]] static constexpr long double epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	[[nodiscard]] static constexpr long double round_error() noexcept
		{	
		return (0.5L);
		}

	[[nodiscard]] static constexpr long double denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	[[nodiscard]] static constexpr long double infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	[[nodiscard]] static constexpr long double quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	[[nodiscard]] static constexpr long double signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = 53;
	static constexpr int digits10 = 15;
	static constexpr int max_digits10 = 17;
	static constexpr int max_exponent = 1024;
	static constexpr int max_exponent10 = 308;
	static constexpr int min_exponent = (-1021);
	static constexpr int min_exponent10 = (-307);
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"
#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {

[[deprecated("warning STL4006: " "std::uncaught_exception() is deprecated in C++17. " "It is superseded by std::uncaught_exceptions(), plural. " "You can define _SILENCE_CXX17_UNCAUGHT_EXCEPTION_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  bool __cdecl uncaught_exception() noexcept;
 int __cdecl uncaught_exceptions() noexcept;

}

 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {





    


#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    
          __declspec(dllimport) int __cdecl _heapchk(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    __declspec(dllimport) int __cdecl _resetstkoflw(void);

    
    
    

    
        
    

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
















    
    







#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"




#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            
            else if (_Marker != 0xCCCC)
            {
                ((void)0);
            }
            #line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
        }
    }
    #pragma warning(pop)

#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"




    
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    #line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;



     __declspec(noreturn) void __cdecl unexpected() noexcept(false);

    

         unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) noexcept;

         unexpected_handler __cdecl _get_unexpected() noexcept;

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

         _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"

    class type_info;

     int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

     bool __cdecl __uncaught_exception();
     int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

 void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

 void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
class exception
{
public:

    exception() noexcept
        : _Data()
    {
    }

    explicit exception(char const* const _Message) noexcept
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) noexcept
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) noexcept
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) noexcept
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() noexcept
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() noexcept
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() noexcept
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) noexcept
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() noexcept
        : bad_alloc("bad array new length")
    {
    }
};

#pragma warning(pop)

} 

#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

namespace std {

using ::terminate;


using ::set_terminate;
using ::terminate_handler;

[[nodiscard]] inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"













#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

}

 



































































































































































#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

 void __cdecl __ExceptionPtrCreate(  void*);
 void __cdecl __ExceptionPtrDestroy(  void*);
 void __cdecl __ExceptionPtrCopy(  void*,   const void*);
 void __cdecl __ExceptionPtrAssign(  void*,   const void*);
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
 bool __cdecl __ExceptionPtrToBool(  const void*);
 void __cdecl __ExceptionPtrSwap(  void*,   void*);
 void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]]  void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() noexcept
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) noexcept
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() noexcept
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) noexcept
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) noexcept
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) noexcept
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const noexcept
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() noexcept
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:




	void* _Data1;
	void* _Data2;



	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) noexcept
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

[[nodiscard]] inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

[[nodiscard]] inline bool operator==(nullptr_t, const exception_ptr& _Rhs) noexcept
	{
	return !_Rhs;
	}

[[nodiscard]] inline bool operator==(const exception_ptr& _Lhs, nullptr_t) noexcept
	{
	return !_Lhs;
	}

[[nodiscard]] inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

[[nodiscard]] inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

[[nodiscard]] inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) noexcept
	{
	return !(_Lhs == _Rhs);
	}

[[nodiscard]] inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> [[nodiscard]] exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept
		{
		}

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	[[nodiscard]] exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	using _Uty = decay_t<_Ty>;
	using _Glued = _With_nested<_Ty, _Uty>;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	throw ::std:: forward<_Ty>(_Arg);
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef decay_t<_Ty> _Uty;

	bool_constant<
		is_class_v<_Uty>
		&& !is_base_of_v<nested_exception, _Uty>
		&& !is_final_v<_Uty>> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}


	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	bool_constant<is_polymorphic_v<_Ty> && (!is_base_of_v<nested_exception, _Ty>
		|| is_convertible_v<_Ty *, nested_exception *>)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}



#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)

#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"


#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {

	
template<class _Ty>
	[[nodiscard]] constexpr _Ty * launder(_Ty * _Ptr) noexcept
	{
	static_assert(!is_function_v<_Ty> && !is_void_v<_Ty>,
		"N4727 21.6.4 [ptr.launder]/3: The program is ill-formed if T is a function type or cv void.");
 
	return (__builtin_launder(_Ptr));
 

#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
	}

 
inline constexpr size_t hardware_constructive_interference_size = 64;
inline constexpr size_t hardware_destructive_interference_size = 64;
 

#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"

		


typedef void (__cdecl * new_handler) ();
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"

		
 new_handler __cdecl set_new_handler(  new_handler) noexcept;
[[nodiscard]]  new_handler __cdecl get_new_handler() noexcept;
}



#pragma warning(pop)
#pragma pack(pop)

#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\new"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 


extern "C" {







__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept;
}
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

namespace std {
		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
	{	
	void _Orphan_all() noexcept
		{	
		}

	void _Swap_all(_Container_base0&) noexcept
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *) noexcept
		{	
		}

	const _Container_base0 *_Getcont() const noexcept
		{	
		return (nullptr);
		}

	static constexpr bool _Unwrap_when_unverified = true;
	};

		
struct _Container_proxy
	{	
	_Container_proxy() noexcept
		: _Mycont(nullptr), _Myfirstiter(nullptr)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(nullptr)
		{	
		}

	_Container_base12(const _Container_base12&) noexcept
		: _Myproxy(nullptr)
		{	
		}

	_Container_base12& operator=(const _Container_base12&) noexcept
		{	
		return (*this);
		}

	_Iterator_base12 **_Getpfirst() const noexcept
		{	
		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all() noexcept;	
	void _Swap_all(_Container_base12&) noexcept;	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
	_Iterator_base12() noexcept
		: _Myproxy(nullptr), _Mynextiter(nullptr)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right) noexcept
		: _Myproxy(nullptr), _Mynextiter(nullptr)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept
		{	
		if (_Myproxy != _Right._Myproxy)
			{
			if (_Right._Myproxy == nullptr)
				{	
 


#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
				}
			else
				{
				_Adopt(_Right._Myproxy->_Mycont);
				}
			}

		return (*this);
		}

	~_Iterator_base12() noexcept
		{	
 


#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent) noexcept
		{	
		if (_Parent == nullptr)
			{	
 


#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 









#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
			_Myproxy = _Parent_proxy;
 #line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
			}
		}

	void _Clrcont() noexcept
		{	
		_Myproxy = nullptr;
		}

	const _Container_base12 *_Getcont() const noexcept
		{	
		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext() noexcept
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me() noexcept
		{	
 










#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
		}

	static constexpr bool _Unwrap_when_unverified = 0 == 0;

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all() noexcept
	{	
 









#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right) noexcept
	{	
 

#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != nullptr)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != nullptr)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
using _Container_base = _Container_base0;
using _Iterator_base = _Iterator_base0;

 


#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

	
struct _Zero_then_variadic_args_t
	{	
	};	

struct _One_then_variadic_args_t
	{	
	};	

template<class _Ty1,
	class _Ty2,
	bool = is_empty_v<_Ty1> && !is_final_v<_Ty1>>
	class _Compressed_pair final
		: private _Ty1
	{	
private:
	_Ty2 _Myval2;

	using _Mybase = _Ty1;	

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Ty1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	_Ty1& _Get_first() noexcept
		{	
		return (*this);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (*this);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}
	};

template<class _Ty1,
	class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final
	{	
private:
	_Ty1 _Myval1;
	_Ty2 _Myval2;

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Myval1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	_Ty1& _Get_first() noexcept
		{	
		return (_Myval1);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (_Myval1);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}
	};

		
		
template<class _Fx>
	struct _Ref_fn
	{	
	template<class... _Args>
		constexpr decltype(auto) operator()(_Args&&... _Vals)
		{	
		return (_Fn(::std:: forward<_Args>(_Vals)...));
		}

	_Fx& _Fn;
	};

template<class _Fn>
	inline constexpr bool _Pass_functor_by_value_v = sizeof(_Fn) <= sizeof(void *)
		&& conjunction_v<
			is_trivially_copy_constructible<_Fn>,
			is_trivially_destructible<_Fn>>;

template<class _Fn,
	enable_if_t<_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Fn _Pass_fn(_Fn _Val)
	{	
	return (_Val);
	}

template<class _Fn,
	enable_if_t<!_Pass_functor_by_value_v<_Fn>, int> = 0>
	constexpr _Ref_fn<_Fn> _Pass_fn(_Fn& _Val)
	{	
	return {_Val};
	}

		
		
struct input_iterator_tag
	{	
	};

struct output_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _General_ptr_iterator_tag
	{	
	};

struct _Trivially_copyable_ptr_iterator_tag
	: _General_ptr_iterator_tag
	{	
	};

struct _Really_trivial_ptr_iterator_tag
	: _Trivially_copyable_ptr_iterator_tag
	{	
	};

		
struct _Unused_parameter
	{	
	constexpr _Unused_parameter() noexcept = default;
	template<class _Ty>
		constexpr _Unused_parameter(_Ty&&) noexcept {}
	};

		
using _Any_tag = _Unused_parameter; 

		
template<class _Ty>
	using _Algorithm_int_t = conditional_t<is_integral_v<_Ty>, _Ty, ptrdiff_t>;

		
template<class,
	class = void>
	struct _Iterator_traits_base
	{	
	};

template<class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<
		typename _Iter::iterator_category,
		typename _Iter::value_type,
		typename _Iter::difference_type,
		typename _Iter::pointer,
		typename _Iter::reference
		>>
	{	
	using iterator_category = typename _Iter::iterator_category;
	using value_type = typename _Iter::value_type;
	using difference_type = typename _Iter::difference_type;

	using pointer = typename _Iter::pointer;
	using reference = typename _Iter::reference;
	};

template<class _Ty,
	bool = is_object_v<_Ty>>
	struct _Iterator_traits_pointer_base
	{	
	using iterator_category = random_access_iterator_tag;
	using value_type = remove_cv_t<_Ty>;
	using difference_type = ptrdiff_t;

	using pointer = _Ty *;
	using reference = _Ty&;
	};

template<class _Ty>
	struct _Iterator_traits_pointer_base<_Ty, false>
	{	
		
	};

template<class _Iter>
	struct iterator_traits
		: _Iterator_traits_base<_Iter>
	{	
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
		: _Iterator_traits_pointer_base<_Ty>
	{	
	};

		
template<class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;

		
template<class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;

		
template<class... _Iters>
	using _Common_diff_t = common_type_t<_Iter_diff_t<_Iters>...>;

		
template<class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

		
template<class _Ty,
	class = void>
	inline constexpr bool _Is_iterator_v = false;

template<class _Ty>
	inline constexpr bool _Is_iterator_v<_Ty, void_t<_Iter_cat_t<_Ty>>> = true;

		
template<class _Ty>
	struct _Is_iterator
		: bool_constant<_Is_iterator_v<_Ty>>
	{
	};

		
template<class _Iter>
	inline constexpr bool _Is_input_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, input_iterator_tag>;

		
template<class _Iter>
	inline constexpr bool _Is_fwd_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, forward_iterator_tag>;

		
template<class _Iter>
	inline constexpr bool _Is_bidi_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, bidirectional_iterator_tag>;

		
template<class _Iter>
	inline constexpr bool _Is_random_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, random_access_iterator_tag>;

		
template<class,
	class = void>
	struct _Is_checked_helper
	{	
	};

		






#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Iter,
	class _Sentinel = _Iter,
	class = void>
	struct _Range_verifiable
		: false_type
	{
	};

template<class _Iter,
	class _Sentinel>
	struct _Range_verifiable<_Iter, _Sentinel, void_t<
		decltype(_Verify_range(::std:: declval<const _Iter&>(), ::std:: declval<const _Sentinel&>()))>>
		: true_type
	{
	};

template<class _Iter,
	class _Sentinel = _Iter>
	inline constexpr bool _Range_verifiable_v = _Range_verifiable<_Iter, _Sentinel>::value;


template<class _Iter,
	class _Sentinel>
	constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last)
	{	
	if constexpr (_Range_verifiable_v<_Iter, _Sentinel>)
		{
		_Verify_range(_First, _Last);
		}
	else
		{
		(void)_First;
		(void)_Last;
		}
	}




















#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


		
template<class _Iter,
	class = void>
	struct _Unwrappable
		: false_type
	{
	};

template<class _Iter>
	struct _Unwrappable<_Iter, void_t<
		decltype(::std:: declval<_Iter&>()._Seek_to(::std:: declval<const _Iter&>()._Unwrapped()))>>
		: true_type
	{
	};

template<class _Iter>
	inline constexpr bool _Unwrappable_v = _Unwrappable<_Iter>::value;

template<class _Iter,
	enable_if_t<_Unwrappable_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr auto _Get_unwrapped(const _Iter& _It)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr const _Iter& _Get_unwrapped(const _Iter& _It)
	{	
	return (_It);
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr const _Iter&& _Get_unwrapped(const _Iter&& _It)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty>
	[[nodiscard]] constexpr _Ty * _Get_unwrapped(_Ty * const _Ptr)
	{	
	return (_Ptr);
	}

template<class _Iter>
	using _Unwrapped_t = remove_cv_t<remove_reference_t<decltype(_Get_unwrapped(::std:: declval<const _Iter&>()))>>;

		
template<class _Iter,
	class = bool>
	struct _Do_unwrap_when_unverified
		: false_type
	{
	};

template<class _Iter>
	struct _Do_unwrap_when_unverified<_Iter, decltype(static_cast<bool>(_Iter::_Unwrap_when_unverified))>
		: bool_constant<static_cast<bool>(_Iter::_Unwrap_when_unverified)>
	{
	};

template<class _Iter>
	inline constexpr bool _Do_unwrap_when_unverified_v = _Do_unwrap_when_unverified<_Iter>::value;

template<class _Iter>
	inline constexpr bool _Unwrappable_for_unverified_v = _Unwrappable_v<_Iter>
		&& _Do_unwrap_when_unverified_v<_Iter>;

template<class _Iter,
	enable_if_t<_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr auto _Get_unwrapped_unverified(const _Iter& _It)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr const _Iter& _Get_unwrapped_unverified(const _Iter& _It)
	{	
	return (_It);
	}

template<class _Iter,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>, int> = 0>
	[[nodiscard]] constexpr const _Iter&& _Get_unwrapped_unverified(const _Iter&& _It)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty>
	[[nodiscard]] constexpr _Ty * _Get_unwrapped_unverified(_Ty * const _Ptr)
	{	
	return (_Ptr);
	}

template<class _Iter>
	using _Unwrapped_unverified_t = remove_cv_t<remove_reference_t<
		decltype(_Get_unwrapped_unverified(::std:: declval<const _Iter&>()))>>;

		
struct _Distance_unknown
	{
	constexpr _Distance_unknown operator-() const noexcept
		{
		return {};
		}
	};

template<class _Diff>
	inline constexpr _Diff _Max_possible_v = static_cast<_Diff>(static_cast<make_unsigned_t<_Diff>>(-1) >> 1);

template<class _Diff>
	inline constexpr _Diff _Min_possible_v = -_Max_possible_v<_Diff> - 1;

template<class _Iter,
	class = void>
	struct _Offset_verifiable
		: false_type
	{
	};

template<class _Iter>
	struct _Offset_verifiable<_Iter, void_t<decltype(
		::std:: declval<const _Iter&>()._Verify_offset(_Iter_diff_t<_Iter>{}))>>
		: true_type
	{
	};

template<class _Iter>
	inline constexpr bool _Offset_verifiable_v = _Offset_verifiable<_Iter>::value;

template<class _Iter>
	inline constexpr bool _Unwrappable_for_offset_v = _Unwrappable_v<_Iter> && _Offset_verifiable_v<_Iter>;

template<class _Iter,
	class _Diff,
	enable_if_t<_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>, int> = 0>
	[[nodiscard]] constexpr auto _Get_unwrapped_n(const _Iter& _It, const _Diff _Off)
	{	
	using _IDiff = _Iter_diff_t<_Iter>;
	using _CDiff = common_type_t<_Diff, _IDiff>;
	const auto _COff = static_cast<_CDiff>(_Off);

	;
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
	(void) _COff;

	_It._Verify_offset(static_cast<_IDiff>(_Off));
	return (_It._Unwrapped());
	}

template<class _Iter,
	class _Diff,
	enable_if_t<_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	[[nodiscard]] constexpr auto _Get_unwrapped_n(const _Iter& _It, _Diff)
	{	
	return (_It._Unwrapped());
	}

template<class _Iter,
	class _Diff,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	[[nodiscard]] constexpr const _Iter& _Get_unwrapped_n(const _Iter& _It, _Diff)
	{	
	return (_It);
	}

template<class _Iter,
	class _Diff,
	enable_if_t<!_Unwrappable_for_unverified_v<_Iter>
		&& ((!_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>)
			|| is_same_v<_Diff, _Distance_unknown>), int> = 0>
	[[nodiscard]] constexpr const _Iter&& _Get_unwrapped_n(const _Iter&& _It, _Diff)
	{	
	return (static_cast<const _Iter&&>(_It));
	}

template<class _Ty,
	class _Diff,
	enable_if_t<is_same_v<_Diff, _Distance_unknown> || is_integral_v<_Diff>, int> = 0>
	[[nodiscard]] constexpr _Ty * _Get_unwrapped_n(_Ty * const _Src, _Diff)
	{
	return (_Src);
	}

template<class _Iter>
	using _Unwrapped_n_t = remove_cv_t<remove_reference_t<
		decltype(_Get_unwrapped_n(::std:: declval<const _Iter&>(), _Iter_diff_t<_Iter>{}))>>;

		
template<class _Iter,
	class _UIter,
	class = void>
	struct _Wrapped_seekable
		: false_type
	{
	};

template<class _Iter,
	class _UIter>
	struct _Wrapped_seekable<_Iter, _UIter, void_t<
		decltype(::std:: declval<_Iter&>()._Seek_to(::std:: declval<const _UIter&>()))>>
		: true_type
	{
	};

template<class _Iter,
	class _UIter>
	inline constexpr bool _Wrapped_seekable_v = _Wrapped_seekable<_Iter, _UIter>::value;


template<class _Iter,
	class _UIter>
	constexpr void _Seek_wrapped(_Iter& _It, const _UIter& _UIt)
	{
	if constexpr (_Wrapped_seekable_v<_Iter, _UIter>)
		{
		_It._Seek_to(_UIt);
		}
	else
		{
		_It = _UIt;
		}
	}
















#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Ty>
	constexpr void _Seek_wrapped(_Ty *& _It, _Ty * const _UIt)
	{
	_It = _UIt;
	}


		
template<class _Ty,
	class = void>
	struct _Is_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_allocator<_Ty, void_t<
		typename _Ty::value_type,
		decltype(::std:: declval<_Ty&>().deallocate(::std:: declval<_Ty&>().allocate(size_t{1}), size_t{1}))
	>>
		: true_type
	{	
	};

		
template<class _Iter>
	using _Guide_key_t = remove_const_t<typename iterator_traits<_Iter>::value_type::first_type>;

template<class _Iter>
	using _Guide_val_t = typename iterator_traits<_Iter>::value_type::second_type;

template<class _Iter>
	using _Guide_pair_t = pair<add_const_t<typename iterator_traits<_Iter>::value_type::first_type>,
		typename iterator_traits<_Iter>::value_type::second_type>;
#line 904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<size_t _Value>
	struct _Priority_tag
		: _Priority_tag<_Value - 1>
	{	
	};

template<>
	struct _Priority_tag<0>
	{	
	};


		
template<class _Ty>
	struct is_execution_policy
		: false_type
	{
	};

template<class _Ty>
	inline constexpr bool is_execution_policy_v = is_execution_policy<_Ty>::value;

		
		
		
template<class _ExPo>
	using _Enable_if_execution_policy_t = typename remove_reference_t<_ExPo>::_Standard_execution_policy;




#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		

template<class _Checked,
	class _Iter> inline
	auto _Idl_distance(const _Iter& _First, const _Iter& _Last)
	{	
	if constexpr (_Is_random_iter_v<_Iter>)
		{
		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));
		}
	else
		{
		(void)_First;
		(void)_Last;
		return _Distance_unknown{};
		}
	}





















#line 978 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _Ty1,
	class _Ty2>
	struct _Is_same_size
		: bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
	{	
	};

		
template<class _Elem,
	bool _Is_enum = is_enum_v<_Elem>>
	struct _Unwrap_enum
	{	
	using type = underlying_type_t<_Elem>;
	};

template<class _Elem>
	struct _Unwrap_enum<_Elem, false>
	{	
	using type = _Elem;
	};

template<class _Elem>
	using _Unwrap_enum_t = typename _Unwrap_enum<_Elem>::type;

		
template<class _Ty1,
	class _Ty2>
	struct _Both_or_neither_bool
		: bool_constant<is_same_v<bool, _Ty1> == is_same_v<bool, _Ty2>>
	{	
	};

		
template<class _Source,
	class _Dest>
	struct _Ptr_cat_helper
	{	
	using _USource = _Unwrap_enum_t<_Source>;
	using _UDest = _Unwrap_enum_t<_Dest>;
	using type = conditional_t<conjunction_v<
			_Is_same_size<_USource, _UDest>,
			is_integral<_USource>,
			is_integral<_UDest>,
			_Both_or_neither_bool<_USource, _UDest>
		>, _Really_trivial_ptr_iterator_tag, _General_ptr_iterator_tag>;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	using type = conditional_t<
		is_trivially_copyable_v<_Elem>,
		conditional_t<is_trivial_v<_Elem>,
			_Really_trivial_ptr_iterator_tag,
			_Trivially_copyable_ptr_iterator_tag>,
		_General_ptr_iterator_tag>;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, volatile _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const volatile _Anything *>
	{	
	using type = _Really_trivial_ptr_iterator_tag;
	};

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable_v<_Dest&, _Source&>,
		typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
		_General_ptr_iterator_tag>
		_Ptr_copy_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable_v<_Dest&, _Source>,
		typename _Ptr_cat_helper<remove_cv_t<_Source>, remove_cv_t<_Dest>>::type,
		_General_ptr_iterator_tag>
		_Ptr_move_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

		

 
  
  
  

 









































































#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
		
template<class _InIt,
	class _Diff>
	constexpr void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
	;
	for (; 0 < _Off; --_Off)
		{
		++_Where;
		}
	}

template<class _BidIt,
	class _Diff>
	constexpr void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		{
		++_Where;
		}

	
#pragma warning(suppress: 6294)	
								
	for (; _Off < 0; ++_Off)
		{
		--_Where;
		}
	}

template<class _RanIt,
	class _Diff>
	constexpr void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff>
	constexpr void advance(_InIt& _Where, _Diff _Off)
	{	
		
	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
	}

		
template<class _InIt>
	constexpr _Iter_diff_t<_InIt> _Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
	{	
	_Iter_diff_t<_InIt> _Off = 0;
	for (; _First != _Last; ++_First)
		{
		++_Off;
		}

	return (_Off);
	}

template<class _RanIt>
	constexpr _Iter_diff_t<_RanIt> _Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
	{	
	return (_Last - _First);
	}

template<class _InIt>
	[[nodiscard]] constexpr _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last)
	{	
	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
	}

		
template<class _InIt>
	constexpr _InIt _Next_iter(_InIt _First)
	{	
	return (++_First);
	}

		
template<class _InIt>
	[[nodiscard]] constexpr _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
	{	
	static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt>
	constexpr _BidIt _Prev_iter(_BidIt _First)
	{	
	return (--_First);
	}

		
template<class _BidIt>
	[[nodiscard]] constexpr _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
	{	
	static_assert(_Is_bidi_iter_v<_BidIt>, "prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}

		
template<class _Ty>
	struct pointer_traits;

template<class _Iterator>
	constexpr _Iterator _Operator_arrow(_Iterator _Target, true_type)
	{	
	return (_Target);
	}

template<class _Iterator>
	constexpr decltype(auto) _Operator_arrow(_Iterator&& _Target, false_type)
	{	
	return (::std:: forward<_Iterator>(_Target).operator->());
	}

template<class _BidIt>
	class reverse_iterator
	{	
public:
	using iterator_category = typename iterator_traits<_BidIt>::iterator_category;
	using value_type = typename iterator_traits<_BidIt>::value_type;
	using difference_type = typename iterator_traits<_BidIt>::difference_type;
	using pointer = typename iterator_traits<_BidIt>::pointer;
	using reference = typename iterator_traits<_BidIt>::reference;

	using iterator_type = _BidIt;

	constexpr reverse_iterator()
		: current()
		{	
		}

	constexpr explicit reverse_iterator(_BidIt _Right)
		: current(_Right)
		{	
		}

	template<class _Other>
		constexpr reverse_iterator(const reverse_iterator<_Other>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Other>
		constexpr reverse_iterator& operator=(const reverse_iterator<_Other>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	[[nodiscard]] constexpr _BidIt base() const
		{	
		return (current);
		}

	[[nodiscard]] constexpr reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	[[nodiscard]] constexpr pointer operator->() const
		{	
		_BidIt _Tmp = current;
		--_Tmp;
		return (_Operator_arrow(_Tmp, is_pointer<_BidIt>()));
		}

	constexpr reverse_iterator& operator++()
		{	
		--current;
		return (*this);
		}

	constexpr reverse_iterator operator++(int)
		{	
		reverse_iterator _Tmp = *this;
		--current;
		return (_Tmp);
		}

	constexpr reverse_iterator& operator--()
		{	
		++current;
		return (*this);
		}

	constexpr reverse_iterator operator--(int)
		{	
		reverse_iterator _Tmp = *this;
		++current;
		return (_Tmp);
		}



	constexpr reverse_iterator& operator+=(const difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	[[nodiscard]] constexpr reverse_iterator operator+(const difference_type _Off) const
		{	
		return (reverse_iterator(current - _Off));
		}

	constexpr reverse_iterator& operator-=(const difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr reverse_iterator operator-(const difference_type _Off) const
		{	
		return (reverse_iterator(current + _Off));
		}

	[[nodiscard]] constexpr reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	template<class _BidIt2 = _BidIt,
		enable_if_t<_Offset_verifiable_v<_BidIt2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const
		{
		do { if (_Off != _Min_possible_v<difference_type>) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		current._Verify_offset(-_Off);
		}

	template<class _BidIt2 = _BidIt,
		enable_if_t<_Unwrappable_v<_BidIt2>, int> = 0>
		[[nodiscard]] constexpr reverse_iterator<_Unwrapped_t<_BidIt2>> _Unwrapped() const
		{
		return (static_cast<reverse_iterator<_Unwrapped_t<_BidIt2>>>(current._Unwrapped()));
		}

	static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<_BidIt>;

	template<class _Src,
		enable_if_t<_Wrapped_seekable_v<_BidIt, _Src>, int> = 0>
		constexpr void _Seek_to(const reverse_iterator<_Src>& _It)
		{
		current._Seek_to(_It.base());
		}
protected:
	_BidIt current;	
	};

template<class _BidIt,
	class _BidIt2,
	enable_if_t<_Range_verifiable_v<_BidIt, _BidIt2>, int> = 0>
	constexpr void _Verify_range(const reverse_iterator<_BidIt>& _First, const reverse_iterator<_BidIt2>& _Last)
	{
	
	_Verify_range(_Last.base(), _First.base()); 
	}

template<class _BidIt>
	[[nodiscard]] constexpr reverse_iterator<_BidIt> operator+(
		typename reverse_iterator<_BidIt>::difference_type _Off,
		const reverse_iterator<_BidIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr auto operator-(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator==(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator!=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator<(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Right.base() < _Left.base());
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator>(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator<=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _BidIt1,
	class _BidIt2>
	[[nodiscard]] constexpr bool operator>=(const reverse_iterator<_BidIt1>& _Left,
		const reverse_iterator<_BidIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _BidIt>
	[[nodiscard]] constexpr reverse_iterator<_BidIt> make_reverse_iterator(_BidIt _Iter)
	{	
	return (reverse_iterator<_BidIt>(_Iter));
	}

		
template<class _Container>
	[[nodiscard]] constexpr auto begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	[[nodiscard]] constexpr auto begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	[[nodiscard]] constexpr auto end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	[[nodiscard]] constexpr auto end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	[[nodiscard]] constexpr auto cbegin(const _Container& _Cont)
		noexcept(noexcept(::std:: begin(_Cont)))
		-> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	[[nodiscard]] constexpr auto cend(const _Container& _Cont)
		noexcept(noexcept(::std:: end(_Cont)))
		-> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	[[nodiscard]] constexpr auto rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	[[nodiscard]] constexpr auto rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	[[nodiscard]] constexpr auto rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	[[nodiscard]] constexpr auto rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem>
	[[nodiscard]] constexpr reverse_iterator<const _Elem *>
		rbegin(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem>
	[[nodiscard]] constexpr reverse_iterator<const _Elem *>
		rend(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	[[nodiscard]] constexpr auto crbegin(const _Container& _Cont)
		-> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	[[nodiscard]] constexpr auto crend(const _Container& _Cont)
		-> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


template<class _Container>
	[[nodiscard]] constexpr auto size(const _Container& _Cont)
		-> decltype(_Cont.size())
	{	
	return (_Cont.size());
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr size_t size(const _Ty(&)[_Size]) noexcept
	{	
	return (_Size);
	}

template<class _Container>
	[[nodiscard]] constexpr auto empty(const _Container& _Cont)
		-> decltype(_Cont.empty())
	{	
	return (_Cont.empty());
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr bool empty(const _Ty(&)[_Size]) noexcept
	{	
	return (false);
	}

template<class _Elem>
	[[nodiscard]] constexpr bool empty(
		initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.size() == 0);
	}

template<class _Container>
	[[nodiscard]] constexpr auto data(_Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Container>
	[[nodiscard]] constexpr auto data(const _Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Elem>
	[[nodiscard]] constexpr const _Elem *data(
		initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		




		






#line 1711 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Ty,
	size_t _Size>
	class _Array_const_iterator


#line 1718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = _Ty;
	using difference_type = ptrdiff_t;
	using pointer = const _Ty *;
	using reference = const _Ty&;
	enum {_EEN_SIZE = _Size};	
 
	constexpr _Array_const_iterator()
		: _Ptr()
		{	
		}

	constexpr explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		: _Ptr(_Parg + _Off)
		{	
		}

	[[nodiscard]] constexpr reference operator*() const
		{	
		return (*_Ptr);
		}

	[[nodiscard]] constexpr pointer operator->() const
		{	
		return (_Ptr);
		}

	constexpr _Array_const_iterator& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	constexpr _Array_const_iterator operator++(int)
		{	
		_Array_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	constexpr _Array_const_iterator& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	constexpr _Array_const_iterator operator--(int)
		{	
		_Array_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	constexpr _Array_const_iterator& operator+=(const ptrdiff_t _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr _Array_const_iterator operator+(const ptrdiff_t _Off) const
		{	
		_Array_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	constexpr _Array_const_iterator& operator-=(const ptrdiff_t _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] constexpr _Array_const_iterator operator-(const ptrdiff_t _Off) const
		{	
		_Array_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] constexpr ptrdiff_t operator-(const _Array_const_iterator& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	[[nodiscard]] constexpr reference operator[](const ptrdiff_t _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] constexpr bool operator==(const _Array_const_iterator& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	[[nodiscard]] constexpr bool operator!=(const _Array_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] constexpr bool operator<(const _Array_const_iterator& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	[[nodiscard]] constexpr bool operator>(const _Array_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	[[nodiscard]] constexpr bool operator<=(const _Array_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] constexpr bool operator>=(const _Array_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	[[nodiscard]] constexpr pointer _Unwrapped() const
		{
		return (_Ptr);
		}

	static constexpr bool _Unwrap_when_unverified = true;

	constexpr void _Seek_to(pointer _It)
		{
		_Ptr = _It;
		}

private:
	pointer _Ptr;	

 






































































































































































#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
	};

 








#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Array_const_iterator<_Ty, _Size> operator+(
		ptrdiff_t _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	using _Mybase = _Array_const_iterator<_Ty, _Size>;
	using iterator_category = random_access_iterator_tag;

	using value_type = _Ty;
	using difference_type = ptrdiff_t;
	using pointer = _Ty *;
	using reference = _Ty&;

	constexpr _Array_iterator()
		{	
		}

	constexpr explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}

	enum {_EEN_SIZE = _Size};	

	[[nodiscard]] constexpr reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	[[nodiscard]] constexpr pointer operator->() const
		{	
		return (const_cast<pointer>(_Mybase::operator->()));
		}

	constexpr _Array_iterator& operator++()
		{	
		++*static_cast<_Mybase *>(this);
		return (*this);
		}

	constexpr _Array_iterator operator++(int)
		{	
		_Array_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	constexpr _Array_iterator& operator--()
		{	
		--*static_cast<_Mybase *>(this);
		return (*this);
		}

	constexpr _Array_iterator operator--(int)
		{	
		_Array_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	constexpr _Array_iterator& operator+=(const ptrdiff_t _Off)
		{	
		*static_cast<_Mybase *>(this) += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr _Array_iterator operator+(const ptrdiff_t _Off) const
		{	
		_Array_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	constexpr _Array_iterator& operator-=(const ptrdiff_t _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] constexpr _Array_iterator operator-(const ptrdiff_t _Off) const
		{	
		_Array_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] constexpr ptrdiff_t operator-(const _Mybase& _Right) const
		{	
		return (*static_cast<const _Mybase *>(this) - _Right);
		}

	[[nodiscard]] constexpr reference operator[](const ptrdiff_t _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] constexpr pointer _Unwrapped() const
		{
		return (const_cast<pointer>(_Mybase::_Unwrapped()));
		}
	};

template<class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Array_iterator<_Ty, _Size> operator+(
		ptrdiff_t _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Iter>
	class move_iterator
	{	
public:
	using iterator_category = typename iterator_traits<_Iter>::iterator_category;
	using value_type = typename iterator_traits<_Iter>::value_type;
	using difference_type = typename iterator_traits<_Iter>::difference_type;
	using pointer = _Iter;
	using _Ref0 = typename iterator_traits<_Iter>::reference;
	using reference = conditional_t<is_reference_v<_Ref0>, remove_reference_t<_Ref0>&&, _Ref0>;
	using iterator_type = _Iter;

	constexpr move_iterator()
		: current()
		{	
		}

	constexpr explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _Iter2>
		constexpr move_iterator(const move_iterator<_Iter2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Iter2>
		constexpr move_iterator& operator=(const move_iterator<_Iter2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	[[nodiscard]] constexpr _Iter base() const
		{	
		return (current);
		}

	[[nodiscard]] constexpr reference operator*() const
		{	
		return (static_cast<reference>(*current));
		}

	[[nodiscard]] constexpr pointer operator->() const
		{	
		return (current);
		}

	constexpr move_iterator& operator++()
		{	
		++current;
		return (*this);
		}

	constexpr move_iterator operator++(int)
		{	
		move_iterator _Tmp = *this;
		++current;
		return (_Tmp);
		}

	constexpr move_iterator& operator--()
		{	
		--current;
		return (*this);
		}

	constexpr move_iterator operator--(int)
		{	
		move_iterator _Tmp = *this;
		--current;
		return (_Tmp);
		}



	constexpr move_iterator& operator+=(const difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr move_iterator operator+(const difference_type _Off) const
		{	
		return (move_iterator(current + _Off));
		}

	constexpr move_iterator& operator-=(const difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	[[nodiscard]] constexpr move_iterator operator-(const difference_type _Off) const
		{	
		return (move_iterator(current - _Off));
		}

	[[nodiscard]] constexpr reference operator[](const difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _Iter2,
		enable_if_t<_Range_verifiable_v<_Iter, _Iter2>, int> = 0>
		friend constexpr void _Verify_range(const move_iterator& _First, const move_iterator<_Iter2>& _Last)
		{
		_Verify_range(_First.base(), _Last.base());
		}

	template<class _Iter2 = iterator_type,
		enable_if_t<_Offset_verifiable_v<_Iter2>, int> = 0>
		constexpr void _Verify_offset(const difference_type _Off) const
		{
		current._Verify_offset(_Off);
		}

	template<class _Iter2 = iterator_type,
		enable_if_t<_Unwrappable_v<_Iter2>, int> = 0>
		[[nodiscard]] constexpr move_iterator<_Unwrapped_t<_Iter2>> _Unwrapped() const
		{
		return (static_cast<move_iterator<_Unwrapped_t<_Iter2>>>(current._Unwrapped()));
		}

	static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<iterator_type>;

	template<class _Src,
		enable_if_t<_Wrapped_seekable_v<iterator_type, _Src>, int> = 0>
		constexpr void _Seek_to(const move_iterator<_Src>& _It)
		{
		current._Seek_to(_It.base());
		}
protected:
	iterator_type current;	
	};

template<class _Iter>
	[[nodiscard]] constexpr move_iterator<_Iter> operator+(
		typename move_iterator<_Iter>::difference_type _Off,
		const move_iterator<_Iter>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr auto operator-(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator==(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator!=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator<(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Left.base() < _Right.base());
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator>(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator<=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Iter1,
	class _Iter2>
	[[nodiscard]] constexpr bool operator>=(
		const move_iterator<_Iter1>& _Left,
		const move_iterator<_Iter2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _Iter>
	[[nodiscard]] constexpr move_iterator<_Iter> make_move_iterator(_Iter _It)
	{	
	return (move_iterator<_Iter>(_It));
	}

		
template<class _Traits>
	struct _Char_traits_eq
	{
	using _Elem = typename _Traits::char_type;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::eq(_Left, _Right));
		}
	};

		
template<class _Traits>
	struct _Char_traits_lt
	{
	using _Elem = typename _Traits::char_type;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::lt(_Left, _Right));
		}
	};

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
	:: memmove(_Dest_ch, _First_ch, _Count);
	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		{
		*_Dest = *_First;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Copy_unchecked1(_First, _Last, _Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}

 







#line 2458 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: copy(_First, _Last, _Dest));
	}

 











#line 2485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 2486 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked4(_InIt _First, _Diff _Count,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
		
	for (;;)
		{
		*_Dest = *_First;
		++_Dest;
		--_Count;
		if (_Count == 0)
			{	
				
			return (_Dest);
			}

		++_First;
		}
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked4(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
		
	return (_Copy_memmove(_First, _First + _Count, _Dest));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked3(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
		
	return (_Copy_n_unchecked4(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count_raw, _OutIt _Dest)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		_Seek_wrapped(_Dest,
			_Copy_n_unchecked3(_Get_unwrapped_n(_First, _Count), _Count, _Get_unwrapped_n(_Dest, _Count)));
		}

	return (_Dest);
	}

 

















































#line 2598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


 template<class _ExPo,
	class _FwdIt1,
	class _Diff,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 copy_n(_ExPo&&, _FwdIt1 _First, _Diff _Count_raw, _FwdIt2 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: copy_n(_First, _Count_raw, _Dest));
	}

 






































#line 2653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
	return (static_cast<_BidIt2>(
		:: memmove(_Dest_ch - _Count, _First_ch, _Count)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Copy_backward_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
	return (_Dest);
	}


template<class _ExPo,
	class _BidIt1,
	class _BidIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_BidIt2 copy_backward(_ExPo&&, _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) noexcept
	{	
		
	return (::std:: copy_backward(_First, _Last, _Dest));
	}
#line 2710 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Move_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Move_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}

 







#line 2763 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 move(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: move(_First, _Last, _Dest));
	}

 











#line 2790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 2791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
		
	return (_Move_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
	_Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}


template<class _ExPo,
	class _BidIt1,
	class _BidIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_BidIt2 move_backward(_ExPo&&, _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) noexcept
	{	
		
	return (::std:: move_backward(_First, _Last, _Dest));
	}
#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _Ty>
	struct _Is_character
		: false_type
		{	
		};

template<>
	struct _Is_character<char>
		: true_type
		{	
		};

template<>
	struct _Is_character<signed char>
		: true_type
		{	
		};

template<>
	struct _Is_character<unsigned char>
		: true_type
		{	
		};

template<class _FwdIt,
	class _Ty>
	struct _Fill_memset_is_safe_helper
	{	
	using _Value_type = _Iter_value_t<_FwdIt>;

	using _Raw_ty = _Unwrap_enum_t<_Ty>;
	using _Raw_value_type = _Unwrap_enum_t<_Value_type>;

	using type = bool_constant<conjunction_v<
		is_pointer<_FwdIt>,
		disjunction<
			conjunction<
				_Is_character<_Raw_ty>,
				_Is_character<_Raw_value_type>>,
			conjunction<
				is_same<bool, _Raw_ty>,
				is_same<bool, _Raw_value_type>>>,
		is_convertible<_Ty, _Value_type>>>;
	};

template<class _FwdIt,
	class _Ty> inline
	typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
	_Fill_memset_is_safe(const _FwdIt&, const _Ty&)
	{	
	return {};
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First));
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	_Fill_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val);
	}

 
template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void fill(_ExPo&&, _FwdIt _First, _FwdIt _Last, const _Ty& _Val) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: fill(_First, _Last, _Val));
	}
 #line 2940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked2(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked2(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
	{	
	:: memset(_Dest, static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
	return (_Dest + _Count);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count_raw, const _Ty& _Val)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		_Seek_wrapped(_Dest,
			_Fill_n_unchecked2(_UDest, _Count, _Val, _Fill_memset_is_safe(_UDest, _Val)));
		}

	return (_Dest);
	}

 
template<class _ExPo,
	class _FwdIt,
	class _Diff,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt fill_n(_ExPo&&, _FwdIt _Dest, _Diff _Count_raw, const _Ty& _Val) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: fill_n(_Dest, _Count_raw, _Val));
	}
 #line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _Elem1,
	class _Elem2>
	struct _Value_equality_is_bitwise_equality
		: bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
	{	
		
		
		
	};

template<class _Elem1,
	class _Elem2,
	class _Pr>
	struct _Equal_memcmp_is_safe_helper
		: false_type
	{	
		
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: bool_constant<conjunction_v<
			_Is_same_size<_Elem1, _Elem2>,
			_Is_nonbool_integral<_Elem1>,
			_Is_nonbool_integral<_Elem2>,
			negation<is_volatile<_Elem1>>,
			negation<is_volatile<_Elem2>>,
			
			
			_Value_equality_is_bitwise_equality<_Elem1, _Elem2>
		>>
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
	{	
	};


template<>
	struct _Equal_memcmp_is_safe_helper<byte, byte, equal_to<>>
		: true_type
	{	
	};
#line 3042 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
		
	};

template<class _Iter1,
	class _Iter2,
	class _Pr> inline
	false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _Pr> inline
	typename _Equal_memcmp_is_safe_helper<
		remove_const_t<_Obj1>,
		remove_const_t<_Obj2>,
		_Pr>::type
		_Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred, false_type)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}
		}

	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr, true_type)
	{	
	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last1) - _First1_ch);
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr _Pred)
	{	
	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline bool equal(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	return (_Equal_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
	}

 










#line 3140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, _Pr _Pred) noexcept;

 








#line 3160 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 3161 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, equal_to<>()));
	}

 







#line 3178 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2) noexcept
	{	
	return (::std:: equal(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, equal_to<>()));
	}

 










#line 3202 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 3203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		input_iterator_tag, input_iterator_tag)
	{	
		
	for (;;)
		{
		if (_First1 == _Last1)
			{
			return (_First2 == _Last2);
			}

		if (_First2 == _Last2)
			{
			return (false);
			}

		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}

		++_First1;
		++_First2;
		}
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		{
		return (false);
		}

	return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline bool equal(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	return (_Equal_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred) noexcept;
#line 3272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2) noexcept
	{	
	return (::std:: equal(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, _Last2, equal_to<>()));
	}
#line 3291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _Elem1,
	class _Elem2,
	class _FTy>
	struct _Lex_compare_check_element_types_helper
		: bool_constant<conjunction_v<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			_Is_character<_FTy>,
			is_unsigned<_FTy>
		>>
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: bool_constant<conjunction_v<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			is_unsigned<_Elem1>,
			is_unsigned<_Elem2>
		>>
	{	
	};


template<>
	struct _Lex_compare_check_element_types_helper<byte, byte, byte>
		: true_type
	{	
	};

template<>
	struct _Lex_compare_check_element_types_helper<byte, byte, void>
		: true_type
	{	
	};
#line 3331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _Memcmp_pr>
	struct _Lex_compare_optimize
	{	
	};

template<class _Memcmp_pr,
	class _Obj1,
	class _Obj2,
	class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
		_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;	

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	_Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<greater<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const greater<_FTy>&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{	
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
		}

	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr,
	class _Memcmp_pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr, _Lex_compare_optimize<_Memcmp_pr>)
	{	
	const auto _Num1 = static_cast<size_t>(_Last1 - _First1);
	const auto _Num2 = static_cast<size_t>(_Last2 - _First2);
	const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Memcmp_pr{}(_Ans, 0) || (_Ans == 0 && _Num1 < _Num2));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	return (_Lex_compare_unchecked(_UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred),
		_Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred)));
	}

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: lexicographical_compare(_First1, _Last1,
		_First2, _Last2, less<>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool lexicographical_compare(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: lexicographical_compare(_First1, _Last1, _First2, _Last2, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool lexicographical_compare(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: lexicographical_compare(_First1, _Last1, _First2, _Last2));
	}
#line 3454 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	using _Elem = remove_pointer_t<_InIt>;
	return (_Within_limits(_Val, is_signed<_Elem>{}, is_signed<_Ty>{},
		bool_constant<-1 == static_cast<_Ty>(-1)>{}));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		{
		return (_Last);
		}

	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked(const _InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	
	using _Memchr_opt = bool_constant<is_integral_v<_Ty> && _Is_any_of_v<_InIt,
		char *, signed char *, unsigned char *, const char *, const signed char *, const unsigned char *>>;

	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt{}));
	}

template<class _InIt,
	class _Ty>
	[[nodiscard]] inline _InIt find(_InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt find(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) noexcept;
#line 3553 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{
			break;
			}
		}

	return (_First);
	}

		
template<class _InIt,
	class _Ty>
	[[nodiscard]] inline _Iter_diff_t<_InIt> count(const _InIt _First, const _InIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (*_UFirst == _Val)
			{
			++_Count;
			}
		}

	return (_Count);
	}


template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Iter_diff_t<_FwdIt> count(_ExPo&& _Exec,
		const _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) noexcept;
#line 3600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_Iter_diff_t<_InIt> _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{
			++_Count;
			}
		}

	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr,
		forward_iterator_tag, forward_iterator_tag)
	{	
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	
	do
		{	
		--_Last1;
		--_Last2;
		}
	while (_Pred(*_Last1, *_Last2));
	++_Last1;
	++_Last2;
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Trim_matching_suffixes(_Last1, _Last2, _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
		{
		if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
			{	
			_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
			if (_Count2 == 0)
				{
				return (false);	
				}

			_FwdIt1 _Skip1 = _Next_iter(_Next1);
			_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
			if (_Count2 != _Count1)
				{
				return (false);	
				}
			}
		}

	return (true);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{	
				
				
			auto _Last2 = ::std:: next(_First2, static_cast<_Iter_diff_t<_FwdIt2>>(::std:: distance(_First1, _Last1)));
			return (_Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred));
			}
		}

	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	[[nodiscard]] inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
	return (_Is_permutation_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred)));
	}

 











#line 3723 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}


 







#line 3743 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
		
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{	
			if (::std:: distance(_First1, _Last1) == ::std:: distance(_First2, _Last2))
				{
				return (_Check_match_counts(_First1, _Last1, _First2, _Last2, _Pred));
				}
			else
				{
				return (false);	
				}
			}
		}

	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		{
		return (false);
		}

	return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	[[nodiscard]] inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
		
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	return (_Is_permutation_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2>
	[[nodiscard]] inline bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: is_permutation(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse_unchecked1(_BidIt _First, _BidIt _Last, integral_constant<size_t, 0>)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		{
		::std:: iter_swap(_First, _Last);
		}
	}


template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 1>)
	{	
	__std_reverse_trivially_swappable_1(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 2>)
	{	
	__std_reverse_trivially_swappable_2(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 4>)
	{	
	__std_reverse_trivially_swappable_4(_First, _Last);
	}

template<class _BidIt> inline
	void _Reverse_unchecked1(const _BidIt _First, const _BidIt _Last, integral_constant<size_t, 8>)
	{	
	__std_reverse_trivially_swappable_8(_First, _Last);
	}
#line 3844 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

template<class _BidIt> inline
	void _Reverse_unchecked(const _BidIt _First, const _BidIt _Last)
	{	

	using _Elem = remove_pointer_t<_BidIt>;
	constexpr size_t _Opt = is_pointer_v<_BidIt>
		&& _Is_trivially_swappable_v<_Elem>
		&& !is_volatile_v<_Elem>
		&& (sizeof(_Elem) == 1
			|| sizeof(_Elem) == 2
			|| sizeof(_Elem) == 4
			|| sizeof(_Elem) == 8) ? sizeof(_Elem) : 0;


#line 3860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
	_Reverse_unchecked1(_First, _Last, integral_constant<size_t, _Opt>{});
	}

template<class _BidIt> inline
	void reverse(const _BidIt _First, const _BidIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	_Reverse_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last));
	}

 
template<class _ExPo,
	class _BidIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void reverse(_ExPo&&, _BidIt _First, _BidIt _Last) noexcept
	{	
		
	return (::std:: reverse(_First, _Last));
	}
 #line 3880 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid, _Res = _Last; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			{	
			if (++_Next == _Last)
				return (_Res == _Last ? _Mid : _Res);
			else
				_Mid = _Next;	
			}
		else if (++_Next == _Last)
			{	
			if (_Res == _Last)
				_Res = _First;
			_Next = _Mid;
			}
		}
	}

template<class _BidIt> inline
	pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
		_BidIt _First, _BidIt _Sentinel, _BidIt _Last)
	{	
	while (_First != _Sentinel && _Last != _Sentinel)
		{
		::std:: iter_swap(_First, --_Last);
		++_First;
		}

	return (::std:: make_pair(_First, _Last));
	}

template<class _BidIt> inline
	_BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
	_Reverse_unchecked(_Tmp.first, _Tmp.second);
	return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
	}

template<class _RanIt> inline
	_RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	_Reverse_unchecked(_First, _Last);
	return (_First + (_Last - _Mid));
	}

template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	if (_First == _Mid)
		return (_Last);
	if (_Mid == _Last)
		return (_First);
	return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
		
		
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	_Seek_wrapped(_First,
		_Rotate_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Mid),
		_Get_unwrapped(_Last)));
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt rotate(_ExPo&&, _FwdIt _First, _FwdIt _Mid, _FwdIt _Last) noexcept
	{	
		
	return (::std:: rotate(_First, _Mid, _Last));
	}
#line 3972 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	[[nodiscard]] inline _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_UFirst, _Get_unwrapped(_Last));

	while (0 < _Count)
		{	
		const _Iter_diff_t<_FwdIt> _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Pred(*_UMid, _Val))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		else
			{
			_Count = _Count2;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

	
template<class _Diff,
	class _Urng>
	class _Rng_from_urng
	{	
public:
	using _Ty0 = make_unsigned_t<_Diff>;
	using _Ty1 = typename _Urng::result_type;

	using _Udiff = conditional_t<sizeof (_Ty1) < sizeof (_Ty0), _Ty0, _Ty1>;

	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (;;)
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (static_cast<_Diff>(_Ret % _Index));
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

	_Rng_from_urng(const _Rng_from_urng&) = delete;
	_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
	_Udiff _Get_bits()
		{	
		for (;;)
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	
	};

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	 _Yarn()
		: _Myptr(nullptr), _Nul(0)
		{	
		}

	 _Yarn(const _Yarn& _Right)
		: _Myptr(nullptr), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem * _Right)
		: _Myptr(nullptr), _Nul(0)
		{	
		*this = _Right;
		}

	_Yarn&  operator=(const _Yarn& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Yarn&  operator=(const _Elem * _Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != nullptr)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					{
					++_Ptr;
					}

				const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 4130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

				if (_Myptr != nullptr)
					{
					:: memcpy(_Myptr, _Right, _Count);
					}
				}
			}

		return (*this);
		}

	 ~_Yarn() noexcept
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == nullptr);
		}

	  const _Elem * c_str() const
		{	
		return (_Myptr != nullptr ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == nullptr);
		}

	  const _Elem * _C_str() const
		{	
		return (_Myptr != nullptr ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != nullptr)

 



			:: free(_Myptr);
 #line 4177 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"

		_Myptr = nullptr;
		}

	_Elem * _Myptr;	
	_Elem _Nul;		
	};


		
template<class _Container>
	class back_insert_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using container_type = _Container;

	explicit back_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	back_insert_iterator& operator=(const typename _Container::value_type& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	back_insert_iterator& operator=(typename _Container::value_type&& _Val)
		{	
		container->push_back(::std:: move(_Val));
		return (*this);
		}

	[[nodiscard]] back_insert_iterator& operator*()
		{	
		return (*this);
		}

	back_insert_iterator& operator++()
		{	
		return (*this);
		}

	back_insert_iterator operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

		
template<class _Container>
	[[nodiscard]] inline back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (back_insert_iterator<_Container>(_Cont));
	}


	
template<class _Ty,
	class _Alloc,
	class = void>
	struct _Has_allocator_type
		: false_type
	{	
	};

template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type<_Ty, _Alloc, void_t<typename _Ty::allocator_type>>
		: is_convertible<_Alloc, typename _Ty::allocator_type>::type
	{	
	};

		
struct allocator_arg_t
	{	
	explicit allocator_arg_t() = default;
	};

inline constexpr allocator_arg_t allocator_arg{};

[[noreturn]]  void __cdecl _Xbad_alloc();
[[noreturn]]  void __cdecl _Xinvalid_argument(  const char *);
[[noreturn]]  void __cdecl _Xlength_error(  const char *);
[[noreturn]]  void __cdecl _Xout_of_range(  const char *);
[[noreturn]]  void __cdecl _Xoverflow_error(  const char *);
[[noreturn]]  void __cdecl _Xruntime_error(  const char *);

		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};

template<class _Ty,
	class _Alloc>
	inline constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct [[deprecated("warning STL4015: " "The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. " "(The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to " "derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing " "publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. " "Note that value_type is required to be non-const, even for constant iterators. " "You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] iterator
	{	
	using iterator_category = _Category;
	using value_type = _Ty;
	using difference_type = _Diff;
	using pointer = _Pointer;
	using reference = _Reference;
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 4306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"
#line 4307 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xutility"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<size_t _Ty_size> inline
	size_t _Get_size_of_n(const size_t _Count)
	{	
	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
	size_t _Result = _Count * _Ty_size;
	if (_Max_possible < _Count)
		{	
			
		_Result = static_cast<size_t>(-1);
		}

	return (_Result);
	}

template<> inline
	size_t _Get_size_of_n<1>(const size_t _Count)
	{	
	return (_Count);
	}

		
template<class _Ty>
	inline constexpr size_t _New_alignof = _Max_value(alignof(_Ty),
		static_cast<size_t>(16ull) 
		);

		
struct _Default_allocate_traits
	{
	__declspec(allocator) static void * _Allocate(const size_t _Bytes)
		{
		return (::operator new(_Bytes));
		}

 
	__declspec(allocator) static void * _Allocate_aligned(const size_t _Bytes, const size_t _Align)
		{
		return (::operator new(_Bytes, align_val_t{_Align}));
		}
 #line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
	};

constexpr bool _Is_pow_2(const size_t _Value) noexcept
	{
	return (_Value != 0 && (_Value & (_Value - 1)) == 0);
	}

 
constexpr size_t _Big_allocation_threshold = 4096;
constexpr size_t _Big_allocation_alignment = 32;

static_assert(2 * sizeof(void *) <= _Big_allocation_alignment,
	"Big allocation alignment should at least match vector register alignment");
static_assert(_Is_pow_2(_Big_allocation_alignment),
	"Big allocation alignment must be a power of two");

  


constexpr size_t _Non_user_size = sizeof(void *) + _Big_allocation_alignment - 1;
  #line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

  
constexpr size_t _Big_allocation_sentinel = 0xFAFAFAFAFAFAFAFAULL;
  

#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

		
template<class _Traits> inline
	__declspec(allocator) void * _Allocate_manually_vector_aligned(const size_t _Bytes)
	{	
	size_t _Block_size = _Non_user_size + _Bytes;
	if (_Block_size <= _Bytes)
		{	
			
		_Block_size = static_cast<size_t>(-1);
		}

	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));
	do { if (_Ptr_container != 0) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);	
	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
		& ~(_Big_allocation_alignment - 1));
	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  


	return (_Ptr);
	}

		
inline void _Adjust_manually_vector_aligned(void *& _Ptr, size_t& _Bytes)
	{	
	_Bytes += _Non_user_size;

	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
	const uintptr_t _Ptr_container = _Ptr_user[-1];

	
	
	;

	
	
  


	constexpr uintptr_t _Min_back_shift = sizeof(void *);
  #line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
	do { if (_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
	_Ptr = reinterpret_cast<void *>(_Ptr_container);
	}
 #line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

		
 
template<size_t _Align,
	class _Traits = _Default_allocate_traits,
	enable_if_t<(_Align > 16ull), int> = 0> inline
	__declspec(allocator) void *_Allocate(const size_t _Bytes)
	{	
	if (_Bytes == 0)
		{
		return (nullptr);
		}

	size_t _Passed_align = _Align;
  
	if (_Bytes >= _Big_allocation_threshold)
		{	
		_Passed_align = _Max_value(_Align, _Big_allocation_alignment);
		}
  #line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

	return (_Traits::_Allocate_aligned(_Bytes, _Passed_align));
	}

template<size_t _Align,
	enable_if_t<(_Align > 16ull), int> = 0> inline
	void _Deallocate(void * _Ptr, const size_t _Bytes)
	{	
	size_t _Passed_align = _Align;
  
	if (_Bytes >= _Big_allocation_threshold)
		{	
		_Passed_align = _Max_value(_Align, _Big_allocation_alignment);
		}
  #line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

	::operator delete(_Ptr, _Bytes, align_val_t{_Passed_align});
	}
 #line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

template<size_t _Align,
	class _Traits = _Default_allocate_traits,
	enable_if_t<(!1 || _Align <= 16ull), int> = 0> inline
	__declspec(allocator) void *_Allocate(const size_t _Bytes)
	{	
 
	if (_Bytes >= _Big_allocation_threshold)
		{	
		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
		}
 #line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

	if (_Bytes != 0)
		{
		return (_Traits::_Allocate(_Bytes));
		}

	return (nullptr);
	}

template<size_t _Align,
	enable_if_t<(!1 || _Align <= 16ull), int> = 0> inline
	void _Deallocate(void * _Ptr, size_t _Bytes)
	{	
 
	if (_Bytes >= _Big_allocation_threshold)
		{	
		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
		}
 #line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

	::operator delete(_Ptr, _Bytes);
	}

		
template<class _Ty,
	class... _Types> inline
	void _Construct_in_place(_Ty& _Obj, _Types&&... _Args)
		noexcept(is_nothrow_constructible_v<_Ty, _Types...>)
	{	
	::new (const_cast<void *>(static_cast<const volatile void *>(::std:: addressof(_Obj))))
		_Ty(::std:: forward<_Types>(_Args)...);
	}

		
template<class _Ty,
	class... _Types> inline
	_Ty * _Global_new(_Types&&... _Args)
	{	
	void * const _Result = _Allocate<_New_alignof<_Ty>>(sizeof(_Ty));
	try {
	::new (_Result) _Ty(::std:: forward<_Types>(_Args)...);
	} catch (...) {
	_Deallocate<_New_alignof<_Ty>>(_Result, sizeof(_Ty));
	throw;
	}
	return (static_cast<_Ty *>(_Result));
	}

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...>>
	{	
	using type = _First;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...>>
	{	
	using type = _Ty<_Newfirst, _Rest...>;
	};

		
template<class _Ty,
	class = void>
	struct _Get_element_type
	{	
	using type = typename _Get_first_parameter<_Ty>::type;
	};

template<class _Ty>
	struct _Get_element_type<_Ty, void_t<typename _Ty::element_type>>
	{	
	using type = typename _Ty::element_type;
	};

		
template<class _Ty,
	class = void>
	struct _Get_ptr_difference_type
	{	
	using type = ptrdiff_t;
	};

template<class _Ty>
	struct _Get_ptr_difference_type<_Ty, void_t<typename _Ty::difference_type>>
	{	
	using type = typename _Ty::difference_type;
	};

		
template<class _Ty,
	class _Other,
	class = void>
	struct _Get_rebind_alias
	{	
	using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

template<class _Ty,
	class _Other>
	struct _Get_rebind_alias<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>>>
	{	
	using type = typename _Ty::template rebind<_Other>;
	};

		
template<class _Ty>
	struct pointer_traits
	{	
	using element_type = typename _Get_element_type<_Ty>::type;
	using pointer = _Ty;
	using difference_type = typename _Get_ptr_difference_type<_Ty>::type;

	template<class _Other>
		using rebind = typename _Get_rebind_alias<_Ty, _Other>::type;

	using _Reftype = conditional_t<is_void_v<element_type>,
		char&,
		add_lvalue_reference_t<element_type>>;

	[[nodiscard]] static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	using element_type = _Ty;
	using pointer = _Ty *;
	using difference_type = ptrdiff_t;

	template<class _Other>
		using rebind = _Other *;

	using _Reftype = conditional_t<is_void_v<_Ty>,
		char&,
		add_lvalue_reference_t<_Ty>>;

	[[nodiscard]] static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};

		
template<class _Ptr,
	class _Ty>
	using _Rebind_pointer_t = typename pointer_traits<_Ptr>::template rebind<_Ty>;

		
template<class _Pointer,
	enable_if_t<!is_pointer_v<_Pointer>, int> = 0> inline
	_Pointer _Refancy(typename pointer_traits<_Pointer>::element_type * _Ptr)
	{	
	return (pointer_traits<_Pointer>::pointer_to(*_Ptr));
	}

template<class _Pointer,
	enable_if_t<is_pointer_v<_Pointer>, int> = 0> inline
	_Pointer _Refancy(_Pointer _Ptr)
	{	
	return (_Ptr);
	}

		
template<class _Ty> inline
	void _Destroy_in_place(_Ty& _Obj) noexcept
	{	
	_Obj.~_Ty();
	}

		
template<class _Ptrty> inline
	auto _Const_cast(_Ptrty _Ptr)
	{	
	using _Elem = typename pointer_traits<_Ptrty>::element_type;
	using _Modifiable = remove_const_t<_Elem>;
	using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

	return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
	}

template<class _Ty> inline
	auto _Const_cast(_Ty * _Ptr)
	{	
	return (const_cast<remove_const_t<_Ty> *>(_Ptr));
	}

		
template<class _Ty,
	class = void>
	struct _Get_pointer_type
	{	
	using type = typename _Ty::value_type *;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_pointer_type<_Ty, void_t<typename _Ty::pointer>>
	{	
	using type = typename _Ty::pointer;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_const_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using _Valty = typename _Ty::value_type;
	using type = typename pointer_traits<_Ptrty>::template rebind<const _Valty>;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_const_pointer_type<_Ty, void_t<typename _Ty::const_pointer>>
	{	
	using type = typename _Ty::const_pointer;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_void_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::template rebind<void>;
	};

template<class _Ty>
	struct _Get_void_pointer_type<_Ty, void_t<typename _Ty::void_pointer>>
	{	
	using type = typename _Ty::void_pointer;
	};

		
template<class _Ty,
	class = void>
	struct _Get_const_void_pointer_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::template rebind<const void>;
	};

template<class _Ty>
	struct _Get_const_void_pointer_type<_Ty, void_t<typename _Ty::const_void_pointer>>
	{	
	using type = typename _Ty::const_void_pointer;
	};

		
template<class _Ty,
	class = void>
	struct _Get_difference_type
	{	
	using _Ptrty = typename _Get_pointer_type<_Ty>::type;
	using type = typename pointer_traits<_Ptrty>::difference_type;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_difference_type<_Ty, void_t<typename _Ty::difference_type>>
	{	
	using type = typename _Ty::difference_type;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_size_type
	{	
	using type = make_unsigned_t<typename _Get_difference_type<_Ty>::type>;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty>
	struct _Get_size_type<_Ty, void_t<typename _Ty::size_type>>
	{	
	using type = typename _Ty::size_type;
	};
#pragma warning(pop)

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_copy
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_copy<_Ty, void_t<typename _Ty::propagate_on_container_copy_assignment>>
	{	
	using type = typename _Ty::propagate_on_container_copy_assignment;
	};

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_move
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_move<_Ty, void_t<typename _Ty::propagate_on_container_move_assignment>>
	{	
	using type = typename _Ty::propagate_on_container_move_assignment;
	};

		
template<class _Ty,
	class = void>
	struct _Get_propagate_on_container_swap
	{	
	using type = false_type;
	};

template<class _Ty>
	struct _Get_propagate_on_container_swap<_Ty, void_t<typename _Ty::propagate_on_container_swap>>
	{	
	using type = typename _Ty::propagate_on_container_swap;
	};

		
template<class _Ty,
	class = void>
	struct _Get_is_always_equal
	{	
	using type = typename is_empty<_Ty>::type;
	};

template<class _Ty>
	struct _Get_is_always_equal<_Ty, void_t<typename _Ty::is_always_equal>>
	{	
	using type = typename _Ty::is_always_equal;
	};

		
template<class _Ty,
	class _Other,
	class = void>
	struct _Get_rebind_type
	{	
	using type = typename _Replace_first_parameter<_Other, _Ty>::type;
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Ty,
	class _Other>
	struct _Get_rebind_type<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>::other>>
	{	
	using type = typename _Ty::template rebind<_Other>::other;
	};
#pragma warning(pop)

		
template<class _Ty>
	class allocator;

template<class _Alloc,
	class = void>
	struct _Is_default_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
		: true_type
	{	
	};

		
template<class _Void,
	class... _Types>
	struct _Has_no_alloc_construct
		: true_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Ptr,
	class... _Args>
	struct _Has_no_alloc_construct<void_t<
		decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
		_Alloc, _Ptr, _Args...>
		: false_type
	{	
	};
#pragma warning(pop)

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;


		
template<class _Alloc,
	class _Ptr,
	class = void>
	struct _Has_no_alloc_destroy
		: true_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
		: false_type
	{	
	};
#pragma warning(pop)

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;


		
template<class _Alloc,
	class _Size_type,
	class _Const_void_pointer,
	class = void>
	struct _Has_allocate_hint
		: false_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc,
	class _Size_type,
	class _Const_void_pointer>
	struct _Has_allocate_hint<_Alloc, _Size_type, _Const_void_pointer, void_t<
		decltype(::std:: declval<_Alloc&>().allocate(
			::std:: declval<const _Size_type&>(), ::std:: declval<const _Const_void_pointer&>()))>>
		: true_type
	{	
	};
#pragma warning(pop)

		
template<class _Alloc,
	class = void>
	struct _Has_max_size
		: false_type
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc>
	struct _Has_max_size<_Alloc, void_t<decltype(::std:: declval<const _Alloc&>().max_size())>>
		: true_type
	{	
	};
#pragma warning(pop)

		
template<class _Alloc,
	class = void>
	struct _Has_select_on_container_copy_construction
		: false_type
	{	
	};

template<class _Alloc>
	struct _Has_select_on_container_copy_construction<_Alloc, void_t<
		decltype(::std:: declval<const _Alloc&>().select_on_container_copy_construction())>>
		: true_type
	{	
	};


		
template<class _Alloc>
	struct allocator_traits;

#pragma warning(push)
#pragma warning(disable: 4996)	
template<class _Alloc>
	struct _Normal_allocator_traits
	{	
	using allocator_type = _Alloc;
	using value_type = typename _Alloc::value_type;

	using pointer = typename _Get_pointer_type<_Alloc>::type;
	using const_pointer = typename _Get_const_pointer_type<_Alloc>::type;
	using void_pointer = typename _Get_void_pointer_type<_Alloc>::type;
	using const_void_pointer = typename _Get_const_void_pointer_type<_Alloc>::type;

	using size_type = typename _Get_size_type<_Alloc>::type;
	using difference_type = typename _Get_difference_type<_Alloc>::type;

	using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy<_Alloc>::type;
	using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move<_Alloc>::type;
	using propagate_on_container_swap = typename _Get_propagate_on_container_swap<_Alloc>::type;
	using is_always_equal = typename _Get_is_always_equal<_Alloc>::type;

	template<class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

	template<class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other>>;

	[[nodiscard]] static __declspec(allocator) pointer allocate(_Alloc& _Al,  const size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer _Allocate1(_Alloc& _Al,  const size_type _Count,
		const const_void_pointer _Hint, true_type)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static __declspec(allocator) pointer _Allocate1(_Alloc& _Al,  const size_type _Count,
		const_void_pointer, false_type)
		{	
		return (_Al.allocate(_Count));
		}

	[[nodiscard]] static __declspec(allocator) pointer allocate(_Alloc& _Al,  const size_type _Count,
		const const_void_pointer _Hint)
		{	
		return (_Allocate1(_Al, _Count, _Hint, _Has_allocate_hint<_Alloc, size_type, const_void_pointer>{}));
		}

	static void deallocate(_Alloc& _Al, pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(true_type, _Alloc&, _Ty *_Ptr, _Types&&... _Args)
		{	
		::new (static_cast<void *>(_Ptr)) _Ty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr, _Types&&... _Args)
		{	
		_Construct1(_Uses_default_construct_t<_Alloc, _Ty *, _Types...>(),
			_Al, _Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty>
		static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
		{	
		_Ptr->~_Ty();
		}

	template<class _Ty>
		static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Alloc, _Ty *>());
		}

	static size_type _Max_size1(const _Alloc& _Al, true_type) noexcept
		{	
		return (_Al.max_size());
		}

	static size_type _Max_size1(const _Alloc&, false_type) noexcept
		{	
		return ((numeric_limits<size_type>::max)() / sizeof(value_type));
		}

	[[nodiscard]] static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Max_size1(_Al, _Has_max_size<_Alloc>{}));
		}

	static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, true_type)
		{	
		return (_Al.select_on_container_copy_construction());
		}

	static _Alloc _Select_on_container_copy_construction1(const _Alloc& _Al, false_type)
		{	
		return (_Al);
		}

	[[nodiscard]] static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
		{	
		return (_Select_on_container_copy_construction1(_Al, _Has_select_on_container_copy_construction<_Alloc>{}));
		}
	};
#pragma warning(pop)

template<class _Alloc>
	struct _Default_allocator_traits
	{	
	using allocator_type = _Alloc;
	using value_type = typename _Alloc::value_type;

	using pointer = value_type *;
	using const_pointer = const value_type *;
	using void_pointer = void *;
	using const_void_pointer = const void *;

	using size_type = size_t;
	using difference_type = ptrdiff_t;

	using propagate_on_container_copy_assignment = false_type;
	using propagate_on_container_move_assignment = true_type;
	using propagate_on_container_swap = false_type;
	using is_always_equal = true_type;

	template<class _Other>
		using rebind_alloc = allocator<_Other>;

	template<class _Other>
		using rebind_traits = allocator_traits<allocator<_Other>>;

	[[nodiscard]] static __declspec(allocator) pointer allocate(_Alloc&,  const size_type _Count)
		{	
		return (static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count))));
		}

	[[nodiscard]] static __declspec(allocator) pointer allocate(_Alloc&,  const size_type _Count,
		const_void_pointer)
		{	
		return (static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count))));
		}

	static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count)
		{	
		
		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc&, _Objty * const _Ptr, _Types&&... _Args)
		{	
		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
			_Objty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Uty>
		static void destroy(_Alloc&, _Uty * const _Ptr)
		{	
		_Ptr->~_Uty();
		}

	[[nodiscard]] static size_type max_size(const _Alloc&) noexcept
		{	
		return (static_cast<size_t>(-1) / sizeof(value_type));
		}

	[[nodiscard]] static _Alloc select_on_container_copy_construction(const _Alloc& _Al)
		{	
		return (_Al);
		}
	};

template<class _Alloc>
	struct allocator_traits
		: conditional_t<_Is_default_allocator<_Alloc>::value,
			_Default_allocator_traits<_Alloc>, _Normal_allocator_traits<_Alloc>>
	{	
	};

		
template<class _Alloc>
	inline constexpr bool _Always_equal_after_move = allocator_traits<_Alloc>::is_always_equal::value
		|| allocator_traits<_Alloc>::propagate_on_container_move_assignment::value;

		
template<class _Alloc,
	class _Value_type>
	using _Rebind_alloc_t = typename allocator_traits<_Alloc>::template rebind_alloc<_Value_type>;

		
template<class _Alloc>	
	inline constexpr bool _Is_simple_alloc_v =
		is_same_v<typename allocator_traits<_Alloc>::size_type, size_t>
		&& is_same_v<typename allocator_traits<_Alloc>::difference_type, ptrdiff_t>
		&& is_same_v<typename allocator_traits<_Alloc>::pointer, typename _Alloc::value_type *>
		&& is_same_v<typename allocator_traits<_Alloc>::const_pointer, const typename _Alloc::value_type *>;

		
template<class _Value_type>
	struct _Simple_types
	{	
		
	using value_type = _Value_type;
	using size_type = size_t;
	using difference_type = ptrdiff_t;
	using pointer = value_type *;
	using const_pointer = const value_type *;
	};

		
template<class _Ty>
	class allocator
	{	
public:
	static_assert(!is_const_v<_Ty>,
		"The C++ Standard forbids containers of const elements "
		"because allocator<const T> is ill-formed.");

	using _Not_user_specialized = void;

	using value_type = _Ty;

	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty * pointer;
	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef const _Ty * const_pointer;

	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty& reference;
	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef const _Ty& const_reference;

	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t size_type;
	[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef ptrdiff_t difference_type;

	using propagate_on_container_move_assignment = true_type;
	using is_always_equal = true_type;

	template<class _Other>
		struct [[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] rebind
		{	
		using other = allocator<_Other>;
		};

	[[nodiscard]] [[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] _Ty * address(_Ty& _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	[[nodiscard]] [[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] const _Ty * address(const _Ty& _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	constexpr allocator() noexcept
		{	
		}

	constexpr allocator(const allocator&) noexcept = default;
	template<class _Other>
		constexpr allocator(const allocator<_Other>&) noexcept
		{	
		}

	void deallocate(_Ty * const _Ptr, const size_t _Count)
		{	
		
		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
		}

	[[nodiscard]] __declspec(allocator) _Ty * allocate( const size_t _Count)
		{	
		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
		}

	[[nodiscard]] [[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] __declspec(allocator) _Ty * allocate(
		 const size_t _Count, const void *)
		{	
		return (allocate(_Count));
		}

	template<class _Objty,
		class... _Types>
		[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] void construct(_Objty * const _Ptr, _Types&&... _Args)
		{	
		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
			_Objty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Uty>
		[[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] void destroy(_Uty * const _Ptr)
		{	
		_Ptr->~_Uty();
		}

	[[nodiscard]] [[deprecated("warning STL4010: " "Various members of std::allocator are deprecated in C++17. " "Use std::allocator_traits instead of accessing these members directly. " "You can define _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] size_t max_size() const noexcept
		{	
		return (static_cast<size_t>(-1) / sizeof(_Ty));
		}
	};

		
template<>
	class [[deprecated("warning STL4009: " "std::allocator<void> is deprecated in C++17. " "You can define _SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] allocator<void>
	{	
public:
	using value_type = void;
	using pointer = void *;
	using const_pointer = const void *;

	template<class _Other>
		struct rebind
		{	
		using other = allocator<_Other>;
		};
	};

template<class _Ty,
	class _Other>
	[[nodiscard]] inline bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (true);
	}

template<class _Ty,
	class _Other>
	[[nodiscard]] inline bool operator!=(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (false);
	}


		
template<class _Alloc>
	using _Guide_size_type_t = typename allocator_traits<
		conditional_t<_Is_allocator<_Alloc>::value, _Alloc, allocator<int>>
	>::size_type;
#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

		
template<class _Alloc> inline
	void _Pocca(_Alloc& _Left, const _Alloc& _Right, true_type) noexcept
	{	
	_Left = _Right;
	}

template<class _Alloc> inline
	void _Pocca(_Alloc&, const _Alloc&, false_type) noexcept
	{	
	}

template<class _Alloc> inline
	void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
	_Pocca(_Left, _Right, _Tag);
	}

		
template<class _Alloc> inline
	void _Pocma(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
	{	
	_Left = ::std:: move(_Right);
	}

template<class _Alloc> inline
	void _Pocma(_Alloc&, _Alloc&, false_type) noexcept
	{	
	}

template<class _Alloc> inline
	void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
	_Pocma(_Left, _Right, _Tag);
	}

		
template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right, true_type) noexcept
	{	
	_Swap_adl(_Left, _Right);
	}

template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right, false_type) noexcept
	{	
	;
	(void)_Left;
	(void)_Right;
	}

template<class _Alloc> inline
	void _Pocs(_Alloc& _Left, _Alloc& _Right) noexcept
	{	
	typename allocator_traits<_Alloc>::propagate_on_container_swap _Tag;
	_Pocs(_Left, _Right, _Tag);
	}


		
template<class _Alloc> inline
	void _Destroy_range1(
		typename allocator_traits<_Alloc>::pointer _First,
		typename allocator_traits<_Alloc>::pointer _Last,
		_Alloc& _Al, false_type)
	{	
	for (; _First != _Last; ++_First)
		{
		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
		}
	}

template<class _Alloc> inline
	void _Destroy_range1(
		typename allocator_traits<_Alloc>::pointer,
		typename allocator_traits<_Alloc>::pointer,
		_Alloc&, true_type)
	{	
		
	}

template<class _Alloc> inline
	void _Destroy_range(
		typename allocator_traits<_Alloc>::pointer _First,
		typename allocator_traits<_Alloc>::pointer _Last,
		_Alloc& _Al)
	{	
		
		
	using _Val = typename _Alloc::value_type;
	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
		is_trivially_destructible<_Val>,
		_Uses_default_destroy<_Alloc, _Val *>>>{});
	}


		
template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
	{	
	for (; _First != _Last; ++_First)
		{
		_Destroy_in_place(*_First);
		}
	}

template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void _Destroy_range(_FwdIt _First, _FwdIt _Last)
	{	
		
		
	_Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
	}


		
template<class _Size_type> inline
	_Size_type _Convert_size(const size_t _Len)
	{	
	if (_Len > (numeric_limits<_Size_type>::max)())
		{
		_Xlength_error("size_t too long for _Size_type");
		}

	return (static_cast<_Size_type>(_Len));
	}

template<> inline
	size_t _Convert_size<size_t>(const size_t _Len)
	{	
	return (_Len);
	}

		
template<class _Alloc,
	enable_if_t<is_same_v<typename allocator_traits<_Alloc>::pointer,
		typename _Alloc::value_type *>, int> = 0> inline
	void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
	{	
	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);
	}

template<class _Alloc,
	enable_if_t<!is_same_v<typename allocator_traits<_Alloc>::pointer,
		typename _Alloc::value_type *>, int> = 0> inline
	void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type * const _Ptr)
	{	
	using _Alloc_traits = allocator_traits<_Alloc>;
	using _Ptr_traits = pointer_traits<typename _Alloc_traits::pointer>;
	_Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
	}
}

		
  #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef unsigned long _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  
   
  

#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"

		
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

 
  
   
  

#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
 #line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic0.h"





#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"












#pragma once





extern "C" {
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"






























#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"


#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"






#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"






#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"




#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"









unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _bittest(long const *, long);
long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);



__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedAnd8(char volatile * _Value, char _Mask);






long  _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);



__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);



char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);






long  _InterlockedDecrement(long volatile * _Addend);

long  _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long  _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);









long  _InterlockedIncrement(long volatile * _Addend);

long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);



__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedOr8(char volatile * _Value, char _Mask);






long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);



__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedXor8(char volatile * _Value, char _Mask);






void _ReadWriteBarrier(void);










unsigned char _interlockedbittestandset(long volatile *, long);



unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);








}
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin0.h"
#line 1232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

   

   


  






#line 1246 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory0"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Ty> inline
	pair<_Ty *, ptrdiff_t> _Get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	if (static_cast<size_t>(_Count) <= static_cast<size_t>(-1) / sizeof(_Ty))
		{
		for (; 0 < _Count; _Count /= 2)
			{
			const auto _Size = static_cast<size_t>(_Count) * sizeof(_Ty);
			void * _Pbuf;
 
  #pragma warning(push)
  #pragma warning(disable: 4127) 
  #pragma warning(disable: 6326) 
			if  (alignof(_Ty) > 16ull)
				{
				_Pbuf = ::operator new(_Size, align_val_t{alignof(_Ty)}, nothrow);
				}
			else
  #pragma warning(pop)
 #line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
				{
				_Pbuf = ::operator new(_Size, nothrow);
				}
			if (_Pbuf)
				{
				return {static_cast<_Ty *>(_Pbuf), _Count};
				}
			}
		}

	return {nullptr, 0};
	}

		
template<class _Ty> inline
	void _Return_temporary_buffer(_Ty * const _Pbuf) noexcept
	{	
 
  #pragma warning(push)
  #pragma warning(disable: 4127) 
  #pragma warning(disable: 6326) 
	if  (alignof(_Ty) > 16ull)
		{
		::operator delete(_Pbuf, align_val_t{alignof(_Ty)});
		}
	else
  #pragma warning(pop)
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
		{
		::operator delete(_Pbuf);
		}
	}

		
template<class _FwdIt>
	struct _Uninitialized_backout
	{	
	_FwdIt _First;
	_FwdIt _Last;

	explicit _Uninitialized_backout(_FwdIt _Dest)
		: _First(_Dest),
		_Last(_Dest)
		{}

	_Uninitialized_backout(_FwdIt _First_, _FwdIt _Last_)
		: _First(_First_),
		_Last(_Last_)
		{}

	_Uninitialized_backout(const _Uninitialized_backout&) = delete;
	_Uninitialized_backout& operator=(const _Uninitialized_backout&) = delete;

	~_Uninitialized_backout()
		{	
		_Destroy_range(_First, _Last);
		}

	template<class... _Types>
		void _Emplace_back(_Types&&... _Vals)
		{	
		_Construct_in_place(*_Last, ::std:: forward<_Types>(_Vals)...);
		++_Last;
		}

	_FwdIt _Release()
		{	
		_First = _Last;
		return (_Last);
		}
	};

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked1(_InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(::std:: move(*_First));
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked1(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_move_unchecked(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest)
	{	
	return (_Uninitialized_move_unchecked1(_First, _Last, _Dest, _Ptr_move_cat(_First, _Dest)));
	}

		
template<class _FwdIt,
	class _Alloc>
	class _Uninitialized_backout_al
	{	
public:
	_Uninitialized_backout_al(_FwdIt _Dest, _Alloc& _Al_)
		: _First(_Dest),
		_Last(_Dest),
		_Al(_Al_)
		{
		}

	_Uninitialized_backout_al(const _Uninitialized_backout_al&) = delete;
	_Uninitialized_backout_al& operator=(const _Uninitialized_backout_al&) = delete;

	~_Uninitialized_backout_al()
		{	
		_Destroy_range(_First, _Last, _Al);
		}

	template<class... _Types>
		void _Emplace_back(_Types&&... _Vals)
		{	
		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), ::std:: forward<_Types>(_Vals)...);
		++_Last;
		}

	_FwdIt _Release()
		{	
		_First = _Last;
		return (_Last);
		}

private:
	_FwdIt _First;
	_FwdIt _Last;
	_Alloc& _Al;
	};

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc& _Al,
		_General_ptr_iterator_tag, _Any_tag)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_copy_al_unchecked(_Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc&,
		_Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
	{	
		
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
			_Ptr_copy_cat(_UFirst, _UDest),
			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));

	return (_Dest);
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked(_InIt _First, const _InIt _Last, const _FwdIt _Dest, _Alloc& _Al,
		_General_ptr_iterator_tag, _Any_tag)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(::std:: move(*_First));
		}

	return (_Backout._Release());
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_move_al_unchecked(_Ty1 * const _First, _Ty1 * const _Last, _Ty2 * const _Dest, _Alloc&,
		_Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(const _InIt _First, const _InIt _Last, _FwdIt _Dest, _Alloc& _Al)
	{	
		
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
			_Ptr_move_cat(_UFirst, _UDest),
			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(::std:: move(*_UFirst))>()));
	return (_Dest);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninit_alloc_fill_n1(const _FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc& _Al, false_type)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_First, _Al};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back(_Val);
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninit_alloc_fill_n1(const _FwdIt _First, const _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc&, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Count));
	return (_First + _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_fill_n(const _FwdIt _First, const _Diff _Count, const _Iter_value_t<_FwdIt>& _Val,
		_Alloc& _Al)
	{	
	return (_Uninit_alloc_fill_n1(_First, _Count, _Val, _Al,
		bool_constant<conjunction_v<decltype(_Fill_memset_is_safe(_First, _Val)),
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(_Val)>>>{}));
	}

		
template<class _FwdIt>
	using _Use_memset_value_construct_t = bool_constant<conjunction_v<
		is_pointer<_FwdIt>,
		is_scalar<_Iter_value_t<_FwdIt>>,
		negation<is_volatile<_Iter_value_t<_FwdIt>>>,
		negation<is_member_pointer<_Iter_value_t<_FwdIt>>>>>;

template<class _FwdIt> inline
	_FwdIt _Zero_range(const _FwdIt _First, const _FwdIt _Last)
	{	
	char * const _First_ch = reinterpret_cast<char *>(_First);
	char * const _Last_ch = reinterpret_cast<char *>(_Last);
	:: memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));
	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n1(const _FwdIt _First, _Diff _Count, _Alloc& _Al, false_type)
	{	
	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_First, _Al};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back();
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n1(_FwdIt _First, _Diff _Count, _Alloc&, true_type)
	{	
	return (_Zero_range(_First, _First + _Count));
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	_FwdIt _Uninitialized_value_construct_n(_FwdIt _First, _Diff _Count, _Alloc& _Al)
	{	
	return (_Uninitialized_value_construct_n1(_First, _Count, _Al,
		bool_constant<conjunction_v<_Use_memset_value_construct_t<_FwdIt>,
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>>{}));
	}

	
struct _Not_a_node_tag
	{	
	};

		
template<class _Ty>
	[[nodiscard]] [[deprecated("warning STL4012: " "std::get_temporary_buffer() and std::return_temporary_buffer() are deprecated in C++17. " "You can define _SILENCE_CXX17_TEMPORARY_BUFFER_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] pair<_Ty *, ptrdiff_t> get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	return (_Get_temporary_buffer<_Ty>(_Count));
	}

		
template<class _Ty>
	[[deprecated("warning STL4012: " "std::get_temporary_buffer() and std::return_temporary_buffer() are deprecated in C++17. " "You can define _SILENCE_CXX17_TEMPORARY_BUFFER_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] void return_temporary_buffer(_Ty * _Pbuf)
	{	
	_Return_temporary_buffer(_Pbuf);
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmemory"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )





extern "C" {

__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(
	void * _First1, void * _Last1, void * _First2) noexcept;
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

namespace std {
		
const int _ISORT_MAX = 32;	

		
template<class _Diff>
	constexpr ptrdiff_t _Temporary_buffer_size(const _Diff _Value) noexcept
	{	
	using _CT = common_type_t<ptrdiff_t, _Diff>;
	return (static_cast<ptrdiff_t>(_Min_value(static_cast<_CT>(9223372036854775807i64), static_cast<_CT>(_Value))));
	}

template<class _Ty>
	struct _Optimistic_temporary_buffer
	{	
	static constexpr size_t _Optimistic_size = 4096; 
	static constexpr size_t _Optimistic_count = _Max_value(static_cast<size_t>(1), _Optimistic_size / sizeof(_Ty));

	template<class _Diff>
		explicit _Optimistic_temporary_buffer(const _Diff _Requested_size) noexcept
		{	
		const auto _Attempt = _Temporary_buffer_size(_Requested_size);
		if (_Requested_size <= _Optimistic_count)
			{	
			_Data = reinterpret_cast<_Ty *>(&_Stack_space[0]);
			_Capacity = static_cast<ptrdiff_t>(_Requested_size);	
			return;
			}

		const pair<_Ty *, ptrdiff_t> _Raw = _Get_temporary_buffer<_Ty>(_Attempt);
		if (_Raw.second > _Optimistic_count)
			{	
			_Data = _Raw.first;
			_Capacity = _Raw.second;
			return;
			}

		
		_Return_temporary_buffer(_Raw.first);
		_Data = reinterpret_cast<_Ty *>(&_Stack_space[0]);
		_Capacity = _Optimistic_count;
		}

	_Optimistic_temporary_buffer(const _Optimistic_temporary_buffer&) = delete;
	_Optimistic_temporary_buffer& operator=(const _Optimistic_temporary_buffer&) = delete;

	~_Optimistic_temporary_buffer() noexcept
		{	
		if (_Capacity > _Optimistic_count)
			{
			_Return_temporary_buffer(_Data);
			}
		}

	_Ty * _Data;	
	ptrdiff_t _Capacity;
	aligned_union_t<0, _Ty> _Stack_space[_Optimistic_count];
	};

		
template<class _InIt,
	class _Fn> inline
	_Fn for_each(_InIt _First, _InIt _Last, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		_Func(*_UFirst);
		}

	return (_Func);
	}


template<class _ExPo,
	class _FwdIt,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void for_each(_ExPo&& _Exec, _FwdIt _First, _FwdIt _Last, _Fn _Func) noexcept;

		
template<class _InIt,
	class _Diff,
	class _Fn> inline
	_InIt for_each_n(_InIt _First, const _Diff _Count_raw, _Fn _Func)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		auto _UFirst = _Get_unwrapped_n(_First, _Count);
		do
			{
			_Func(*_UFirst);
			--_Count;
			++_UFirst;
			}
		while (0 < _Count);

		_Seek_wrapped(_First, _UFirst);
		}

	return (_First);
	}

template<class _ExPo,
	class _FwdIt,
	class _Diff,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt for_each_n(_ExPo&& _Exec, _FwdIt _First, _Diff _Count_raw, _Fn _Func) noexcept;

 
























#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			break;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] _FwdIt find_if(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline _InIt find_if_not(_InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			break;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt find_if_not(_ExPo&& _Exec, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept;
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline _FwdIt adjacent_find(const _FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UNext = _UFirst; ++_UNext != _ULast; _UFirst = _UNext)
			{
			if (_Pred(*_UFirst, *_UNext))
				{
				_ULast = _UFirst;
				break;
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt>
	[[nodiscard]] inline _FwdIt adjacent_find(const _FwdIt _First, const _FwdIt _Last)
	{	
	return (::std:: adjacent_find(_First, _Last, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt adjacent_find(_ExPo&& _Exec, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept;

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt adjacent_find(_ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last) noexcept
	{	
	return (::std:: adjacent_find(::std:: forward<_ExPo>(_Exec), _First, _Last, equal_to<>()));
	}
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline _Iter_diff_t<_InIt> count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Iter_diff_t<_InIt> _Count = 0;
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			++_Count;
			}
		}

	return (_Count);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Iter_diff_t<_FwdIt> count_if(_ExPo&& _Exec,
		const _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _Pr _Pred)
	{	
	while (_First1 != _Last1 && _Pred(*_First1, *_First2))
		{
		++_First1;
		++_First2;
		}

	return {_First1, _First2};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	const auto _Result = _Mismatch_unchecked(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred));
	_Seek_wrapped(_First2, _Result.second);
	_Seek_wrapped(_First1, _Result.first);
	return {_First1, _First2};
	}

 












#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt1, _FwdIt2> mismatch(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred) noexcept;

 














#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline pair<_InIt1, _InIt2> mismatch(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, equal_to<>()));
	}

 








#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt1, _FwdIt2> mismatch(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2) noexcept
	{	
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: mismatch(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, equal_to<>()));
	}

 











#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		input_iterator_tag, input_iterator_tag)
	{	
	while (_First1 != _Last1 && _First2 != _Last2 && _Pred(*_First1, *_First2))
		{
		++_First1;
		++_First2;
		}

	return {_First1, _First2};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2> _Mismatch_unchecked(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	using _CT = _Common_diff_t<_InIt1, _InIt2>;
	const _CT _Count1 = _Last1 - _First1;
	const _CT _Count2 = _Last2 - _First2;
	const auto _Count = static_cast<_Iter_diff_t<_InIt1>>(_Min_value(_Count1, _Count2));
	return (_Mismatch_unchecked(_First1, _First1 + _Count, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	const auto _Result = _Mismatch_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
			_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>());
	_Seek_wrapped(_First2, _Result.second);
	_Seek_wrapped(_First1, _Result.first);
	return {_First1, _First2};
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt1, _FwdIt2> mismatch(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) noexcept;
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline pair<_InIt1, _InIt2> mismatch(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt1, _FwdIt2> mismatch(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2) noexcept
	{	
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: mismatch(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, _Last2, equal_to<>()));
	}
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			return (false);
			}
		}

	return (true);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool all_of(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept;
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline bool any_of(const _InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			return (true);
			}
		}

	return (false);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool any_of(_ExPo&&, const _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline bool none_of(const _InIt _First, const _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			return (false);
			}
		}

	return (true);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool none_of(_ExPo&&, const _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 









#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 copy_if(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: copy_if(_First, _Last, _Dest, _Pass_fn(_Pred)));
	}

 












#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest_true, _OutIt2 _Dest_false, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest_true = _Get_unwrapped_unverified(_Dest_true);
	auto _UDest_false = _Get_unwrapped_unverified(_Dest_false);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest_true = *_UFirst;
			++_UDest_true;
			}
		else
			{
			*_UDest_false = *_UFirst;
			++_UDest_false;
			}
		}

	_Seek_wrapped(_Dest_false, _UDest_false);
	_Seek_wrapped(_Dest_true, _UDest_true);
	return {_Dest_true, _Dest_false};
	}

 












































#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	pair<_FwdIt2, _FwdIt3>
		partition_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last,
			_FwdIt2 _Dest_true, _FwdIt3 _Dest_false, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: partition_copy(_First, _Last, _Dest_true, _Dest_false, _Pass_fn(_Pred)));
	}

 



















































#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _Pr>
	[[nodiscard]] inline bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);

	for (;; ++_UFirst)
		{	
		if (_UFirst == _ULast)
			{
			return (true);
			}

		if (!_Pred(*_UFirst))
			{
			break;
			}
		}

	while (++_UFirst != _ULast)
		{	
		if (_Pred(*_UFirst))
			{
			return (false);	
			}
		}

	return (true);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool is_partitioned(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: is_partitioned(_First, _Last, _Pass_fn(_Pred)));
	}
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline _FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _Count = ::std:: distance(_UFirst, _ULast);
	while (0 < _Count)
		{	
		const auto _Count2 = static_cast<_Iter_diff_t<_FwdIt>>(_Count >> 1);
		const auto _UMid = ::std:: next(_UFirst, _Count2);

		if (_Pred(*_UMid))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2;
			--_Count;
			}
		else
			{
			_Count = _Count2;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked1(_InIt1 _First1, _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred, false_type)
	{	
	for (; _First2 != _Last2; ++_First1, (void)++_First2)
		{
		if (!_Pred(*_First1, *_First2))
			{
			return (false);
			}
		}

	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked1(const _InIt1 _First1, const _InIt2 _First2, const _InIt2 _Last2, _Pr, true_type)
	{	
	const auto _First1_ch = reinterpret_cast<const char *>(_First1);
	const auto _First2_ch = reinterpret_cast<const char *>(_First2);
	const auto _Count = static_cast<size_t>(reinterpret_cast<const char *>(_Last2) - _First2_ch);
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_rev_pred_unchecked(const _InIt1 _First1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred)
	{	
	return (_Equal_rev_pred_unchecked1(_First1, _First2, _Last2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

		
template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr> inline
	_FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
		_FwdItPat _First2, _FwdItPat _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
	for (;; ++_First1)
		{	
		_FwdItHaystack _Mid1 = _First1;
		for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			{
			if (_Mid2 == _Last2)
				{
				return (_First1);
				}
			else if (_Mid1 == _Last1)
				{
				return (_Last1);
				}
			else if (!_Pred(*_Mid1, *_Mid2))
				{
				break;
				}
			}
		}
	}

template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr> inline
	_FwdItHaystack _Search_unchecked(_FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	_Iter_diff_t<_FwdItPat> _Count2 = _Last2 - _First2;
	if (_Last1 - _First1 >= _Count2)
		{
		const auto _Last_possible = _Last1 - static_cast<_Iter_diff_t<_FwdItHaystack>>(_Count2);
		for (;; ++_First1)
			{
			if (_Equal_rev_pred_unchecked(_First1, _First2, _Last2, _Pred))
				{
				return (_First1);
				}

			if (_First1 == _Last_possible)
				{
				break;
				}
			}
		}

	return (_Last1);
	}

template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pr>
	[[nodiscard]] inline _FwdItHaystack search(_FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	_Seek_wrapped(_First1,
		_Search_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
			_Get_unwrapped(_First2), _Get_unwrapped(_Last2), _Pass_fn(_Pred),
			_Iter_cat_t<_FwdItHaystack>(), _Iter_cat_t<_FwdItPat>()));
	return (_First1);
	}


template<class _ExPo,
	class _FwdItHaystack,
	class _FwdItPat,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdItHaystack search(_ExPo&& _Exec, _FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2, _Pr _Pred) noexcept;
#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _FwdItHaystack,
	class _FwdItPat>
	[[nodiscard]] inline _FwdItHaystack search(const _FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2)
	{	
	return (::std:: search(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}


template<class _ExPo,
	class _FwdItHaystack,
	class _FwdItPat,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdItHaystack search(_ExPo&& _Exec, const _FwdItHaystack _First1, const _FwdItHaystack _Last1,
		const _FwdItPat _First2, const _FwdItPat _Last2) noexcept
	{	
	return (::std:: search(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, _Last2, equal_to<>()));
	}
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _FwdItHaystack,
	class _Searcher>
	[[nodiscard]] inline _FwdItHaystack search(const _FwdItHaystack _First, const _FwdItHaystack _Last,
		const _Searcher& _Search)
	{	
	return (_Search(_First, _Last).first);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First);

	for (; _First != _Last; ++_First)
		{
		if (_Pred(*_First, _Val))
			{	
			_FwdIt _Mid = _First;

			for (_Diff _Count1 = _Count;;)
				{
				if (--_Count1 == 0)
					{
					return (_First);	
					}
				else if (++_Mid == _Last)
					{
					return (_Last);	
					}
				else if (!_Pred(*_Mid, _Val))
					{	
					break;
					}
				}

			_First = _Mid;	
			}
		}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_FwdIt _Search_n_unchecked(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		{
		return (_First);
		}

	if (static_cast<uintmax_t>(_Count)
		> static_cast<uintmax_t>((numeric_limits<_Iter_diff_t<_FwdIt>>::max)()))
		{	
			
		return (_Last);
		}

	const auto _Count_diff = static_cast<_Iter_diff_t<_FwdIt>>(_Count);
	_FwdIt _Old_first = _First;
	for (_Iter_diff_t<_FwdIt> _Inc = 0; _Count_diff <= _Last - _Old_first; )
		{	
		_First = _Old_first + _Inc;
		if (_Pred(*_First, _Val))
			{	
			_Iter_diff_t<_FwdIt> _Count1 = _Count_diff;
			_FwdIt _Mid = _First;

			for (; _Old_first != _First && _Pred(_First[-1], _Val);
				--_First)
				--_Count1;	

			if (_Count1 <= _Last - _Mid)
				{
				for (;;)
					{	
					if (--_Count1 == 0)
						{
						return (_First);	
						}
					else if (!_Pred(*++_Mid, _Val))
						{	
						break;
						}
					}
				}
			_Old_first = ++_Mid;	
			_Inc = 0;
			}
		else
			{	
			_Old_first = _First + 1;
			_Inc = _Count_diff - 1;
			}
		}

	return (_Last);
	}

template<class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr>
	[[nodiscard]] inline _FwdIt search_n(_FwdIt _First, const _FwdIt _Last,
		const _Diff _Count_raw, const _Ty& _Val, _Pr _Pred)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Search_n_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Count, _Val,
			_Pass_fn(_Pred), _Iter_cat_t<_FwdIt>()));

	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Diff,
	class _Ty,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt search_n(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last,
		const _Diff _Count_raw, const _Ty& _Val, _Pr _Pred) noexcept;
#line 1137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _FwdIt,
	class _Diff,
	class _Ty>
	[[nodiscard]] inline _FwdIt search_n(const _FwdIt _First, const _FwdIt _Last, const _Diff _Count, const _Ty& _Val)
	{	
	return (::std:: search_n(_First, _Last, _Count, _Val, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Diff,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt search_n(_ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last,
		const _Diff _Count, const _Ty& _Val) noexcept
	{	
	return (::std:: search_n(::std:: forward<_ExPo>(_Exec), _First, _Last, _Count, _Val, equal_to<>()));
	}
#line 1158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_end_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
	_FwdIt1 _Result = _Last1;
	for (;;)
		{	
		_FwdIt1 _Next1 = _First1;
		_FwdIt2 _Next2 = _First2;
		for (;;)
			{	
			const bool _End_of_needle = static_cast<bool>(_Next2 == _Last2);
			if (_End_of_needle)
				{	
				_Result = _First1;
				}

			if (_Next1 == _Last1)
				{	
				return (_Result);
				}

			if (_End_of_needle || !_Pred(*_Next1, *_Next2))
				{	
				break;
				}

			++_Next1;
			++_Next2;
			}

		++_First1;
		}
	}

template<class _BidIt1,
	class _BidIt2,
	class _Pr> inline
	_BidIt1 _Find_end_unchecked(const _BidIt1 _First1, const _BidIt1 _Last1,
		const _BidIt2 _First2, const _BidIt2 _Last2, _Pr _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	for (_BidIt1 _Candidate = _Last1; ; --_Candidate)
		{	
		_BidIt1 _Next1 = _Candidate;
		_BidIt2 _Next2 = _Last2;
		for (;;)
			{	
			if (_First2 == _Next2)
				{	
				return (_Next1);
				}

			if (_First1 == _Next1)
				{	
				return (_Last1);
				}

			--_Next1;
			--_Next2;
			if (!_Pred(*_Next1, *_Next2))
				{	
				break;
				}
			}
		}
	}

template<class _RanIt1,
	class _RanIt2,
	class _Pr> inline
	_RanIt1 _Find_end_unchecked(const _RanIt1 _First1, const _RanIt1 _Last1,
		const _RanIt2 _First2, const _RanIt2 _Last2, _Pr _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	const _Iter_diff_t<_RanIt2> _Count2 = _Last2 - _First2;
	if (0 < _Count2 && _Count2 <= _Last1 - _First1)
		{
		for (_RanIt1 _Candidate = _Last1 - static_cast<_Iter_diff_t<_RanIt1>>(_Count2); ; --_Candidate)
			{
			if (_Equal_rev_pred_unchecked(_Candidate, _First2, _Last2, _Pred))
				{
				return (_Candidate);
				}

			if (_First1 == _Candidate)
				{
				break;
				}
			}
		}

	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	[[nodiscard]] inline _FwdIt1 find_end(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	_Seek_wrapped(_First1,
		_Find_end_unchecked(_Get_unwrapped(_First1), _Get_unwrapped(_Last1),
		_Get_unwrapped(_First2), _Get_unwrapped(_Last2),
		_Pass_fn(_Pred), _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));

	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2>
	[[nodiscard]] inline _FwdIt1 find_end(_FwdIt1 const _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2)
	{	
	return (::std:: find_end(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt1 find_end(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) noexcept;

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt1 find_end(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2) noexcept
	{	
	return (::std:: find_end(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, _Last2, equal_to<>()));
	}
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr>
	[[nodiscard]] inline _FwdIt1 find_first_of(_FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	for (; _UFirst1 != _ULast1; ++_UFirst1)
		{
		for (auto _UMid2 = _UFirst2; _UMid2 != _ULast2; ++_UMid2)
			{
			if (_Pred(*_UFirst1, *_UMid2))
				{
				_Seek_wrapped(_First1, _UFirst1);
				return (_First1);
				}
			}
		}

	_Seek_wrapped(_First1, _UFirst1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2>
	[[nodiscard]] inline _FwdIt1 find_first_of(const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2)
	{	
	return (::std:: find_first_of(_First1, _Last1, _First2, _Last2, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt1 find_first_of(_ExPo&& _Exec, const _FwdIt1 _First1, _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2, _Pr _Pred) noexcept;

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt1 find_first_of(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, const _FwdIt2 _Last2) noexcept
	{	
	return (::std:: find_first_of(::std:: forward<_ExPo>(_Exec), _First1, _Last1,
		_First2, _Last2, equal_to<>()));
	}
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		::std:: iter_swap(_First1, _First2);
		}

	return (_First2);
	}


template<class _Ty,
	enable_if_t<_Is_trivially_swappable_v<_Ty>, int> = 0> inline
	_Ty * _Swap_ranges_unchecked(_Ty * const _First1, _Ty * const _Last1, _Ty * const _First2)
	{	
	__std_swap_ranges_trivially_swappable_noalias(_First1, _Last1, _First2);
	return (_First2 + (_Last1 - _First1));
	}
#line 1383 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(const _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_FwdIt1>(_UFirst1, _ULast1));
	_Seek_wrapped(_First2, _Swap_ranges_unchecked(_UFirst1, _ULast1, _UFirst2));
	return (_First2);
	}

 







#line 1405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 swap_ranges(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _Dest) noexcept
	{	
		
	return (::std:: swap_ranges(_First1, _Last1, _Dest));
	}

 










#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1430 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Fn> inline
	_OutIt transform(const _InIt _First, const _InIt _Last, _OutIt _Dest, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		*_UDest = _Func(*_UFirst);
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 









#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 transform(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _FwdIt2 _Dest, _Fn _Func) noexcept;

 











#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn> inline
	_OutIt transform(const _InIt1 _First1, const _InIt1 _Last1,
		const _InIt2 _First2, _OutIt _Dest, _Fn _Func)
	{	
	_Adl_verify_range(_First1, _Last1);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _Count = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
	auto _UFirst2 = _Get_unwrapped_n(_First2, _Count);
	auto _UDest = _Get_unwrapped_n(_Dest, _Count);
	for (; _UFirst1 != _ULast1; ++_UFirst1, (void)++_UFirst2, ++_UDest)
		{
		*_UDest = _Func(*_UFirst1, *_UFirst2);
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 





































#line 1546 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 transform(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1,
		const _FwdIt2 _First2, _FwdIt3 _Dest, _Fn _Func) noexcept;

 











































#line 1602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1603 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	void replace(const _FwdIt _First, const _FwdIt _Last, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (*_UFirst == _Oldval)
			{
			*_UFirst = _Newval;
			}
		}
	}


template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void replace(_ExPo&& _Exec,
		const _FwdIt _First, const _FwdIt _Last, const _Ty& _Oldval, const _Ty& _Newval) noexcept;
#line 1629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(const _FwdIt _First, const _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (_Pred(*_UFirst))
			{
			*_UFirst = _Val;
			}
		}
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void replace_if(_ExPo&& _Exec,
		_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val) noexcept;
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		if (*_UFirst == _Oldval)
			{
			*_UDest = _Newval;
			}
		else
			{
			*_UDest = *_UFirst;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 










#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 replace_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last,
		_FwdIt2 _Dest, const _Ty& _Oldval, const _Ty& _Newval) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: replace_copy(_First, _Last, _Dest, _Oldval, _Newval));
	}

 













#line 1728 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UFirst, (void)++_UDest)
		{
		if (_Pred(*_UFirst))
			{
			*_UDest = _Val;
			}
		else
			{
			*_UDest = *_UFirst;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 











#line 1771 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 replace_copy_if(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last,
		_FwdIt2 _Dest, _Pr _Pred, const _Ty& _Val) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: replace_copy_if(_First, _Last, _Dest, _Pass_fn(_Pred), _Val));
	}

 














#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Fn> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		*_UFirst = _Func();
		}
	}


template<class _ExPo,
	class _FwdIt,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void generate(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Fn _Func) noexcept
	{	
		
	return (::std:: generate(_First, _Last, _Pass_fn(_Func)));
	}
#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _OutIt,
	class _Diff,
	class _Fn> inline
	_OutIt generate_n(_OutIt _Dest, const _Diff _Count_raw, _Fn _Func)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		do
			{
			*_UDest = _Func();
			--_Count;
			++_UDest;
			}
		while (0 < _Count);

		_Seek_wrapped(_Dest, _UDest);
		}

	return (_Dest);
	}

 
















#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt,
	class _Diff,
	class _Fn,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt generate_n(_ExPo&&, const _FwdIt _Dest, const _Diff _Count_raw, _Fn _Func) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: generate_n(_Dest, _Count_raw, _Pass_fn(_Func)));
	}

 











#line 1901 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1902 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last, _OutIt _Dest, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!(*_UFirst == _Val))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 










#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 remove_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest, const _Ty& _Val) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: remove_copy(_First, _Last, _Dest, _Val));
	}

 













#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 1969 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		if (!_Pred(*_UFirst))
			{
			*_UDest = *_UFirst;
			++_UDest;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 










#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 remove_copy_if(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: remove_copy_if(_First, _Last, _Dest, _Pass_fn(_Pred)));
	}

 













#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty>
	[[nodiscard]] inline _FwdIt remove(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = _Find_unchecked(_UFirst, _ULast, _Val);
	auto _UNext = _UFirst;
	if (_UFirst != _ULast)
		{
		while (++_UFirst != _ULast)
			{
			if (!(*_UFirst == _Val))
				{
				*_UNext = ::std:: move(*_UFirst);
				++_UNext;
				}
			}
		}

	_Seek_wrapped(_First, _UNext);
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt remove(_ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) noexcept;
#line 2070 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline _FwdIt remove_if(_FwdIt _First, const _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = ::std:: find_if(_UFirst, _ULast, _Pass_fn(_Pred));
	auto _UNext = _UFirst;
	if (_UFirst != _ULast)
		{
		while (++_UFirst != _ULast)
			{
			if (!_Pred(*_UFirst))
				{
				*_UNext = ::std:: move(*_UFirst);
				++_UNext;
				}
			}
		}

	_Seek_wrapped(_First, _UNext);
	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt remove_if(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 2104 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline _FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UFirstb = _UFirst; ++_UFirst != _ULast; _UFirstb = _UFirst)
			{
			if (_Pred(*_UFirstb, *_UFirst))
				{	
				while (++_UFirst != _ULast)
					{
					if (!_Pred(*_UFirstb, *_UFirst))
						{
						*++_UFirstb = ::std:: move(*_UFirst);
						}
					}

				_Seek_wrapped(_Last, ++_UFirstb);
				return (_Last);
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt>
	[[nodiscard]] inline _FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: unique(_First, _Last, equal_to<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt unique(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: unique(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt unique(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: unique(_First, _Last));
	}
#line 2163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr _Pred, true_type, _Any_tag)
	{	
		
	if (_First != _Last)
		{
		_FwdIt _Firstb = _First;

		*_Dest = *_Firstb;
		++_Dest;

		while (++_First != _Last)
			{
			if (!_Pred(*_Firstb, *_First))
				{	
				_Firstb = _First;
				*_Dest = *_Firstb;
				++_Dest;
				}
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Pr _Pred, false_type, true_type)
	{	
		
	if (_First != _Last)
		{
		*_Dest = *_First;

		while (++_First != _Last)
			{
			if (!_Pred(*_Dest, *_First))
				{
				*++_Dest = *_First;
				}
			}

		++_Dest;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, false_type, false_type)
	{	
		
	if (_First != _Last)
		{
		_Iter_value_t<_InIt> _Val = *_First;

		*_Dest = _Val;
		++_Dest;

		while (++_First != _Last)
			{
			if (!_Pred(_Val, *_First))
				{	
				_Val = *_First;
				*_Dest = _Val;
				++_Dest;
				}
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_Dest,
		_Unique_copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
			_Get_unwrapped_unverified(_Dest), _Pass_fn(_Pred),
			bool_constant<_Is_fwd_iter_v<_InIt>>{}, 
			bool_constant<conjunction_v<bool_constant<_Is_fwd_iter_v<_OutIt>>,
				is_same<_Iter_value_t<_InIt>, _Iter_value_t<_OutIt>>>>{}
			));

	return (_Dest);
	}

 









#line 2275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	return (::std:: unique_copy(_First, _Last, _Dest, equal_to<>()));
	}

 







#line 2292 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 unique_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last,
		_FwdIt2 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: unique_copy(_First, _Last, _Dest, _Pass_fn(_Pred)));
	}

 












#line 2322 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 unique_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: unique_copy(_First, _Last, _Dest));
	}

 











#line 2348 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_BidIt>(_UFirst, _ULast));
	for (; _UFirst != _ULast; ++_UDest)
		{
		*_UDest = *--_ULast;
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 








#line 2379 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _BidIt,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt reverse_copy(_ExPo&&, _BidIt _First, _BidIt _Last, _FwdIt _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: reverse_copy(_First, _Last, _Dest));
	}

 










#line 2404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 2405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last, _OutIt _Dest)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _UMid = _Get_unwrapped(_Mid);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_FwdIt>(_UFirst, _ULast));
	_UDest = _Copy_unchecked(_UMid, _ULast, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _UMid, _UDest));
	return (_Dest);
	}


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 rotate_copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Mid, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: rotate_copy(_First, _Mid, _Last, _Dest));
	}

		
template<class _PopIt,
	class _SampleIt,
	class _Diff,
	class _RngFn> inline
	_SampleIt _Sample_reservoir_unchecked(_PopIt _First, const _PopIt _Last, const _SampleIt _Dest,
		const _Diff _Count, _RngFn& _RngFunc)
	{	
		
	using _Diff_sample = _Iter_diff_t<_SampleIt>;
	const auto _SCount = static_cast<_Diff_sample>(_Count);
	_Iter_diff_t<_PopIt> _PopSize{};
	for (; _PopSize < _SCount; ++_PopSize, (void)++_First)
		{
		
		
		
		const auto _Sample_pop = static_cast<_Diff_sample>(_PopSize);
		if (_First == _Last)
			{
			return (_Dest + _Sample_pop);
			}

		_Dest[_Sample_pop] = *_First;
		}
	for (; _First != _Last; ++_First)
		{
		const auto _Idx = _RngFunc(++_PopSize);
		if (_Idx < _SCount)
			{
			_Dest[static_cast<_Diff_sample>(_Idx)] = *_First; 
			}
		}
	return (_Dest + _SCount);
	}

template<class _PopIt,
	class _SampleIt,
	class _Diff,
	class _RngFn> inline
	_SampleIt _Sample_selection_unchecked(_PopIt _First, const _PopIt _Last,
		_Iter_diff_t<_PopIt> _PopSize, _SampleIt _Dest,
		_Diff _Count, _RngFn& _RngFunc)
	{	
		
	using _CT = common_type_t<_Iter_diff_t<_PopIt>, _Diff>;
	for (; _Count > 0 && _First != _Last; ++_First, (void)--_PopSize)
		{
		if (static_cast<_CT>(_RngFunc(_PopSize)) < static_cast<_CT>(_Count))
			{
			--_Count;
			*_Dest = *_First;
			++_Dest;
			}
		}
	return (_Dest);
	}

template<class _PopIt,
	class _SampleIt,
	class _Diff,
	class _RngFn> inline
	_SampleIt _Sample1(_PopIt _First, _PopIt _Last, _SampleIt _Dest,
		_Diff _Count, _RngFn& _RngFunc, input_iterator_tag)
	{	
		
	_Seek_wrapped(_Dest,
		_Sample_reservoir_unchecked(_First, _Last, _Get_unwrapped_unverified(_Dest), _Count,
		_RngFunc));
	return (_Dest);
	}

template<class _PopIt,
	class _SampleIt,
	class _Diff,
	class _RngFn> inline
	_SampleIt _Sample1(_PopIt _First, _PopIt _Last, _SampleIt _Dest,
		_Diff _Count, _RngFn& _RngFunc, forward_iterator_tag)
	{	
		
	using _PopDiff = _Iter_diff_t<_PopIt>;
	using _CT = common_type_t<_Diff, _PopDiff>;
	const auto _PopSize = ::std:: distance(_First, _Last);
	if (static_cast<_CT>(_Count) > static_cast<_CT>(_PopSize))
		{
		_Count = static_cast<_Diff>(_PopSize); 
		}

	_Seek_wrapped(_Dest,
		_Sample_selection_unchecked(_First, _Last, _PopSize, _Get_unwrapped_n(_Dest, _Count),
		_Count, _RngFunc));
	return (_Dest);
	}

template<class _PopIt,
	class _SampleIt,
	class _Diff,
	class _Urng> inline
	_SampleIt sample(_PopIt _First, _PopIt _Last, _SampleIt _Dest,
		_Diff _Count, _Urng&& _Func)
	{	
	static_assert(_Is_fwd_iter_v<_PopIt> || _Is_random_iter_v<_SampleIt>,
		"If the source range is not forward, the destination range must be random-access.");
	static_assert(is_integral_v<_Diff>,
		"The sample size must have an integer type.");
	_Adl_verify_range(_First, _Last);
	if (0 < _Count)
		{
		_Rng_from_urng<_Iter_diff_t<_PopIt>, remove_reference_t<_Urng>> _RngFunc(_Func);
		_Dest = _Sample1(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Dest, _Count,
			_RngFunc, _Iter_cat_t<_PopIt>());
		}

	return (_Dest);
	}













#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 2564 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _RngFn> inline
	void _Random_shuffle1(_RanIt _First, _RanIt _Last, _RngFn& _RngFunc)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst == _ULast)
		{
		return;
		}

	using _Diff = _Iter_diff_t<_RanIt>;
	auto _UTarget = _UFirst;
	_Diff _Target_index = 1;
	for (; ++_UTarget != _ULast; ++_Target_index)
		{	
		_Diff _Off = _RngFunc(static_cast<_Diff>(_Target_index + 1));
		;
		if (_Off != _Target_index)	
			{
			::std:: iter_swap(_UTarget, _UFirst + _Off);
			}
		}
	}

template<class _RanIt,
	class _Urng> inline
	void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
	{	
	typedef remove_reference_t<_Urng> _Urng0;
	_Rng_from_urng<_Iter_diff_t<_RanIt>, _Urng0> _RngFunc(_Func);
	_Random_shuffle1(_First, _Last, _RngFunc);
	}

 




































#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_unchecked(_FwdIt _First, const _FwdIt _Last, _Pr _Pred,
		forward_iterator_tag)
	{	
	for (;;)
		{	
		if (_First == _Last)
			{
			return (_First);
			}

		if (!_Pred(*_First))
			{
			break;
			}

		++_First;
		}

	for (_FwdIt _Next = _First; ++_Next != _Last; )
		{
		if (_Pred(*_Next))
			{
			::std:: iter_swap(_First, _Next);	
			++_First;
			}
		}

	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred,
		bidirectional_iterator_tag)
	{	
	for (;;)
		{	
		for (;;)
			{	
			if (_First == _Last)
				{
				return (_First);
				}

			if (!_Pred(*_First))
				{
				break;
				}

			++_First;
			}

		do
			{	
			--_Last;
			if (_First == _Last)
				{
				return (_First);
				}
			}
		while (!_Pred(*_Last));

		::std:: iter_swap(_First, _Last);	
		++_First;
		}
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition(_FwdIt _First, const _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Partition_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred),
			_Iter_cat_t<_FwdIt>()));

	return (_First);
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt partition(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last, _Pr _Pred) noexcept;
#line 2729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _BidIt> inline
	_BidIt _Buffered_rotate_unchecked(const _BidIt _First, const _BidIt _Mid, const _BidIt _Last,
		const _Iter_diff_t<_BidIt> _Count1, const _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity)
	{	
		
		
	if (_Count1 == 0)
		{
		return (_Last);
		}

	if (_Count2 == 0)
		{
		return (_First);
		}

	if (_Count1 <= _Count2 && _Count1 <= _Capacity)
		{	
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr,
			_Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr)};
		const _BidIt _New_mid = _Move_unchecked(_Mid, _Last, _First);
		_Move_unchecked(_Backout._First, _Backout._Last, _New_mid);
		return (_New_mid); 
		}

	if (_Count2 <= _Capacity)
		{	
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr,
			_Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr)};
		_Move_backward_unchecked(_First, _Mid, _Last);
		return (_Move_unchecked(_Backout._First, _Backout._Last, _First)); 
		}

	
	return (_Rotate_unchecked(_First, _Mid, _Last));
	}

template<class _BidIt,
	class _Pr> inline
	pair<_BidIt, _Iter_diff_t<_BidIt>> _Stable_partition_unchecked1(_BidIt _First, _BidIt _Last, _Pr _Pred,
		const _Iter_diff_t<_BidIt> _Count, _Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity)
	{	
		
		
		
		
		
	using _Diff = _Iter_diff_t<_BidIt>;
	if (_Count - static_cast<_Diff>(1) <= _Capacity) 
		{
		_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr};
		_BidIt _Next = _First;
		_Backout._Emplace_back(::std:: move(*_First));
		while (++_First != _Last)
			{	
				
			if (_Pred(*_First))
				{
				*_Next = ::std:: move(*_First);
				++_Next;
				}
			else
				{
				_Backout._Emplace_back(::std:: move(*_First));
				}
			}

		
		*_Next = ::std:: move(*_Last);
		++_Next;
		_Move_unchecked(_Backout._First, _Backout._Last, _Next);	
		_Diff _True_distance = static_cast<_Diff>(_Count - static_cast<_Diff>(_Backout._Last - _Backout._First));
		return (pair<_BidIt, _Diff>(_Next, _True_distance));	
		}

	const _Diff _Mid_offset = _Count / static_cast<_Diff>(2); 
	const _BidIt _Mid = ::std:: next(_First, _Mid_offset);

	
	_BidIt _Left = _Mid;
	_Diff _Left_true_count = _Mid_offset;
	for (;;)
		{	
		--_Left;
		if (_First == _Left)
			{	
			--_Left_true_count;	
			break;
			}

		if (_Pred(*_Left))
			{	
			const pair<_BidIt, _Diff> _Low =
				_Stable_partition_unchecked1(_First, _Left, _Pred, _Left_true_count, _Temp_ptr, _Capacity);
			_Left = _Low.first;
			_Left_true_count = _Low.second;
			break;
			}

		--_Left_true_count;
		}

	
	_BidIt _Right = _Mid;
	_Diff _Right_true_count = 0;
	for (;;)
		{	
		if (_Right == _Last)
			{	
			++_Right;	
			++_Right_true_count;
			break;
			}

		if (!_Pred(*_Right))
			{	
			const _Diff _Right_count = _Count - _Mid_offset;
			const _Diff _Remaining = _Right_count - _Right_true_count;
			const pair<_BidIt, _Diff> _High =
				_Stable_partition_unchecked1(_Right, _Last, _Pred, _Remaining, _Temp_ptr, _Capacity);
			_Right = _High.first;
			_Right_true_count += _High.second;
			break;
			}

		++_Right;
		++_Right_true_count;
		}

	
	const _BidIt _Partition_point = _Buffered_rotate_unchecked(_Left, _Mid, _Right,
		static_cast<_Diff>(_Mid_offset - _Left_true_count), _Right_true_count, _Temp_ptr, _Capacity);
	return (pair<_BidIt, _Diff>(_Partition_point, static_cast<_Diff>(_Left_true_count + _Right_true_count)));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Stable_partition_unchecked(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	for (;;)
		{
		if (_First == _Last)
			{	
			return (_First);
			}

		if (!_Pred(*_First))
			{	
			break;
			}

		++_First;
		}

	for (;;)
		{
		--_Last;
		if (_First == _Last)
			{	
			return (_First);
			}

		if (_Pred(*_Last))
			{	
			break;
			}
		}

	using _Diff = _Iter_diff_t<_BidIt>;
	const _Diff _Temp_count = ::std:: distance(_First, _Last); 
	const _Diff _Total_count = _Temp_count + static_cast<_Diff>(1);
	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Temp_count};
	return (_Stable_partition_unchecked1(_First, _Last, _Pred, _Total_count, _Temp_buf._Data, _Temp_buf._Capacity)
		.first);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Stable_partition_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}


template<class _ExPo,
	class _BidIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_BidIt stable_partition(_ExPo&&, _BidIt _First, _BidIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: stable_partition(_First, _Last, _Pass_fn(_Pred)));
	}
#line 2929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Push_heap_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole,
		_Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred)
	{	
	for (_Iter_diff_t<_RanIt> _Idx = (_Hole - 1) >> 1;	
		_Top < _Hole && _Pred(*(_First + _Idx), _Val);
		_Idx = (_Hole - 1) >> 1)	
		{	
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = ::std:: move(_Val);	
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	using _Diff = _Iter_diff_t<_RanIt>;
	_Diff _Count = _ULast - _UFirst;
	if (2 <= _Count)
		{
		_Iter_value_t<_RanIt> _Val = ::std:: move(*--_ULast);
		_Push_heap_by_index(_UFirst, --_Count, _Diff(0), ::std:: move(_Val), _Pass_fn(_Pred));
		}
	}

template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: push_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_by_index(_RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom,
		_Ty&& _Val, _Pr _Pred)
	{	
		
	using _Diff = _Iter_diff_t<_RanIt>;
	const _Diff _Top = _Hole;
	_Diff _Idx = _Hole;

	
	
	const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1;	
	while (_Idx < _Max_sequence_non_leaf)
		{	
		_Idx = 2 * _Idx + 2;
		if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = ::std:: move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)
		{	
		*(_First + _Hole) = ::std:: move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}

	_Push_heap_by_index(_First, _Hole, _Top, ::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty&& _Val, _Pr _Pred)
	{	
		
		
	*_Dest = ::std:: move(*_First);
	_Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),
		::std:: move(_Val), _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	if (2 <= _Last - _First)
		{
		--_Last;
		_Iter_value_t<_RanIt> _Val = ::std:: move(*_Last);
		_Pop_heap_hole_unchecked(_First, _Last, _Last, ::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Pop_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: pop_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Iter_diff_t<_RanIt> _Bottom = _Last - _First;
	for (_Iter_diff_t<_RanIt> _Hole = _Bottom >> 1; 0 < _Hole; )	
		{	
		--_Hole;
		_Iter_value_t<_RanIt> _Val = ::std:: move(*(_First + _Hole));
		_Pop_heap_hole_by_index(_First, _Hole, _Bottom, ::std:: move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Make_heap_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: make_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	_RanIt _Is_heap_until_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	const _Iter_diff_t<_RanIt> _Size = _Last - _First;
	for (_Iter_diff_t<_RanIt> _Off = 1; _Off < _Size; ++_Off)
		{
		if (_Pred(_First[(_Off - 1) >> 1], _First[_Off]))	
			{
			return (_First + _Off);
			}
		}

	return (_Last);
	}

template<class _RanIt,
	class _Pr>
	[[nodiscard]] inline _RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Is_heap_until_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _RanIt,
	class _Pr>
	[[nodiscard]] inline bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	return (_Is_heap_until_unchecked(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
	}

template<class _RanIt>
	[[nodiscard]] inline _RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap_until(_First, _Last, less<>()));
	}

template<class _RanIt>
	[[nodiscard]] inline bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap(_First, _Last, less<>()));
	}


template<class _ExPo,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _RanIt is_heap_until(_ExPo&&, _RanIt _First, _RanIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: is_heap_until(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool is_heap(_ExPo&&, _RanIt _First, _RanIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: is_heap(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _RanIt is_heap_until(_ExPo&&, _RanIt _First, _RanIt _Last) noexcept
	{	
		
	return (::std:: is_heap_until(_First, _Last));
	}

template<class _ExPo,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool is_heap(_ExPo&&, _RanIt _First, _RanIt _Last) noexcept
	{	
		
	return (::std:: is_heap(_First, _Last));
	}
#line 3158 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	for (; 2 <= _Last - _First; --_Last)
		{
		_Pop_heap_unchecked(_First, _Last, _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);






#line 3184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
	_Sort_heap_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort_heap(_First, _Last, less<>());
	}

		
template<class _FwdIt,
	class _Ty>
	[[nodiscard]] inline _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: lower_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	[[nodiscard]] inline _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	_Iter_diff_t<_FwdIt> _Count = ::std:: distance(_UFirst, _Get_unwrapped(_Last));

	while (0 < _Count)
		{	
		_Iter_diff_t<_FwdIt> _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Pred(_Val, *_UMid))
			{
			_Count = _Count2;
			}
		else
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		}

	_Seek_wrapped(_First, _UFirst);
	return (_First);
	}

template<class _FwdIt,
	class _Ty>
	[[nodiscard]] inline _FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: upper_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	[[nodiscard]] inline pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);

	using _Diff = _Iter_diff_t<_FwdIt>;
	_Diff _Count = ::std:: distance(_UFirst, _ULast);

	for (;;)
		{	
		if (_Count <= 0)
			{
			_Seek_wrapped(_Last, _UFirst); 
			_Seek_wrapped(_First, _UFirst);
			break;
			}

		_Diff _Count2 = _Count >> 1; 
		const auto _UMid = ::std:: next(_UFirst, _Count2);
		if (_Pred(*_UMid, _Val))
			{	
			_UFirst = _Next_iter(_UMid);
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_UMid))
			{
			_Count = _Count2;	
			}
		else
			{	
			auto _UFirst2 = ::std:: lower_bound(_UFirst, _UMid, _Val, _Pass_fn(_Pred));
			::std:: advance(_UFirst, _Count);
			auto _ULast2 = ::std:: upper_bound(_Next_iter(_UMid), _UFirst, _Val, _Pass_fn(_Pred));
			_Seek_wrapped(_Last, _ULast2);
			_Seek_wrapped(_First, _UFirst2);
			break;
			}
		}

	return {_First, _Last};
	}

template<class _FwdIt,
	class _Ty>
	[[nodiscard]] inline pair<_FwdIt, _FwdIt> equal_range(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: equal_range(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	[[nodiscard]] inline bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_UFirst = ::std:: lower_bound(_UFirst, _ULast, _Val, _Pass_fn(_Pred));
	return (_UFirst != _ULast && !_Pred(_Val, *_UFirst));
	}

template<class _FwdIt,
	class _Ty>
	[[nodiscard]] inline bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: binary_search(_First, _Last, _Val, less<>()));
	}

		
inline _Distance_unknown _Idl_dist_add(_Distance_unknown, _Distance_unknown)
	{	
	return {};
	}

template<class _Diff1> inline
	_Distance_unknown _Idl_dist_add(_Diff1, _Distance_unknown)
	{	
	return {};
	}

template<class _Diff2> inline
	_Distance_unknown _Idl_dist_add(_Distance_unknown, _Diff2)
	{	
	return {};
	}

template<class _Diff1,
	class _Diff2> inline
	auto _Idl_dist_add(_Diff1 _Lhs, _Diff2 _Rhs)
	{	
	return (_Lhs + _Rhs);
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	const auto _Count1 = _Idl_distance<_InIt1>(_UFirst1, _ULast1);
	const auto _Count2 = _Idl_distance<_InIt2>(_UFirst2, _ULast2);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_dist_add(_Count1, _Count2));
	if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		for (;;)
			{
			if (_Pred(*_UFirst2, *_UFirst1))
				{
				*_UDest = *_UFirst2;
				++_UDest;
				++_UFirst2;

				if (_UFirst2 == _ULast2)
					{
					break;
					}
				}
			else
				{
				*_UDest = *_UFirst1;
				++_UDest;
				++_UFirst1;

				if (_UFirst1 == _ULast1)
					{
					break;
					}
				}
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);	
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 












#line 3404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 










#line 3427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 merge(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
	}

 
















#line 3464 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 merge(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest));
	}

 















#line 3498 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 3499 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
		
		
		
		
		
		
		
		
template<class _BidIt> inline
	void _Rotate_one_right(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
		
	_Iter_value_t<_BidIt> _Temp(::std:: move(*_Mid));
	_Move_backward_unchecked(_First, _Mid, _Last);
	*_First = ::std:: move(_Temp);
	}

template<class _BidIt> inline
	void _Rotate_one_left(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
		
	_Iter_value_t<_BidIt> _Temp(::std:: move(*_First));
	*_Move_unchecked(_Mid, _Last, _First) = ::std:: move(_Temp);
	}

template<class _BidIt,
	class _Pr> inline
	void _Inplace_merge_buffer_left(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
	using _Ptr_ty = _Iter_value_t<_BidIt> *;
	_Uninitialized_backout<_Ptr_ty> _Backout{_Temp_ptr,
		_Uninitialized_move_unchecked(_First, _Mid, _Temp_ptr)};
	_Ptr_ty _Left_first = _Temp_ptr;
	const _Ptr_ty _Left_last = _Backout._Last - 1; 
	*_First = ::std:: move(*_Mid); 
	++_First;
	++_Mid;
	for (;;)
		{
		if (_Pred(*_Mid, *_Left_first))
			{	
			*_First = ::std:: move(*_Mid);
			++_First;
			++_Mid;
			if (_Mid == _Last)
				{
				_Move_unchecked(_Left_first, _Backout._Last, _First);	
				return;
				}
			}
		else
			{	
			*_First = ::std:: move(*_Left_first);
			++_First;
			++_Left_first;
			if (_Left_first == _Left_last)
				{	
				*_Move_unchecked(_Mid, _Last, _First) = ::std:: move(*_Left_last);
				return;
				}
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Inplace_merge_buffer_right(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
	using _Ptr_ty = _Iter_value_t<_BidIt> *;
	_Uninitialized_backout<_Ptr_ty> _Backout{_Temp_ptr,
		_Uninitialized_move_unchecked(_Mid, _Last, _Temp_ptr)};
	*--_Last = ::std:: move(*--_Mid); 
	const _Ptr_ty _Right_first = _Temp_ptr;
	_Ptr_ty _Right_last = _Backout._Last - 1;
	--_Mid;
	for (;;)
		{
		if (_Pred(*_Right_last, *_Mid))
			{	
			*--_Last = ::std:: move(*_Mid);
			if (_First == _Mid)
				{
				*--_Last = ::std:: move(*_Right_last);	
				_Move_backward_unchecked(_Right_first, _Right_last, _Last);	
				return;
				}

			--_Mid;
			}
		else
			{	
			*--_Last = ::std:: move(*_Right_last);
			--_Right_last;
			if (_Right_first == _Right_last)
				{	
				*--_Last = ::std:: move(*_Mid);	
				_Move_backward_unchecked(_First, _Mid, _Last);
				*_First = ::std:: move(*_Right_first);
				return;
				}
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred);

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_divide_and_conquer2(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred,
		_BidIt _Firstn, _BidIt _Lastn, _Iter_diff_t<_BidIt> _Count1n, _Iter_diff_t<_BidIt> _Count2n)
	{	
	using _Diff = _Iter_diff_t<_BidIt>;
	_BidIt _Midn = _Buffered_rotate_unchecked(_Firstn, _Mid, _Lastn,
		static_cast<_Diff>(_Count1 - _Count1n), _Count2n, _Temp_ptr, _Capacity);	
	_Buffered_inplace_merge_unchecked(_First, _Firstn, _Midn,
		_Count1n, _Count2n, _Temp_ptr, _Capacity, _Pred);	
	_Buffered_inplace_merge_unchecked(_Midn, _Lastn, _Last,
		static_cast<_Diff>(_Count1 - _Count1n), static_cast<_Diff>(_Count2 - _Count2n),
		_Temp_ptr, _Capacity, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_divide_and_conquer(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
	if (_Count1 <= _Count2)
		{
		const _Iter_diff_t<_BidIt> _Count1n = _Count1 >> 1;	
		const _BidIt _Firstn = ::std:: next(_First, _Count1n);
		const _BidIt _Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
		_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
			_Temp_ptr, _Capacity, _Pred,
			_Firstn, _Lastn, _Count1n, ::std:: distance(_Mid, _Lastn));
		}
	else
		{
		const _Iter_diff_t<_BidIt> _Count2n = _Count2 >> 1;	
		const _BidIt _Lastn = ::std:: next(_Mid, _Count2n);
		const _BidIt _Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
		_Buffered_inplace_merge_divide_and_conquer2(_First, _Mid, _Last, _Count1, _Count2,
			_Temp_ptr, _Capacity, _Pred,
			_Firstn, _Lastn, ::std:: distance(_First, _Firstn), _Count2n);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked_impl(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
	if (_Count1 <= _Count2 && _Count1 <= _Capacity)
		{
		_Inplace_merge_buffer_left(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
	else if (_Count2 <= _Capacity)
		{
		_Inplace_merge_buffer_right(_First, _Mid, _Last, _Temp_ptr, _Pred);
		}
	else
		{
		_Buffered_inplace_merge_divide_and_conquer(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_inplace_merge_unchecked(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Iter_diff_t<_BidIt> _Count1, _Iter_diff_t<_BidIt> _Count2,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
		
		
	if (_Mid == _Last)
		{
		return;
		}

	for (;;)
		{
		if (_First == _Mid)
			{
			return;
			}

		if (_Pred(*_Mid, *_First))
			{
			break;
			}

		++_First;
		--_Count1;
		}

	const auto _Highest = _Prev_iter(_Mid);
	do
		{
		--_Last;
		--_Count2;
		if (_Mid == _Last)
			{
			_Rotate_one_right(_First, _Mid, ++_Last);
			return;
			}
		}
	while (!_Pred(*_Last, *_Highest));

	++_Last;
	++_Count2;

	if (_Count1 == 1)
		{
		_Rotate_one_left(_First, _Mid, _Last);
		return;
		}

	_Buffered_inplace_merge_unchecked_impl(_First, _Mid, _Last, _Count1, _Count2, _Temp_ptr, _Capacity, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _UMid = _Get_unwrapped(_Mid);
	auto _ULast = _Get_unwrapped(_Last);
	;

	
	if (_UMid == _ULast)
		{
		return;
		}

	for (;;)
		{
		if (_UFirst == _UMid)
			{
			return;
			}

		if (_Pred(*_UMid, *_UFirst))
			{	
			break;
			}

		++_UFirst;
		}

	const auto _Highest = _Prev_iter(_UMid);
	do
		{
		--_ULast;
		if (_UMid == _ULast)
			{	
			_Rotate_one_right(_UFirst, _UMid, ++_ULast);
			return;
			}
		}
	while (!_Pred(*_ULast, *_Highest));	

	++_ULast;

	const _Iter_diff_t<_BidIt> _Count1 = ::std:: distance(_UFirst, _UMid);
	if (_Count1 == 1)
		{	
		_Rotate_one_left(_UFirst, _UMid, _ULast);
		return;
		}

	const _Iter_diff_t<_BidIt> _Count2 = ::std:: distance(_UMid, _ULast);
	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Min_value(_Count1, _Count2)};
	_Buffered_inplace_merge_unchecked_impl(_UFirst, _UMid, _ULast,
		_Count1, _Count2, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}

template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	::std:: inplace_merge(_First, _Mid, _Last, less<>());
	}


template<class _ExPo,
	class _BidIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void inplace_merge(_ExPo&&, _BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred) noexcept
	{	
		
	::std:: inplace_merge(_First, _Mid, _Last, _Pass_fn(_Pred));
	}

template<class _ExPo,
	class _BidIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void inplace_merge(_ExPo&&, _BidIt _First, _BidIt _Mid, _BidIt _Last) noexcept
	{	
		
	::std:: inplace_merge(_First, _Mid, _Last);
	}
#line 3819 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _BidIt,
	class _Pr> inline
	_BidIt _Insertion_sort_unchecked(_BidIt _First, const _BidIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		{
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Iter_value_t<_BidIt> _Val = ::std:: move(*_Next);

			if (_Pred(_Val, *_First))
				{	
				_Move_backward_unchecked(_First, _Next, ++_Next1);
				*_First = ::std:: move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Pred(_Val, *--_First1);
					_Next1 = _First1)
					{
					*_Next1 = ::std:: move(*_First1);	
					}

				*_Next1 = ::std:: move(_Val);	
				}
			}
		}

	return (_Last);
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (_Pred(*_Mid, *_First))
		{
		::std:: iter_swap(_Mid, _First);
		}

	if (_Pred(*_Last, *_Mid))
		{	
		::std:: iter_swap(_Last, _Mid);

		if (_Pred(*_Mid, *_First))
			{
			::std:: iter_swap(_Mid, _First);
			}
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	using _Diff = _Iter_diff_t<_RanIt>;
	const _Diff _Count = _Last - _First;
	if (40 < _Count)
		{	
		const _Diff _Step = (_Count + 1) >> 3; 
		const _Diff _Two_step = _Step << 1; 
		_Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);
		_Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);
		_Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		{
		_Med3_unchecked(_First, _Mid, _Last, _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	pair<_RanIt, _RanIt>
		_Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_RanIt _Mid = _First + ((_Last - _First) >> 1);	
	_Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Pred(*(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		{
		--_Pfirst;
		}

	while (_Plast < _Last
		&& !_Pred(*_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		{
		++_Plast;
		}

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (;;)
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			{
			if (_Pred(*_Pfirst, *_Gfirst))
				{
				}
			else if (_Pred(*_Gfirst, *_Pfirst))
				{
				break;
				}
			else if (_Plast != _Gfirst)
				{
				::std:: iter_swap(_Plast, _Gfirst);
				++_Plast;
				}
			else
				{
				++_Plast;
				}
			}

		for (; _First < _Glast; --_Glast)
			{
			if (_Pred(*(_Glast - 1), *_Pfirst))
				{
				}
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				{
				break;
				}
			else if (--_Pfirst != _Glast - 1)
				{
				::std:: iter_swap(_Pfirst, _Glast - 1);
				}
			}

		if (_Glast == _First && _Gfirst == _Last)
			{
			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));
			}

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				{
				::std:: iter_swap(_Pfirst, _Plast);
				}

			++_Plast;
			::std:: iter_swap(_Pfirst, _Gfirst);
			++_Pfirst;
			++_Gfirst;
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				{
				::std:: iter_swap(_Glast, _Pfirst);
				}

			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			{
			::std:: iter_swap(_Gfirst, --_Glast);
			++_Gfirst;
			}
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred)
	{	
	_Iter_diff_t<_RanIt> _Count;
	while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)
		{	
		auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);
		
		_Ideal = (_Ideal >> 1) + (_Ideal >> 2);	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		_Make_heap_unchecked(_First, _Last, _Pred);
		_Sort_heap_unchecked(_First, _Last, _Pred);
		}
	else if (2 <= _Count)
		{
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
		}
	}

template<class _RanIt,
	class _Pr> inline
	void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void sort(const _RanIt _First, const _RanIt _Last)
	{	
	::std:: sort(_First, _Last, less<>());
	}


template<class _ExPo,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void sort(_ExPo&& _Exec, _RanIt _First, _RanIt _Last, _Pr _Pred) noexcept;

template<class _ExPo,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void sort(_ExPo&& _Exec, const _RanIt _First, const _RanIt _Last) noexcept
	{	
	::std:: sort(::std:: forward<_ExPo>(_Exec), _First, _Last, less<>{});
	}
#line 4058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty,
	class _Pr>
	_Ty * _Uninitialized_merge_move(_FwdIt _First, const _FwdIt _Mid, const _FwdIt _Last, _Ty * const _Dest, _Pr _Pred)
	{	
		
	_Uninitialized_backout<_Ty *> _Backout{_Dest};
	_FwdIt _Next = _Mid;
	for (;;)
		{
		if (_Pred(*_Next, *_First))
			{
			_Backout._Emplace_back(::std:: move(*_Next));
			++_Next;

			if (_Next == _Last)
				{
				_Backout._Last = _Uninitialized_move_unchecked(_First, _Mid, _Backout._Last);
				return (_Backout._Release());
				}
			}
		else
			{
			_Backout._Emplace_back(::std:: move(*_First));
			++_First;

			if (_First == _Mid)
				{
				_Backout._Last = _Uninitialized_move_unchecked(_Next, _Last, _Backout._Last);
				return (_Backout._Release());
				}
			}
		}
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge_move(_InIt _First, const _InIt _Mid, const _InIt _Last, _OutIt _Dest, _Pr _Pred)
	{	
		
	_InIt _Next = _Mid;
	for (;;)
		{
		if (_Pred(*_Next, *_First))
			{
			*_Dest = ::std:: move(*_Next);
			++_Dest;
			++_Next;

			if (_Next == _Last)
				{
				return (_Move_unchecked(_First, _Mid, _Dest));
				}
			}
		else
			{
			*_Dest = ::std:: move(*_First);
			++_Dest;
			++_First;

			if (_First == _Mid)
				{
				return (_Move_unchecked(_Next, _Last, _Dest));
				}
			}
		}
	}

template<class _BidIt,
	class _Ty,
	class _Pr> inline
	void _Uninitialized_chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _Ty * _Dest,
		const _Iter_diff_t<_BidIt> _Chunk, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
		
	_Uninitialized_backout<_Ty *> _Backout{_Dest};
	while (_Chunk < _Count)
		{
		_Count -= _Chunk;
		const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
		const auto _Chunk2 = _Min_value(_Chunk, _Count);
		_Count -= _Chunk2;
		const _BidIt _Mid2 = ::std:: next(_Mid1, _Chunk2);
		_Backout._Last = _Uninitialized_merge_move(_First, _Mid1, _Mid2, _Backout._Last, _Pred);
		_First = _Mid2;
		}

	_Uninitialized_move_unchecked(_First, _Last, _Backout._Last);	
	_Backout._Release();
	}

template<class _BidIt,
	class _OutIt,
	class _Pr> inline
	void _Chunked_merge_unchecked(_BidIt _First, const _BidIt _Last, _OutIt _Dest,
		const _Iter_diff_t<_BidIt> _Chunk, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
		
	while (_Chunk < _Count)
		{
		_Count -= _Chunk;
		const _BidIt _Mid1 = ::std:: next(_First, _Chunk);
		const auto _Chunk2 = _Min_value(_Chunk, _Count);
		_Count -= _Chunk2;
		const _BidIt _Mid2 = ::std:: next(_Mid1, _Chunk2);
		_Dest = _Merge_move(_First, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	_Move_unchecked(_First, _Last, _Dest);	
	}

template<class _BidIt,
	class _Pr>
	void _Insertion_sort_isort_max_chunks(_BidIt _First, const _BidIt _Last, _Iter_diff_t<_BidIt> _Count, _Pr _Pred)
	{	
		
	constexpr auto _Diffsort_max = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
	for (; _Diffsort_max < _Count; _Count -= _Diffsort_max)
		{	
		_First = _Insertion_sort_unchecked(_First, ::std:: next(_First, _Diffsort_max), _Pred);
		}

	_Insertion_sort_unchecked(_First, _Last, _Pred);	
	}

template<class _BidIt,
	class _Pr> inline
	void _Buffered_merge_sort_unchecked(const _BidIt _First, const _BidIt _Last,
		const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt> * const _Temp_ptr, _Pr _Pred)
	{	
		
		
	_Insertion_sort_isort_max_chunks(_First, _Last, _Count, _Pred);
	
	auto _Chunk = static_cast<_Iter_diff_t<_BidIt>>(_ISORT_MAX);
	if (_Count <= _Chunk)
		{
		return;
		}

	
	_Uninitialized_chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
	_Uninitialized_backout<_Iter_value_t<_BidIt> *> _Backout{_Temp_ptr, _Temp_ptr + _Count};
	for (;;)
		{
		
		_Chunk <<= 1;
		_Chunked_merge_unchecked(_Temp_ptr, _Temp_ptr + _Count, _First,
			static_cast<ptrdiff_t>(_Chunk), static_cast<ptrdiff_t>(_Count), _Pred);
		_Chunk <<= 1;
		if (_Count <= _Chunk)
			{	
			return;
			}

		
		_Chunked_merge_unchecked(_First, _Last, _Temp_ptr, _Chunk, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Pr> inline
	void _Stable_sort_unchecked(const _BidIt _First, const _BidIt _Last, const _Iter_diff_t<_BidIt> _Count,
		_Iter_value_t<_BidIt> * const _Temp_ptr, const ptrdiff_t _Capacity, _Pr _Pred)
	{	
	using _Diff = _Iter_diff_t<_BidIt>;
	if (_Count <= _ISORT_MAX)
		{
		_Insertion_sort_unchecked(_First, _Last, _Pred);	
		}
	else
		{	
		const auto _Half_count = static_cast<_Diff>(_Count >> 1);
		const auto _Half_count_ceil = static_cast<_Diff>(_Count - _Half_count);
		const _BidIt _Mid = ::std:: next(_First, _Half_count_ceil);
		if (_Half_count_ceil <= _Capacity)
			{	
			_Buffered_merge_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Pred);
			_Buffered_merge_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Pred);
			}
		else
			{	
			_Stable_sort_unchecked(_First, _Mid, _Half_count_ceil, _Temp_ptr, _Capacity, _Pred);
			_Stable_sort_unchecked(_Mid, _Last, _Half_count, _Temp_ptr, _Capacity, _Pred);
			}

		_Buffered_inplace_merge_unchecked(_First, _Mid, _Last,
			_Half_count_ceil, _Half_count, _Temp_ptr, _Capacity, _Pred);	
		}
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _Count = ::std:: distance(_UFirst, _ULast);
	if (_Count <= _ISORT_MAX)
		{
		if (_Count > 1)
			{
			_Insertion_sort_unchecked(_First, _Last, _Pass_fn(_Pred));
			}

		return;
		}

	_Optimistic_temporary_buffer<_Iter_value_t<_BidIt>> _Temp_buf{_Count - (_Count >> 1)};
	_Stable_sort_unchecked(_UFirst, _ULast, _Count, _Temp_buf._Data, _Temp_buf._Capacity, _Pass_fn(_Pred));
	}


template<class _ExPo,
	class _BidIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void stable_sort(_ExPo&& _Exec, _BidIt _First, _BidIt _Last, _Pr _Pred) noexcept;
#line 4285 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	::std:: stable_sort(_First, _Last, less<>());
	}


template<class _ExPo,
	class _BidIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void stable_sort(_ExPo&& _Exec, _BidIt _First, _BidIt _Last) noexcept
	{	
	::std:: stable_sort(::std:: forward<_ExPo>(_Exec), _First, _Last, less<>());
	}
#line 4301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Mid);
	_Adl_verify_range(_Mid, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _UMid = _Get_unwrapped(_Mid);
	const auto _ULast = _Get_unwrapped(_Last);

	if (_UFirst == _UMid)
		{
		return;	
		}

	_Make_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
	for (auto _UNext = _UMid; _UNext < _ULast; ++_UNext)
		{
		if (_Pred(*_UNext, *_UFirst))
			{	
			_Iter_value_t<_RanIt> _Val = ::std:: move(*_UNext);
			_Pop_heap_hole_unchecked(_UFirst, _UMid, _UNext, ::std:: move(_Val), _Pass_fn(_Pred));
			}
		}

	_Sort_heap_unchecked(_UFirst, _UMid, _Pass_fn(_Pred));
	}

template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	::std:: partial_sort(_First, _Mid, _Last, less<>());
	}


template<class _ExPo,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void partial_sort(_ExPo&&, _RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: partial_sort(_First, _Mid, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void partial_sort(_ExPo&&, _RanIt _First, _RanIt _Mid, _RanIt _Last) noexcept
	{	
		
	return (::std:: partial_sort(_First, _Mid, _Last));
	}
#line 4357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	auto _UMid2 = _UFirst2;
	if (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		for (; _UFirst1 != _ULast1 && _UMid2 != _ULast2; ++_UFirst1, (void)++_UMid2)
			{
			*_UMid2 = *_UFirst1;	
			}

		_Make_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
		for (; _UFirst1 != _ULast1; ++_UFirst1)
			{
			if (_Pred(*_UFirst1, *_UFirst2))
				{
				
				_Pop_heap_hole_by_index(_UFirst2, static_cast<_Iter_diff_t<_RanIt>>(0),
					static_cast<_Iter_diff_t<_RanIt>>(_UMid2 - _UFirst2),
					static_cast<_Iter_value_t<_InIt>>(*_UFirst1), _Pass_fn(_Pred));
				}
			}

		_Sort_heap_unchecked(_UFirst2, _UMid2, _Pass_fn(_Pred));
		}

	_Seek_wrapped(_First2, _UMid2);
	return (_First2);
	}

template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2, less<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_RanIt partial_sort_copy(_ExPo&&, _FwdIt _First1, _FwdIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_RanIt partial_sort_copy(_ExPo&&, _FwdIt _First1, _FwdIt _Last1,
		_RanIt _First2, _RanIt _Last2) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2));
	}
#line 4432 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Nth);
	_Adl_verify_range(_Nth, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _UNth = _Get_unwrapped(_Nth);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UNth == _ULast)
		{
		return;	
		}

	while (_ISORT_MAX < _ULast - _UFirst)
		{	
		auto _UMid = _Partition_by_median_guess_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));

		if (_UMid.second <= _UNth)
			{
			_UFirst = _UMid.second;
			}
		else if (_UMid.first <= _UNth)
			{
			return;	
			}
		else
			{
			_ULast = _UMid.first;
			}
		}

	_Insertion_sort_unchecked(_UFirst, _ULast, _Pass_fn(_Pred));	
	}

template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	::std:: nth_element(_First, _Nth, _Last, less<>());
	}


template<class _ExPo,
	class _RanIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void nth_element(_ExPo&&, _RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred) noexcept
	{	
		
	::std:: nth_element(_First, _Nth, _Last, _Pass_fn(_Pred));
	}

template<class _ExPo,
	class _RanIt,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	void nth_element(_ExPo&&, _RanIt _First, _RanIt _Nth, _RanIt _Last) noexcept
	{	
		
	::std:: nth_element(_First, _Nth, _Last);
	}
#line 4495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _Pr>
	[[nodiscard]] inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UFirst1)
		{
		if (_Pred(*_UFirst2, *_UFirst1))
			{
			return (false);
			}

		if (!_Pred(*_UFirst1, *_UFirst2))
			{
			++_UFirst2;
			}
		}

	return (_UFirst2 == _ULast2);
	}

template<class _InIt1,
	class _InIt2>
	[[nodiscard]] inline bool includes(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: includes(_First1, _Last1, _First2, _Last2, less<>()));
	}


		
template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool includes(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2,
		_FwdIt2 _Last2, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: includes(_First1, _Last1, _First2, _Last2, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool includes(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2,
		_FwdIt2 _Last2) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: includes(_First1, _Last1, _First2, _Last2));
	}
#line 4562 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UDest)
		{
		if (_Pred(*_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{	
			*_UDest = *_UFirst2;
			++_UFirst2;
			}
		else
			{	
			*_UDest = *_UFirst1;
			++_UFirst1;
			++_UFirst2;
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 











#line 4618 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 









#line 4639 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_union(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _FwdIt3 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
	}

 















#line 4674 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_union(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _FwdIt3 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest));
	}

 














#line 4706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 4707 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Pred(*_UFirst1, *_UFirst2))
			{
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{
			++_UFirst2;
			}
		else
			{
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			++_UFirst2;
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 











#line 4761 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 









#line 4782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_intersection(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _FwdIt3 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
	}

 















#line 4817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_intersection(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _FwdIt3 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest));
	}

 














#line 4849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 4850 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Pred(*_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			}
		else
			{
			if (!_Pred(*_UFirst2, *_UFirst1))
				{
				++_UFirst1;
				}

			++_UFirst2;
			}
		}

	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst1, _ULast1, _UDest));
	return (_Dest);
	}

 












#line 4906 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 










#line 4929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_difference(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
	}

 
















#line 4966 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_difference(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest));
	}

 















#line 5000 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 5001 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	_Adl_verify_range(_First1, _Last1);
	_Adl_verify_range(_First2, _Last2);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped(_First2);
	const auto _ULast2 = _Get_unwrapped(_Last2);
	;
	;
	auto _UDest = _Get_unwrapped_unverified(_Dest);
	while (_UFirst1 != _ULast1 && _UFirst2 != _ULast2)
		{
		if (_Pred(*_UFirst1, *_UFirst2))
			{	
			*_UDest = *_UFirst1;
			++_UDest;
			++_UFirst1;
			}
		else if (_Pred(*_UFirst2, *_UFirst1))
			{	
			*_UDest = *_UFirst2;
			++_UDest;
			++_UFirst2;
			}
		else
			{	
			++_UFirst1;
			++_UFirst2;
			}
		}

	_UDest = _Copy_unchecked(_UFirst1, _ULast1, _UDest);
	_Seek_wrapped(_Dest, _Copy_unchecked(_UFirst2, _ULast2, _UDest));
	return (_Dest);
	}

 












#line 5060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, less<>()));
	}

 










#line 5083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_symmetric_difference(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest, _Pr _Pred) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest, _Pass_fn(_Pred)));
	}

 
















#line 5120 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _FwdIt3,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt3 set_symmetric_difference(_ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2,
		_FwdIt3 _Dest) noexcept
	{	
		
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt3>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2, _Dest));
	}

 















#line 5154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 5155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr _FwdIt _Max_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		{
		while (++_First != _Last)
			{
			if (_Pred(*_Found, *_First))
				{
				_Found = _First;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	[[nodiscard]] constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Max_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _FwdIt>
	[[nodiscard]] constexpr _FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: max_element(_First, _Last, less<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt max_element(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: max_element(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt max_element(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: max_element(_First, _Last));
	}
#line 5212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr _FwdIt _Min_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		{
		while (++_First != _Last)
			{
			if (_Pred(*_First, *_Found))
				{
				_Found = _First;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	[[nodiscard]] constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	_Seek_wrapped(_First,
		_Min_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred)));
	return (_First);
	}

template<class _FwdIt>
	[[nodiscard]] constexpr _FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: min_element(_First, _Last, less<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt min_element(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: min_element(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt min_element(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: min_element(_First, _Last));
	}
#line 5269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _FwdIt,
	class _Pr>
	constexpr pair<_FwdIt, _FwdIt> _Minmax_element_unchecked(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		{
		while (++_First != _Last)
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Pred(*_First, *_Found.first))
					{
					_Found.first = _First;
					}
				else if (!_Pred(*_First, *_Found.second))
					{
					_Found.second = _First;
					}
				}
			else
				{	
				if (_Pred(*_Next, *_First))
					{	
					if (_Pred(*_Next, *_Found.first))
						{
						_Found.first = _Next;
						}
					if (!_Pred(*_First, *_Found.second))
						{
						_Found.second = _First;
						}
					}
				else
					{	
					if (_Pred(*_First, *_Found.first))
						{
						_Found.first = _First;
						}
					if (!_Pred(*_Next, *_Found.second))
						{
						_Found.second = _Next;
						}
					}
				_First = _Next;
				}
			}
		}

	return (_Found);
	}

template<class _FwdIt,
	class _Pr>
	[[nodiscard]] constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _Result =
		_Minmax_element_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Pass_fn(_Pred));
	_Seek_wrapped(_Last, _Result.second);
	_Seek_wrapped(_First, _Result.first);
	return {_First, _Last};
	}

template<class _FwdIt>
	[[nodiscard]] constexpr pair<_FwdIt, _FwdIt> minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: minmax_element(_First, _Last, less<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt, _FwdIt> minmax_element(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: minmax_element(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline pair<_FwdIt, _FwdIt> minmax_element(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: minmax_element(_First, _Last));
	}
#line 5363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

		
template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
		noexcept(noexcept(_Pred(_Left, _Right)))
	{	
	return (_Pred(_Left, _Right) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr _Ty (max)(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Max_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (*_Res);
	}

#pragma warning(push)
#pragma warning(disable: 28285)	
template<class _Ty>
	 
	[[nodiscard]] constexpr const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Left < _Right))
	{	
	if (_Left < _Right)
		{
		;
		return (_Right);
		}

	return (_Left);
	}
#pragma warning(pop)

template<class _Ty>
	[[nodiscard]] constexpr _Ty (max)(initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: max)(_Ilist, less<>()));
	}

		
template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
		noexcept(noexcept(_Pred(_Right, _Left)))
	{	
	return (_Pred(_Right, _Left) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr _Ty (min)(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = _Min_element_unchecked(_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (*_Res);
	}

#pragma warning(push)
#pragma warning(disable: 28285)	
template<class _Ty>
	 
	[[nodiscard]] constexpr const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
		noexcept(noexcept(_Right < _Left))
	{	
	if (_Right < _Left)
		{
		;
		return (_Right);
		}

	return (_Left);
	}
#pragma warning(pop)

template<class _Ty>
	[[nodiscard]] constexpr _Ty (min)(initializer_list<_Ty> _Ilist)
	{	
	return ((::std:: min)(_Ilist, less<>()));
	}

		
template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	pair<const _Ty *, const _Ty *> _Res = _Minmax_element_unchecked(
		_Ilist.begin(), _Ilist.end(), _Pass_fn(_Pred));
	return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
	}

template<class _Ty>
	[[nodiscard]] constexpr pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty>
	[[nodiscard]] constexpr pair<_Ty, _Ty> minmax(initializer_list<_Ty> _Ilist)
	{	
	return (::std:: minmax(_Ilist, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UNext = _ULast;
	if (_UFirst == _ULast || _UFirst == --_UNext)
		{
		return (false);
		}

	for (;;)
		{	
		auto _UNext1 = _UNext;
		if (_Pred(*--_UNext, *_UNext1))
			{	
			auto _UMid = _ULast;
			do
				{
				--_UMid;
				}
			while (!_Pred(*_UNext, *_UMid));

			::std:: iter_swap(_UNext, _UMid);
			_Reverse_unchecked(_UNext1, _ULast);
			return (true);
			}

		if (_UNext == _UFirst)
			{	
			_Reverse_unchecked(_UFirst, _ULast);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: next_permutation(_First, _Last, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UNext = _ULast;
	if (_UFirst == _ULast || _UFirst == --_UNext)
		{
		return (false);
		}

	for (;;)
		{	
		auto _UNext1 = _UNext;
		if (_Pred(*_UNext1, *--_UNext))
			{	
			auto _UMid = _ULast;
			do
				{
				--_UMid;
				}
			while (!_Pred(*_UMid, *_UNext));

			::std:: iter_swap(_UNext, _UMid);
			_Reverse_unchecked(_UNext1, _ULast);
			return (true);
			}

		if (_UNext == _UFirst)
			{	
			_Reverse_unchecked(_UFirst, _ULast);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: prev_permutation(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline _FwdIt is_sorted_until(const _FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	auto _ULast = _Get_unwrapped(_Last);
	if (_UFirst != _ULast)
		{
		for (auto _UNext = _UFirst; ++_UNext != _ULast; ++_UFirst)
			{
			if (_Pred(*_UNext, *_UFirst))
				{
				_ULast = _UNext;
				break;
				}
			}
		}

	_Seek_wrapped(_Last, _ULast);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr>
	[[nodiscard]] inline bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	return (::std:: is_sorted_until(_UFirst, _ULast, _Pass_fn(_Pred)) == _ULast);
	}

template<class _FwdIt>
	[[nodiscard]] inline _FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last, less<>()));
	}

template<class _FwdIt>
	[[nodiscard]] inline bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted(_First, _Last, less<>()));
	}


template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt is_sorted_until(_ExPo&&, const _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: is_sorted_until(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	class _Pr,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool is_sorted(_ExPo&&, _FwdIt _First, _FwdIt _Last, _Pr _Pred) noexcept
	{	
		
	return (::std:: is_sorted(_First, _Last, _Pass_fn(_Pred)));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _FwdIt is_sorted_until(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: is_sorted_until(_First, _Last));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline bool is_sorted(_ExPo&&, _FwdIt _First, _FwdIt _Last) noexcept
	{	
		
	return (::std:: is_sorted(_First, _Last));
	}
#line 5654 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"


		
template<class _Ty,
	class _Pr>
	[[nodiscard]] constexpr const _Ty& clamp(const _Ty& _Val, const _Ty& _Min_val, const _Ty& _Max_val, _Pr _Pred)
	{	






#line 5668 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

	return (_Pred(_Max_val, _Val)
			? _Max_val
			: _Pred(_Val, _Min_val)
				? _Min_val
				: _Val);
	}

template<class _Ty>
	[[nodiscard]] constexpr const _Ty& clamp(const _Ty& _Val, const _Ty& _Min_val, const _Ty& _Max_val)
	{	
	return (::std:: clamp(_Val, _Min_val, _Max_val, less<>()));
	}
#line 5682 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"

}


#pragma warning(pop)
#pragma pack(pop)
#line 5689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"
#line 5690 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\algorithm"





#line 143 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"











#line 155 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 158 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"














































#line 205 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"









#line 215 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"







#line 223 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"










typedef signed char qint8;         
typedef unsigned char quint8;      
typedef short qint16;              
typedef unsigned short quint16;    
typedef int qint32;                
typedef unsigned int quint32;      



typedef __int64 qint64;            
typedef unsigned __int64 quint64;  










#line 255 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

typedef qint64 qlonglong;
typedef quint64 qulonglong;















typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




#line 282 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
typedef double qreal;
#line 284 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






#line 291 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

















#line 309 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






#line 316 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 317 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"



#line 321 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

















#line 339 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"














#line 354 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"







#line 362 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"







#line 370 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"




#line 375 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 378 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"









namespace QtPrivate {
enum class Deprecated_t {};
constexpr  Deprecated_t Deprecated = {};
}
#line 392 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

























#line 418 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 421 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 423 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 426 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

























#line 452 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 454 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 456 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

















extern "C"
#line 475 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
__declspec(dllimport)  const char *qVersion(void) noexcept;












#line 489 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"










#line 500 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

namespace QtPrivate {
    template <class T>
    struct AlignOfHelper
    {
        char c;
        T type;

        AlignOfHelper();
        ~AlignOfHelper();
    };

    template <class T>
    struct AlignOf_Default
    {
        enum { Value = sizeof(AlignOfHelper<T>) - sizeof(T) };
    };

    template <class T> struct AlignOf : AlignOf_Default<T> { };
    template <class T> struct AlignOf<T &> : AlignOf<T> {};
    template <class T> struct AlignOf<T &&> : AlignOf<T> {};
    template <size_t N, class T> struct AlignOf<T[N]> : AlignOf<T> {};















#line 538 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
} 


















template <int> struct QIntegerForSize;
template <>    struct QIntegerForSize<1> { typedef quint8  Unsigned; typedef qint8  Signed; };
template <>    struct QIntegerForSize<2> { typedef quint16 Unsigned; typedef qint16 Signed; };
template <>    struct QIntegerForSize<4> { typedef quint32 Unsigned; typedef qint32 Signed; };
template <>    struct QIntegerForSize<8> { typedef quint64 Unsigned; typedef qint64 Signed; };


#line 565 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
template <class T> struct QIntegerForSizeof: QIntegerForSize<sizeof(T)> { };
typedef QIntegerForSize<8>::Signed qregisterint;
typedef QIntegerForSize<8>::Unsigned qregisteruint;
typedef QIntegerForSizeof<void*>::Unsigned quintptr;
typedef QIntegerForSizeof<void*>::Signed qptrdiff;
typedef qptrdiff qintptr;
using qsizetype = QIntegerForSizeof<std::size_t>::Signed;







#line 580 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"





#line 586 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"











#line 598 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"










#line 609 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 611 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"










#line 622 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"




#line 627 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 629 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






#line 636 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 638 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 640 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

typedef int QNoImplicitBoolCast;





template <typename T>
constexpr inline T qAbs(const T &t) { return t >= 0 ? t : -t; }

constexpr inline int qRound(double d)
{ return d >= 0.0 ? int(d + 0.5) : int(d - double(int(d-1)) + 0.5) + int(d-1); }
constexpr inline int qRound(float d)
{ return d >= 0.0f ? int(d + 0.5f) : int(d - float(int(d-1)) + 0.5f) + int(d-1); }

constexpr inline qint64 qRound64(double d)
{ return d >= 0.0 ? qint64(d + 0.5) : qint64(d - double(qint64(d-1)) + 0.5) + qint64(d-1); }
constexpr inline qint64 qRound64(float d)
{ return d >= 0.0f ? qint64(d + 0.5f) : qint64(d - float(qint64(d-1)) + 0.5f) + qint64(d-1); }

template <typename T>
constexpr inline const T &qMin(const T &a, const T &b) { return (a < b) ? a : b; }
template <typename T>
constexpr inline const T &qMax(const T &a, const T &b) { return (a < b) ? b : a; }
template <typename T>
constexpr inline const T &qBound(const T &min, const T &val, const T &max)
{ return qMax(min, qMin(max, val)); }






#line 674 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 675 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 678 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 681 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 684 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 687 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

































































#line 753 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"





class QDataStream;

inline void qt_noop(void) {}













#line 776 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 779 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 780 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"












__declspec(noreturn)  __declspec(dllimport) void qTerminate() noexcept;




#line 798 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 799 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

__declspec(dllimport)  bool qSharedBuild() noexcept;






#line 808 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"







#line 816 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"




#line 821 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"



#line 825 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"








#line 834 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

class QString;

__declspec(dllimport) QString qt_error_string(int errorCode = -1);





__declspec(dllimport) void qt_assert(const char *assertion, const char *file, int line) noexcept;






#line 851 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 852 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"





__declspec(dllimport) void qt_assert_x(const char *where, const char *what, const char *file, int line) noexcept;






#line 865 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 866 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

__declspec(noreturn) __declspec(dllimport) void qt_check_pointer(const char *, int) noexcept;

__declspec(dllimport) void qBadAlloc();









#line 880 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

template <typename T>
inline T *q_check_ptr(T *p) { do { if (!(p)) qBadAlloc(); } while (false); return p; }

typedef void (*QFunctionPointer)();



#line 889 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

 constexpr static inline  bool qFuzzyCompare(double p1, double p2)
{
    return (qAbs(p1 - p2) * 1000000000000. <= qMin(qAbs(p1), qAbs(p2)));
}

 constexpr static inline  bool qFuzzyCompare(float p1, float p2)
{
    return (qAbs(p1 - p2) * 100000.f <= qMin(qAbs(p1), qAbs(p2)));
}

 constexpr static inline  bool qFuzzyIsNull(double d)
{
    return qAbs(d) <= 0.000000000001;
}

 constexpr static inline   bool qFuzzyIsNull(float f)
{
    return qAbs(f) <= 0.00001f;
}

__pragma(warning(push))




 constexpr static inline  bool qIsNull(double d) noexcept
{
    return d == 0.0;
}

 constexpr static inline  bool qIsNull(float f) noexcept
{
    return f == 0.0f;
}

__pragma(warning(pop))



















#line 946 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

__pragma(warning(push))



namespace QtPrivate
{
namespace SwapExceptionTester { 
    using std::swap; 
    template <typename T>
    void checkSwap(T &t)
        noexcept(noexcept(swap(t, t)));
    
}
} 

template <typename T>
inline void qSwap(T &value1, T &value2)
    noexcept(noexcept(QtPrivate::SwapExceptionTester::checkSwap(value1)))
{
    using std::swap;
    swap(value1, value2);
}

__pragma(warning(pop))







#line 979 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
__declspec(dllimport) void *qMallocAligned(size_t size, size_t alignment) ;
__declspec(dllimport) void *qReallocAligned(void *ptr, size_t size, size_t oldsize, size_t alignment) ;
__declspec(dllimport) void qFreeAligned(void *ptr);









#line 992 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


__pragma(warning(disable: 4251)) 
__pragma(warning(disable: 4244)) 
__pragma(warning(disable: 4275)) 
__pragma(warning(disable: 4514)) 
__pragma(warning(disable: 4800)) 
__pragma(warning(disable: 4097)) 
__pragma(warning(disable: 4706)) 
__pragma(warning(disable: 4355)) 
__pragma(warning(disable: 4710)) 
__pragma(warning(disable: 4530)) 








#line 1013 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1014 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"















#line 1030 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
template <typename ForwardIterator1, typename ForwardIterator2>
inline bool qt_is_permutation(ForwardIterator1 first1, ForwardIterator1 last1,
                              ForwardIterator2 first2, ForwardIterator2 last2)
{
    return std::is_permutation(first1, last1, first2, last2);
}



template <typename T>
constexpr typename std::add_const<T>::type &qAsConst(T &t) noexcept { return t; }

template <typename T>
void qAsConst(const T &&) = delete;


template <typename T, typename U = T>
constexpr T qExchange(T &t, U &&newValue)
{
    T old = std::move(t);
    t = std::forward<U>(newValue);
    return old;
}



namespace QtPrivate {

template <typename T>
class QForeachContainer {
    QForeachContainer(const QForeachContainer &) = delete; QForeachContainer &operator=(const QForeachContainer &) = delete;
public:
    QForeachContainer(const T &t) : c(t), i(qAsConst(c).begin()), e(qAsConst(c).end()) {}
    QForeachContainer(T &&t) : c(std::move(t)), i(qAsConst(c).begin()), e(qAsConst(c).end())  {}

    QForeachContainer(QForeachContainer &&other)
        : c(std::move(other.c)),
          i(qAsConst(c).begin()),
          e(qAsConst(c).end()),
          control(std::move(other.control))
    {
    }

    QForeachContainer &operator=(QForeachContainer &&other)
    {
        c = std::move(other.c);
        i = qAsConst(c).begin();
        e = qAsConst(c).end();
        control = std::move(other.control);
        return *this;
    }

    T c;
    typename T::const_iterator i, e;
    int control = 1;
};

template<typename T>
QForeachContainer<typename std::decay<T>::type> qMakeForeachContainer(T &&t)
{
    return QForeachContainer<typename std::decay<T>::type>(std::forward<T>(t));
}

}























#line 1118 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1119 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






#line 1126 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1127 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


#line 1130 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1131 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

template <typename T> inline T *qGetPtrHelper(T *ptr) { return ptr; }
template <typename Ptr> inline auto qGetPtrHelper(Ptr &ptr) -> decltype(ptr.operator->()) { return ptr.operator->(); }









































__declspec(dllimport) QString qtTrId(const char *id, int n = -1);



#line 1180 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"












#line 1193 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"














template <typename... Args>
struct QNonConstOverload
{
    template <typename R, typename T>
    constexpr auto operator()(R (T::*ptr)(Args...)) const noexcept -> decltype(ptr)
    { return ptr; }

    template <typename R, typename T>
    static constexpr auto of(R (T::*ptr)(Args...)) noexcept -> decltype(ptr)
    { return ptr; }
};

template <typename... Args>
struct QConstOverload
{
    template <typename R, typename T>
    constexpr auto operator()(R (T::*ptr)(Args...) const) const noexcept -> decltype(ptr)
    { return ptr; }

    template <typename R, typename T>
    static constexpr auto of(R (T::*ptr)(Args...) const) noexcept -> decltype(ptr)
    { return ptr; }
};

template <typename... Args>
struct QOverload : QConstOverload<Args...>, QNonConstOverload<Args...>
{
    using QConstOverload<Args...>::of;
    using QConstOverload<Args...>::operator();
    using QNonConstOverload<Args...>::of;
    using QNonConstOverload<Args...>::operator();

    template <typename R>
    constexpr auto operator()(R (*ptr)(Args...)) const noexcept -> decltype(ptr)
    { return ptr; }

    template <typename R>
    static constexpr auto of(R (*ptr)(Args...)) noexcept -> decltype(ptr)
    { return ptr; }
};


template <typename... Args> constexpr  QOverload<Args...> qOverload = {};
template <typename... Args> constexpr  QConstOverload<Args...> qConstOverload = {};
template <typename... Args> constexpr  QNonConstOverload<Args...> qNonConstOverload = {};
#line 1253 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1255 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"


class QByteArray;
__declspec(dllimport) QByteArray qgetenv(const char *varName);

__declspec(dllimport) QString qEnvironmentVariable(const char *varName);
__declspec(dllimport) QString qEnvironmentVariable(const char *varName, const QString &defaultValue);
__declspec(dllimport) bool qputenv(const char *varName, const QByteArray& value);
__declspec(dllimport) bool qunsetenv(const char *varName);

__declspec(dllimport) bool qEnvironmentVariableIsEmpty(const char *varName) noexcept;
__declspec(dllimport) bool qEnvironmentVariableIsSet(const char *varName) noexcept;
__declspec(dllimport) int  qEnvironmentVariableIntValue(const char *varName, bool *ok=nullptr) noexcept;

inline int qIntCast(double f) { return int(f); }
inline int qIntCast(float f) { return int(f); }




__declspec(dllimport) void qsrand(uint seed);
__declspec(dllimport) int qrand();






#line 1285 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

namespace QtPrivate {

template <bool B, typename T = void> struct QEnableIf;
template <typename T> struct QEnableIf<true, T> { typedef T Type; };
}





#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"










template <typename T>
static constexpr bool qIsRelocatable()
{

    return std::is_trivially_copyable<T>::value && std::is_trivially_destructible<T>::value;


#line 60 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"
}

template <typename T>
static constexpr bool qIsTrivial()
{

    return std::is_trivial<T>::value;


#line 70 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"
}





template <typename T>
class QTypeInfo
{
public:
    enum {
        isSpecialized = std::is_enum<T>::value, 
        isPointer = false,
        isIntegral = std::is_integral<T>::value,
        isComplex = !qIsTrivial<T>(),
        isStatic = true,
        isRelocatable = qIsRelocatable<T>(),
        isLarge = (sizeof(T)>sizeof(void*)),
        isDummy = false, 
        sizeOf = sizeof(T)
    };
};

template<>
class QTypeInfo<void>
{
public:
    enum {
        isSpecialized = true,
        isPointer = false,
        isIntegral = false,
        isComplex = false,
        isStatic = false,
        isRelocatable = false,
        isLarge = false,
        isDummy = false,
        sizeOf = 0
    };
};

template <typename T>
class QTypeInfo<T*>
{
public:
    enum {
        isSpecialized = true,
        isPointer = true,
        isIntegral = false,
        isComplex = false,
        isStatic = false,
        isRelocatable = true,
        isLarge = false,
        isDummy = false,
        sizeOf = sizeof(T*)
    };
};
















template <typename T, typename = void>
struct QTypeInfoQuery : public QTypeInfo<T>
{
    enum { isRelocatable = !QTypeInfo<T>::isStatic };
};


template <typename T>
struct QTypeInfoQuery<T, typename std::enable_if<QTypeInfo<T>::isRelocatable || true>::type> : public QTypeInfo<T>
{};





















template <class T, class T1, class T2 = T1, class T3 = T1, class T4 = T1>
class QTypeInfoMerger
{
public:
    enum {
        isSpecialized = true,
        isComplex = QTypeInfoQuery<T1>::isComplex || QTypeInfoQuery<T2>::isComplex
                    || QTypeInfoQuery<T3>::isComplex || QTypeInfoQuery<T4>::isComplex,
        isStatic = QTypeInfoQuery<T1>::isStatic || QTypeInfoQuery<T2>::isStatic
                    || QTypeInfoQuery<T3>::isStatic || QTypeInfoQuery<T4>::isStatic,
        isRelocatable = QTypeInfoQuery<T1>::isRelocatable && QTypeInfoQuery<T2>::isRelocatable
                    && QTypeInfoQuery<T3>::isRelocatable && QTypeInfoQuery<T4>::isRelocatable,
        isLarge = sizeof(T) > sizeof(void*),
        isPointer = false,
        isIntegral = false,
        isDummy = false,
        sizeOf = sizeof(T)
    };
};




















template <typename T> class QList; template <typename T> class QTypeInfo< QList<T> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isRelocatable = true, isStatic = false, isLarge = (sizeof(QList<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QList<T>) }; };
template <typename T> class QVector; template <typename T> class QTypeInfo< QVector<T> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isRelocatable = true, isStatic = false, isLarge = (sizeof(QVector<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QVector<T>) }; };
template <typename T> class QQueue; template <typename T> class QTypeInfo< QQueue<T> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isRelocatable = true, isStatic = false, isLarge = (sizeof(QQueue<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QQueue<T>) }; };
template <typename T> class QStack; template <typename T> class QTypeInfo< QStack<T> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isRelocatable = true, isStatic = false, isLarge = (sizeof(QStack<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QStack<T>) }; };
template <typename T> class QSet; template <typename T> class QTypeInfo< QSet<T> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isRelocatable = true, isStatic = false, isLarge = (sizeof(QSet<T>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QSet<T>) }; };























template <typename K, typename V> class QMap; template <typename K, typename V> class QTypeInfo< QMap<K, V> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isStatic = (((5<<16)|(14<<8)|(2)) < ((6<<16)|(0<<8)|(0))), isRelocatable = true, isLarge = (sizeof(QMap<K, V>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QMap<K, V>) }; };
template <typename K, typename V> class QMultiMap; template <typename K, typename V> class QTypeInfo< QMultiMap<K, V> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isStatic = (((5<<16)|(14<<8)|(2)) < ((6<<16)|(0<<8)|(0))), isRelocatable = true, isLarge = (sizeof(QMultiMap<K, V>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QMultiMap<K, V>) }; };
template <typename K, typename V> class QHash; template <typename K, typename V> class QTypeInfo< QHash<K, V> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isStatic = (((5<<16)|(14<<8)|(2)) < ((6<<16)|(0<<8)|(0))), isRelocatable = true, isLarge = (sizeof(QHash<K, V>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QHash<K, V>) }; };
template <typename K, typename V> class QMultiHash; template <typename K, typename V> class QTypeInfo< QMultiHash<K, V> > { public: enum { isSpecialized = true, isPointer = false, isIntegral = false, isComplex = true, isStatic = (((5<<16)|(14<<8)|(2)) < ((6<<16)|(0<<8)|(0))), isRelocatable = true, isLarge = (sizeof(QMultiHash<K, V>) > sizeof(void*)), isDummy = false, sizeOf = sizeof(QMultiHash<K, V>) }; };











enum { 
    Q_COMPLEX_TYPE = 0,
    Q_PRIMITIVE_TYPE = 0x1,
    Q_STATIC_TYPE = 0,
    Q_MOVABLE_TYPE = 0x2,               
    Q_DUMMY_TYPE = 0x4,
    Q_RELOCATABLE_TYPE = 0x8
};
























template<typename T> class QFlags;
template<typename T>
class QTypeInfo<QFlags<T> > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QFlags<T>>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QFlags<T>>(), isLarge = (sizeof(QFlags<T>)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QFlags<T> >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFlags<T>) }; static inline const char *name() { return "QFlags<T>"; } };





























template<> class QTypeInfo<bool > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<bool>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<bool>(), isLarge = (sizeof(bool)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< bool >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(bool) }; static inline const char *name() { return "bool"; } };
template<> class QTypeInfo<char > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<char>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<char>(), isLarge = (sizeof(char)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< char >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(char) }; static inline const char *name() { return "char"; } };
template<> class QTypeInfo<signed char > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<signed char>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<signed char>(), isLarge = (sizeof(signed char)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< signed char >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(signed char) }; static inline const char *name() { return "signed char"; } };
template<> class QTypeInfo<uchar > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<uchar>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<uchar>(), isLarge = (sizeof(uchar)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< uchar >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(uchar) }; static inline const char *name() { return "uchar"; } };
template<> class QTypeInfo<short > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<short>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<short>(), isLarge = (sizeof(short)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< short >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(short) }; static inline const char *name() { return "short"; } };
template<> class QTypeInfo<ushort > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<ushort>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<ushort>(), isLarge = (sizeof(ushort)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< ushort >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(ushort) }; static inline const char *name() { return "ushort"; } };
template<> class QTypeInfo<int > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<int>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<int>(), isLarge = (sizeof(int)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< int >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(int) }; static inline const char *name() { return "int"; } };
template<> class QTypeInfo<uint > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<uint>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<uint>(), isLarge = (sizeof(uint)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< uint >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(uint) }; static inline const char *name() { return "uint"; } };
template<> class QTypeInfo<long > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<long>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<long>(), isLarge = (sizeof(long)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< long >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(long) }; static inline const char *name() { return "long"; } };
template<> class QTypeInfo<ulong > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<ulong>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<ulong>(), isLarge = (sizeof(ulong)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< ulong >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(ulong) }; static inline const char *name() { return "ulong"; } };
template<> class QTypeInfo<qint64 > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<qint64>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<qint64>(), isLarge = (sizeof(qint64)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< qint64 >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(qint64) }; static inline const char *name() { return "qint64"; } };
template<> class QTypeInfo<quint64 > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<quint64>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<quint64>(), isLarge = (sizeof(quint64)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< quint64 >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(quint64) }; static inline const char *name() { return "quint64"; } };
template<> class QTypeInfo<float > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<float>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<float>(), isLarge = (sizeof(float)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< float >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(float) }; static inline const char *name() { return "float"; } };
template<> class QTypeInfo<double > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<double>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<double>(), isLarge = (sizeof(double)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< double >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(double) }; static inline const char *name() { return "double"; } };












#line 346 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"

template<> class QTypeInfo<long double > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<long double>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<long double>(), isLarge = (sizeof(long double)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< long double >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(long double) }; static inline const char *name() { return "long double"; } };


#line 351 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"

template<> class QTypeInfo<char16_t > { public: enum { isSpecialized = true, isComplex = (((Q_RELOCATABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<char16_t>(), isStatic = (((Q_RELOCATABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_RELOCATABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<char16_t>(), isLarge = (sizeof(char16_t)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< char16_t >::value, isDummy = (((Q_RELOCATABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(char16_t) }; static inline const char *name() { return "char16_t"; } };
template<> class QTypeInfo<char32_t > { public: enum { isSpecialized = true, isComplex = (((Q_RELOCATABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<char32_t>(), isStatic = (((Q_RELOCATABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_RELOCATABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<char32_t>(), isLarge = (sizeof(char32_t)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< char32_t >::value, isDummy = (((Q_RELOCATABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(char32_t) }; static inline const char *name() { return "char32_t"; } };
#line 355 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"

template<> class QTypeInfo<wchar_t > { public: enum { isSpecialized = true, isComplex = (((Q_RELOCATABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<wchar_t>(), isStatic = (((Q_RELOCATABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_RELOCATABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<wchar_t>(), isLarge = (sizeof(wchar_t)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< wchar_t >::value, isDummy = (((Q_RELOCATABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(wchar_t) }; static inline const char *name() { return "wchar_t"; } };
#line 358 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"
#line 359 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"


#line 362 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"
#line 1297 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"

























#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"

class QString;
class __declspec(dllimport) QSysInfo {
public:
    enum Sizes {
        WordSize = (sizeof(void *)<<3)
    };








#line 84 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
    enum Endian {
        BigEndian,
        LittleEndian





#line 93 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
        , ByteOrder = LittleEndian


#line 97 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
    };
#line 99 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"

    enum __declspec(deprecated("Use QOperatingSystemVersion")) WinVersion {
        WV_None     = 0x0000,

        WV_32s      = 0x0001,
        WV_95       = 0x0002,
        WV_98       = 0x0003,
        WV_Me       = 0x0004,
        WV_DOS_based= 0x000f,

        
        WV_NT       = 0x0010,
        WV_2000     = 0x0020,
        WV_XP       = 0x0030,
        WV_2003     = 0x0040,
        WV_VISTA    = 0x0080,
        WV_WINDOWS7 = 0x0090,
        WV_WINDOWS8 = 0x00a0,
        WV_WINDOWS8_1 = 0x00b0,
        WV_WINDOWS10 = 0x00c0,
        WV_NT_based = 0x00f0,

        
        WV_4_0      = WV_NT,
        WV_5_0      = WV_2000,
        WV_5_1      = WV_XP,
        WV_5_2      = WV_2003,
        WV_6_0      = WV_VISTA,
        WV_6_1      = WV_WINDOWS7,
        WV_6_2      = WV_WINDOWS8,
        WV_6_3      = WV_WINDOWS8_1,
        WV_10_0     = WV_WINDOWS10,

        WV_CE       = 0x0100,
        WV_CENET    = 0x0200,
        WV_CE_5     = 0x0300,
        WV_CE_6     = 0x0400,
        WV_CE_based = 0x0f00
    };





    enum __declspec(deprecated("Use QOperatingSystemVersion")) MacVersion {
        MV_None    = 0xffff,
        MV_Unknown = 0x0000,

        
        MV_9 = (9 == 10 ? 0 + 2 : (9 == 9 ? 1 : 0)),
        MV_10_0 = (10 == 10 ? 0 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_1 = (10 == 10 ? 1 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_2 = (10 == 10 ? 2 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_3 = (10 == 10 ? 3 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_4 = (10 == 10 ? 4 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_5 = (10 == 10 ? 5 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_6 = (10 == 10 ? 6 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_7 = (10 == 10 ? 7 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_8 = (10 == 10 ? 8 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_9 = (10 == 10 ? 9 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_10 = (10 == 10 ? 10 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_11 = (10 == 10 ? 11 + 2 : (10 == 9 ? 1 : 0)),
        MV_10_12 = (10 == 10 ? 12 + 2 : (10 == 9 ? 1 : 0)),

        
        MV_CHEETAH = MV_10_0,
        MV_PUMA = MV_10_1,
        MV_JAGUAR = MV_10_2,
        MV_PANTHER = MV_10_3,
        MV_TIGER = MV_10_4,
        MV_LEOPARD = MV_10_5,
        MV_SNOWLEOPARD = MV_10_6,
        MV_LION = MV_10_7,
        MV_MOUNTAINLION = MV_10_8,
        MV_MAVERICKS = MV_10_9,
        MV_YOSEMITE = MV_10_10,
        MV_ELCAPITAN = MV_10_11,
        MV_SIERRA = MV_10_12,

        
        MV_IOS     = 1 << 8,
        MV_IOS_4_3 = (QSysInfo::MV_IOS | 4 << 4 | 3),
        MV_IOS_5_0 = (QSysInfo::MV_IOS | 5 << 4 | 0),
        MV_IOS_5_1 = (QSysInfo::MV_IOS | 5 << 4 | 1),
        MV_IOS_6_0 = (QSysInfo::MV_IOS | 6 << 4 | 0),
        MV_IOS_6_1 = (QSysInfo::MV_IOS | 6 << 4 | 1),
        MV_IOS_7_0 = (QSysInfo::MV_IOS | 7 << 4 | 0),
        MV_IOS_7_1 = (QSysInfo::MV_IOS | 7 << 4 | 1),
        MV_IOS_8_0 = (QSysInfo::MV_IOS | 8 << 4 | 0),
        MV_IOS_8_1 = (QSysInfo::MV_IOS | 8 << 4 | 1),
        MV_IOS_8_2 = (QSysInfo::MV_IOS | 8 << 4 | 2),
        MV_IOS_8_3 = (QSysInfo::MV_IOS | 8 << 4 | 3),
        MV_IOS_8_4 = (QSysInfo::MV_IOS | 8 << 4 | 4),
        MV_IOS_9_0 = (QSysInfo::MV_IOS | 9 << 4 | 0),
        MV_IOS_9_1 = (QSysInfo::MV_IOS | 9 << 4 | 1),
        MV_IOS_9_2 = (QSysInfo::MV_IOS | 9 << 4 | 2),
        MV_IOS_9_3 = (QSysInfo::MV_IOS | 9 << 4 | 3),
        MV_IOS_10_0 = (QSysInfo::MV_IOS | 10 << 4 | 0),

        
        MV_TVOS     = 1 << 9,
        MV_TVOS_9_0 = (QSysInfo::MV_TVOS | 9 << 4 | 0),
        MV_TVOS_9_1 = (QSysInfo::MV_TVOS | 9 << 4 | 1),
        MV_TVOS_9_2 = (QSysInfo::MV_TVOS | 9 << 4 | 2),
        MV_TVOS_10_0 = (QSysInfo::MV_TVOS | 10 << 4 | 0),

        
        MV_WATCHOS     = 1 << 10,
        MV_WATCHOS_2_0 = (QSysInfo::MV_WATCHOS | 2 << 4 | 0),
        MV_WATCHOS_2_1 = (QSysInfo::MV_WATCHOS | 2 << 4 | 1),
        MV_WATCHOS_2_2 = (QSysInfo::MV_WATCHOS | 2 << 4 | 2),
        MV_WATCHOS_3_0 = (QSysInfo::MV_WATCHOS | 3 << 4 | 0)
    };

__pragma(warning(push))
__pragma(warning(disable: 4996))

    __declspec(deprecated("Use QOperatingSystemVersion::current()")) static const WinVersion WindowsVersion;
    __declspec(deprecated("Use QOperatingSystemVersion::current()")) static WinVersion windowsVersion();



#line 222 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"



#line 226 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
    __declspec(deprecated("Use QOperatingSystemVersion::current()")) static const MacVersion MacintoshVersion = MV_None;
    __declspec(deprecated("Use QOperatingSystemVersion::current()")) static MacVersion macVersion() { return MV_None; }
#line 229 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
__pragma(warning(pop))
#line 231 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"

    static QString buildCpuArchitecture();
    static QString currentCpuArchitecture();
    static QString buildAbi();

    static QString kernelType();
    static QString kernelVersion();
    static QString productType();
    static QString productVersion();
    static QString prettyProductName();

    static QString machineHostName();
    static QByteArray machineUniqueId();
    static QByteArray bootUniqueId();
};




#line 251 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsysinfo.h"
#line 1298 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"







































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 41 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"







#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"








class QDebug;
class QNoDebug;

enum QtMsgType { QtDebugMsg, QtWarningMsg, QtCriticalMsg, QtFatalMsg, QtInfoMsg, QtSystemMsg = QtCriticalMsg };

class QMessageLogContext
{
    QMessageLogContext(const QMessageLogContext &) = delete; QMessageLogContext &operator=(const QMessageLogContext &) = delete;
public:
    constexpr QMessageLogContext() noexcept = default;
    constexpr QMessageLogContext(const char *fileName, int lineNumber, const char *functionName, const char *categoryName) noexcept
        : line(lineNumber), file(fileName), function(functionName), category(categoryName) {}

    int version = 2;
    int line = 0;
    const char *file = nullptr;
    const char *function = nullptr;
    const char *category = nullptr;

private:
    QMessageLogContext &copyContextFrom(const QMessageLogContext &logContext) noexcept;

    friend class QMessageLogger;
    friend class QDebug;
};

class QLoggingCategory;

class __declspec(dllimport) QMessageLogger
{
    QMessageLogger(const QMessageLogger &) = delete; QMessageLogger &operator=(const QMessageLogger &) = delete;
public:
    constexpr QMessageLogger() : context() {}
    constexpr QMessageLogger(const char *file, int line, const char *function)
        : context(file, line, function, "default") {}
    constexpr QMessageLogger(const char *file, int line, const char *function, const char *category)
        : context(file, line, function, category) {}

    void debug(const char *msg, ...) const ;
    void noDebug(const char *, ...) const 
    {}
    void info(const char *msg, ...) const ;
    
    void warning(const char *msg, ...) const ;
    
    void critical(const char *msg, ...) const ;

    typedef const QLoggingCategory &(*CategoryFunction)();

    void debug(const QLoggingCategory &cat, const char *msg, ...) const ;
    void debug(CategoryFunction catFunc, const char *msg, ...) const ;
    void info(const QLoggingCategory &cat, const char *msg, ...) const ;
    void info(CategoryFunction catFunc, const char *msg, ...) const ;
    
    void warning(const QLoggingCategory &cat, const char *msg, ...) const ;
    
    void warning(CategoryFunction catFunc, const char *msg, ...) const ;
    
    void critical(const QLoggingCategory &cat, const char *msg, ...) const ;
    
    void critical(CategoryFunction catFunc, const char *msg, ...) const ;




    
    void fatal(const char *msg, ...) const noexcept ;


    QDebug debug() const;
    QDebug debug(const QLoggingCategory &cat) const;
    QDebug debug(CategoryFunction catFunc) const;
    QDebug info() const;
    QDebug info(const QLoggingCategory &cat) const;
    QDebug info(CategoryFunction catFunc) const;
    QDebug warning() const;
    QDebug warning(const QLoggingCategory &cat) const;
    QDebug warning(CategoryFunction catFunc) const;
    QDebug critical() const;
    QDebug critical(const QLoggingCategory &cat) const;
    QDebug critical(CategoryFunction catFunc) const;

    QNoDebug noDebug() const noexcept;
#line 141 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"

private:
    QMessageLogContext context;
};






#line 152 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"
#line 153 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"






  
  
  
#line 163 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"












#line 176 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"



#line 180 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"



#line 184 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"

__declspec(dllimport) void qt_message_output(QtMsgType, const QMessageLogContext &context,
                                     const QString &message);

__declspec(dllimport)  void qErrnoWarning(int code, const char *msg, ...);
__declspec(dllimport)  void qErrnoWarning(const char *msg, ...);




#line 195 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"

typedef void (*QtMessageHandler)(QtMsgType, const QMessageLogContext &, const QString &);
__declspec(dllimport) QtMessageHandler qInstallMessageHandler(QtMessageHandler);

__declspec(dllimport) void qSetMessagePattern(const QString &messagePattern);
__declspec(dllimport) QString qFormatLogMessage(QtMsgType type, const QMessageLogContext &context,
                                        const QString &buf);


#line 205 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlogging.h"
#line 1299 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"







































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 41 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"








class QDataStream;

class QFlag
{
    int i;
public:
    constexpr inline QFlag(int value) noexcept : i(value) {}
    constexpr inline operator int() const noexcept { return i; }













#line 71 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"
};
template<> class QTypeInfo<QFlag > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QFlag>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QFlag>(), isLarge = (sizeof(QFlag)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QFlag >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QFlag) }; static inline const char *name() { return "QFlag"; } };

class QIncompatibleFlag
{
    int i;
public:
    constexpr inline explicit QIncompatibleFlag(int i) noexcept;
    constexpr inline operator int() const noexcept { return i; }
};
template<> class QTypeInfo<QIncompatibleFlag > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QIncompatibleFlag>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QIncompatibleFlag>(), isLarge = (sizeof(QIncompatibleFlag)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QIncompatibleFlag >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QIncompatibleFlag) }; static inline const char *name() { return "QIncompatibleFlag"; } };

constexpr inline QIncompatibleFlag::QIncompatibleFlag(int value) noexcept : i(value) {}




template<typename Enum>
class QFlags
{
    static_assert(bool((sizeof(Enum) <= sizeof(int))), "QFlags uses an int as storage, so an enum with underlying " "long long will overflow.");
#line 94 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"
    static_assert(bool((std::is_enum<Enum>::value)), "QFlags is only usable on enumeration types.");

    struct Private;
    typedef int (Private::*Zero);
    template <typename E> friend QDataStream &operator>>(QDataStream &, QFlags<E> &);
    template <typename E> friend QDataStream &operator<<(QDataStream &, QFlags<E>);
public:

    
    
    typedef int Int;






#line 112 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"
    typedef Enum enum_type;
    




    constexpr inline QFlags(Enum flags) noexcept : i(Int(flags)) {}
    constexpr inline QFlags(Zero = nullptr) noexcept : i(0) {}
    constexpr inline QFlags(QFlag flag) noexcept : i(flag) {}

    constexpr inline QFlags(std::initializer_list<Enum> flags) noexcept
        : i(initializer_list_helper(flags.begin(), flags.end())) {}

    constexpr inline QFlags &operator&=(int mask) noexcept { i &= mask; return *this; }
    constexpr inline QFlags &operator&=(uint mask) noexcept { i &= mask; return *this; }
    constexpr inline QFlags &operator&=(Enum mask) noexcept { i &= Int(mask); return *this; }
    constexpr inline QFlags &operator|=(QFlags other) noexcept { i |= other.i; return *this; }
    constexpr inline QFlags &operator|=(Enum other) noexcept { i |= Int(other); return *this; }
    constexpr inline QFlags &operator^=(QFlags other) noexcept { i ^= other.i; return *this; }
    constexpr inline QFlags &operator^=(Enum other) noexcept { i ^= Int(other); return *this; }

    constexpr inline operator Int() const noexcept { return i; }

    constexpr inline QFlags operator|(QFlags other) const noexcept { return QFlags(QFlag(i | other.i)); }
    constexpr inline QFlags operator|(Enum other) const noexcept { return QFlags(QFlag(i | Int(other))); }
    constexpr inline QFlags operator^(QFlags other) const noexcept { return QFlags(QFlag(i ^ other.i)); }
    constexpr inline QFlags operator^(Enum other) const noexcept { return QFlags(QFlag(i ^ Int(other))); }
    constexpr inline QFlags operator&(int mask) const noexcept { return QFlags(QFlag(i & mask)); }
    constexpr inline QFlags operator&(uint mask) const noexcept { return QFlags(QFlag(i & mask)); }
    constexpr inline QFlags operator&(Enum other) const noexcept { return QFlags(QFlag(i & Int(other))); }
    constexpr inline QFlags operator~() const noexcept { return QFlags(QFlag(~i)); }

    constexpr inline bool operator!() const noexcept { return !i; }

    constexpr inline bool testFlag(Enum flag) const noexcept { return (i & Int(flag)) == Int(flag) && (Int(flag) != 0 || i == Int(flag) ); }
    constexpr inline QFlags &setFlag(Enum flag, bool on = true) noexcept
    {
        return on ? (*this |= flag) : (*this &= ~Int(flag));
    }

private:
    constexpr static inline Int initializer_list_helper(typename std::initializer_list<Enum>::const_iterator it,
                                                               typename std::initializer_list<Enum>::const_iterator end)
    noexcept
    {
        return (it == end ? Int(0) : (Int(*it) | initializer_list_helper(it + 1, end)));
    }

    Int i;
};




#line 167 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"





















#line 189 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"



#line 193 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qflags.h"
#line 1301 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"




#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"










#line 53 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtypeinfo.h"
































































































































































































































































































































#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"








#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"

template<int> struct QAtomicOpsSupport { enum { IsSupported = 0 }; };
template<> struct QAtomicOpsSupport<4> { enum { IsSupported = 1 }; };

template <typename T> struct QAtomicAdditiveType
{
    typedef T AdditiveT;
    static const int AddScale = 1;
};
template <typename T> struct QAtomicAdditiveType<T *>
{
    typedef qptrdiff AdditiveT;
    static const int AddScale = sizeof(T);
};


template <typename BaseClass> struct QGenericAtomicOps
{
    template <typename T> struct AtomicType { typedef T Type; typedef T *PointerType; };

    template <typename T> static void acquireMemoryFence(const T &_q_value) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
    }
    template <typename T> static void releaseMemoryFence(const T &_q_value) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
    }
    template <typename T> static void orderedMemoryFence(const T &) noexcept
    {
    }

    template <typename T> static __forceinline
    T load(const T &_q_value) noexcept
    {
        return _q_value;
    }

    template <typename T, typename X> static __forceinline
    void store(T &_q_value, X newValue) noexcept
    {
        _q_value = newValue;
    }

    template <typename T> static __forceinline
    T loadRelaxed(const T &_q_value) noexcept
    {
        return _q_value;
    }

    template <typename T, typename X> static __forceinline
    void storeRelaxed(T &_q_value, X newValue) noexcept
    {
        _q_value = newValue;
    }

    template <typename T> static __forceinline
    T loadAcquire(const T &_q_value) noexcept
    {
        T tmp = *static_cast<const volatile T *>(&_q_value);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T, typename X> static __forceinline
    void storeRelease(T &_q_value, X newValue) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        *static_cast<volatile T *>(&_q_value) = newValue;
    }

    static inline constexpr bool isReferenceCountingNative() noexcept
    { return BaseClass::isFetchAndAddNative(); }
    static inline constexpr bool isReferenceCountingWaitFree() noexcept
    { return BaseClass::isFetchAndAddWaitFree(); }
    template <typename T> static __forceinline
    bool ref(T &_q_value) noexcept
    {
        return BaseClass::fetchAndAddRelaxed(_q_value, 1) != T(-1);
    }

    template <typename T> static __forceinline
    bool deref(T &_q_value) noexcept
    {
         return BaseClass::fetchAndAddRelaxed(_q_value, -1) != 1;
    }










#line 152 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"

    template <typename T, typename X> static __forceinline
    bool testAndSetAcquire(T &_q_value, X expectedValue, X newValue) noexcept
    {
        bool tmp = BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T, typename X> static __forceinline
    bool testAndSetRelease(T &_q_value, X expectedValue, X newValue) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
    }

    template <typename T, typename X> static __forceinline
    bool testAndSetOrdered(T &_q_value, X expectedValue, X newValue) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue);
    }

    template <typename T, typename X> static __forceinline
    bool testAndSetAcquire(T &_q_value, X expectedValue, X newValue, X *currentValue) noexcept
    {
        bool tmp = BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue, currentValue);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T, typename X> static __forceinline
    bool testAndSetRelease(T &_q_value, X expectedValue, X newValue, X *currentValue) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue, currentValue);
    }

    template <typename T, typename X> static __forceinline
    bool testAndSetOrdered(T &_q_value, X expectedValue, X newValue, X *currentValue) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::testAndSetRelaxed(_q_value, expectedValue, newValue, currentValue);
    }

    static inline constexpr bool isFetchAndStoreNative() noexcept { return false; }
    static inline constexpr bool isFetchAndStoreWaitFree() noexcept { return false; }

    template <typename T, typename X> static __forceinline
    T fetchAndStoreRelaxed(T &_q_value, X newValue) noexcept
    {
        
        for(;;) {
            T tmp = loadRelaxed(_q_value);
            if (BaseClass::testAndSetRelaxed(_q_value, tmp, newValue))
                return tmp;
        }
    }

    template <typename T, typename X> static __forceinline
    T fetchAndStoreAcquire(T &_q_value, X newValue) noexcept
    {
        T tmp = BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T, typename X> static __forceinline
    T fetchAndStoreRelease(T &_q_value, X newValue) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
    }

    template <typename T, typename X> static __forceinline
    T fetchAndStoreOrdered(T &_q_value, X newValue) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndStoreRelaxed(_q_value, newValue);
    }

    static inline constexpr bool isFetchAndAddNative() noexcept { return false; }
    static inline constexpr bool isFetchAndAddWaitFree() noexcept { return false; }
    template <typename T> static __forceinline
    T fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        
        for(;;) {
            T tmp = BaseClass::loadRelaxed(_q_value);
            if (BaseClass::testAndSetRelaxed(_q_value, tmp, T(tmp + valueToAdd)))
                return tmp;
        }
    }

    template <typename T> static __forceinline
    T fetchAndAddAcquire(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        T tmp = BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T> static __forceinline
    T fetchAndAddRelease(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
    }

    template <typename T> static __forceinline
    T fetchAndAddOrdered(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndAddRelaxed(_q_value, valueToAdd);
    }

__pragma(warning(push))
__pragma(warning(disable: 4146))   
    template <typename T> static __forceinline
    T fetchAndSubRelaxed(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT operand) noexcept
    {
        
        return fetchAndAddRelaxed(_q_value, -operand);
    }
__pragma(warning(pop))

    template <typename T> static __forceinline
    T fetchAndSubAcquire(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT operand) noexcept
    {
        T tmp = BaseClass::fetchAndSubRelaxed(_q_value, operand);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T> static __forceinline
    T fetchAndSubRelease(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT operand) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndSubRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndSubOrdered(T &_q_value, typename QAtomicAdditiveType<T>::AdditiveT operand) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndSubRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndAndRelaxed(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        
        T tmp = BaseClass::loadRelaxed(_q_value);
        for(;;) {
            if (BaseClass::testAndSetRelaxed(_q_value, tmp, T(tmp & operand), &tmp))
                return tmp;
        }
    }

    template <typename T> static __forceinline
    T fetchAndAndAcquire(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        T tmp = BaseClass::fetchAndAndRelaxed(_q_value, operand);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T> static __forceinline
    T fetchAndAndRelease(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndAndRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndAndOrdered(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndAndRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndOrRelaxed(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        
        T tmp = BaseClass::loadRelaxed(_q_value);
        for(;;) {
            if (BaseClass::testAndSetRelaxed(_q_value, tmp, T(tmp | operand), &tmp))
                return tmp;
        }
    }

    template <typename T> static __forceinline
    T fetchAndOrAcquire(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        T tmp = BaseClass::fetchAndOrRelaxed(_q_value, operand);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T> static __forceinline
    T fetchAndOrRelease(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndOrRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndOrOrdered(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndOrRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndXorRelaxed(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        
        T tmp = BaseClass::loadRelaxed(_q_value);
        for(;;) {
            if (BaseClass::testAndSetRelaxed(_q_value, tmp, T(tmp ^ operand), &tmp))
                return tmp;
        }
    }

    template <typename T> static __forceinline
    T fetchAndXorAcquire(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        T tmp = BaseClass::fetchAndXorRelaxed(_q_value, operand);
        BaseClass::acquireMemoryFence(_q_value);
        return tmp;
    }

    template <typename T> static __forceinline
    T fetchAndXorRelease(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::releaseMemoryFence(_q_value);
        return BaseClass::fetchAndXorRelaxed(_q_value, operand);
    }

    template <typename T> static __forceinline
    T fetchAndXorOrdered(T &_q_value, typename std::enable_if<QTypeInfo<T>::isIntegral, T>::type operand) noexcept
    {
        BaseClass::orderedMemoryFence(_q_value);
        return BaseClass::fetchAndXorRelaxed(_q_value, operand);
    }
};


#line 402 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qgenericatomic.h"
#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"

#pragma once





 



 






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

#pragma once











 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 #pragma warning(disable: 4793)	

  

  

#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

  

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

 
 




#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
  
  
  
  
 #line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

 






















































































#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

namespace std {
		
typedef unsigned char _Uint1_t;
typedef unsigned short _Uint2_t;

typedef unsigned long long _Uint8_t;

		
typedef long _Atomic_flag_t;

  
   


    
   #line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
  #line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

		
inline void _Check_memory_order(const memory_order _Order)
	{	
	if (static_cast<unsigned int>(_Order) > memory_order_seq_cst)
		{
		static_cast<void>(0);
		}
	}

		
inline void _Check_load_memory_order(const memory_order _Order)
	{
	switch (_Order)
		{
		case memory_order_relaxed:
		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_seq_cst:
			
			break;

		case memory_order_release:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

inline memory_order _Memory_order_upper_bound(const memory_order _Success, const memory_order _Failure)
	{   














	static constexpr memory_order _Upper[6][6] = {	
		{ memory_order_relaxed, memory_order_consume, memory_order_acquire,
		memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_consume, memory_order_consume, memory_order_acquire,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_acquire, memory_order_acquire, memory_order_acquire,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_release, memory_order_acq_rel, memory_order_acq_rel,
		memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst,
		memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst
		}
		};

	_Check_memory_order(_Success);
	_Check_load_memory_order(_Failure);
	return (_Upper[_Success][_Failure]);
	}


	
inline void _Store_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

 


#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

 



#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


 




#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_InterlockedExchange8((volatile char *)_Tgt, static_cast<char>(_Value));
 #line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Atomic_store_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_1(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_1(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_1(_Tgt, _Value);
			break;

		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

	
inline _Uint1_t _Load_seq_cst_1(volatile _Uint1_t *_Tgt)
	{	

	_Uint1_t _Value;

 



#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint1_t _Load_relaxed_1(volatile _Uint1_t *_Tgt)
	{	

	_Uint1_t _Value;

 


#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint1_t _Load_acquire_1(volatile _Uint1_t *_Tgt)
	{	


	return (_Load_seq_cst_1(_Tgt));
	}

inline _Uint1_t _Atomic_load_1(
	volatile _Uint1_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_1(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_1(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_1(_Tgt));

		case memory_order_release:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint1_t _Exchange_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchange8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Exchange_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (static_cast<_Uint1_t>(
		_InterlockedExchange8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Exchange_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchange8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Exchange_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchange8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Atomic_exchange_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_1(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	const _Uint1_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint1_t>(
		_InterlockedCompareExchange8((volatile char *)_Tgt,
			static_cast<char>(_Value), static_cast<char>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	const _Uint1_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint1_t>(
		_InterlockedCompareExchange8((volatile char *)_Tgt,
			static_cast<char>(_Value), static_cast<char>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	const _Uint1_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint1_t>(
		_InterlockedCompareExchange8((volatile char *)_Tgt,
			static_cast<char>(_Value), static_cast<char>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	const _Uint1_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint1_t>(
		_InterlockedCompareExchange8((volatile char *)_Tgt,
			static_cast<char>(_Value), static_cast<char>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_1(
	volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_1(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_1(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_1(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_1(_Tgt, _Exp, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_1(
	volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	
	return (_Atomic_compare_exchange_strong_1(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint1_t _Fetch_add_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchangeAdd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_add_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchangeAdd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_add_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchangeAdd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_add_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedExchangeAdd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Atomic_fetch_add_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_1(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline _Uint1_t _Atomic_fetch_sub_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_1(_Tgt, static_cast<_Uint1_t>(0 - _Value), _Order));
	}

	
inline _Uint1_t _Fetch_and_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedAnd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_and_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedAnd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_and_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedAnd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_and_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedAnd8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Atomic_fetch_and_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_1(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint1_t _Fetch_or_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedOr8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_or_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedOr8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_or_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedOr8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_or_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedOr8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Atomic_fetch_or_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_1(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint1_t _Fetch_xor_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedXor8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_xor_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedXor8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_xor_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedXor8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Fetch_xor_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

	return (static_cast<_Uint1_t>(
		_InterlockedXor8((volatile char *)_Tgt, static_cast<char>(_Value))));
	}

inline _Uint1_t _Atomic_fetch_xor_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_1(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline void _Store_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

 


#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

 



#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


 




#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_InterlockedExchange16((volatile short *)_Tgt, static_cast<short>(_Value));
 #line 774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Atomic_store_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_2(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_2(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_2(_Tgt, _Value);
			break;

		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

	
inline _Uint2_t _Load_seq_cst_2(volatile _Uint2_t *_Tgt)
	{	

	_Uint2_t _Value;

 



#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint2_t _Load_relaxed_2(volatile _Uint2_t *_Tgt)
	{	

	_Uint2_t _Value;

 


#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint2_t _Load_acquire_2(volatile _Uint2_t *_Tgt)
	{	


	return (_Load_seq_cst_2(_Tgt));
	}

inline _Uint2_t _Atomic_load_2(
	volatile _Uint2_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_2(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_2(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_2(_Tgt));

		case memory_order_release:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint2_t _Exchange_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchange16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Exchange_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchange16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Exchange_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchange16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Exchange_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchange16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Atomic_exchange_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_2(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	const _Uint2_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint2_t>(_InterlockedCompareExchange16((volatile short *)_Tgt,
		static_cast<short>(_Value), static_cast<short>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	const _Uint2_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint2_t>(_InterlockedCompareExchange16((volatile short *)_Tgt,
		static_cast<short>(_Value), static_cast<short>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	const _Uint2_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint2_t>(_InterlockedCompareExchange16((volatile short *)_Tgt,
		static_cast<short>(_Value), static_cast<short>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	const _Uint2_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint2_t>(_InterlockedCompareExchange16((volatile short *)_Tgt,
		static_cast<short>(_Value), static_cast<short>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_2(
	volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_2(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_2(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_2(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_2(_Tgt, _Exp, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_2(
	volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	
	return (_Atomic_compare_exchange_strong_2(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint2_t _Fetch_add_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchangeAdd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_add_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchangeAdd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_add_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchangeAdd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_add_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedExchangeAdd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Atomic_fetch_add_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_2(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline _Uint2_t _Atomic_fetch_sub_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_2(_Tgt, static_cast<_Uint2_t>(0 - _Value), _Order));
	}

	
inline _Uint2_t _Fetch_and_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedAnd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_and_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedAnd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_and_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedAnd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_and_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedAnd16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Atomic_fetch_and_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_2(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint2_t _Fetch_or_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedOr16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_or_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedOr16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_or_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedOr16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_or_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedOr16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Atomic_fetch_or_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_2(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint2_t _Fetch_xor_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedXor16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_xor_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedXor16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_xor_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedXor16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Fetch_xor_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

	return (static_cast<_Uint2_t>(
		_InterlockedXor16((volatile short *)_Tgt, static_cast<short>(_Value))));
	}

inline _Uint2_t _Atomic_fetch_xor_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_2(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline void _Store_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

 


#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 1259 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

 



#line 1269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


 




#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_InterlockedExchange((volatile long *)_Tgt, static_cast<long>(_Value));
 #line 1286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Atomic_store_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_4(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_4(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_4(_Tgt, _Value);
			break;

		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

	
inline _Uint4_t _Load_seq_cst_4(volatile _Uint4_t *_Tgt)
	{	

	_Uint4_t _Value;

 



#line 1325 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint4_t _Load_relaxed_4(volatile _Uint4_t *_Tgt)
	{	

	_Uint4_t _Value;

 


#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 1343 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint4_t _Load_acquire_4(volatile _Uint4_t *_Tgt)
	{	


	return (_Load_seq_cst_4(_Tgt));
	}

inline _Uint4_t _Atomic_load_4(
	volatile _Uint4_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_4(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_4(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_4(_Tgt));

		case memory_order_release:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint4_t _Exchange_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchange((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Exchange_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchange((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Exchange_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchange((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Exchange_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchange((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Atomic_exchange_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_4(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	const _Uint4_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint4_t>(_InterlockedCompareExchange((volatile long *)_Tgt,
		static_cast<long>(_Value), static_cast<long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	const _Uint4_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint4_t>(_InterlockedCompareExchange((volatile long *)_Tgt,
		static_cast<long>(_Value), static_cast<long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	const _Uint4_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint4_t>(_InterlockedCompareExchange((volatile long *)_Tgt,
		static_cast<long>(_Value), static_cast<long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	const _Uint4_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint4_t>(_InterlockedCompareExchange((volatile long *)_Tgt,
		static_cast<long>(_Value), static_cast<long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_4(
	volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_4(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_4(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_4(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_4(_Tgt, _Exp, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_4(
	volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	
	return (_Atomic_compare_exchange_strong_4(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint4_t _Fetch_add_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchangeAdd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_add_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchangeAdd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_add_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchangeAdd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_add_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedExchangeAdd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Atomic_fetch_add_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_4(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline _Uint4_t _Atomic_fetch_sub_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_4(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint4_t _Fetch_and_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedAnd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_and_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedAnd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_and_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedAnd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_and_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedAnd((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Atomic_fetch_and_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_4(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint4_t _Fetch_or_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedOr((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_or_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedOr((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_or_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedOr((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_or_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedOr((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Atomic_fetch_or_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_4(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint4_t _Fetch_xor_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedXor((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_xor_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedXor((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_xor_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedXor((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Fetch_xor_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

	return (static_cast<_Uint4_t>(
		_InterlockedXor((volatile long *)_Tgt, static_cast<long>(_Value))));
	}

inline _Uint4_t _Atomic_fetch_xor_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_4(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline void _Store_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

 
	*_Tgt = _Value;

 




#line 1774 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

 
	_ReadWriteBarrier();
	*_Tgt = _Value;

 





#line 1790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Store_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


 




#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_InterlockedExchange64((volatile long long *)_Tgt, static_cast<long long>(_Value));
 #line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Atomic_store_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_8(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_8(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_8(_Tgt, _Value);
			break;

		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

	
inline _Uint8_t _Load_seq_cst_8(volatile _Uint8_t *_Tgt)
	{	

	_Uint8_t _Value;

 
	_Value = *_Tgt;
	_ReadWriteBarrier();

 









#line 1853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint8_t _Load_relaxed_8(volatile _Uint8_t *_Tgt)
	{	

	_Uint8_t _Value;

 
	_Value = *_Tgt;

 







#line 1874 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint8_t _Load_acquire_8(volatile _Uint8_t *_Tgt)
	{	


	return (_Load_seq_cst_8(_Tgt));
	}

inline _Uint8_t _Atomic_load_8(
	volatile _Uint8_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_8(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_8(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_8(_Tgt));

		case memory_order_release:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint8_t _Exchange_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchange64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Exchange_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchange64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Exchange_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchange64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Exchange_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchange64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Atomic_exchange_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_8(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	const _Uint8_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint8_t>(_InterlockedCompareExchange64((volatile long long *)_Tgt,
		static_cast<long long>(_Value), static_cast<long long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	const _Uint8_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint8_t>(_InterlockedCompareExchange64((volatile long long *)_Tgt,
		static_cast<long long>(_Value), static_cast<long long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	const _Uint8_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint8_t>(_InterlockedCompareExchange64((volatile long long *)_Tgt,
		static_cast<long long>(_Value), static_cast<long long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	const _Uint8_t _Old_exp = *_Exp;	

	const auto _Prev = static_cast<_Uint8_t>(_InterlockedCompareExchange64((volatile long long *)_Tgt,
		static_cast<long long>(_Value), static_cast<long long>(_Old_exp)));

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_8(
	volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_8(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_8(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_8(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_8(_Tgt, _Exp, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_8(
	volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	
	return (_Atomic_compare_exchange_strong_8(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint8_t _Fetch_add_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchangeAdd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_add_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchangeAdd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_add_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchangeAdd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_add_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedExchangeAdd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Atomic_fetch_add_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_8(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline _Uint8_t _Atomic_fetch_sub_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_8(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint8_t _Fetch_and_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedAnd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_and_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedAnd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_and_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedAnd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_and_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedAnd64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Atomic_fetch_and_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_8(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint8_t _Fetch_or_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedOr64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_or_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedOr64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_or_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedOr64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_or_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedOr64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Atomic_fetch_or_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_8(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

	
inline _Uint8_t _Fetch_xor_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedXor64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_xor_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedXor64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_xor_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedXor64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Fetch_xor_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

	return (static_cast<_Uint8_t>(
		_InterlockedXor64((volatile long long *)_Tgt, static_cast<long long>(_Value))));
	}

inline _Uint8_t _Atomic_fetch_xor_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_8(_Tgt, _Value));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline int _Atomic_flag_test_and_set(volatile _Atomic_flag_t *_Flag,
	memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_consume:
		case memory_order_acquire:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_release:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_interlockedbittestandset(_Flag, 0));

		default:
			static_cast<void>(0);
			return (0);
		}
	}

inline void _Atomic_flag_clear(volatile _Atomic_flag_t *_Flag,
	memory_order _Order)
	{	
	static_assert(sizeof(_Atomic_flag_t) == sizeof(_Uint4_t),
		"Unexpected _Atomic_flag_t size");

	switch (_Order)
		{
		case memory_order_relaxed:
		case memory_order_release:
		case memory_order_seq_cst:
			_Atomic_store_4((volatile _Uint4_t *)_Flag, 0, _Order);
			break;

		case memory_order_consume:
		case memory_order_acquire:
		case memory_order_acq_rel:
		default:
			static_cast<void>(0);
			break;
		}
	}

inline void _Atomic_thread_fence(memory_order _Order)
	{	
 





#line 2349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	_ReadWriteBarrier();
	if (_Order == memory_order_seq_cst)
		{	
		static _Uint4_t _Guard;
		_Atomic_exchange_4(&_Guard, 0, memory_order_seq_cst);
		_ReadWriteBarrier();
		}
 #line 2357 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
	}

inline void _Atomic_signal_fence(memory_order)
	{	
	_ReadWriteBarrier();
	}

 


#line 2368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
 
 #line 2370 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

		
		



inline void _Lock_spin_lock(
	volatile _Atomic_flag_t *_Flag)
	{	
	while (_Atomic_flag_test_and_set(_Flag, memory_order_acquire))
		;
	}

inline void _Unlock_spin_lock(
	volatile _Atomic_flag_t *_Flag)
	{	
	_Atomic_flag_clear(_Flag, memory_order_release);
	}

		

inline void _Atomic_copy(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile const void *_Src,
			memory_order)
	{	
	_Lock_spin_lock(_Flag);
	:: memcpy((void *)_Tgt, (void *)_Src, _Size);
	_Unlock_spin_lock(_Flag);
	}

inline void _Atomic_exchange(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile void *_Src,
			memory_order)
	{	
	unsigned char *_Left = (unsigned char *)_Tgt;
	unsigned char *_Right = (unsigned char *)_Src;

	_Lock_spin_lock(_Flag);
	for (; 0 < _Size; --_Size)
		{	
		unsigned char _Tmp = *_Left;
		*_Left++ = *_Right;
		*_Right++ = _Tmp;
		}
	_Unlock_spin_lock(_Flag);
	}

inline int _Atomic_compare_exchange_weak(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
			memory_order, memory_order)
	{	
	int _Result;

	_Lock_spin_lock(_Flag);
	_Result = :: memcmp((const void *)_Tgt, (const void *)_Exp, _Size) == 0;
	if (_Result != 0)
		:: memcpy((void *)_Tgt, (void *)_Src, _Size);
	else
		:: memcpy((void *)_Exp, (void *)_Tgt, _Size);
	_Unlock_spin_lock(_Flag);
	return (_Result);
	}

inline int _Atomic_compare_exchange_strong(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
	volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
	memory_order _Order1, memory_order _Order2)
	{	
	return (_Atomic_compare_exchange_weak(_Flag, _Size, _Tgt, _Exp, _Src,
		_Order1, _Order2));
	}

 


















































#line 2497 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
}

 





#line 2506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2512 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"
#line 2513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xatomic.h"





#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 #pragma warning(disable: 4365) 
 #pragma warning(disable: 4522)	

		











namespace std {
inline memory_order _Get_memory_order(memory_order _Order)
	{	
		
	return (_Order == memory_order_acq_rel ? memory_order_acquire
		: _Order == memory_order_release ? memory_order_relaxed
		: _Order);
	}

		
template<class _Ty>
	_Ty kill_dependency(_Ty _Arg) noexcept
	{	
	return (_Arg);
	}

		
template <class _Ty>
	struct atomic;
template <class _Ty>
	[[nodiscard]] bool atomic_is_lock_free(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
	[[nodiscard]] bool atomic_is_lock_free(const atomic<_Ty> *) noexcept;
template <class _Ty>
	void atomic_init(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_init(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store_explicit(volatile atomic<_Ty> *, _Ty, memory_order) noexcept;
template <class _Ty>
	void atomic_store_explicit(atomic<_Ty> *, _Ty, memory_order) noexcept;
template <class _Ty>
	[[nodiscard]] _Ty atomic_load(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
	[[nodiscard]] _Ty atomic_load(const atomic<_Ty> *) noexcept;
template <class _Ty>
	[[nodiscard]] _Ty atomic_load_explicit(const volatile atomic<_Ty> *, memory_order) noexcept;
template <class _Ty>
	[[nodiscard]] _Ty atomic_load_explicit(const atomic<_Ty> *, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_exchange(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_exchange(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_exchange_explicit(volatile atomic<_Ty> *, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_exchange_explicit(atomic<_Ty> *, _Ty, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak(volatile atomic<_Ty> *, _Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak(atomic<_Ty> *, _Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak_explicit(volatile atomic<_Ty> *, _Ty *, _Ty,
		memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak_explicit(atomic<_Ty> *, _Ty *, _Ty,
		memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong(volatile atomic<_Ty> *, _Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong(atomic<_Ty> *, _Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong_explicit(volatile atomic<_Ty> *, _Ty *, _Ty,
		memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong_explicit(atomic<_Ty> *, _Ty *, _Ty,
		memory_order, memory_order) noexcept;

		
template <class _Ty>
	_Ty atomic_fetch_add(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add_explicit(volatile atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add_explicit(atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub_explicit(volatile atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub_explicit(atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and_explicit(volatile atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and_explicit(atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or_explicit(volatile atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or_explicit(atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor_explicit(volatile atomic<_Ty>*, _Ty, memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor_explicit(atomic<_Ty>*, _Ty, memory_order) noexcept;

		

typedef struct atomic_flag
	{	
	bool test_and_set(memory_order _Order = memory_order_seq_cst) volatile noexcept;
	bool test_and_set(memory_order _Order = memory_order_seq_cst) noexcept;
	void clear(memory_order _Order = memory_order_seq_cst) volatile noexcept;
	void clear(memory_order _Order = memory_order_seq_cst) noexcept;

	_Atomic_flag_t _My_flag;

	atomic_flag() noexcept = default;
	atomic_flag(const atomic_flag&) = delete;
	atomic_flag& operator=(const atomic_flag&) = delete;
	atomic_flag& operator=(const atomic_flag&) volatile = delete;
	} atomic_flag;

inline bool atomic_flag::test_and_set(memory_order _Order) volatile noexcept
	{	
	return (_Atomic_flag_test_and_set(&_My_flag, _Order));
	}

inline bool atomic_flag::test_and_set(memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_My_flag, _Order));
	}

inline void atomic_flag::clear(memory_order _Order) volatile noexcept
	{	
	_Atomic_flag_clear(&_My_flag, _Order);
	}

inline void atomic_flag::clear(memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_My_flag, _Order);
	}

inline bool atomic_flag_test_and_set(volatile atomic_flag *_Flag) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
	}

inline bool atomic_flag_test_and_set(atomic_flag *_Flag) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
	}

inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
	}

inline bool atomic_flag_test_and_set_explicit(atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
	}

inline void atomic_flag_clear(volatile atomic_flag *_Flag) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
	}

inline void atomic_flag_clear(atomic_flag *_Flag) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
	}

inline void atomic_flag_clear_explicit(volatile atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, _Order);
	}

inline void atomic_flag_clear_explicit(atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, _Order);
	}

		
template<unsigned _Bytes>
	struct _Atomic_impl
	{	
	typedef _Uint1_t _My_int;	

	constexpr _Atomic_impl() noexcept
		: _My_flag(0)
		{	
		}

	bool _Is_lock_free() const volatile
		{	
		return (false);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		_Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		_Atomic_exchange(&_My_flag, _Bytes, _Left, _Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak(
			&_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong(
			&_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
		}

private:
	mutable _Atomic_flag_t _My_flag;
	};

		

template<>
	struct _Atomic_impl<1U>
	{	
	typedef _Uint1_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (true);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_1((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_1((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_1((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_1(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_1(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<2U>
	{	
	typedef _Uint2_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (true);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_2((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_2((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_2((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_2(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_2(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<4U>
	{	
	typedef _Uint4_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (true);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_4((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_4((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_4((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_4(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_4(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<8U>
	{	
	typedef _Uint8_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (true);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_8((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_8((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_8((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_8(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_8(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

		
template<class _Ty,
	unsigned _Bytes>
	struct _Atomic_base
		: _Atomic_impl<_Bytes>
	{	
	typedef _Atomic_impl<_Bytes> _Mybase;
	typedef typename _Mybase::_My_int _My_int;

	constexpr _Atomic_base(_Ty _Val) noexcept
		: _My_val(_Val)
		{	
		}

	_Atomic_base() noexcept = default;
	_Atomic_base(const _Atomic_base&) = delete;
	_Atomic_base& operator=(const _Atomic_base&) = delete;
	_Atomic_base& operator=(const _Atomic_base&) volatile = delete;

	_Ty operator=(_Ty _Right) volatile noexcept
		{	
		this->_Store((void *)::std:: addressof(_My_val), ::std:: addressof(_Right), memory_order_seq_cst);
		return (_Right);
		}

	_Ty operator=(_Ty _Right) noexcept
		{	
		this->_Store(::std:: addressof(_My_val), ::std:: addressof(_Right), memory_order_seq_cst);
		return (_Right);
		}

	[[nodiscard]] bool is_lock_free() const volatile noexcept
		{	
		return (this->_Is_lock_free());
		}

	[[nodiscard]] bool is_lock_free() const noexcept
		{	
		return (this->_Is_lock_free());
		}

	void store(_Ty _Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		this->_Store((void *)::std:: addressof(_My_val), ::std:: addressof(_Value), _Order);
		}

	void store(_Ty _Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		this->_Store(::std:: addressof(_My_val), ::std:: addressof(_Value), _Order);
		}

	[[nodiscard]] _Ty load(memory_order _Order = memory_order_seq_cst) const volatile noexcept
		{	
		aligned_union_t<1, _Ty> _Result; 
		this->_Load(&_Result, (const void *)::std:: addressof(_My_val), _Order);
		return (reinterpret_cast<_Ty&>(_Result));
		}

	[[nodiscard]] _Ty load(memory_order _Order = memory_order_seq_cst) const noexcept
		{	
		aligned_union_t<1, _Ty> _Result; 
		this->_Load(&_Result, ::std:: addressof(_My_val), _Order);
		return (reinterpret_cast<_Ty&>(_Result));
		}

	operator _Ty() const volatile noexcept
		{	
		return (load());
		}

	operator _Ty() const noexcept
		{	
		return (load());
		}

	_Ty exchange(_Ty _Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		this->_Exchange((void *)::std:: addressof(_My_val), ::std:: addressof(_Value), _Order);
		return (_Value);
		}

	_Ty exchange(_Ty _Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		this->_Exchange(::std:: addressof(_My_val), ::std:: addressof(_Value), _Order);
		return (_Value);
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (this->_Compare_exchange_weak(
			(void *)::std:: addressof(_My_val), ::std:: addressof(_Exp), ::std:: addressof(_Value),
				_Order1, _Order2));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (this->_Compare_exchange_weak(
			::std:: addressof(_My_val), ::std:: addressof(_Exp), ::std:: addressof(_Value),
				_Order1, _Order2));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (compare_exchange_weak(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (compare_exchange_weak(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (this->_Compare_exchange_strong(
			(void *)::std:: addressof(_My_val), ::std:: addressof(_Exp), ::std:: addressof(_Value),
				_Order1, _Order2));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (this->_Compare_exchange_strong(
			::std:: addressof(_My_val), ::std:: addressof(_Exp), ::std:: addressof(_Value),
				_Order1, _Order2));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (compare_exchange_strong(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (compare_exchange_strong(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}


	static_assert(alignof(_Ty) >= sizeof(_My_int),
		"You've instantiated std::atomic<T> with sizeof(T) equal to 2/4/8 and alignof(T) < sizeof(T). "
		"Before VS 2015 Update 2, this would have misbehaved at runtime. "
		"VS 2015 Update 2 was fixed to handle this correctly, "
		"but the fix inherently changes layout and breaks binary compatibility. "
		"Please define _ENABLE_ATOMIC_ALIGNMENT_FIX to acknowledge that you understand this, "
		"and that everything you're linking has been compiled with VS 2015 Update 2 (or later).");
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"

	alignas(sizeof(_My_int)) alignas(_Ty) _Ty _My_val;
	};

		
template<class _Ty>
	struct atomic
		: _Atomic_base<_Ty, sizeof (_Ty)>
	{	
	static_assert(is_trivially_copyable_v<_Ty>,
		"atomic<T> requires T to be trivially copyable.");

	typedef _Atomic_base<_Ty, sizeof (_Ty)> _My_base;

	using value_type = _Ty;


	static constexpr bool is_always_lock_free =
		sizeof(_Ty) == 1
		|| sizeof(_Ty) == 2
		|| sizeof(_Ty) == 4
		|| sizeof(_Ty) == 8;

	static constexpr bool _Is_usually_lock_free = is_always_lock_free;
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"

	atomic() noexcept = default;
	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;

	constexpr atomic(_Ty _Val) noexcept
		: _My_base(_Val)
		{	
		}

	_Ty operator=(_Ty _Right) volatile noexcept
		{	
		return (_My_base::operator=(_Right));
		}

	_Ty operator=(_Ty _Right) noexcept
		{	
		return (_My_base::operator=(_Right));
		}
	};




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(1 == sizeof (bool),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_bool
	{	
	bool operator=(bool) volatile noexcept;
	bool operator=(bool) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(bool, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(bool, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] bool load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] bool load(memory_order = memory_order_seq_cst) const noexcept;

	operator bool() const volatile noexcept;
	operator bool() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	bool exchange(bool, memory_order = memory_order_seq_cst) volatile noexcept;
	bool exchange(bool, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(bool&, bool, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(bool&, bool, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(bool&, bool, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(bool&, bool, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(bool&, bool, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(bool&, bool, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(bool&, bool, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(bool&, bool, memory_order = memory_order_seq_cst) noexcept;

 































 














 
  
 #line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_bool;

 
		
template<>
	struct atomic<bool>
		: _Atomic_bool
	{	

	using value_type = bool;
	using difference_type = bool;

	atomic() noexcept = default;

	constexpr atomic(bool _Val) noexcept
		: _Atomic_bool{(_Uint1_t)_Val}
		{	
		}

	bool operator=(bool _Val) volatile noexcept
		{	
		return (_Atomic_bool::operator=(_Val));
		}

	bool operator=(bool _Val) noexcept
		{	
		return (_Atomic_bool::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_bool *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_bool *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<bool> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<bool> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_bool *_Atom, bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_bool *_Atom, bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<bool> *_Atom, bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<bool> *_Atom, bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_bool *_Atom, bool _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_bool *_Atom, bool _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_bool *_Atom, bool _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_bool *_Atom, bool _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline bool atomic_load_explicit(const volatile _Atomic_bool *_Atom,
		memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline bool atomic_load_explicit(const _Atomic_bool *_Atom, memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline bool atomic_load(const volatile _Atomic_bool *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline bool atomic_load(const _Atomic_bool *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline bool atomic_exchange_explicit(volatile _Atomic_bool *_Atom, bool _Value,
	memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline bool atomic_exchange_explicit(_Atomic_bool *_Atom, bool _Value, memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline bool atomic_exchange(volatile _Atomic_bool *_Atom, bool _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_exchange(_Atomic_bool *_Atom, bool _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline bool _Atomic_bool::operator=(bool _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_bool::operator=(bool _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_bool::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_bool::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_bool::store(bool _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_bool::store(bool _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline bool _Atomic_bool::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline bool _Atomic_bool::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_bool::operator bool() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_bool::operator bool() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline bool _Atomic_bool::exchange(bool _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_bool::exchange(bool _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<bool> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<bool> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_bool *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<bool> *_Atom, bool _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<bool> *_Atom, bool _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<bool> *_Atom, bool _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<bool> *_Atom, bool _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<bool> *_Atom, bool _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_bool *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<bool> *_Atom, bool _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_bool *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline bool atomic_load(const volatile atomic<bool> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_load(const atomic<bool> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_load_explicit(const volatile atomic<bool> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_bool *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline bool atomic_load_explicit(const atomic<bool> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_bool *>(_Atom), _Order));
	}

template<>
	inline bool atomic_exchange(volatile atomic<bool> *_Atom, bool _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_bool *>(_Atom), _Value));
	}

template<>
	inline bool atomic_exchange(atomic<bool> *_Atom, bool _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_bool *>(_Atom), _Value));
	}

template<>
	inline bool atomic_exchange_explicit(volatile atomic<bool> *_Atom, bool _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Value, _Order));
	}

template<>
	inline bool atomic_exchange_explicit(atomic<bool> *_Atom, bool _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_bool *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<bool> *_Atom, bool *_Exp, bool _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<bool> *_Atom, bool *_Exp, bool _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 













































































































































































































































































































































































































 
















































































































#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(1 == sizeof (char),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char
	{	
	char operator=(char) volatile noexcept;
	char operator=(char) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(char, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(char, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] char load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] char load(memory_order = memory_order_seq_cst) const noexcept;

	operator char() const volatile noexcept;
	operator char() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	char exchange(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char exchange(char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char&, char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char&, char, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char&, char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char&, char, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char&, char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char&, char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char&, char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char&, char, memory_order = memory_order_seq_cst) noexcept;

 
	char operator++(int) volatile noexcept;
	char operator++(int) noexcept;
	char operator--(int) volatile noexcept;
	char operator--(int) noexcept;
	char operator++() volatile noexcept;
	char operator++() noexcept;
	char operator--() volatile noexcept;
	char operator--() noexcept;
	char operator+=(char) volatile noexcept;
	char operator+=(char) noexcept;
	char operator-=(char) volatile noexcept;
	char operator-=(char) noexcept;
	char operator&=(char) volatile noexcept;
	char operator&=(char) noexcept;
	char operator|=(char) volatile noexcept;
	char operator|=(char) noexcept;
	char operator^=(char) volatile noexcept;
	char operator^=(char) noexcept;

	char fetch_add(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char fetch_add(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_sub(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char fetch_sub(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_and(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char fetch_and(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_or(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char fetch_or(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_xor(char, memory_order = memory_order_seq_cst) volatile noexcept;
	char fetch_xor(char, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_char;

 
		
template<>
	struct atomic<char>
		: _Atomic_char
	{	

	using value_type = char;
	using difference_type = char;

	atomic() noexcept = default;

	constexpr atomic(char _Val) noexcept
		: _Atomic_char{(_Uint1_t)_Val}
		{	
		}

	char operator=(char _Val) volatile noexcept
		{	
		return (_Atomic_char::operator=(_Val));
		}

	char operator=(char _Val) noexcept
		{	
		return (_Atomic_char::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_char *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_char *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_char *_Atom, char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char> *_Atom, char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<char> *_Atom, char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char *_Atom, char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline char atomic_load_explicit(const volatile _Atomic_char *_Atom,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char atomic_load_explicit(const _Atomic_char *_Atom, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char atomic_load(const volatile _Atomic_char *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline char atomic_load(const _Atomic_char *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char atomic_exchange_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_exchange_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_exchange(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_exchange(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char _Atomic_char::operator=(char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char _Atomic_char::operator=(char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_char::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_char::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char::store(char _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char::store(char _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline char _Atomic_char::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline char _Atomic_char::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_char::operator char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char::operator char() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline char _Atomic_char::exchange(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::exchange(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char> *_Atom, char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char> *_Atom, char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char> *_Atom, char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline char atomic_load(const volatile atomic<char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char atomic_load(const atomic<char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char atomic_load_explicit(const volatile atomic<char> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline char atomic_load_explicit(const atomic<char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char *>(_Atom), _Order));
	}

template<>
	inline char atomic_exchange(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_exchange(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_exchange_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_exchange_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char> *_Atom, char *_Exp, char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char> *_Atom, char *_Exp, char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char> *_Atom, char *_Exp, char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char> *_Atom, char *_Exp, char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline char atomic_fetch_add_explicit(
	volatile _Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_add_explicit(
	_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_add(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_add(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_sub_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_sub_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_sub(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_sub(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_and_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_and_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_and(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_and(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_or_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_or_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_or(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_or(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_xor_explicit(volatile _Atomic_char *_Atom, char _Value,
	memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_xor_explicit(_Atomic_char *_Atom, char _Value, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_xor(volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_xor(_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char _Atomic_char::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char _Atomic_char::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char _Atomic_char::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char _Atomic_char::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char _Atomic_char::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char _Atomic_char::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char _Atomic_char::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char _Atomic_char::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char _Atomic_char::operator+=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char _Atomic_char::operator+=(char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char _Atomic_char::operator-=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char _Atomic_char::operator-=(char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char _Atomic_char::operator&=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char _Atomic_char::operator&=(char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char _Atomic_char::operator|=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char _Atomic_char::operator|=(char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char _Atomic_char::operator^=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char _Atomic_char::operator^=(char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char _Atomic_char::fetch_add(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_add(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_sub(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_sub(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_and(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_and(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_or(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_or(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_xor(char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_xor(char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char atomic_fetch_add(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_add(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_add_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_add_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_sub(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_sub(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_sub_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_sub_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_and(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_and(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_and_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_and_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_or(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_or(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_or_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_or_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_xor(volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_xor(atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_xor_explicit(volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_xor_explicit(atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(1 == sizeof (signed char),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_schar
	{	
	signed char operator=(signed char) volatile noexcept;
	signed char operator=(signed char) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(signed char, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] signed char load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] signed char load(memory_order = memory_order_seq_cst) const noexcept;

	operator signed char() const volatile noexcept;
	operator signed char() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	signed char exchange(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char exchange(signed char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(signed char&, signed char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(signed char&, signed char, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(signed char&, signed char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(signed char&, signed char, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(signed char&, signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(signed char&, signed char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(signed char&, signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(signed char&, signed char, memory_order = memory_order_seq_cst) noexcept;

 
	signed char operator++(int) volatile noexcept;
	signed char operator++(int) noexcept;
	signed char operator--(int) volatile noexcept;
	signed char operator--(int) noexcept;
	signed char operator++() volatile noexcept;
	signed char operator++() noexcept;
	signed char operator--() volatile noexcept;
	signed char operator--() noexcept;
	signed char operator+=(signed char) volatile noexcept;
	signed char operator+=(signed char) noexcept;
	signed char operator-=(signed char) volatile noexcept;
	signed char operator-=(signed char) noexcept;
	signed char operator&=(signed char) volatile noexcept;
	signed char operator&=(signed char) noexcept;
	signed char operator|=(signed char) volatile noexcept;
	signed char operator|=(signed char) noexcept;
	signed char operator^=(signed char) volatile noexcept;
	signed char operator^=(signed char) noexcept;

	signed char fetch_add(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char fetch_add(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_sub(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char fetch_sub(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_and(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char fetch_and(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_or(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char fetch_or(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_xor(signed char, memory_order = memory_order_seq_cst) volatile noexcept;
	signed char fetch_xor(signed char, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_schar;

 
		
template<>
	struct atomic<signed char>
		: _Atomic_schar
	{	

	using value_type = signed char;
	using difference_type = signed char;

	atomic() noexcept = default;

	constexpr atomic(signed char _Val) noexcept
		: _Atomic_schar{(_Uint1_t)_Val}
		{	
		}

	signed char operator=(signed char _Val) volatile noexcept
		{	
		return (_Atomic_schar::operator=(_Val));
		}

	signed char operator=(signed char _Val) noexcept
		{	
		return (_Atomic_schar::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_schar *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_schar *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<signed char> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<signed char> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<signed char> *_Atom, signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline signed char atomic_load_explicit(const volatile _Atomic_schar *_Atom,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline signed char atomic_load_explicit(const _Atomic_schar *_Atom, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline signed char atomic_load(const volatile _Atomic_schar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline signed char atomic_load(const _Atomic_schar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline signed char atomic_exchange_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_exchange_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_exchange(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_exchange(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline signed char _Atomic_schar::operator=(signed char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline signed char _Atomic_schar::operator=(signed char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_schar::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_schar::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_schar::store(signed char _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_schar::store(signed char _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline signed char _Atomic_schar::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline signed char _Atomic_schar::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_schar::operator signed char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_schar::operator signed char() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline signed char _Atomic_schar::exchange(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::exchange(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<signed char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<signed char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_schar *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_schar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<signed char> *_Atom, signed char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_schar *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline signed char atomic_load(const volatile atomic<signed char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline signed char atomic_load(const atomic<signed char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline signed char atomic_load_explicit(const volatile atomic<signed char> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_schar *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline signed char atomic_load_explicit(const atomic<signed char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_schar *>(_Atom), _Order));
	}

template<>
	inline signed char atomic_exchange(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_exchange(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_exchange_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_exchange_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_schar *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline signed char atomic_fetch_add_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_add_explicit(
	_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_add(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_add(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_sub_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_sub_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_sub(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_sub(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_and_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_and_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_and(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_and(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_or_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_or_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_or(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_or(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_xor_explicit(volatile _Atomic_schar *_Atom, signed char _Value,
	memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_xor_explicit(_Atomic_schar *_Atom, signed char _Value, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_xor(volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_xor(_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline signed char _Atomic_schar::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline signed char _Atomic_schar::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline signed char _Atomic_schar::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline signed char _Atomic_schar::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline signed char _Atomic_schar::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline signed char _Atomic_schar::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline signed char _Atomic_schar::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline signed char _Atomic_schar::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline signed char _Atomic_schar::operator+=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline signed char _Atomic_schar::operator+=(signed char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline signed char _Atomic_schar::operator-=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline signed char _Atomic_schar::operator-=(signed char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline signed char _Atomic_schar::operator&=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline signed char _Atomic_schar::operator&=(signed char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline signed char _Atomic_schar::operator|=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline signed char _Atomic_schar::operator|=(signed char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline signed char _Atomic_schar::operator^=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline signed char _Atomic_schar::operator^=(signed char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline signed char _Atomic_schar::fetch_add(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_add(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_sub(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_sub(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_and(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_and(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_or(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_or(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_xor(signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_xor(signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline signed char atomic_fetch_add(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_add(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_add_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_add_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_sub(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_sub(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_sub_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_sub_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_and(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_and(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_and_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_and_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_or(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_or(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_or_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_or_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_xor(volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_xor(atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_xor_explicit(volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_xor_explicit(atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(1 == sizeof (unsigned char),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_uchar
	{	
	unsigned char operator=(unsigned char) volatile noexcept;
	unsigned char operator=(unsigned char) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] unsigned char load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] unsigned char load(memory_order = memory_order_seq_cst) const noexcept;

	operator unsigned char() const volatile noexcept;
	operator unsigned char() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	unsigned char exchange(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char exchange(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char, memory_order = memory_order_seq_cst) noexcept;

 
	unsigned char operator++(int) volatile noexcept;
	unsigned char operator++(int) noexcept;
	unsigned char operator--(int) volatile noexcept;
	unsigned char operator--(int) noexcept;
	unsigned char operator++() volatile noexcept;
	unsigned char operator++() noexcept;
	unsigned char operator--() volatile noexcept;
	unsigned char operator--() noexcept;
	unsigned char operator+=(unsigned char) volatile noexcept;
	unsigned char operator+=(unsigned char) noexcept;
	unsigned char operator-=(unsigned char) volatile noexcept;
	unsigned char operator-=(unsigned char) noexcept;
	unsigned char operator&=(unsigned char) volatile noexcept;
	unsigned char operator&=(unsigned char) noexcept;
	unsigned char operator|=(unsigned char) volatile noexcept;
	unsigned char operator|=(unsigned char) noexcept;
	unsigned char operator^=(unsigned char) volatile noexcept;
	unsigned char operator^=(unsigned char) noexcept;

	unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_uchar;

 
		
template<>
	struct atomic<unsigned char>
		: _Atomic_uchar
	{	

	using value_type = unsigned char;
	using difference_type = unsigned char;

	atomic() noexcept = default;

	constexpr atomic(unsigned char _Val) noexcept
		: _Atomic_uchar{(_Uint1_t)_Val}
		{	
		}

	unsigned char operator=(unsigned char _Val) volatile noexcept
		{	
		return (_Atomic_uchar::operator=(_Val));
		}

	unsigned char operator=(unsigned char _Val) noexcept
		{	
		return (_Atomic_uchar::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_uchar *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_uchar *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned char> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned char> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline unsigned char atomic_load_explicit(const volatile _Atomic_uchar *_Atom,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned char atomic_load_explicit(const _Atomic_uchar *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned char atomic_load(const volatile _Atomic_uchar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline unsigned char atomic_load(const _Atomic_uchar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned char atomic_exchange_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_exchange_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_exchange(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_exchange(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_uchar::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_uchar::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_uchar::store(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_uchar::store(unsigned char _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline unsigned char _Atomic_uchar::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline unsigned char _Atomic_uchar::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_uchar::operator unsigned char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_uchar::operator unsigned char() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline unsigned char _Atomic_uchar::exchange(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::exchange(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_uchar *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_uchar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned char> *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_uchar *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline unsigned char atomic_load(const volatile atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned char atomic_load(const atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned char atomic_load_explicit(const volatile atomic<unsigned char> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_uchar *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline unsigned char atomic_load_explicit(const atomic<unsigned char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_uchar *>(_Atom), _Order));
	}

template<>
	inline unsigned char atomic_exchange(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_exchange(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_exchange_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_exchange_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_uchar *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline unsigned char atomic_fetch_add_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_add_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_add(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_add(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_sub_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_sub_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_sub(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_sub(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_and_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_and_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_and(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_and(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_or_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_or_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_or(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_or(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_xor_explicit(volatile _Atomic_uchar *_Atom, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_xor_explicit(_Atomic_uchar *_Atom, unsigned char _Value, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_xor(volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_xor(_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned char _Atomic_uchar::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned char _Atomic_uchar::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned char _Atomic_uchar::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned char _Atomic_uchar::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned char _Atomic_uchar::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned char _Atomic_uchar::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned char _Atomic_uchar::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned char _Atomic_uchar::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned char _Atomic_uchar::fetch_add(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_add(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_sub(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_sub(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_and(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_and(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_or(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_or(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_xor(unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_xor(unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned char atomic_fetch_add(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_add(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_add_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_add_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_sub(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_sub(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_sub_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_sub_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_and(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_and(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_and_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_and_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_or(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_or(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_or_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_or_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_xor(volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_xor(atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_xor_explicit(volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_xor_explicit(atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(2 == sizeof (char16_t),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char16_t
	{	
	char16_t operator=(char16_t) volatile noexcept;
	char16_t operator=(char16_t) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(char16_t, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] char16_t load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] char16_t load(memory_order = memory_order_seq_cst) const noexcept;

	operator char16_t() const volatile noexcept;
	operator char16_t() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	char16_t exchange(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t exchange(char16_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char16_t&, char16_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char16_t&, char16_t, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char16_t&, char16_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char16_t&, char16_t, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char16_t&, char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char16_t&, char16_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char16_t&, char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char16_t&, char16_t, memory_order = memory_order_seq_cst) noexcept;

 
	char16_t operator++(int) volatile noexcept;
	char16_t operator++(int) noexcept;
	char16_t operator--(int) volatile noexcept;
	char16_t operator--(int) noexcept;
	char16_t operator++() volatile noexcept;
	char16_t operator++() noexcept;
	char16_t operator--() volatile noexcept;
	char16_t operator--() noexcept;
	char16_t operator+=(char16_t) volatile noexcept;
	char16_t operator+=(char16_t) noexcept;
	char16_t operator-=(char16_t) volatile noexcept;
	char16_t operator-=(char16_t) noexcept;
	char16_t operator&=(char16_t) volatile noexcept;
	char16_t operator&=(char16_t) noexcept;
	char16_t operator|=(char16_t) volatile noexcept;
	char16_t operator|=(char16_t) noexcept;
	char16_t operator^=(char16_t) volatile noexcept;
	char16_t operator^=(char16_t) noexcept;

	char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_char16_t;

 
		
template<>
	struct atomic<char16_t>
		: _Atomic_char16_t
	{	

	using value_type = char16_t;
	using difference_type = char16_t;

	atomic() noexcept = default;

	constexpr atomic(char16_t _Val) noexcept
		: _Atomic_char16_t{(_Uint2_t)_Val}
		{	
		}

	char16_t operator=(char16_t _Val) volatile noexcept
		{	
		return (_Atomic_char16_t::operator=(_Val));
		}

	char16_t operator=(char16_t _Val) noexcept
		{	
		return (_Atomic_char16_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_char16_t *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_char16_t *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char16_t> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char16_t> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline char16_t atomic_load_explicit(const volatile _Atomic_char16_t *_Atom,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char16_t atomic_load_explicit(const _Atomic_char16_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char16_t atomic_load(const volatile _Atomic_char16_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline char16_t atomic_load(const _Atomic_char16_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char16_t atomic_exchange_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_exchange_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_exchange(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_exchange(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char16_t _Atomic_char16_t::operator=(char16_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char16_t _Atomic_char16_t::operator=(char16_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_char16_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_char16_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char16_t::store(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char16_t::store(char16_t _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline char16_t _Atomic_char16_t::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline char16_t _Atomic_char16_t::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_char16_t::operator char16_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char16_t::operator char16_t() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline char16_t _Atomic_char16_t::exchange(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::exchange(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char16_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char16_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char16_t> *_Atom, char16_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char16_t *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline char16_t atomic_load(const volatile atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char16_t atomic_load(const atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char16_t atomic_load_explicit(const volatile atomic<char16_t> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char16_t *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline char16_t atomic_load_explicit(const atomic<char16_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char16_t *>(_Atom), _Order));
	}

template<>
	inline char16_t atomic_exchange(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_exchange(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_exchange_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_exchange_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char16_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline char16_t atomic_fetch_add_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_add_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_add(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_add(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_sub_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_sub_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_sub(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_sub(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_and_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_and_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_and(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_and(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_or_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_or_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_or(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_or(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_xor_explicit(volatile _Atomic_char16_t *_Atom, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_xor_explicit(_Atomic_char16_t *_Atom, char16_t _Value, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_xor(volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_xor(_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char16_t _Atomic_char16_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char16_t _Atomic_char16_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char16_t _Atomic_char16_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char16_t _Atomic_char16_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char16_t _Atomic_char16_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char16_t _Atomic_char16_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char16_t _Atomic_char16_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char16_t _Atomic_char16_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char16_t _Atomic_char16_t::fetch_add(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_add(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_sub(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_sub(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_and(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_and(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_or(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_or(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_xor(char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_xor(char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char16_t atomic_fetch_add(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_add(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_add_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_add_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_sub(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_sub(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_sub_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_sub_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_and(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_and(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_and_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_and_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_or(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_or(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_or_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_or_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_xor(volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_xor(atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_xor_explicit(volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_xor_explicit(atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(4 == sizeof (char32_t),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char32_t
	{	
	char32_t operator=(char32_t) volatile noexcept;
	char32_t operator=(char32_t) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(char32_t, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] char32_t load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] char32_t load(memory_order = memory_order_seq_cst) const noexcept;

	operator char32_t() const volatile noexcept;
	operator char32_t() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	char32_t exchange(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t exchange(char32_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char32_t&, char32_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char32_t&, char32_t, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char32_t&, char32_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char32_t&, char32_t, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char32_t&, char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char32_t&, char32_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char32_t&, char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char32_t&, char32_t, memory_order = memory_order_seq_cst) noexcept;

 
	char32_t operator++(int) volatile noexcept;
	char32_t operator++(int) noexcept;
	char32_t operator--(int) volatile noexcept;
	char32_t operator--(int) noexcept;
	char32_t operator++() volatile noexcept;
	char32_t operator++() noexcept;
	char32_t operator--() volatile noexcept;
	char32_t operator--() noexcept;
	char32_t operator+=(char32_t) volatile noexcept;
	char32_t operator+=(char32_t) noexcept;
	char32_t operator-=(char32_t) volatile noexcept;
	char32_t operator-=(char32_t) noexcept;
	char32_t operator&=(char32_t) volatile noexcept;
	char32_t operator&=(char32_t) noexcept;
	char32_t operator|=(char32_t) volatile noexcept;
	char32_t operator|=(char32_t) noexcept;
	char32_t operator^=(char32_t) volatile noexcept;
	char32_t operator^=(char32_t) noexcept;

	char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_char32_t;

 
		
template<>
	struct atomic<char32_t>
		: _Atomic_char32_t
	{	

	using value_type = char32_t;
	using difference_type = char32_t;

	atomic() noexcept = default;

	constexpr atomic(char32_t _Val) noexcept
		: _Atomic_char32_t{(_Uint4_t)_Val}
		{	
		}

	char32_t operator=(char32_t _Val) volatile noexcept
		{	
		return (_Atomic_char32_t::operator=(_Val));
		}

	char32_t operator=(char32_t _Val) noexcept
		{	
		return (_Atomic_char32_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_char32_t *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_char32_t *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char32_t> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char32_t> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline char32_t atomic_load_explicit(const volatile _Atomic_char32_t *_Atom,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char32_t atomic_load_explicit(const _Atomic_char32_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline char32_t atomic_load(const volatile _Atomic_char32_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline char32_t atomic_load(const _Atomic_char32_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char32_t atomic_exchange_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_exchange_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_exchange(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_exchange(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char32_t _Atomic_char32_t::operator=(char32_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char32_t _Atomic_char32_t::operator=(char32_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_char32_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_char32_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char32_t::store(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char32_t::store(char32_t _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline char32_t _Atomic_char32_t::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline char32_t _Atomic_char32_t::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_char32_t::operator char32_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char32_t::operator char32_t() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline char32_t _Atomic_char32_t::exchange(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::exchange(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char32_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char32_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char32_t> *_Atom, char32_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char32_t *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline char32_t atomic_load(const volatile atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char32_t atomic_load(const atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline char32_t atomic_load_explicit(const volatile atomic<char32_t> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char32_t *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline char32_t atomic_load_explicit(const atomic<char32_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char32_t *>(_Atom), _Order));
	}

template<>
	inline char32_t atomic_exchange(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_exchange(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_exchange_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_exchange_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char32_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline char32_t atomic_fetch_add_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_add_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_add(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_add(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_sub_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_sub_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_sub(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_sub(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_and_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_and_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_and(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_and(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_or_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_or_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_or(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_or(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_xor_explicit(volatile _Atomic_char32_t *_Atom, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_xor_explicit(_Atomic_char32_t *_Atom, char32_t _Value, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_xor(volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_xor(_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char32_t _Atomic_char32_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char32_t _Atomic_char32_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char32_t _Atomic_char32_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char32_t _Atomic_char32_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char32_t _Atomic_char32_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char32_t _Atomic_char32_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char32_t _Atomic_char32_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char32_t _Atomic_char32_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char32_t _Atomic_char32_t::fetch_add(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_add(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_sub(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_sub(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_and(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_and(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_or(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_or(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_xor(char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_xor(char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char32_t atomic_fetch_add(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_add(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_add_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_add_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_sub(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_sub(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_sub_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_sub_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_and(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_and(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_and_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_and_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_or(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_or(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_or_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_or_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_xor(volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_xor(atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_xor_explicit(volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_xor_explicit(atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"






 



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(2 == sizeof (wchar_t),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_wchar_t
	{	
	wchar_t operator=(wchar_t) volatile noexcept;
	wchar_t operator=(wchar_t) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] wchar_t load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] wchar_t load(memory_order = memory_order_seq_cst) const noexcept;

	operator wchar_t() const volatile noexcept;
	operator wchar_t() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	wchar_t exchange(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t exchange(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t, memory_order = memory_order_seq_cst) noexcept;

 
	wchar_t operator++(int) volatile noexcept;
	wchar_t operator++(int) noexcept;
	wchar_t operator--(int) volatile noexcept;
	wchar_t operator--(int) noexcept;
	wchar_t operator++() volatile noexcept;
	wchar_t operator++() noexcept;
	wchar_t operator--() volatile noexcept;
	wchar_t operator--() noexcept;
	wchar_t operator+=(wchar_t) volatile noexcept;
	wchar_t operator+=(wchar_t) noexcept;
	wchar_t operator-=(wchar_t) volatile noexcept;
	wchar_t operator-=(wchar_t) noexcept;
	wchar_t operator&=(wchar_t) volatile noexcept;
	wchar_t operator&=(wchar_t) noexcept;
	wchar_t operator|=(wchar_t) volatile noexcept;
	wchar_t operator|=(wchar_t) noexcept;
	wchar_t operator^=(wchar_t) volatile noexcept;
	wchar_t operator^=(wchar_t) noexcept;

	wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_wchar_t;

 
		
template<>
	struct atomic<wchar_t>
		: _Atomic_wchar_t
	{	

	using value_type = wchar_t;
	using difference_type = wchar_t;

	atomic() noexcept = default;

	constexpr atomic(wchar_t _Val) noexcept
		: _Atomic_wchar_t{(_Uint2_t)_Val}
		{	
		}

	wchar_t operator=(wchar_t _Val) volatile noexcept
		{	
		return (_Atomic_wchar_t::operator=(_Val));
		}

	wchar_t operator=(wchar_t _Val) noexcept
		{	
		return (_Atomic_wchar_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_wchar_t *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_wchar_t *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<wchar_t> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<wchar_t> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline wchar_t atomic_load_explicit(const volatile _Atomic_wchar_t *_Atom,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline wchar_t atomic_load_explicit(const _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline wchar_t atomic_load(const volatile _Atomic_wchar_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline wchar_t atomic_load(const _Atomic_wchar_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline wchar_t atomic_exchange_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_exchange_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_exchange(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_exchange(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_wchar_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_wchar_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_wchar_t::store(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_wchar_t::store(wchar_t _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline wchar_t _Atomic_wchar_t::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline wchar_t _Atomic_wchar_t::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_wchar_t::operator wchar_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_wchar_t::operator wchar_t() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline wchar_t _Atomic_wchar_t::exchange(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::exchange(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_wchar_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_wchar_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<wchar_t> *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline wchar_t atomic_load(const volatile atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline wchar_t atomic_load(const atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	[[nodiscard]] inline wchar_t atomic_load_explicit(const volatile atomic<wchar_t> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_wchar_t *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline wchar_t atomic_load_explicit(const atomic<wchar_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_wchar_t *>(_Atom), _Order));
	}

template<>
	inline wchar_t atomic_exchange(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_exchange(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_exchange_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_exchange_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline wchar_t atomic_fetch_add_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_add_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_add(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_add(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_sub_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_sub_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_sub(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_sub(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_and_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_and_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_and(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_and(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_or_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_or_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_or(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_or(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_xor_explicit(volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_xor_explicit(_Atomic_wchar_t *_Atom, wchar_t _Value, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_xor(volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_xor(_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline wchar_t _Atomic_wchar_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline wchar_t _Atomic_wchar_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline wchar_t _Atomic_wchar_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline wchar_t _Atomic_wchar_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline wchar_t _Atomic_wchar_t::fetch_add(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_add(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_sub(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_sub(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_and(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_and(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_or(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_or(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_xor(wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_xor(wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline wchar_t atomic_fetch_add(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_add(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_add_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_add_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_sub(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_sub(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_sub_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_sub_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_and(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_and(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_and_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_and_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_or(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_or(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_or_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_or_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_xor(volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_xor(atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_xor_explicit(volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_xor_explicit(atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(2 == sizeof (short),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_short
	{	
	short operator=(short) volatile noexcept;
	short operator=(short) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(short, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(short, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] short load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] short load(memory_order = memory_order_seq_cst) const noexcept;

	operator short() const volatile noexcept;
	operator short() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	short exchange(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short exchange(short, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(short&, short, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(short&, short, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(short&, short, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(short&, short, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(short&, short, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(short&, short, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(short&, short, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(short&, short, memory_order = memory_order_seq_cst) noexcept;

 
	short operator++(int) volatile noexcept;
	short operator++(int) noexcept;
	short operator--(int) volatile noexcept;
	short operator--(int) noexcept;
	short operator++() volatile noexcept;
	short operator++() noexcept;
	short operator--() volatile noexcept;
	short operator--() noexcept;
	short operator+=(short) volatile noexcept;
	short operator+=(short) noexcept;
	short operator-=(short) volatile noexcept;
	short operator-=(short) noexcept;
	short operator&=(short) volatile noexcept;
	short operator&=(short) noexcept;
	short operator|=(short) volatile noexcept;
	short operator|=(short) noexcept;
	short operator^=(short) volatile noexcept;
	short operator^=(short) noexcept;

	short fetch_add(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short fetch_add(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_sub(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short fetch_sub(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_and(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short fetch_and(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_or(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short fetch_or(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_xor(short, memory_order = memory_order_seq_cst) volatile noexcept;
	short fetch_xor(short, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_short;

 
		
template<>
	struct atomic<short>
		: _Atomic_short
	{	

	using value_type = short;
	using difference_type = short;

	atomic() noexcept = default;

	constexpr atomic(short _Val) noexcept
		: _Atomic_short{(_Uint2_t)_Val}
		{	
		}

	short operator=(short _Val) volatile noexcept
		{	
		return (_Atomic_short::operator=(_Val));
		}

	short operator=(short _Val) noexcept
		{	
		return (_Atomic_short::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_short *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_short *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<short> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<short> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_short *_Atom, short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<short> *_Atom, short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<short> *_Atom, short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_short *_Atom, short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline short atomic_load_explicit(const volatile _Atomic_short *_Atom,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline short atomic_load_explicit(const _Atomic_short *_Atom, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline short atomic_load(const volatile _Atomic_short *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline short atomic_load(const _Atomic_short *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline short atomic_exchange_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_exchange_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_exchange(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_exchange(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline short _Atomic_short::operator=(short _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline short _Atomic_short::operator=(short _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_short::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_short::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_short::store(short _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_short::store(short _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline short _Atomic_short::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline short _Atomic_short::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_short::operator short() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_short::operator short() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline short _Atomic_short::exchange(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::exchange(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_short *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<short> *_Atom, short _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<short> *_Atom, short _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_short *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<short> *_Atom, short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_short *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline short atomic_load(const volatile atomic<short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	[[nodiscard]] inline short atomic_load(const atomic<short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	[[nodiscard]] inline short atomic_load_explicit(const volatile atomic<short> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_short *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline short atomic_load_explicit(const atomic<short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_short *>(_Atom), _Order));
	}

template<>
	inline short atomic_exchange(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_exchange(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_exchange_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_exchange_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_short *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<short> *_Atom, short *_Exp, short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<short> *_Atom, short *_Exp, short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<short> *_Atom, short *_Exp, short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<short> *_Atom, short *_Exp, short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline short atomic_fetch_add_explicit(
	volatile _Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_add_explicit(
	_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_add(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_add(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_sub_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_sub_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_sub(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_sub(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_and_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_and_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_and(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_and(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_or_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_or_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_or(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_or(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_xor_explicit(volatile _Atomic_short *_Atom, short _Value,
	memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_xor_explicit(_Atomic_short *_Atom, short _Value, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_xor(volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_xor(_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline short _Atomic_short::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline short _Atomic_short::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline short _Atomic_short::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline short _Atomic_short::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline short _Atomic_short::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline short _Atomic_short::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline short _Atomic_short::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline short _Atomic_short::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline short _Atomic_short::operator+=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline short _Atomic_short::operator+=(short _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline short _Atomic_short::operator-=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline short _Atomic_short::operator-=(short _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline short _Atomic_short::operator&=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline short _Atomic_short::operator&=(short _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline short _Atomic_short::operator|=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline short _Atomic_short::operator|=(short _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline short _Atomic_short::operator^=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline short _Atomic_short::operator^=(short _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline short _Atomic_short::fetch_add(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_add(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_sub(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_sub(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_and(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_and(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_or(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_or(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_xor(short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_xor(short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline short atomic_fetch_add(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_add(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_add_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_add_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_sub(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_sub(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_sub_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_sub_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_and(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_and(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_and_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_and_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_or(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_or(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_or_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_or_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_xor(volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_xor(atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_xor_explicit(volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_xor_explicit(atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(2 == sizeof (unsigned short),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ushort
	{	
	unsigned short operator=(unsigned short) volatile noexcept;
	unsigned short operator=(unsigned short) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] unsigned short load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] unsigned short load(memory_order = memory_order_seq_cst) const noexcept;

	operator unsigned short() const volatile noexcept;
	operator unsigned short() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	unsigned short exchange(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short exchange(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short, memory_order = memory_order_seq_cst) noexcept;

 
	unsigned short operator++(int) volatile noexcept;
	unsigned short operator++(int) noexcept;
	unsigned short operator--(int) volatile noexcept;
	unsigned short operator--(int) noexcept;
	unsigned short operator++() volatile noexcept;
	unsigned short operator++() noexcept;
	unsigned short operator--() volatile noexcept;
	unsigned short operator--() noexcept;
	unsigned short operator+=(unsigned short) volatile noexcept;
	unsigned short operator+=(unsigned short) noexcept;
	unsigned short operator-=(unsigned short) volatile noexcept;
	unsigned short operator-=(unsigned short) noexcept;
	unsigned short operator&=(unsigned short) volatile noexcept;
	unsigned short operator&=(unsigned short) noexcept;
	unsigned short operator|=(unsigned short) volatile noexcept;
	unsigned short operator|=(unsigned short) noexcept;
	unsigned short operator^=(unsigned short) volatile noexcept;
	unsigned short operator^=(unsigned short) noexcept;

	unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_ushort;

 
		
template<>
	struct atomic<unsigned short>
		: _Atomic_ushort
	{	

	using value_type = unsigned short;
	using difference_type = unsigned short;

	atomic() noexcept = default;

	constexpr atomic(unsigned short _Val) noexcept
		: _Atomic_ushort{(_Uint2_t)_Val}
		{	
		}

	unsigned short operator=(unsigned short _Val) volatile noexcept
		{	
		return (_Atomic_ushort::operator=(_Val));
		}

	unsigned short operator=(unsigned short _Val) noexcept
		{	
		return (_Atomic_ushort::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_ushort *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_ushort *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned short> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned short> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline unsigned short atomic_load_explicit(const volatile _Atomic_ushort *_Atom,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned short atomic_load_explicit(const _Atomic_ushort *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned short atomic_load(const volatile _Atomic_ushort *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline unsigned short atomic_load(const _Atomic_ushort *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned short atomic_exchange_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_exchange_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_exchange(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_exchange(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_ushort::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_ushort::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ushort::store(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ushort::store(unsigned short _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline unsigned short _Atomic_ushort::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline unsigned short _Atomic_ushort::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_ushort::operator unsigned short() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ushort::operator unsigned short() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline unsigned short _Atomic_ushort::exchange(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::exchange(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ushort *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ushort *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned short> *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ushort *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline unsigned short atomic_load(const volatile atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned short atomic_load(const atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned short atomic_load_explicit(const volatile atomic<unsigned short> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ushort *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline unsigned short atomic_load_explicit(const atomic<unsigned short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ushort *>(_Atom), _Order));
	}

template<>
	inline unsigned short atomic_exchange(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_exchange(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_exchange_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_exchange_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ushort *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline unsigned short atomic_fetch_add_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_add_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_add(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_add(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_sub_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_sub_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_sub(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_sub(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_and_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_and_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_and(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_and(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_or_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_or_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_or(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_or(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_xor_explicit(volatile _Atomic_ushort *_Atom, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_xor_explicit(_Atomic_ushort *_Atom, unsigned short _Value, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_xor(volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_xor(_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned short _Atomic_ushort::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned short _Atomic_ushort::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned short _Atomic_ushort::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned short _Atomic_ushort::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned short _Atomic_ushort::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned short _Atomic_ushort::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned short _Atomic_ushort::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned short _Atomic_ushort::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned short _Atomic_ushort::fetch_add(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_add(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_sub(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_sub(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_and(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_and(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_or(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_or(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_xor(unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_xor(unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned short atomic_fetch_add(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_add(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_add_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_add_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_sub(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_sub(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_sub_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_sub_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_and(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_and(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_and_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_and_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_or(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_or(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_or_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_or_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_xor(volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_xor(atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_xor_explicit(volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_xor_explicit(atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(4 == sizeof (int),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_int
	{	
	int operator=(int) volatile noexcept;
	int operator=(int) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(int, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(int, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] int load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] int load(memory_order = memory_order_seq_cst) const noexcept;

	operator int() const volatile noexcept;
	operator int() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	int exchange(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int exchange(int, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(int&, int, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(int&, int, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(int&, int, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(int&, int, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(int&, int, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(int&, int, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(int&, int, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(int&, int, memory_order = memory_order_seq_cst) noexcept;

 
	int operator++(int) volatile noexcept;
	int operator++(int) noexcept;
	int operator--(int) volatile noexcept;
	int operator--(int) noexcept;
	int operator++() volatile noexcept;
	int operator++() noexcept;
	int operator--() volatile noexcept;
	int operator--() noexcept;
	int operator+=(int) volatile noexcept;
	int operator+=(int) noexcept;
	int operator-=(int) volatile noexcept;
	int operator-=(int) noexcept;
	int operator&=(int) volatile noexcept;
	int operator&=(int) noexcept;
	int operator|=(int) volatile noexcept;
	int operator|=(int) noexcept;
	int operator^=(int) volatile noexcept;
	int operator^=(int) noexcept;

	int fetch_add(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int fetch_add(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_sub(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int fetch_sub(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_and(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int fetch_and(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_or(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int fetch_or(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_xor(int, memory_order = memory_order_seq_cst) volatile noexcept;
	int fetch_xor(int, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_int;

 
		
template<>
	struct atomic<int>
		: _Atomic_int
	{	

	using value_type = int;
	using difference_type = int;

	atomic() noexcept = default;

	constexpr atomic(int _Val) noexcept
		: _Atomic_int{(_Uint4_t)_Val}
		{	
		}

	int operator=(int _Val) volatile noexcept
		{	
		return (_Atomic_int::operator=(_Val));
		}

	int operator=(int _Val) noexcept
		{	
		return (_Atomic_int::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_int *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_int *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<int> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<int> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_int *_Atom, int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<int> *_Atom, int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<int> *_Atom, int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_int *_Atom, int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline int atomic_load_explicit(const volatile _Atomic_int *_Atom,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline int atomic_load_explicit(const _Atomic_int *_Atom, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline int atomic_load(const volatile _Atomic_int *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline int atomic_load(const _Atomic_int *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline int atomic_exchange_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_exchange_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_exchange(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_exchange(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline int _Atomic_int::operator=(int _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline int _Atomic_int::operator=(int _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_int::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_int::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_int::store(int _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_int::store(int _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline int _Atomic_int::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline int _Atomic_int::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_int::operator int() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_int::operator int() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline int _Atomic_int::exchange(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::exchange(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_int *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<int> *_Atom, int _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<int> *_Atom, int _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_int *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<int> *_Atom, int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_int *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline int atomic_load(const volatile atomic<int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	[[nodiscard]] inline int atomic_load(const atomic<int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	[[nodiscard]] inline int atomic_load_explicit(const volatile atomic<int> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_int *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline int atomic_load_explicit(const atomic<int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_int *>(_Atom), _Order));
	}

template<>
	inline int atomic_exchange(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_exchange(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_exchange_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_exchange_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_int *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<int> *_Atom, int *_Exp, int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<int> *_Atom, int *_Exp, int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<int> *_Atom, int *_Exp, int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<int> *_Atom, int *_Exp, int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline int atomic_fetch_add_explicit(
	volatile _Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_add_explicit(
	_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_add(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_add(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_sub_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_sub_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_sub(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_sub(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_and_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_and_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_and(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_and(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_or_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_or_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_or(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_or(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_xor_explicit(volatile _Atomic_int *_Atom, int _Value,
	memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_xor_explicit(_Atomic_int *_Atom, int _Value, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_xor(volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_xor(_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline int _Atomic_int::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline int _Atomic_int::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline int _Atomic_int::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline int _Atomic_int::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline int _Atomic_int::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline int _Atomic_int::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline int _Atomic_int::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline int _Atomic_int::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline int _Atomic_int::operator+=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline int _Atomic_int::operator+=(int _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline int _Atomic_int::operator-=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline int _Atomic_int::operator-=(int _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline int _Atomic_int::operator&=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline int _Atomic_int::operator&=(int _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline int _Atomic_int::operator|=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline int _Atomic_int::operator|=(int _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline int _Atomic_int::operator^=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline int _Atomic_int::operator^=(int _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline int _Atomic_int::fetch_add(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_add(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_sub(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_sub(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_and(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_and(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_or(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_or(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_xor(int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_xor(int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline int atomic_fetch_add(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_add(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_add_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_add_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_sub(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_sub(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_sub_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_sub_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_and(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_and(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_and_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_and_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_or(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_or(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_or_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_or_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_xor(volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_xor(atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_xor_explicit(volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_xor_explicit(atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(4 == sizeof (unsigned int),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_uint
	{	
	unsigned int operator=(unsigned int) volatile noexcept;
	unsigned int operator=(unsigned int) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] unsigned int load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] unsigned int load(memory_order = memory_order_seq_cst) const noexcept;

	operator unsigned int() const volatile noexcept;
	operator unsigned int() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	unsigned int exchange(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int exchange(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int, memory_order = memory_order_seq_cst) noexcept;

 
	unsigned int operator++(int) volatile noexcept;
	unsigned int operator++(int) noexcept;
	unsigned int operator--(int) volatile noexcept;
	unsigned int operator--(int) noexcept;
	unsigned int operator++() volatile noexcept;
	unsigned int operator++() noexcept;
	unsigned int operator--() volatile noexcept;
	unsigned int operator--() noexcept;
	unsigned int operator+=(unsigned int) volatile noexcept;
	unsigned int operator+=(unsigned int) noexcept;
	unsigned int operator-=(unsigned int) volatile noexcept;
	unsigned int operator-=(unsigned int) noexcept;
	unsigned int operator&=(unsigned int) volatile noexcept;
	unsigned int operator&=(unsigned int) noexcept;
	unsigned int operator|=(unsigned int) volatile noexcept;
	unsigned int operator|=(unsigned int) noexcept;
	unsigned int operator^=(unsigned int) volatile noexcept;
	unsigned int operator^=(unsigned int) noexcept;

	unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_uint;

 
		
template<>
	struct atomic<unsigned int>
		: _Atomic_uint
	{	

	using value_type = unsigned int;
	using difference_type = unsigned int;

	atomic() noexcept = default;

	constexpr atomic(unsigned int _Val) noexcept
		: _Atomic_uint{(_Uint4_t)_Val}
		{	
		}

	unsigned int operator=(unsigned int _Val) volatile noexcept
		{	
		return (_Atomic_uint::operator=(_Val));
		}

	unsigned int operator=(unsigned int _Val) noexcept
		{	
		return (_Atomic_uint::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_uint *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_uint *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned int> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned int> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline unsigned int atomic_load_explicit(const volatile _Atomic_uint *_Atom,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned int atomic_load_explicit(const _Atomic_uint *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned int atomic_load(const volatile _Atomic_uint *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline unsigned int atomic_load(const _Atomic_uint *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned int atomic_exchange_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_exchange_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_exchange(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_exchange(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned int _Atomic_uint::operator=(unsigned int _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned int _Atomic_uint::operator=(unsigned int _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_uint::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_uint::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_uint::store(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_uint::store(unsigned int _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline unsigned int _Atomic_uint::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline unsigned int _Atomic_uint::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_uint::operator unsigned int() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_uint::operator unsigned int() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline unsigned int _Atomic_uint::exchange(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::exchange(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_uint *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_uint *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned int> *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_uint *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline unsigned int atomic_load(const volatile atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned int atomic_load(const atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned int atomic_load_explicit(const volatile atomic<unsigned int> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_uint *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline unsigned int atomic_load_explicit(const atomic<unsigned int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_uint *>(_Atom), _Order));
	}

template<>
	inline unsigned int atomic_exchange(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_exchange(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_exchange_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_exchange_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_uint *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline unsigned int atomic_fetch_add_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_add_explicit(
	_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_add(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_add(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_sub_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_sub_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_sub(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_sub(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_and_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_and_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_and(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_and(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_or_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_or_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_or(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_or(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_xor_explicit(volatile _Atomic_uint *_Atom, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_xor_explicit(_Atomic_uint *_Atom, unsigned int _Value, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_xor(volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_xor(_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned int _Atomic_uint::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned int _Atomic_uint::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned int _Atomic_uint::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned int _Atomic_uint::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned int _Atomic_uint::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned int _Atomic_uint::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned int _Atomic_uint::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned int _Atomic_uint::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned int _Atomic_uint::fetch_add(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_add(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_sub(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_sub(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_and(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_and(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_or(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_or(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_xor(unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_xor(unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned int atomic_fetch_add(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_add(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_add_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_add_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_sub(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_sub(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_sub_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_sub_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_and(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_and(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_and_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_and_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_or(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_or(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_or_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_or_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_xor(volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_xor(atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_xor_explicit(volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_xor_explicit(atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(4 == sizeof (long),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_long
	{	
	long operator=(long) volatile noexcept;
	long operator=(long) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(long, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(long, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] long load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] long load(memory_order = memory_order_seq_cst) const noexcept;

	operator long() const volatile noexcept;
	operator long() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	long exchange(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long exchange(long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(long&, long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(long&, long, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(long&, long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(long&, long, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(long&, long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(long&, long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(long&, long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(long&, long, memory_order = memory_order_seq_cst) noexcept;

 
	long operator++(int) volatile noexcept;
	long operator++(int) noexcept;
	long operator--(int) volatile noexcept;
	long operator--(int) noexcept;
	long operator++() volatile noexcept;
	long operator++() noexcept;
	long operator--() volatile noexcept;
	long operator--() noexcept;
	long operator+=(long) volatile noexcept;
	long operator+=(long) noexcept;
	long operator-=(long) volatile noexcept;
	long operator-=(long) noexcept;
	long operator&=(long) volatile noexcept;
	long operator&=(long) noexcept;
	long operator|=(long) volatile noexcept;
	long operator|=(long) noexcept;
	long operator^=(long) volatile noexcept;
	long operator^=(long) noexcept;

	long fetch_add(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long fetch_add(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_sub(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long fetch_sub(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_and(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long fetch_and(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_or(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long fetch_or(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_xor(long, memory_order = memory_order_seq_cst) volatile noexcept;
	long fetch_xor(long, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_long;

 
		
template<>
	struct atomic<long>
		: _Atomic_long
	{	

	using value_type = long;
	using difference_type = long;

	atomic() noexcept = default;

	constexpr atomic(long _Val) noexcept
		: _Atomic_long{(_Uint4_t)_Val}
		{	
		}

	long operator=(long _Val) volatile noexcept
		{	
		return (_Atomic_long::operator=(_Val));
		}

	long operator=(long _Val) noexcept
		{	
		return (_Atomic_long::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_long *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_long *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<long> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<long> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_long *_Atom, long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<long> *_Atom, long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<long> *_Atom, long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_long *_Atom, long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline long atomic_load_explicit(const volatile _Atomic_long *_Atom,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline long atomic_load_explicit(const _Atomic_long *_Atom, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline long atomic_load(const volatile _Atomic_long *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline long atomic_load(const _Atomic_long *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long atomic_exchange_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_exchange_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_exchange(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_exchange(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline long _Atomic_long::operator=(long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline long _Atomic_long::operator=(long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_long::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_long::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_long::store(long _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_long::store(long _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline long _Atomic_long::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline long _Atomic_long::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_long::operator long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_long::operator long() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline long _Atomic_long::exchange(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::exchange(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_long *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<long> *_Atom, long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<long> *_Atom, long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_long *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<long> *_Atom, long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_long *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline long atomic_load(const volatile atomic<long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	[[nodiscard]] inline long atomic_load(const atomic<long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	[[nodiscard]] inline long atomic_load_explicit(const volatile atomic<long> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_long *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline long atomic_load_explicit(const atomic<long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_long *>(_Atom), _Order));
	}

template<>
	inline long atomic_exchange(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_exchange(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_exchange_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_exchange_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_long *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<long> *_Atom, long *_Exp, long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<long> *_Atom, long *_Exp, long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<long> *_Atom, long *_Exp, long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<long> *_Atom, long *_Exp, long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline long atomic_fetch_add_explicit(
	volatile _Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_add_explicit(
	_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_add(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_add(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_sub_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_sub_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_sub(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_sub(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_and_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_and_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_and(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_and(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_or_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_or_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_or(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_or(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_xor_explicit(volatile _Atomic_long *_Atom, long _Value,
	memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_xor_explicit(_Atomic_long *_Atom, long _Value, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_xor(volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_xor(_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline long _Atomic_long::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long _Atomic_long::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long _Atomic_long::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long _Atomic_long::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long _Atomic_long::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long _Atomic_long::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long _Atomic_long::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long _Atomic_long::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long _Atomic_long::operator+=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long _Atomic_long::operator+=(long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long _Atomic_long::operator-=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long _Atomic_long::operator-=(long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long _Atomic_long::operator&=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long _Atomic_long::operator&=(long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long _Atomic_long::operator|=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long _Atomic_long::operator|=(long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long _Atomic_long::operator^=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long _Atomic_long::operator^=(long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long _Atomic_long::fetch_add(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_add(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_sub(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_sub(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_and(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_and(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_or(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_or(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_xor(long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_xor(long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline long atomic_fetch_add(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_add(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_add_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_add_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_sub(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_sub(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_sub_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_sub_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_and(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_and(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_and_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_and_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_or(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_or(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_or_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_or_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_xor(volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_xor(atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_xor_explicit(volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_xor_explicit(atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(4 == sizeof (unsigned long),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ulong
	{	
	unsigned long operator=(unsigned long) volatile noexcept;
	unsigned long operator=(unsigned long) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] unsigned long load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] unsigned long load(memory_order = memory_order_seq_cst) const noexcept;

	operator unsigned long() const volatile noexcept;
	operator unsigned long() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	unsigned long exchange(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long exchange(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long, memory_order = memory_order_seq_cst) noexcept;

 
	unsigned long operator++(int) volatile noexcept;
	unsigned long operator++(int) noexcept;
	unsigned long operator--(int) volatile noexcept;
	unsigned long operator--(int) noexcept;
	unsigned long operator++() volatile noexcept;
	unsigned long operator++() noexcept;
	unsigned long operator--() volatile noexcept;
	unsigned long operator--() noexcept;
	unsigned long operator+=(unsigned long) volatile noexcept;
	unsigned long operator+=(unsigned long) noexcept;
	unsigned long operator-=(unsigned long) volatile noexcept;
	unsigned long operator-=(unsigned long) noexcept;
	unsigned long operator&=(unsigned long) volatile noexcept;
	unsigned long operator&=(unsigned long) noexcept;
	unsigned long operator|=(unsigned long) volatile noexcept;
	unsigned long operator|=(unsigned long) noexcept;
	unsigned long operator^=(unsigned long) volatile noexcept;
	unsigned long operator^=(unsigned long) noexcept;

	unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_ulong;

 
		
template<>
	struct atomic<unsigned long>
		: _Atomic_ulong
	{	

	using value_type = unsigned long;
	using difference_type = unsigned long;

	atomic() noexcept = default;

	constexpr atomic(unsigned long _Val) noexcept
		: _Atomic_ulong{(_Uint4_t)_Val}
		{	
		}

	unsigned long operator=(unsigned long _Val) volatile noexcept
		{	
		return (_Atomic_ulong::operator=(_Val));
		}

	unsigned long operator=(unsigned long _Val) noexcept
		{	
		return (_Atomic_ulong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_ulong *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_ulong *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned long> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned long> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline unsigned long atomic_load_explicit(const volatile _Atomic_ulong *_Atom,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned long atomic_load_explicit(const _Atomic_ulong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned long atomic_load(const volatile _Atomic_ulong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline unsigned long atomic_load(const _Atomic_ulong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long atomic_exchange_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_exchange_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_exchange(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_exchange(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_ulong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_ulong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ulong::store(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ulong::store(unsigned long _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline unsigned long _Atomic_ulong::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline unsigned long _Atomic_ulong::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_ulong::operator unsigned long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ulong::operator unsigned long() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline unsigned long _Atomic_ulong::exchange(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::exchange(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ulong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ulong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned long> *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ulong *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline unsigned long atomic_load(const volatile atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned long atomic_load(const atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned long atomic_load_explicit(const volatile atomic<unsigned long> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ulong *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline unsigned long atomic_load_explicit(const atomic<unsigned long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ulong *>(_Atom), _Order));
	}

template<>
	inline unsigned long atomic_exchange(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_exchange(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_exchange_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_exchange_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ulong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline unsigned long atomic_fetch_add_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_add_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_add(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_add(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_sub_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_sub_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_sub(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_sub(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_and_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_and_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_and(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_and(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_or_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_or_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_or(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_or(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_xor_explicit(volatile _Atomic_ulong *_Atom, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_xor_explicit(_Atomic_ulong *_Atom, unsigned long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_xor(volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_xor(_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned long _Atomic_ulong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long _Atomic_ulong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long _Atomic_ulong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long _Atomic_ulong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long _Atomic_ulong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long _Atomic_ulong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long _Atomic_ulong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long _Atomic_ulong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long _Atomic_ulong::fetch_add(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_add(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_sub(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_sub(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_and(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_and(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_or(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_or(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_xor(unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_xor(unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned long atomic_fetch_add(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_add(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_add_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_add_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_sub(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_sub(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_sub_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_sub_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_and(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_and(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_and_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_and_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_or(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_or(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_or_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_or_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_xor(volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_xor(atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_xor_explicit(volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_xor_explicit(atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(8 == sizeof (long long),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_llong
	{	
	long long operator=(long long) volatile noexcept;
	long long operator=(long long) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(long long, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] long long load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] long long load(memory_order = memory_order_seq_cst) const noexcept;

	operator long long() const volatile noexcept;
	operator long long() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	long long exchange(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long exchange(long long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(long long&, long long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(long long&, long long, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(long long&, long long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(long long&, long long, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(long long&, long long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(long long&, long long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(long long&, long long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(long long&, long long, memory_order = memory_order_seq_cst) noexcept;

 
	long long operator++(int) volatile noexcept;
	long long operator++(int) noexcept;
	long long operator--(int) volatile noexcept;
	long long operator--(int) noexcept;
	long long operator++() volatile noexcept;
	long long operator++() noexcept;
	long long operator--() volatile noexcept;
	long long operator--() noexcept;
	long long operator+=(long long) volatile noexcept;
	long long operator+=(long long) noexcept;
	long long operator-=(long long) volatile noexcept;
	long long operator-=(long long) noexcept;
	long long operator&=(long long) volatile noexcept;
	long long operator&=(long long) noexcept;
	long long operator|=(long long) volatile noexcept;
	long long operator|=(long long) noexcept;
	long long operator^=(long long) volatile noexcept;
	long long operator^=(long long) noexcept;

	long long fetch_add(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long fetch_add(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_sub(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long fetch_sub(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_and(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long fetch_and(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_or(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long fetch_or(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_xor(long long, memory_order = memory_order_seq_cst) volatile noexcept;
	long long fetch_xor(long long, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_llong;

 
		
template<>
	struct atomic<long long>
		: _Atomic_llong
	{	

	using value_type = long long;
	using difference_type = long long;

	atomic() noexcept = default;

	constexpr atomic(long long _Val) noexcept
		: _Atomic_llong{(_Uint8_t)_Val}
		{	
		}

	long long operator=(long long _Val) volatile noexcept
		{	
		return (_Atomic_llong::operator=(_Val));
		}

	long long operator=(long long _Val) noexcept
		{	
		return (_Atomic_llong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_llong *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_llong *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<long long> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<long long> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 
inline void atomic_init(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(atomic<long long> *_Atom, long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline long long atomic_load_explicit(const volatile _Atomic_llong *_Atom,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline long long atomic_load_explicit(const _Atomic_llong *_Atom, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline long long atomic_load(const volatile _Atomic_llong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline long long atomic_load(const _Atomic_llong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long long atomic_exchange_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_exchange_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_exchange(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_exchange(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline long long _Atomic_llong::operator=(long long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline long long _Atomic_llong::operator=(long long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_llong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_llong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_llong::store(long long _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_llong::store(long long _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline long long _Atomic_llong::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline long long _Atomic_llong::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_llong::operator long long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_llong::operator long long() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline long long _Atomic_llong::exchange(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::exchange(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_llong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<long long> *_Atom, long long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<long long> *_Atom, long long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_llong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<long long> *_Atom, long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_llong *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline long long atomic_load(const volatile atomic<long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline long long atomic_load(const atomic<long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline long long atomic_load_explicit(const volatile atomic<long long> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_llong *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline long long atomic_load_explicit(const atomic<long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_llong *>(_Atom), _Order));
	}

template<>
	inline long long atomic_exchange(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_exchange(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_exchange_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_exchange_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_llong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<long long> *_Atom, long long *_Exp, long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<long long> *_Atom, long long *_Exp, long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline long long atomic_fetch_add_explicit(
	volatile _Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_add_explicit(
	_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_add(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_add(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_sub_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_sub_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_sub(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_sub(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_and_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_and_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_and(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_and(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_or_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_or_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_or(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_or(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_xor_explicit(volatile _Atomic_llong *_Atom, long long _Value,
	memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_xor_explicit(_Atomic_llong *_Atom, long long _Value, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_xor(volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_xor(_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline long long _Atomic_llong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long long _Atomic_llong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long long _Atomic_llong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long long _Atomic_llong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long long _Atomic_llong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long long _Atomic_llong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long long _Atomic_llong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long long _Atomic_llong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long long _Atomic_llong::operator+=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long long _Atomic_llong::operator+=(long long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long long _Atomic_llong::operator-=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long long _Atomic_llong::operator-=(long long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long long _Atomic_llong::operator&=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long long _Atomic_llong::operator&=(long long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long long _Atomic_llong::operator|=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long long _Atomic_llong::operator|=(long long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long long _Atomic_llong::operator^=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long long _Atomic_llong::operator^=(long long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long long _Atomic_llong::fetch_add(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_add(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_sub(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_sub(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_and(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_and(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_or(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_or(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_xor(long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_xor(long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline long long atomic_fetch_add(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_add(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_add_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_add_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_sub(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_sub(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_sub_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_sub_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_and(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_and(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_and_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_and_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_or(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_or(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_or_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_or_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_xor(volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_xor(atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_xor_explicit(volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_xor_explicit(atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(8 == sizeof (unsigned long long),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ullong
	{	
	unsigned long long operator=(unsigned long long) volatile noexcept;
	unsigned long long operator=(unsigned long long) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] unsigned long long load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] unsigned long long load(memory_order = memory_order_seq_cst) const noexcept;

	operator unsigned long long() const volatile noexcept;
	operator unsigned long long() const noexcept;
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	unsigned long long exchange(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long exchange(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long, memory_order = memory_order_seq_cst) noexcept;

 
	unsigned long long operator++(int) volatile noexcept;
	unsigned long long operator++(int) noexcept;
	unsigned long long operator--(int) volatile noexcept;
	unsigned long long operator--(int) noexcept;
	unsigned long long operator++() volatile noexcept;
	unsigned long long operator++() noexcept;
	unsigned long long operator--() volatile noexcept;
	unsigned long long operator--() noexcept;
	unsigned long long operator+=(unsigned long long) volatile noexcept;
	unsigned long long operator+=(unsigned long long) noexcept;
	unsigned long long operator-=(unsigned long long) volatile noexcept;
	unsigned long long operator-=(unsigned long long) noexcept;
	unsigned long long operator&=(unsigned long long) volatile noexcept;
	unsigned long long operator&=(unsigned long long) noexcept;
	unsigned long long operator|=(unsigned long long) volatile noexcept;
	unsigned long long operator|=(unsigned long long) noexcept;
	unsigned long long operator^=(unsigned long long) volatile noexcept;
	unsigned long long operator^=(unsigned long long) noexcept;

	unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 














 



 
	alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_ullong;

 
		
template<>
	struct atomic<unsigned long long>
		: _Atomic_ullong
	{	

	using value_type = unsigned long long;
	using difference_type = unsigned long long;

	atomic() noexcept = default;

	constexpr atomic(unsigned long long _Val) noexcept
		: _Atomic_ullong{(_Uint8_t)_Val}
		{	
		}

	unsigned long long operator=(unsigned long long _Val) volatile noexcept
		{	
		return (_Atomic_ullong::operator=(_Val));
		}

	unsigned long long operator=(unsigned long long _Val) noexcept
		{	
		return (_Atomic_ullong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 































































































































































































































		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_ullong *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_ullong *) noexcept
	{	
	return (true);
	}

 
[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned long long> *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned long long> *) noexcept
	{	
	return (true);
	}
 #line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}
 #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline void atomic_store_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline unsigned long long atomic_load_explicit(const volatile _Atomic_ullong *_Atom,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned long long atomic_load_explicit(const _Atomic_ullong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline unsigned long long atomic_load(const volatile _Atomic_ullong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline unsigned long long atomic_load(const _Atomic_ullong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long long atomic_exchange_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_exchange_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_exchange(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_exchange(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_ullong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_ullong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ullong::store(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ullong::store(unsigned long long _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline unsigned long long _Atomic_ullong::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline unsigned long long _Atomic_ullong::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}


inline _Atomic_ullong::operator unsigned long long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ullong::operator unsigned long long() const noexcept
	{	
	return (atomic_load(this));
	}
#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

inline unsigned long long _Atomic_ullong::exchange(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::exchange(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ullong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ullong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ullong *>(_Atom),
		_Value, _Order);
	}

template<>
	[[nodiscard]] inline unsigned long long atomic_load(const volatile atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned long long atomic_load(const atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	[[nodiscard]] inline unsigned long long atomic_load_explicit(const volatile atomic<unsigned long long> *_Atom,
		memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ullong *>(_Atom), _Order));
	}

template<>
	[[nodiscard]] inline unsigned long long atomic_load_explicit(const atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ullong *>(_Atom), _Order));
	}

template<>
	inline unsigned long long atomic_exchange(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_exchange(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_exchange_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_exchange_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ullong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
		
inline unsigned long long atomic_fetch_add_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_add_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_add(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_add(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_sub_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_sub_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_sub(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_sub(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_and_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_and_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_and(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_and(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_or_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_or_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_or(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_or(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_xor_explicit(volatile _Atomic_ullong *_Atom, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_xor_explicit(_Atomic_ullong *_Atom, unsigned long long _Value, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_xor(volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_xor(_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned long long _Atomic_ullong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long long _Atomic_ullong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long long _Atomic_ullong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long long _Atomic_ullong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long long _Atomic_ullong::fetch_add(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_add(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_sub(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_sub(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_and(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_and(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_or(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_or(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_xor(unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_xor(unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned long long atomic_fetch_add(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_add(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_add_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_add_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_sub(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_sub(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_sub_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_sub_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_and(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_and(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_and_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_and_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_or(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_or(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_or_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_or_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_xor(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_xor(atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_xor_explicit(volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_xor_explicit(atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}
 #line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
 #line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

 
















































































































#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"










static_assert(8 == sizeof (void *),
	"_ISIZE and _ITYPE should match.");







  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_address
	{	
	void * operator=(void *) volatile noexcept;
	void * operator=(void *) noexcept;


	static constexpr bool is_always_lock_free = true;
	static constexpr bool _Is_usually_lock_free = true;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	[[nodiscard]] bool is_lock_free() const volatile noexcept;
	[[nodiscard]] bool is_lock_free() const noexcept;
	void store(void *, memory_order = memory_order_seq_cst) volatile noexcept;
	void store(void *, memory_order = memory_order_seq_cst) noexcept;
	[[nodiscard]] void * load(memory_order = memory_order_seq_cst) const volatile noexcept;
	[[nodiscard]] void * load(memory_order = memory_order_seq_cst) const noexcept;




	void * exchange(void *, memory_order = memory_order_seq_cst) volatile noexcept;
	void * exchange(void *, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(void *&, void *, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(void *&, void *, memory_order, memory_order) noexcept;
	bool compare_exchange_strong(void *&, void *, memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(void *&, void *, memory_order, memory_order) noexcept;
	bool compare_exchange_weak(void *&, void *, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(void *&, void *, memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(void *&, void *, memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(void *&, void *, memory_order = memory_order_seq_cst) noexcept;

 































 
	void * fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) volatile noexcept;
	void * fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) noexcept;
	void * fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) volatile noexcept;
	void * fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) noexcept;
	void * operator+=(ptrdiff_t) volatile noexcept;
	void * operator+=(ptrdiff_t) noexcept;
	void * operator-=(ptrdiff_t) volatile noexcept;
	void * operator-=(ptrdiff_t) noexcept;
 #line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"





 



 
	alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;
 

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

	} _Atomic_address;

 
































 
		
template<class _Ty>
	struct atomic<_Ty *>
		: _Atomic_address
	{	
	using value_type = _Ty *;
	using difference_type = ptrdiff_t;

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;

	atomic() noexcept = default;

	constexpr atomic(_Ty *_Right) noexcept
		: _Atomic_address{(_Uint8_t)_Right}
		{	
		}

	_Ty *operator=(_Ty *_Right) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::operator=((void *)_Right)));
		}

	_Ty *operator=(_Ty *_Right) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::operator=((void *)_Right)));
		}

	void store(_Ty *_Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		_Atomic_address::store((void *)_Value, _Order);
		}

	void store(_Ty *_Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		_Atomic_address::store((void *)_Value, _Order);
		}

	[[nodiscard]] _Ty *load(memory_order _Order = memory_order_seq_cst) const volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
		}

	[[nodiscard]] _Ty *load(memory_order _Order = memory_order_seq_cst) const noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
		}

	operator _Ty *() const volatile noexcept
		{	
		return (load());
		}

	operator _Ty *() const noexcept
		{	
		return (load());
		}

	_Ty *exchange(_Ty *_Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
			(void *)_Value, _Order)));
		}

	_Ty *exchange(_Ty *_Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
			(void *)_Value, _Order)));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	_Ty *fetch_add(ptrdiff_t _Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_add(_Value * sizeof (_Ty), _Order)));
		}

	_Ty *fetch_add(ptrdiff_t _Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_add(_Value * sizeof (_Ty), _Order)));
		}

	_Ty *fetch_sub(ptrdiff_t _Value, memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_sub(_Value * sizeof (_Ty), _Order)));
		}

	_Ty *fetch_sub(ptrdiff_t _Value, memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_sub(_Value * sizeof (_Ty), _Order)));
		}

	_Ty *operator++(int) volatile noexcept
		{	
		return (fetch_add(1));
		}

	_Ty *operator++(int) noexcept
		{	
		return (fetch_add(1));
		}

	_Ty *operator--(int) volatile noexcept
		{	
		return (fetch_sub(1));
		}

	_Ty *operator--(int) noexcept
		{	
		return (fetch_sub(1));
		}

	_Ty *operator+=(ptrdiff_t _Right) volatile noexcept
		{	
		return (fetch_add(_Right) + _Right);
		}

	_Ty *operator+=(ptrdiff_t _Right) noexcept
		{	
		return (fetch_add(_Right) + _Right);
		}

	_Ty *operator-=(ptrdiff_t _Right) volatile noexcept
		{	
		return (fetch_sub(_Right) - _Right);
		}

	_Ty *operator-=(ptrdiff_t _Right) noexcept
		{	
		return (fetch_sub(_Right) - _Right);
		}

	_Ty *operator++() volatile noexcept
		{	
		return (*this += 1);
		}

	_Ty *operator++() noexcept
		{	
		return (*this += 1);
		}

	_Ty *operator--() volatile noexcept
		{	
		return (*this -= 1);
		}

	_Ty *operator--() noexcept
		{	
		return (*this -= 1);
		}
	};
 #line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"

		
	
[[nodiscard]] inline bool atomic_is_lock_free(const volatile _Atomic_address *) noexcept
	{	
	return (true);
	}

[[nodiscard]] inline bool atomic_is_lock_free(const _Atomic_address *) noexcept
	{	
	return (true);
	}

 











	
inline void atomic_init(volatile _Atomic_address *_Atom, void * _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_address *_Atom, void * _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 













inline void atomic_store_explicit(volatile _Atomic_address *_Atom, void * _Value,
	memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(_Atomic_address *_Atom, void * _Value, memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_address *_Atom, void * _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_address *_Atom, void * _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

[[nodiscard]] inline void * atomic_load_explicit(const volatile _Atomic_address *_Atom,
		memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline void * atomic_load_explicit(const _Atomic_address *_Atom, memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

[[nodiscard]] inline void * atomic_load(const volatile _Atomic_address *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

[[nodiscard]] inline void * atomic_load(const _Atomic_address *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline void * atomic_exchange_explicit(volatile _Atomic_address *_Atom, void * _Value,
	memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_exchange_explicit(_Atomic_address *_Atom, void * _Value, memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_exchange(volatile _Atomic_address *_Atom, void * _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_exchange(_Atomic_address *_Atom, void * _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline void * _Atomic_address::operator=(void * _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline void * _Atomic_address::operator=(void * _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

[[nodiscard]] inline bool _Atomic_address::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

[[nodiscard]] inline bool _Atomic_address::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_address::store(void * _Value, memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_address::store(void * _Value, memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

[[nodiscard]] inline void * _Atomic_address::load(memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

[[nodiscard]] inline void * _Atomic_address::load(memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}













inline void * _Atomic_address::exchange(void * _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::exchange(void * _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 



















































































































































































 













































































































































































































































































































































































































 
		
inline void * atomic_fetch_add_explicit(volatile _Atomic_address *_Atom, ptrdiff_t _Value,
	memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_add_explicit(_Atomic_address *_Atom, ptrdiff_t _Value,
	memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_add(volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_add(_Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_sub_explicit(volatile _Atomic_address *_Atom, ptrdiff_t _Value,
	memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_sub_explicit(_Atomic_address *_Atom, ptrdiff_t _Value,
	memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_sub(volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_sub(_Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline void * _Atomic_address::fetch_add(ptrdiff_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_add(ptrdiff_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_sub(ptrdiff_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_sub(ptrdiff_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) volatile noexcept
	{	
	return ((char*)fetch_add(_Right) + _Right);
	}

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) noexcept
	{	
	return ((char*)fetch_add(_Right) + _Right);
	}

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) volatile noexcept
	{	
	return ((char*)fetch_sub(_Right) - _Right);
	}

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) noexcept
	{	
	return ((char*)fetch_sub(_Right) - _Right);
	}
 #line 1384 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xxatomic"


























#line 775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"

		
template <class _Ty>
	[[nodiscard]] inline bool atomic_is_lock_free(const volatile atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->is_lock_free());
	}

template <class _Ty>
	[[nodiscard]] inline bool atomic_is_lock_free(const atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->is_lock_free());
	}

template <class _Ty>
	inline void atomic_init(volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	*_Atom = _Value;
	}

template <class _Ty>
	inline void atomic_init(atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	*_Atom = _Value;
	}

template <class _Ty>
	inline void atomic_store(volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	_Atom->store(_Value);
	}

template <class _Ty>
	inline void atomic_store(atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	_Atom->store(_Value);
	}

template <class _Ty>
	inline void atomic_store_explicit(volatile atomic<_Ty> *_Atom, _Ty _Value,
		memory_order _Order) noexcept
	{
	_Atom->store(_Value, _Order);
	}

template <class _Ty>
	inline void atomic_store_explicit(atomic<_Ty> *_Atom, _Ty _Value, memory_order _Order) noexcept
	{
	_Atom->store(_Value, _Order);
	}

template <class _Ty>
	[[nodiscard]] inline _Ty atomic_load(const volatile atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->load());
	}

template <class _Ty>
	[[nodiscard]] inline _Ty atomic_load(const atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->load());
	}

template <class _Ty>
	[[nodiscard]] inline _Ty atomic_load_explicit(const volatile atomic<_Ty> *_Atom,
		memory_order _Order) noexcept
	{
	return (_Atom->load(_Order));
	}

template <class _Ty>
	[[nodiscard]] inline _Ty atomic_load_explicit(const atomic<_Ty> *_Atom, memory_order _Order) noexcept
	{
	return (_Atom->load(_Order));
	}

template <class _Ty>
	inline _Ty atomic_exchange(volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	return (_Atom->exchange(_Value));
	}

template <class _Ty>
	inline _Ty atomic_exchange(atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	return (_Atom->exchange(_Value));
	}

template <class _Ty>
	inline _Ty atomic_exchange_explicit(volatile atomic<_Ty> *_Atom, _Ty _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->exchange(_Value, _Order));
	}

template <class _Ty>
	inline _Ty atomic_exchange_explicit(atomic<_Ty> *_Atom, _Ty _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->exchange(_Value, _Order));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
	}

		
template <class _Ty>
	inline _Ty *atomic_fetch_add(volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_add(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add(atomic<_Ty*> *_Atom, ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_add(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add_explicit(volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->fetch_add(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add_explicit(atomic<_Ty*> *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->fetch_add(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub(volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_sub(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub(atomic<_Ty*> *_Atom, ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_sub(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub_explicit(volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->fetch_sub(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub_explicit(atomic<_Ty*> *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->fetch_sub(_Value, _Order));
	}

		
extern "C" inline void atomic_thread_fence(memory_order _Order) noexcept
	{	
	return (_Atomic_thread_fence(_Order));
	}

extern "C" inline void atomic_signal_fence(memory_order _Order) noexcept
	{	
	return (_Atomic_signal_fence(_Order));
	}

		
typedef atomic<bool> atomic_bool;

typedef atomic<char> atomic_char;
typedef atomic<signed char> atomic_schar;
typedef atomic<unsigned char> atomic_uchar;
typedef atomic<short> atomic_short;
typedef atomic<unsigned short> atomic_ushort;
typedef atomic<int> atomic_int;
typedef atomic<unsigned int> atomic_uint;
typedef atomic<long> atomic_long;
typedef atomic<unsigned long> atomic_ulong;
typedef atomic<long long> atomic_llong;
typedef atomic<unsigned long long> atomic_ullong;

typedef atomic<char16_t> atomic_char16_t;
typedef atomic<char32_t> atomic_char32_t;

typedef atomic<wchar_t> atomic_wchar_t;

typedef atomic<int8_t> atomic_int8_t;
typedef atomic<uint8_t> atomic_uint8_t;
typedef atomic<int16_t> atomic_int16_t;
typedef atomic<uint16_t> atomic_uint16_t;
typedef atomic<int32_t> atomic_int32_t;
typedef atomic<uint32_t> atomic_uint32_t;
typedef atomic<int64_t> atomic_int64_t;
typedef atomic<uint64_t> atomic_uint64_t;

typedef atomic<int_least8_t> atomic_int_least8_t;
typedef atomic<uint_least8_t> atomic_uint_least8_t;
typedef atomic<int_least16_t> atomic_int_least16_t;
typedef atomic<uint_least16_t> atomic_uint_least16_t;
typedef atomic<int_least32_t> atomic_int_least32_t;
typedef atomic<uint_least32_t> atomic_uint_least32_t;
typedef atomic<int_least64_t> atomic_int_least64_t;
typedef atomic<uint_least64_t> atomic_uint_least64_t;

typedef atomic<int_fast8_t> atomic_int_fast8_t;
typedef atomic<uint_fast8_t> atomic_uint_fast8_t;
typedef atomic<int_fast16_t> atomic_int_fast16_t;
typedef atomic<uint_fast16_t> atomic_uint_fast16_t;
typedef atomic<int_fast32_t> atomic_int_fast32_t;
typedef atomic<uint_fast32_t> atomic_uint_fast32_t;
typedef atomic<int_fast64_t> atomic_int_fast64_t;
typedef atomic<uint_fast64_t> atomic_uint_fast64_t;

typedef atomic<intptr_t> atomic_intptr_t;
typedef atomic<uintptr_t> atomic_uintptr_t;
typedef atomic<size_t> atomic_size_t;
typedef atomic<ptrdiff_t> atomic_ptrdiff_t;
typedef atomic<intmax_t> atomic_intmax_t;
typedef atomic<uintmax_t> atomic_uintmax_t;
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\atomic"





#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"








#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"




















template <int N> struct QAtomicTraits
{ static constexpr inline bool isLockFree(); };












template <> constexpr inline bool QAtomicTraits<4>::isLockFree()
{ return true; }
























#line 116 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"
















#line 133 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"

template<> struct QAtomicOpsSupport<1> { enum { IsSupported = 1 }; };







template <> constexpr inline bool QAtomicTraits<1>::isLockFree()
{ return true; }
















#line 161 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"

template<> struct QAtomicOpsSupport<2> { enum { IsSupported = 1 }; };







template <> constexpr inline bool QAtomicTraits<2>::isLockFree()
{ return false; }
















#line 189 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"


template<> struct QAtomicOpsSupport<8> { enum { IsSupported = 1 }; };







template <> constexpr inline bool QAtomicTraits<8>::isLockFree()
{ return true; }
















#line 218 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"
#line 219 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"

template <typename X> struct QAtomicOps
{
    typedef std::atomic<X> Type;

    template <typename T> static inline
    T load(const std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_relaxed);
    }

    template <typename T> static inline
    T load(const volatile std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_relaxed);
    }

    template <typename T> static inline
    T loadRelaxed(const std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_relaxed);
    }

    template <typename T> static inline
    T loadRelaxed(const volatile std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_relaxed);
    }

    template <typename T> static inline
    T loadAcquire(const std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_acquire);
    }

    template <typename T> static inline
    T loadAcquire(const volatile std::atomic<T> &_q_value) noexcept
    {
        return _q_value.load(std::memory_order_acquire);
    }

    template <typename T> static inline
    void store(std::atomic<T> &_q_value, T newValue) noexcept
    {
        _q_value.store(newValue, std::memory_order_relaxed);
    }

    template <typename T> static inline
    void storeRelaxed(std::atomic<T> &_q_value, T newValue) noexcept
    {
        _q_value.store(newValue, std::memory_order_relaxed);
    }

    template <typename T> static inline
    void storeRelease(std::atomic<T> &_q_value, T newValue) noexcept
    {
        _q_value.store(newValue, std::memory_order_release);
    }

    static inline constexpr bool isReferenceCountingNative() noexcept { return isTestAndSetNative(); }
    static inline constexpr bool isReferenceCountingWaitFree() noexcept { return false; }
    template <typename T>
    static inline bool ref(std::atomic<T> &_q_value)
    {
        return ++_q_value != 0;
    }

    template <typename T>
    static inline bool deref(std::atomic<T> &_q_value) noexcept
    {
        return --_q_value != 0;
    }

    static inline constexpr bool isTestAndSetNative() noexcept
    { return QAtomicTraits<sizeof(X)>::isLockFree(); }
    static inline constexpr bool isTestAndSetWaitFree() noexcept { return false; }

    template <typename T>
    static bool testAndSetRelaxed(std::atomic<T> &_q_value, T expectedValue, T newValue, T *currentValue = nullptr) noexcept
    {
        bool tmp = _q_value.compare_exchange_strong(expectedValue, newValue, std::memory_order_relaxed, std::memory_order_relaxed);
        if (currentValue)
            *currentValue = expectedValue;
        return tmp;
    }

    template <typename T>
    static bool testAndSetAcquire(std::atomic<T> &_q_value, T expectedValue, T newValue, T *currentValue = nullptr) noexcept
    {
        bool tmp = _q_value.compare_exchange_strong(expectedValue, newValue, std::memory_order_acquire, std::memory_order_acquire);
        if (currentValue)
            *currentValue = expectedValue;
        return tmp;
    }

    template <typename T>
    static bool testAndSetRelease(std::atomic<T> &_q_value, T expectedValue, T newValue, T *currentValue = nullptr) noexcept
    {
        bool tmp = _q_value.compare_exchange_strong(expectedValue, newValue, std::memory_order_release, std::memory_order_relaxed);
        if (currentValue)
            *currentValue = expectedValue;
        return tmp;
    }

    template <typename T>
    static bool testAndSetOrdered(std::atomic<T> &_q_value, T expectedValue, T newValue, T *currentValue = nullptr) noexcept
    {
        bool tmp = _q_value.compare_exchange_strong(expectedValue, newValue, std::memory_order_acq_rel, std::memory_order_acquire);
        if (currentValue)
            *currentValue = expectedValue;
        return tmp;
    }

    static inline constexpr bool isFetchAndStoreNative() noexcept { return isTestAndSetNative(); }
    static inline constexpr bool isFetchAndStoreWaitFree() noexcept { return false; }

    template <typename T>
    static T fetchAndStoreRelaxed(std::atomic<T> &_q_value, T newValue) noexcept
    {
        return _q_value.exchange(newValue, std::memory_order_relaxed);
    }

    template <typename T>
    static T fetchAndStoreAcquire(std::atomic<T> &_q_value, T newValue) noexcept
    {
        return _q_value.exchange(newValue, std::memory_order_acquire);
    }

    template <typename T>
    static T fetchAndStoreRelease(std::atomic<T> &_q_value, T newValue) noexcept
    {
        return _q_value.exchange(newValue, std::memory_order_release);
    }

    template <typename T>
    static T fetchAndStoreOrdered(std::atomic<T> &_q_value, T newValue) noexcept
    {
        return _q_value.exchange(newValue, std::memory_order_acq_rel);
    }

    static inline constexpr bool isFetchAndAddNative() noexcept { return isTestAndSetNative(); }
    static inline constexpr bool isFetchAndAddWaitFree() noexcept { return false; }

    template <typename T> static inline
    T fetchAndAddRelaxed(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_add(valueToAdd, std::memory_order_relaxed);
    }

    template <typename T> static inline
    T fetchAndAddAcquire(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_add(valueToAdd, std::memory_order_acquire);
    }

    template <typename T> static inline
    T fetchAndAddRelease(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_add(valueToAdd, std::memory_order_release);
    }

    template <typename T> static inline
    T fetchAndAddOrdered(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_add(valueToAdd, std::memory_order_acq_rel);
    }

    template <typename T> static inline
    T fetchAndSubRelaxed(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_sub(valueToAdd, std::memory_order_relaxed);
    }

    template <typename T> static inline
    T fetchAndSubAcquire(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_sub(valueToAdd, std::memory_order_acquire);
    }

    template <typename T> static inline
    T fetchAndSubRelease(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_sub(valueToAdd, std::memory_order_release);
    }

    template <typename T> static inline
    T fetchAndSubOrdered(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_sub(valueToAdd, std::memory_order_acq_rel);
    }

    template <typename T> static inline
    T fetchAndAndRelaxed(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_and(valueToAdd, std::memory_order_relaxed);
    }

    template <typename T> static inline
    T fetchAndAndAcquire(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_and(valueToAdd, std::memory_order_acquire);
    }

    template <typename T> static inline
    T fetchAndAndRelease(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_and(valueToAdd, std::memory_order_release);
    }

    template <typename T> static inline
    T fetchAndAndOrdered(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_and(valueToAdd, std::memory_order_acq_rel);
    }

    template <typename T> static inline
    T fetchAndOrRelaxed(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_or(valueToAdd, std::memory_order_relaxed);
    }

    template <typename T> static inline
    T fetchAndOrAcquire(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_or(valueToAdd, std::memory_order_acquire);
    }

    template <typename T> static inline
    T fetchAndOrRelease(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_or(valueToAdd, std::memory_order_release);
    }

    template <typename T> static inline
    T fetchAndOrOrdered(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_or(valueToAdd, std::memory_order_acq_rel);
    }

    template <typename T> static inline
    T fetchAndXorRelaxed(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_xor(valueToAdd, std::memory_order_relaxed);
    }

    template <typename T> static inline
    T fetchAndXorAcquire(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_xor(valueToAdd, std::memory_order_acquire);
    }

    template <typename T> static inline
    T fetchAndXorRelease(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_xor(valueToAdd, std::memory_order_release);
    }

    template <typename T> static inline
    T fetchAndXorOrdered(std::atomic<T> &_q_value, typename QAtomicAdditiveType<T>::AdditiveT valueToAdd) noexcept
    {
        return _q_value.fetch_xor(valueToAdd, std::memory_order_acq_rel);
    }
};





#line 488 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"



#line 492 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic_cxx11.h"
#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"








#line 63 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"

__pragma(warning(push))
__pragma(warning(disable: 4522))








#line 75 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"









#line 85 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"

#line 87 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"
#line 88 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"

template <typename T>
class QBasicAtomicInteger
{
public:
    typedef T Type;
    typedef QAtomicOps<T> Ops;
    
    static_assert(bool(QTypeInfo<T>::isIntegral), "template parameter is not an integral type");
    static_assert(bool(QAtomicOpsSupport<sizeof(T)>::IsSupported), "template parameter is an integral of a size not supported on this platform");

    typename Ops::Type _q_value;

    

    __declspec(deprecated("Use loadRelaxed")) T load() const noexcept { return loadRelaxed(); }
    __declspec(deprecated("Use storeRelaxed")) void store(T newValue) noexcept { storeRelaxed(newValue); }
#line 106 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"

    T loadRelaxed() const noexcept { return Ops::loadRelaxed(_q_value); }
    void storeRelaxed(T newValue) noexcept { Ops::storeRelaxed(_q_value, newValue); }

    T loadAcquire() const noexcept { return Ops::loadAcquire(_q_value); }
    void storeRelease(T newValue) noexcept { Ops::storeRelease(_q_value, newValue); }
    operator T() const noexcept { return loadAcquire(); }
    T operator=(T newValue) noexcept { storeRelease(newValue); return newValue; }

    static constexpr bool isReferenceCountingNative() noexcept { return Ops::isReferenceCountingNative(); }
    static constexpr bool isReferenceCountingWaitFree() noexcept { return Ops::isReferenceCountingWaitFree(); }

    bool ref() noexcept { return Ops::ref(_q_value); }
    bool deref() noexcept { return Ops::deref(_q_value); }

    static constexpr bool isTestAndSetNative() noexcept { return Ops::isTestAndSetNative(); }
    static constexpr bool isTestAndSetWaitFree() noexcept { return Ops::isTestAndSetWaitFree(); }

    bool testAndSetRelaxed(T expectedValue, T newValue) noexcept
    { return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue); }
    bool testAndSetAcquire(T expectedValue, T newValue) noexcept
    { return Ops::testAndSetAcquire(_q_value, expectedValue, newValue); }
    bool testAndSetRelease(T expectedValue, T newValue) noexcept
    { return Ops::testAndSetRelease(_q_value, expectedValue, newValue); }
    bool testAndSetOrdered(T expectedValue, T newValue) noexcept
    { return Ops::testAndSetOrdered(_q_value, expectedValue, newValue); }

    bool testAndSetRelaxed(T expectedValue, T newValue, T &currentValue) noexcept
    { return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetAcquire(T expectedValue, T newValue, T &currentValue) noexcept
    { return Ops::testAndSetAcquire(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetRelease(T expectedValue, T newValue, T &currentValue) noexcept
    { return Ops::testAndSetRelease(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetOrdered(T expectedValue, T newValue, T &currentValue) noexcept
    { return Ops::testAndSetOrdered(_q_value, expectedValue, newValue, &currentValue); }

    static constexpr bool isFetchAndStoreNative() noexcept { return Ops::isFetchAndStoreNative(); }
    static constexpr bool isFetchAndStoreWaitFree() noexcept { return Ops::isFetchAndStoreWaitFree(); }

    T fetchAndStoreRelaxed(T newValue) noexcept
    { return Ops::fetchAndStoreRelaxed(_q_value, newValue); }
    T fetchAndStoreAcquire(T newValue) noexcept
    { return Ops::fetchAndStoreAcquire(_q_value, newValue); }
    T fetchAndStoreRelease(T newValue) noexcept
    { return Ops::fetchAndStoreRelease(_q_value, newValue); }
    T fetchAndStoreOrdered(T newValue) noexcept
    { return Ops::fetchAndStoreOrdered(_q_value, newValue); }

    static constexpr bool isFetchAndAddNative() noexcept { return Ops::isFetchAndAddNative(); }
    static constexpr bool isFetchAndAddWaitFree() noexcept { return Ops::isFetchAndAddWaitFree(); }

    T fetchAndAddRelaxed(T valueToAdd) noexcept
    { return Ops::fetchAndAddRelaxed(_q_value, valueToAdd); }
    T fetchAndAddAcquire(T valueToAdd) noexcept
    { return Ops::fetchAndAddAcquire(_q_value, valueToAdd); }
    T fetchAndAddRelease(T valueToAdd) noexcept
    { return Ops::fetchAndAddRelease(_q_value, valueToAdd); }
    T fetchAndAddOrdered(T valueToAdd) noexcept
    { return Ops::fetchAndAddOrdered(_q_value, valueToAdd); }

    T fetchAndSubRelaxed(T valueToAdd) noexcept
    { return Ops::fetchAndSubRelaxed(_q_value, valueToAdd); }
    T fetchAndSubAcquire(T valueToAdd) noexcept
    { return Ops::fetchAndSubAcquire(_q_value, valueToAdd); }
    T fetchAndSubRelease(T valueToAdd) noexcept
    { return Ops::fetchAndSubRelease(_q_value, valueToAdd); }
    T fetchAndSubOrdered(T valueToAdd) noexcept
    { return Ops::fetchAndSubOrdered(_q_value, valueToAdd); }

    T fetchAndAndRelaxed(T valueToAdd) noexcept
    { return Ops::fetchAndAndRelaxed(_q_value, valueToAdd); }
    T fetchAndAndAcquire(T valueToAdd) noexcept
    { return Ops::fetchAndAndAcquire(_q_value, valueToAdd); }
    T fetchAndAndRelease(T valueToAdd) noexcept
    { return Ops::fetchAndAndRelease(_q_value, valueToAdd); }
    T fetchAndAndOrdered(T valueToAdd) noexcept
    { return Ops::fetchAndAndOrdered(_q_value, valueToAdd); }

    T fetchAndOrRelaxed(T valueToAdd) noexcept
    { return Ops::fetchAndOrRelaxed(_q_value, valueToAdd); }
    T fetchAndOrAcquire(T valueToAdd) noexcept
    { return Ops::fetchAndOrAcquire(_q_value, valueToAdd); }
    T fetchAndOrRelease(T valueToAdd) noexcept
    { return Ops::fetchAndOrRelease(_q_value, valueToAdd); }
    T fetchAndOrOrdered(T valueToAdd) noexcept
    { return Ops::fetchAndOrOrdered(_q_value, valueToAdd); }

    T fetchAndXorRelaxed(T valueToAdd) noexcept
    { return Ops::fetchAndXorRelaxed(_q_value, valueToAdd); }
    T fetchAndXorAcquire(T valueToAdd) noexcept
    { return Ops::fetchAndXorAcquire(_q_value, valueToAdd); }
    T fetchAndXorRelease(T valueToAdd) noexcept
    { return Ops::fetchAndXorRelease(_q_value, valueToAdd); }
    T fetchAndXorOrdered(T valueToAdd) noexcept
    { return Ops::fetchAndXorOrdered(_q_value, valueToAdd); }

    T operator++() noexcept
    { return fetchAndAddOrdered(1) + 1; }
    T operator++(int) noexcept
    { return fetchAndAddOrdered(1); }
    T operator--() noexcept
    { return fetchAndSubOrdered(1) - 1; }
    T operator--(int) noexcept
    { return fetchAndSubOrdered(1); }

    T operator+=(T v) noexcept
    { return fetchAndAddOrdered(v) + v; }
    T operator-=(T v) noexcept
    { return fetchAndSubOrdered(v) - v; }
    T operator&=(T v) noexcept
    { return fetchAndAndOrdered(v) & v; }
    T operator|=(T v) noexcept
    { return fetchAndOrOrdered(v) | v; }
    T operator^=(T v) noexcept
    { return fetchAndXorOrdered(v) ^ v; }



    QBasicAtomicInteger() = default;
    constexpr QBasicAtomicInteger(T value) noexcept : _q_value(value) {}
    QBasicAtomicInteger(const QBasicAtomicInteger &) = delete;
    QBasicAtomicInteger &operator=(const QBasicAtomicInteger &) = delete;
    QBasicAtomicInteger &operator=(const QBasicAtomicInteger &) volatile = delete;
#line 230 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"
};
typedef QBasicAtomicInteger<int> QBasicAtomicInt;

template <typename X>
class QBasicAtomicPointer
{
public:
    typedef X *Type;
    typedef QAtomicOps<Type> Ops;
    typedef typename Ops::Type AtomicType;

    AtomicType _q_value;


    __declspec(deprecated("Use loadRelaxed")) Type load() const noexcept { return loadRelaxed(); }
    __declspec(deprecated("Use storeRelaxed")) void store(Type newValue) noexcept { storeRelaxed(newValue); }
#line 247 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"

    Type loadRelaxed() const noexcept { return Ops::loadRelaxed(_q_value); }
    void storeRelaxed(Type newValue) noexcept { Ops::storeRelaxed(_q_value, newValue); }

    operator Type() const noexcept { return loadAcquire(); }
    Type operator=(Type newValue) noexcept { storeRelease(newValue); return newValue; }

    
    Type loadAcquire() const noexcept { return Ops::loadAcquire(_q_value); }
    void storeRelease(Type newValue) noexcept { Ops::storeRelease(_q_value, newValue); }

    static constexpr bool isTestAndSetNative() noexcept { return Ops::isTestAndSetNative(); }
    static constexpr bool isTestAndSetWaitFree() noexcept { return Ops::isTestAndSetWaitFree(); }

    bool testAndSetRelaxed(Type expectedValue, Type newValue) noexcept
    { return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue); }
    bool testAndSetAcquire(Type expectedValue, Type newValue) noexcept
    { return Ops::testAndSetAcquire(_q_value, expectedValue, newValue); }
    bool testAndSetRelease(Type expectedValue, Type newValue) noexcept
    { return Ops::testAndSetRelease(_q_value, expectedValue, newValue); }
    bool testAndSetOrdered(Type expectedValue, Type newValue) noexcept
    { return Ops::testAndSetOrdered(_q_value, expectedValue, newValue); }

    bool testAndSetRelaxed(Type expectedValue, Type newValue, Type &currentValue) noexcept
    { return Ops::testAndSetRelaxed(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetAcquire(Type expectedValue, Type newValue, Type &currentValue) noexcept
    { return Ops::testAndSetAcquire(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetRelease(Type expectedValue, Type newValue, Type &currentValue) noexcept
    { return Ops::testAndSetRelease(_q_value, expectedValue, newValue, &currentValue); }
    bool testAndSetOrdered(Type expectedValue, Type newValue, Type &currentValue) noexcept
    { return Ops::testAndSetOrdered(_q_value, expectedValue, newValue, &currentValue); }

    static constexpr bool isFetchAndStoreNative() noexcept { return Ops::isFetchAndStoreNative(); }
    static constexpr bool isFetchAndStoreWaitFree() noexcept { return Ops::isFetchAndStoreWaitFree(); }

    Type fetchAndStoreRelaxed(Type newValue) noexcept
    { return Ops::fetchAndStoreRelaxed(_q_value, newValue); }
    Type fetchAndStoreAcquire(Type newValue) noexcept
    { return Ops::fetchAndStoreAcquire(_q_value, newValue); }
    Type fetchAndStoreRelease(Type newValue) noexcept
    { return Ops::fetchAndStoreRelease(_q_value, newValue); }
    Type fetchAndStoreOrdered(Type newValue) noexcept
    { return Ops::fetchAndStoreOrdered(_q_value, newValue); }

    static constexpr bool isFetchAndAddNative() noexcept { return Ops::isFetchAndAddNative(); }
    static constexpr bool isFetchAndAddWaitFree() noexcept { return Ops::isFetchAndAddWaitFree(); }

    Type fetchAndAddRelaxed(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndAddRelaxed(_q_value, valueToAdd); }
    Type fetchAndAddAcquire(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndAddAcquire(_q_value, valueToAdd); }
    Type fetchAndAddRelease(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndAddRelease(_q_value, valueToAdd); }
    Type fetchAndAddOrdered(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndAddOrdered(_q_value, valueToAdd); }

    Type fetchAndSubRelaxed(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndSubRelaxed(_q_value, valueToAdd); }
    Type fetchAndSubAcquire(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndSubAcquire(_q_value, valueToAdd); }
    Type fetchAndSubRelease(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndSubRelease(_q_value, valueToAdd); }
    Type fetchAndSubOrdered(qptrdiff valueToAdd) noexcept
    { return Ops::fetchAndSubOrdered(_q_value, valueToAdd); }

    Type operator++() noexcept
    { return fetchAndAddOrdered(1) + 1; }
    Type operator++(int) noexcept
    { return fetchAndAddOrdered(1); }
    Type operator--() noexcept
    { return fetchAndSubOrdered(1) - 1; }
    Type operator--(int) noexcept
    { return fetchAndSubOrdered(1); }
    Type operator+=(qptrdiff valueToAdd) noexcept
    { return fetchAndAddOrdered(valueToAdd) + valueToAdd; }
    Type operator-=(qptrdiff valueToSub) noexcept
    { return fetchAndSubOrdered(valueToSub) - valueToSub; }


    QBasicAtomicPointer() = default;
    constexpr QBasicAtomicPointer(Type value) noexcept : _q_value(value) {}
    QBasicAtomicPointer(const QBasicAtomicPointer &) = delete;
    QBasicAtomicPointer &operator=(const QBasicAtomicPointer &) = delete;
    QBasicAtomicPointer &operator=(const QBasicAtomicPointer &) volatile = delete;
#line 332 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"
};







__pragma(warning(pop))

#line 343 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasicatomic.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



__pragma(warning(push))







template <typename T>
class QAtomicInteger : public QBasicAtomicInteger<T>
{
public:
    

    constexpr QAtomicInteger(T value = 0) noexcept : QBasicAtomicInteger<T>(value) {}





#line 71 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"

    inline QAtomicInteger(const QAtomicInteger &other) noexcept

        : QBasicAtomicInteger<T>()
#line 76 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"
    {
        this->storeRelease(other.loadAcquire());
    }

    inline QAtomicInteger &operator=(const QAtomicInteger &other) noexcept
    {
        this->storeRelease(other.loadAcquire());
        return *this;
    }








































































};

class QAtomicInt : public QAtomicInteger<int>
{
public:
    
    
    

    constexpr
#line 168 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"
    QAtomicInt(int value = 0) noexcept : QAtomicInteger<int>(value) {}
};


template <typename T>
class QAtomicPointer : public QBasicAtomicPointer<T>
{
public:

    constexpr QAtomicPointer(T *value = nullptr) noexcept : QBasicAtomicPointer<T>(value) {}





#line 184 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"
    inline QAtomicPointer(const QAtomicPointer<T> &other) noexcept

        : QBasicAtomicPointer<T>()
#line 188 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"
    {
        this->storeRelease(other.loadAcquire());
    }

    inline QAtomicPointer<T> &operator=(const QAtomicPointer<T> &other) noexcept
    {
        this->storeRelease(other.loadAcquire());
        return *this;
    }

































};

__pragma(warning(pop))



#line 237 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"







template <typename T>
inline void qAtomicAssign(T *&d, T *x)
{
    if (d == x)
        return;
    x->ref.ref();
    if (!d->ref.deref())
        delete d;
    d = x;
}









template <typename T>
inline void qAtomicDetach(T *&d)
{
    if (d->ref.loadRelaxed() == 1)
        return;
    T *x = d;
    d = new T(*d);
    if (!x->ref.deref())
        delete x;
}


#line 276 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"
#line 1303 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"







































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 41 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"




#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"










































































































































































































































#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"



namespace QtGlobalStatic {
enum GuardValues {
    Destroyed = -2,
    Initialized = -1,
    Uninitialized = 0,
    Initializing = 1
};
}

















#line 75 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"

#line 77 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"
















































#line 126 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"


template <typename T, T *(&innerFunction)(), QBasicAtomicInt &guard>
struct QGlobalStatic
{
    typedef T Type;

    bool isDestroyed() const { return guard.loadRelaxed() <= QtGlobalStatic::Destroyed; }
    bool exists() const { return guard.loadRelaxed() == QtGlobalStatic::Initialized; }
    operator Type *() { if (isDestroyed()) return nullptr; return innerFunction(); }
    Type *operator()() { if (isDestroyed()) return nullptr; return innerFunction(); }
    Type *operator->()
    {
      static_cast<void>(false && (!isDestroyed()));
      return innerFunction();
    }
    Type &operator*()
    {
      static_cast<void>(false && (!isDestroyed()));
      return *innerFunction();
    }
};















#line 164 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobalstatic.h"
#line 1304 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnumeric.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnumeric.h"



__declspec(dllimport)  bool qIsInf(double d);
__declspec(dllimport)  bool qIsNaN(double d);
__declspec(dllimport)  bool qIsFinite(double d);
__declspec(dllimport)  int qFpClassify(double val);
__declspec(dllimport)  bool qIsInf(float f);
__declspec(dllimport)  bool qIsNaN(float f);
__declspec(dllimport)  bool qIsFinite(float f);
__declspec(dllimport)  int qFpClassify(float val);

__declspec(dllimport)  double qSNaN();
#line 58 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnumeric.h"
__declspec(dllimport)  double qQNaN();
__declspec(dllimport)  double qInf();

__declspec(dllimport) quint32 qFloatDistance(float a, float b);
__declspec(dllimport) quint64 qFloatDistance(double a, double b);




#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnumeric.h"




#line 73 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnumeric.h"
#line 1305 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"























#line 66 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"
















#line 83 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"



#line 87 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"



#line 91 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qversiontagging.h"
#line 1306 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1308 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 1309 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"

#line 1311 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qglobal.h"
#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtgui-config.h"


















































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"






#line 52 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"

#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"


#line 57 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"



#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui/qtguiglobal.h"
#line 44 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"














































#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"




struct QMetaObject;
const QMetaObject *qt_getQtMetaObject() noexcept; 







#line 62 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"


namespace


#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
Qt {




#line 74 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"

    enum GlobalColor {
        color0,
        color1,
        black,
        white,
        darkGray,
        gray,
        lightGray,
        red,
        green,
        blue,
        cyan,
        magenta,
        yellow,
        darkRed,
        darkGreen,
        darkBlue,
        darkCyan,
        darkMagenta,
        darkYellow,
        transparent
    };

    enum KeyboardModifier {
        NoModifier           = 0x00000000,
        ShiftModifier        = 0x02000000,
        ControlModifier      = 0x04000000,
        AltModifier          = 0x08000000,
        MetaModifier         = 0x10000000,
        KeypadModifier       = 0x20000000,
        GroupSwitchModifier  = 0x40000000,
        
        KeyboardModifierMask = 0xfe000000
    };
    typedef QFlags<KeyboardModifier> KeyboardModifiers;
    constexpr inline QFlags<KeyboardModifiers::enum_type> operator|(KeyboardModifiers::enum_type f1, KeyboardModifiers::enum_type f2) noexcept { return QFlags<KeyboardModifiers::enum_type>(f1) | f2; } constexpr inline QFlags<KeyboardModifiers::enum_type> operator|(KeyboardModifiers::enum_type f1, QFlags<KeyboardModifiers::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(KeyboardModifiers::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    
    
    
    
    
    enum Modifier {
        META          = Qt::MetaModifier,
        SHIFT         = Qt::ShiftModifier,
        CTRL          = Qt::ControlModifier,
        ALT           = Qt::AltModifier,
        MODIFIER_MASK = KeyboardModifierMask,
        UNICODE_ACCEL = 0x00000000
    };

    enum MouseButton {
        NoButton         = 0x00000000,
        LeftButton       = 0x00000001,
        RightButton      = 0x00000002,
        MidButton        = 0x00000004, 
        MiddleButton     = MidButton,
        BackButton       = 0x00000008,
        XButton1         = BackButton,
        ExtraButton1     = XButton1,
        ForwardButton    = 0x00000010,
        XButton2         = ForwardButton,
        ExtraButton2     = ForwardButton,
        TaskButton       = 0x00000020,
        ExtraButton3     = TaskButton,
        ExtraButton4     = 0x00000040,
        ExtraButton5     = 0x00000080,
        ExtraButton6     = 0x00000100,
        ExtraButton7     = 0x00000200,
        ExtraButton8     = 0x00000400,
        ExtraButton9     = 0x00000800,
        ExtraButton10    = 0x00001000,
        ExtraButton11    = 0x00002000,
        ExtraButton12    = 0x00004000,
        ExtraButton13    = 0x00008000,
        ExtraButton14    = 0x00010000,
        ExtraButton15    = 0x00020000,
        ExtraButton16    = 0x00040000,
        ExtraButton17    = 0x00080000,
        ExtraButton18    = 0x00100000,
        ExtraButton19    = 0x00200000,
        ExtraButton20    = 0x00400000,
        ExtraButton21    = 0x00800000,
        ExtraButton22    = 0x01000000,
        ExtraButton23    = 0x02000000,
        ExtraButton24    = 0x04000000,
        AllButtons       = 0x07ffffff,
        MaxMouseButton   = ExtraButton24,
        
        MouseButtonMask  = 0xffffffff
    };
    typedef QFlags<MouseButton> MouseButtons;
    constexpr inline QFlags<MouseButtons::enum_type> operator|(MouseButtons::enum_type f1, MouseButtons::enum_type f2) noexcept { return QFlags<MouseButtons::enum_type>(f1) | f2; } constexpr inline QFlags<MouseButtons::enum_type> operator|(MouseButtons::enum_type f1, QFlags<MouseButtons::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(MouseButtons::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum Orientation {
        Horizontal = 0x1,
        Vertical = 0x2
    };

    typedef QFlags<Orientation> Orientations;
    constexpr inline QFlags<Orientations::enum_type> operator|(Orientations::enum_type f1, Orientations::enum_type f2) noexcept { return QFlags<Orientations::enum_type>(f1) | f2; } constexpr inline QFlags<Orientations::enum_type> operator|(Orientations::enum_type f1, QFlags<Orientations::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(Orientations::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum FocusPolicy {
        NoFocus = 0,
        TabFocus = 0x1,
        ClickFocus = 0x2,
        StrongFocus = TabFocus | ClickFocus | 0x8,
        WheelFocus = StrongFocus | 0x4
    };

    enum TabFocusBehavior {
        NoTabFocus           = 0x00,
        TabFocusTextControls = 0x01,
        TabFocusListControls = 0x02,
        TabFocusAllControls  = 0xff
    };

    enum SortOrder {
        AscendingOrder,
        DescendingOrder
    };

    enum SplitBehaviorFlags {
        KeepEmptyParts = 0,
        SkipEmptyParts = 0x1,
    };
    typedef QFlags<SplitBehaviorFlags> SplitBehavior;
    constexpr inline QFlags<SplitBehavior::enum_type> operator|(SplitBehavior::enum_type f1, SplitBehavior::enum_type f2) noexcept { return QFlags<SplitBehavior::enum_type>(f1) | f2; } constexpr inline QFlags<SplitBehavior::enum_type> operator|(SplitBehavior::enum_type f1, QFlags<SplitBehavior::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(SplitBehavior::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum TileRule {
        StretchTile,
        RepeatTile,
        RoundTile
    };

    
    
    

    enum AlignmentFlag {
        AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        
        
        
        
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,

        AlignCenter = AlignVCenter | AlignHCenter
    };

    typedef QFlags<AlignmentFlag> Alignment;
    constexpr inline QFlags<Alignment::enum_type> operator|(Alignment::enum_type f1, Alignment::enum_type f2) noexcept { return QFlags<Alignment::enum_type>(f1) | f2; } constexpr inline QFlags<Alignment::enum_type> operator|(Alignment::enum_type f1, QFlags<Alignment::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(Alignment::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum TextFlag {
        TextSingleLine = 0x0100,
        TextDontClip = 0x0200,
        TextExpandTabs = 0x0400,
        TextShowMnemonic = 0x0800,
        TextWordWrap = 0x1000,
        TextWrapAnywhere = 0x2000,
        TextDontPrint = 0x4000,
        TextIncludeTrailingSpaces = 0x08000000,
        TextHideMnemonic = 0x8000,
        TextJustificationForced = 0x10000,
        TextForceLeftToRight = 0x20000,
        TextForceRightToLeft = 0x40000,
        
        
        TextLongestVariant = 0x80000


        , TextBypassShaping = 0x100000
#line 260 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
    };

    enum TextElideMode {
        ElideLeft,
        ElideRight,
        ElideMiddle,
        ElideNone
    };

    enum WhiteSpaceMode {
        WhiteSpaceNormal,
        WhiteSpacePre,
        WhiteSpaceNoWrap,
        WhiteSpaceModeUndefined = -1
    };

    enum HitTestAccuracy { ExactHit, FuzzyHit };

    enum WindowType {
        Widget = 0x00000000,
        Window = 0x00000001,
        Dialog = 0x00000002 | Window,
        Sheet = 0x00000004 | Window,
        Drawer = Sheet | Dialog,
        Popup = 0x00000008 | Window,
        Tool = Popup | Dialog,
        ToolTip = Popup | Sheet,
        SplashScreen = ToolTip | Dialog,
        Desktop = 0x00000010 | Window,
        SubWindow = 0x00000012,
        ForeignWindow = 0x00000020 | Window,
        CoverWindow = 0x00000040 | Window,

        WindowType_Mask = 0x000000ff,
        MSWindowsFixedSizeDialogHint = 0x00000100,
        MSWindowsOwnDC = 0x00000200,
        BypassWindowManagerHint = 0x00000400,
        X11BypassWindowManagerHint = BypassWindowManagerHint,
        FramelessWindowHint = 0x00000800,
        WindowTitleHint = 0x00001000,
        WindowSystemMenuHint = 0x00002000,
        WindowMinimizeButtonHint = 0x00004000,
        WindowMaximizeButtonHint = 0x00008000,
        WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
        WindowContextHelpButtonHint = 0x00010000,
        WindowShadeButtonHint = 0x00020000,
        WindowStaysOnTopHint = 0x00040000,
        WindowTransparentForInput = 0x00080000,
        WindowOverridesSystemGestures = 0x00100000,
        WindowDoesNotAcceptFocus = 0x00200000,
        MaximizeUsingFullscreenGeometryHint = 0x00400000,

        CustomizeWindowHint = 0x02000000,
        WindowStaysOnBottomHint = 0x04000000,
        WindowCloseButtonHint = 0x08000000,
        MacWindowToolBarButtonHint = 0x10000000,
        BypassGraphicsProxyWidget = 0x20000000,
        NoDropShadowWindowHint = 0x40000000,
        WindowFullscreenButtonHint = 0x80000000
    };

    typedef QFlags<WindowType> WindowFlags;
    constexpr inline QFlags<WindowFlags::enum_type> operator|(WindowFlags::enum_type f1, WindowFlags::enum_type f2) noexcept { return QFlags<WindowFlags::enum_type>(f1) | f2; } constexpr inline QFlags<WindowFlags::enum_type> operator|(WindowFlags::enum_type f1, QFlags<WindowFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(WindowFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum WindowState {
        WindowNoState    = 0x00000000,
        WindowMinimized  = 0x00000001,
        WindowMaximized  = 0x00000002,
        WindowFullScreen = 0x00000004,
        WindowActive     = 0x00000008
    };

    typedef QFlags<WindowState> WindowStates;
    constexpr inline QFlags<WindowStates::enum_type> operator|(WindowStates::enum_type f1, WindowStates::enum_type f2) noexcept { return QFlags<WindowStates::enum_type>(f1) | f2; } constexpr inline QFlags<WindowStates::enum_type> operator|(WindowStates::enum_type f1, QFlags<WindowStates::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(WindowStates::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum ApplicationState {
        ApplicationSuspended    = 0x00000000,
        ApplicationHidden       = 0x00000001,
        ApplicationInactive     = 0x00000002,
        ApplicationActive       = 0x00000004
    };

    typedef QFlags<ApplicationState> ApplicationStates;

    enum ScreenOrientation {
        PrimaryOrientation           = 0x00000000,
        PortraitOrientation          = 0x00000001,
        LandscapeOrientation         = 0x00000002,
        InvertedPortraitOrientation  = 0x00000004,
        InvertedLandscapeOrientation = 0x00000008
    };

    typedef QFlags<ScreenOrientation> ScreenOrientations;
    constexpr inline QFlags<ScreenOrientations::enum_type> operator|(ScreenOrientations::enum_type f1, ScreenOrientations::enum_type f2) noexcept { return QFlags<ScreenOrientations::enum_type>(f1) | f2; } constexpr inline QFlags<ScreenOrientations::enum_type> operator|(ScreenOrientations::enum_type f1, QFlags<ScreenOrientations::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(ScreenOrientations::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum WidgetAttribute {
        WA_Disabled = 0,
        WA_UnderMouse = 1,
        WA_MouseTracking = 2,
        WA_ContentsPropagated = 3, 
        WA_OpaquePaintEvent = 4,

        WA_NoBackground [[deprecated]] = WA_OpaquePaintEvent,
#line 364 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        WA_StaticContents = 5,
        WA_LaidOut = 7,
        WA_PaintOnScreen = 8,
        WA_NoSystemBackground = 9,
        WA_UpdatesDisabled = 10,
        WA_Mapped = 11,

        WA_MacNoClickThrough [[deprecated]] = 12,
#line 373 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        WA_InputMethodEnabled = 14,
        WA_WState_Visible = 15,
        WA_WState_Hidden = 16,

        WA_ForceDisabled = 32,
        WA_KeyCompression = 33,
        WA_PendingMoveEvent = 34,
        WA_PendingResizeEvent = 35,
        WA_SetPalette = 36,
        WA_SetFont = 37,
        WA_SetCursor = 38,
        WA_NoChildEventsFromChildren = 39,
        WA_WindowModified = 41,
        WA_Resized = 42,
        WA_Moved = 43,
        WA_PendingUpdate = 44,
        WA_InvalidSize = 45,

        WA_MacBrushedMetal [[deprecated]] = 46,
        WA_MacMetalStyle [[deprecated]] = 46,
#line 394 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        WA_CustomWhatsThis = 47,
        WA_LayoutOnEntireRect = 48,
        WA_OutsideWSRange = 49,
        WA_GrabbedShortcut = 50,
        WA_TransparentForMouseEvents = 51,
        WA_PaintUnclipped = 52,
        WA_SetWindowIcon = 53,
        WA_NoMouseReplay = 54,
        WA_DeleteOnClose = 55,
        WA_RightToLeft = 56,
        WA_SetLayoutDirection = 57,
        WA_NoChildEventsForParent = 58,
        WA_ForceUpdatesDisabled = 59,

        WA_WState_Created = 60,
        WA_WState_CompressKeys = 61,
        WA_WState_InPaintEvent = 62,
        WA_WState_Reparented = 63,
        WA_WState_ConfigPending = 64,
        WA_WState_Polished = 66,
        WA_WState_DND = 67, 
        WA_WState_OwnSizePolicy = 68,
        WA_WState_ExplicitShowHide = 69,

        WA_ShowModal = 70, 
        WA_MouseNoMask = 71,
        WA_GroupLeader = 72, 
        WA_NoMousePropagation = 73, 
        WA_Hover = 74,
        WA_InputMethodTransparent = 75, 
        WA_QuitOnClose = 76,

        WA_KeyboardFocusChange = 77,

        WA_AcceptDrops = 78,
        WA_DropSiteRegistered = 79, 
        WA_ForceAcceptDrops = WA_DropSiteRegistered, 

        WA_WindowPropagation = 80,

        WA_NoX11EventCompression = 81,
        WA_TintedBackground = 82,
        WA_X11OpenGLOverlay = 83,
        WA_AlwaysShowToolTips = 84,
        WA_MacOpaqueSizeGrip = 85,
        WA_SetStyle = 86,

        WA_SetLocale = 87,
        WA_MacShowFocusRect = 88,

        WA_MacNormalSize = 89,  
        WA_MacSmallSize = 90,   
        WA_MacMiniSize = 91,    

        WA_LayoutUsesWidgetRect = 92,
        WA_StyledBackground = 93, 

        WA_MSWindowsUseDirect3D [[deprecated]] = 94,
#line 453 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        WA_CanHostQMdiSubWindowTitleBar = 95, 

        WA_MacAlwaysShowToolWindow = 96, 

        WA_StyleSheet = 97, 

        WA_ShowWithoutActivating = 98,

        WA_X11BypassTransientForHint = 99,

        WA_NativeWindow = 100,
        WA_DontCreateNativeAncestors = 101,

        WA_MacVariableSize = 102,    

        WA_DontShowOnScreen = 103,

        
        WA_X11NetWmWindowTypeDesktop = 104,
        WA_X11NetWmWindowTypeDock = 105,
        WA_X11NetWmWindowTypeToolBar = 106,
        WA_X11NetWmWindowTypeMenu = 107,
        WA_X11NetWmWindowTypeUtility = 108,
        WA_X11NetWmWindowTypeSplash = 109,
        WA_X11NetWmWindowTypeDialog = 110,
        WA_X11NetWmWindowTypeDropDownMenu = 111,
        WA_X11NetWmWindowTypePopupMenu = 112,
        WA_X11NetWmWindowTypeToolTip = 113,
        WA_X11NetWmWindowTypeNotification = 114,
        WA_X11NetWmWindowTypeCombo = 115,
        WA_X11NetWmWindowTypeDND = 116,

        WA_MacFrameworkScaled [[deprecated]] = 117,
#line 487 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        WA_SetWindowModality = 118,
        WA_WState_WindowOpacitySet = 119, 
        WA_TranslucentBackground = 120,

        WA_AcceptTouchEvents = 121,
        WA_WState_AcceptedTouchBeginEvent = 122,
        WA_TouchPadAcceptSingleTouchEvents = 123,

        WA_X11DoNotAcceptFocus = 126,
        WA_MacNoShadow = 127,

        WA_AlwaysStackOnTop = 128,

        WA_TabletTracking = 129,

        WA_ContentsMarginsRespectsSafeArea = 130,

        WA_StyleSheetTarget = 131,

        
        WA_AttributeCount
    };

    enum ApplicationAttribute
    {
        AA_ImmediateWidgetCreation = 0,

        AA_MSWindowsUseDirect3DByDefault [[deprecated]] = 1,
#line 516 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        AA_DontShowIconsInMenus = 2,
        AA_NativeWindows = 3,
        AA_DontCreateNativeWidgetSiblings = 4,
        AA_PluginApplication = 5,

        AA_MacPluginApplication [[deprecated]] = AA_PluginApplication,
#line 523 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        AA_DontUseNativeMenuBar = 6,
        AA_MacDontSwapCtrlAndMeta = 7,
        AA_Use96Dpi = 8,

        AA_X11InitThreads [[deprecated]] = 10,
#line 529 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        AA_SynthesizeTouchForUnhandledMouseEvents = 11,
        AA_SynthesizeMouseForUnhandledTouchEvents = 12,
        AA_UseHighDpiPixmaps = 13,
        AA_ForceRasterWidgets = 14,
        AA_UseDesktopOpenGL = 15,
        AA_UseOpenGLES = 16,
        AA_UseSoftwareOpenGL = 17,
        AA_ShareOpenGLContexts = 18,
        AA_SetPalette = 19,
        AA_EnableHighDpiScaling = 20,
        AA_DisableHighDpiScaling = 21,
        AA_UseStyleSheetPropagationInWidgetStyles = 22,
        AA_DontUseNativeDialogs = 23,
        AA_SynthesizeMouseForUnhandledTabletEvents = 24,
        AA_CompressHighFrequencyEvents = 25,
        AA_DontCheckOpenGLContextThreadAffinity = 26,
        AA_DisableShaderDiskCache = 27,
        AA_DontShowShortcutsInContextMenus = 28,
        AA_CompressTabletEvents = 29,
        AA_DisableWindowContextHelpButton = 30, 
        AA_DisableSessionManager = 31,

        
        AA_AttributeCount
    };


    
    

    enum ImageConversionFlag {
        ColorMode_Mask          = 0x00000003,
        AutoColor               = 0x00000000,
        ColorOnly               = 0x00000003,
        MonoOnly                = 0x00000002,
        

        AlphaDither_Mask        = 0x0000000c,
        ThresholdAlphaDither    = 0x00000000,
        OrderedAlphaDither      = 0x00000004,
        DiffuseAlphaDither      = 0x00000008,
        NoAlpha                 = 0x0000000c, 

        Dither_Mask             = 0x00000030,
        DiffuseDither           = 0x00000000,
        OrderedDither           = 0x00000010,
        ThresholdDither         = 0x00000020,
        

        DitherMode_Mask         = 0x000000c0,
        AutoDither              = 0x00000000,
        PreferDither            = 0x00000040,
        AvoidDither             = 0x00000080,

        NoOpaqueDetection       = 0x00000100,
        NoFormatConversion      = 0x00000200
    };
    typedef QFlags<ImageConversionFlag> ImageConversionFlags;
    constexpr inline QFlags<ImageConversionFlags::enum_type> operator|(ImageConversionFlags::enum_type f1, ImageConversionFlags::enum_type f2) noexcept { return QFlags<ImageConversionFlags::enum_type>(f1) | f2; } constexpr inline QFlags<ImageConversionFlags::enum_type> operator|(ImageConversionFlags::enum_type f1, QFlags<ImageConversionFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(ImageConversionFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum BGMode {
        TransparentMode,
        OpaqueMode
    };

    enum Key {
        Key_Escape = 0x01000000,                
        Key_Tab = 0x01000001,
        Key_Backtab = 0x01000002,
        Key_Backspace = 0x01000003,
        Key_Return = 0x01000004,
        Key_Enter = 0x01000005,
        Key_Insert = 0x01000006,
        Key_Delete = 0x01000007,
        Key_Pause = 0x01000008,
        Key_Print = 0x01000009,               
        Key_SysReq = 0x0100000a,
        Key_Clear = 0x0100000b,
        Key_Home = 0x01000010,                
        Key_End = 0x01000011,
        Key_Left = 0x01000012,
        Key_Up = 0x01000013,
        Key_Right = 0x01000014,
        Key_Down = 0x01000015,
        Key_PageUp = 0x01000016,
        Key_PageDown = 0x01000017,
        Key_Shift = 0x01000020,                
        Key_Control = 0x01000021,
        Key_Meta = 0x01000022,
        Key_Alt = 0x01000023,
        Key_CapsLock = 0x01000024,
        Key_NumLock = 0x01000025,
        Key_ScrollLock = 0x01000026,
        Key_F1 = 0x01000030,                
        Key_F2 = 0x01000031,
        Key_F3 = 0x01000032,
        Key_F4 = 0x01000033,
        Key_F5 = 0x01000034,
        Key_F6 = 0x01000035,
        Key_F7 = 0x01000036,
        Key_F8 = 0x01000037,
        Key_F9 = 0x01000038,
        Key_F10 = 0x01000039,
        Key_F11 = 0x0100003a,
        Key_F12 = 0x0100003b,
        Key_F13 = 0x0100003c,
        Key_F14 = 0x0100003d,
        Key_F15 = 0x0100003e,
        Key_F16 = 0x0100003f,
        Key_F17 = 0x01000040,
        Key_F18 = 0x01000041,
        Key_F19 = 0x01000042,
        Key_F20 = 0x01000043,
        Key_F21 = 0x01000044,
        Key_F22 = 0x01000045,
        Key_F23 = 0x01000046,
        Key_F24 = 0x01000047,
        Key_F25 = 0x01000048,                
        Key_F26 = 0x01000049,
        Key_F27 = 0x0100004a,
        Key_F28 = 0x0100004b,
        Key_F29 = 0x0100004c,
        Key_F30 = 0x0100004d,
        Key_F31 = 0x0100004e,
        Key_F32 = 0x0100004f,
        Key_F33 = 0x01000050,
        Key_F34 = 0x01000051,
        Key_F35 = 0x01000052,
        Key_Super_L = 0x01000053,                 
        Key_Super_R = 0x01000054,
        Key_Menu = 0x01000055,
        Key_Hyper_L = 0x01000056,
        Key_Hyper_R = 0x01000057,
        Key_Help = 0x01000058,
        Key_Direction_L = 0x01000059,
        Key_Direction_R = 0x01000060,
        Key_Space = 0x20,                
        Key_Any = Key_Space,
        Key_Exclam = 0x21,
        Key_QuoteDbl = 0x22,
        Key_NumberSign = 0x23,
        Key_Dollar = 0x24,
        Key_Percent = 0x25,
        Key_Ampersand = 0x26,
        Key_Apostrophe = 0x27,
        Key_ParenLeft = 0x28,
        Key_ParenRight = 0x29,
        Key_Asterisk = 0x2a,
        Key_Plus = 0x2b,
        Key_Comma = 0x2c,
        Key_Minus = 0x2d,
        Key_Period = 0x2e,
        Key_Slash = 0x2f,
        Key_0 = 0x30,
        Key_1 = 0x31,
        Key_2 = 0x32,
        Key_3 = 0x33,
        Key_4 = 0x34,
        Key_5 = 0x35,
        Key_6 = 0x36,
        Key_7 = 0x37,
        Key_8 = 0x38,
        Key_9 = 0x39,
        Key_Colon = 0x3a,
        Key_Semicolon = 0x3b,
        Key_Less = 0x3c,
        Key_Equal = 0x3d,
        Key_Greater = 0x3e,
        Key_Question = 0x3f,
        Key_At = 0x40,
        Key_A = 0x41,
        Key_B = 0x42,
        Key_C = 0x43,
        Key_D = 0x44,
        Key_E = 0x45,
        Key_F = 0x46,
        Key_G = 0x47,
        Key_H = 0x48,
        Key_I = 0x49,
        Key_J = 0x4a,
        Key_K = 0x4b,
        Key_L = 0x4c,
        Key_M = 0x4d,
        Key_N = 0x4e,
        Key_O = 0x4f,
        Key_P = 0x50,
        Key_Q = 0x51,
        Key_R = 0x52,
        Key_S = 0x53,
        Key_T = 0x54,
        Key_U = 0x55,
        Key_V = 0x56,
        Key_W = 0x57,
        Key_X = 0x58,
        Key_Y = 0x59,
        Key_Z = 0x5a,
        Key_BracketLeft = 0x5b,
        Key_Backslash = 0x5c,
        Key_BracketRight = 0x5d,
        Key_AsciiCircum = 0x5e,
        Key_Underscore = 0x5f,
        Key_QuoteLeft = 0x60,
        Key_BraceLeft = 0x7b,
        Key_Bar = 0x7c,
        Key_BraceRight = 0x7d,
        Key_AsciiTilde = 0x7e,

        Key_nobreakspace = 0x0a0,
        Key_exclamdown = 0x0a1,
        Key_cent = 0x0a2,
        Key_sterling = 0x0a3,
        Key_currency = 0x0a4,
        Key_yen = 0x0a5,
        Key_brokenbar = 0x0a6,
        Key_section = 0x0a7,
        Key_diaeresis = 0x0a8,
        Key_copyright = 0x0a9,
        Key_ordfeminine = 0x0aa,
        Key_guillemotleft = 0x0ab,        
        Key_notsign = 0x0ac,
        Key_hyphen = 0x0ad,
        Key_registered = 0x0ae,
        Key_macron = 0x0af,
        Key_degree = 0x0b0,
        Key_plusminus = 0x0b1,
        Key_twosuperior = 0x0b2,
        Key_threesuperior = 0x0b3,
        Key_acute = 0x0b4,
        Key_mu = 0x0b5,
        Key_paragraph = 0x0b6,
        Key_periodcentered = 0x0b7,
        Key_cedilla = 0x0b8,
        Key_onesuperior = 0x0b9,
        Key_masculine = 0x0ba,
        Key_guillemotright = 0x0bb,        
        Key_onequarter = 0x0bc,
        Key_onehalf = 0x0bd,
        Key_threequarters = 0x0be,
        Key_questiondown = 0x0bf,
        Key_Agrave = 0x0c0,
        Key_Aacute = 0x0c1,
        Key_Acircumflex = 0x0c2,
        Key_Atilde = 0x0c3,
        Key_Adiaeresis = 0x0c4,
        Key_Aring = 0x0c5,
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
        Key_Eacute = 0x0c9,
        Key_Ecircumflex = 0x0ca,
        Key_Ediaeresis = 0x0cb,
        Key_Igrave = 0x0cc,
        Key_Iacute = 0x0cd,
        Key_Icircumflex = 0x0ce,
        Key_Idiaeresis = 0x0cf,
        Key_ETH = 0x0d0,
        Key_Ntilde = 0x0d1,
        Key_Ograve = 0x0d2,
        Key_Oacute = 0x0d3,
        Key_Ocircumflex = 0x0d4,
        Key_Otilde = 0x0d5,
        Key_Odiaeresis = 0x0d6,
        Key_multiply = 0x0d7,
        Key_Ooblique = 0x0d8,
        Key_Ugrave = 0x0d9,
        Key_Uacute = 0x0da,
        Key_Ucircumflex = 0x0db,
        Key_Udiaeresis = 0x0dc,
        Key_Yacute = 0x0dd,
        Key_THORN = 0x0de,
        Key_ssharp = 0x0df,
        Key_division = 0x0f7,
        Key_ydiaeresis = 0x0ff,

        
        
        

        
        Key_AltGr               = 0x01001103,
        Key_Multi_key           = 0x01001120,  
        Key_Codeinput           = 0x01001137,
        Key_SingleCandidate     = 0x0100113c,
        Key_MultipleCandidate   = 0x0100113d,
        Key_PreviousCandidate   = 0x0100113e,

        
        Key_Mode_switch         = 0x0100117e,  
        

        
        Key_Kanji               = 0x01001121,  
        Key_Muhenkan            = 0x01001122,  
        
        Key_Henkan              = 0x01001123,  
        Key_Romaji              = 0x01001124,  
        Key_Hiragana            = 0x01001125,  
        Key_Katakana            = 0x01001126,  
        Key_Hiragana_Katakana   = 0x01001127,  
        Key_Zenkaku             = 0x01001128,  
        Key_Hankaku             = 0x01001129,  
        Key_Zenkaku_Hankaku     = 0x0100112a,  
        Key_Touroku             = 0x0100112b,  
        Key_Massyo              = 0x0100112c,  
        Key_Kana_Lock           = 0x0100112d,  
        Key_Kana_Shift          = 0x0100112e,  
        Key_Eisu_Shift          = 0x0100112f,  
        Key_Eisu_toggle         = 0x01001130,  
        
        
        

        
        
        
        

        Key_Hangul              = 0x01001131,  
        Key_Hangul_Start        = 0x01001132,  
        Key_Hangul_End          = 0x01001133,  
        Key_Hangul_Hanja        = 0x01001134,  
        Key_Hangul_Jamo         = 0x01001135,  
        Key_Hangul_Romaja       = 0x01001136,  
        
        Key_Hangul_Jeonja       = 0x01001138,  
        Key_Hangul_Banja        = 0x01001139,  
        Key_Hangul_PreHanja     = 0x0100113a,  
        Key_Hangul_PostHanja    = 0x0100113b,  
        
        
        
        Key_Hangul_Special      = 0x0100113f,  
        

        
        Key_Dead_Grave          = 0x01001250,
        Key_Dead_Acute          = 0x01001251,
        Key_Dead_Circumflex     = 0x01001252,
        Key_Dead_Tilde          = 0x01001253,
        Key_Dead_Macron         = 0x01001254,
        Key_Dead_Breve          = 0x01001255,
        Key_Dead_Abovedot       = 0x01001256,
        Key_Dead_Diaeresis      = 0x01001257,
        Key_Dead_Abovering      = 0x01001258,
        Key_Dead_Doubleacute    = 0x01001259,
        Key_Dead_Caron          = 0x0100125a,
        Key_Dead_Cedilla        = 0x0100125b,
        Key_Dead_Ogonek         = 0x0100125c,
        Key_Dead_Iota           = 0x0100125d,
        Key_Dead_Voiced_Sound   = 0x0100125e,
        Key_Dead_Semivoiced_Sound = 0x0100125f,
        Key_Dead_Belowdot       = 0x01001260,
        Key_Dead_Hook           = 0x01001261,
        Key_Dead_Horn           = 0x01001262,
        Key_Dead_Stroke         = 0x01001263,
        Key_Dead_Abovecomma     = 0x01001264,
        Key_Dead_Abovereversedcomma = 0x01001265,
        Key_Dead_Doublegrave    = 0x01001266,
        Key_Dead_Belowring      = 0x01001267,
        Key_Dead_Belowmacron    = 0x01001268,
        Key_Dead_Belowcircumflex = 0x01001269,
        Key_Dead_Belowtilde     = 0x0100126a,
        Key_Dead_Belowbreve     = 0x0100126b,
        Key_Dead_Belowdiaeresis = 0x0100126c,
        Key_Dead_Invertedbreve  = 0x0100126d,
        Key_Dead_Belowcomma     = 0x0100126e,
        Key_Dead_Currency       = 0x0100126f,
        Key_Dead_a              = 0x01001280,
        Key_Dead_A              = 0x01001281,
        Key_Dead_e              = 0x01001282,
        Key_Dead_E              = 0x01001283,
        Key_Dead_i              = 0x01001284,
        Key_Dead_I              = 0x01001285,
        Key_Dead_o              = 0x01001286,
        Key_Dead_O              = 0x01001287,
        Key_Dead_u              = 0x01001288,
        Key_Dead_U              = 0x01001289,
        Key_Dead_Small_Schwa    = 0x0100128a,
        Key_Dead_Capital_Schwa  = 0x0100128b,
        Key_Dead_Greek          = 0x0100128c,
        Key_Dead_Lowline        = 0x01001290,
        Key_Dead_Aboveverticalline = 0x01001291,
        Key_Dead_Belowverticalline = 0x01001292,
        Key_Dead_Longsolidusoverlay = 0x01001293,

        
        Key_Back  = 0x01000061,
        Key_Forward  = 0x01000062,
        Key_Stop  = 0x01000063,
        Key_Refresh  = 0x01000064,
        Key_VolumeDown = 0x01000070,
        Key_VolumeMute  = 0x01000071,
        Key_VolumeUp = 0x01000072,
        Key_BassBoost = 0x01000073,
        Key_BassUp = 0x01000074,
        Key_BassDown = 0x01000075,
        Key_TrebleUp = 0x01000076,
        Key_TrebleDown = 0x01000077,
        Key_MediaPlay  = 0x01000080,
        Key_MediaStop  = 0x01000081,
        Key_MediaPrevious  = 0x01000082,
        Key_MediaNext  = 0x01000083,
        Key_MediaRecord = 0x01000084,
        Key_MediaPause = 0x1000085,
        Key_MediaTogglePlayPause = 0x1000086,
        Key_HomePage  = 0x01000090,
        Key_Favorites  = 0x01000091,
        Key_Search  = 0x01000092,
        Key_Standby = 0x01000093,
        Key_OpenUrl = 0x01000094,
        Key_LaunchMail  = 0x010000a0,
        Key_LaunchMedia = 0x010000a1,
        Key_Launch0  = 0x010000a2,
        Key_Launch1  = 0x010000a3,
        Key_Launch2  = 0x010000a4,
        Key_Launch3  = 0x010000a5,
        Key_Launch4  = 0x010000a6,
        Key_Launch5  = 0x010000a7,
        Key_Launch6  = 0x010000a8,
        Key_Launch7  = 0x010000a9,
        Key_Launch8  = 0x010000aa,
        Key_Launch9  = 0x010000ab,
        Key_LaunchA  = 0x010000ac,
        Key_LaunchB  = 0x010000ad,
        Key_LaunchC  = 0x010000ae,
        Key_LaunchD  = 0x010000af,
        Key_LaunchE  = 0x010000b0,
        Key_LaunchF  = 0x010000b1,
        Key_MonBrightnessUp = 0x010000b2,
        Key_MonBrightnessDown = 0x010000b3,
        Key_KeyboardLightOnOff = 0x010000b4,
        Key_KeyboardBrightnessUp = 0x010000b5,
        Key_KeyboardBrightnessDown = 0x010000b6,
        Key_PowerOff = 0x010000b7,
        Key_WakeUp = 0x010000b8,
        Key_Eject = 0x010000b9,
        Key_ScreenSaver = 0x010000ba,
        Key_WWW = 0x010000bb,
        Key_Memo = 0x010000bc,
        Key_LightBulb = 0x010000bd,
        Key_Shop = 0x010000be,
        Key_History = 0x010000bf,
        Key_AddFavorite = 0x010000c0,
        Key_HotLinks = 0x010000c1,
        Key_BrightnessAdjust = 0x010000c2,
        Key_Finance = 0x010000c3,
        Key_Community = 0x010000c4,
        Key_AudioRewind = 0x010000c5, 
        Key_BackForward = 0x010000c6,
        Key_ApplicationLeft = 0x010000c7,
        Key_ApplicationRight = 0x010000c8,
        Key_Book = 0x010000c9,
        Key_CD = 0x010000ca,
        Key_Calculator = 0x010000cb,
        Key_ToDoList = 0x010000cc,
        Key_ClearGrab = 0x010000cd,
        Key_Close = 0x010000ce,
        Key_Copy = 0x010000cf,
        Key_Cut = 0x010000d0,
        Key_Display = 0x010000d1, 
        Key_DOS = 0x010000d2,
        Key_Documents = 0x010000d3,
        Key_Excel = 0x010000d4,
        Key_Explorer = 0x010000d5,
        Key_Game = 0x010000d6,
        Key_Go = 0x010000d7,
        Key_iTouch = 0x010000d8,
        Key_LogOff = 0x010000d9,
        Key_Market = 0x010000da,
        Key_Meeting = 0x010000db,
        Key_MenuKB = 0x010000dc,
        Key_MenuPB = 0x010000dd,
        Key_MySites = 0x010000de,
        Key_News = 0x010000df,
        Key_OfficeHome = 0x010000e0,
        Key_Option = 0x010000e1,
        Key_Paste = 0x010000e2,
        Key_Phone = 0x010000e3,
        Key_Calendar = 0x010000e4,
        Key_Reply = 0x010000e5,
        Key_Reload = 0x010000e6,
        Key_RotateWindows = 0x010000e7,
        Key_RotationPB = 0x010000e8,
        Key_RotationKB = 0x010000e9,
        Key_Save = 0x010000ea,
        Key_Send = 0x010000eb,
        Key_Spell = 0x010000ec,
        Key_SplitScreen = 0x010000ed,
        Key_Support = 0x010000ee,
        Key_TaskPane = 0x010000ef,
        Key_Terminal = 0x010000f0,
        Key_Tools = 0x010000f1,
        Key_Travel = 0x010000f2,
        Key_Video = 0x010000f3,
        Key_Word = 0x010000f4,
        Key_Xfer = 0x010000f5,
        Key_ZoomIn = 0x010000f6,
        Key_ZoomOut = 0x010000f7,
        Key_Away = 0x010000f8,
        Key_Messenger = 0x010000f9,
        Key_WebCam = 0x010000fa,
        Key_MailForward = 0x010000fb,
        Key_Pictures = 0x010000fc,
        Key_Music = 0x010000fd,
        Key_Battery = 0x010000fe,
        Key_Bluetooth = 0x010000ff,
        Key_WLAN = 0x01000100,
        Key_UWB = 0x01000101,
        Key_AudioForward = 0x01000102, 
        Key_AudioRepeat = 0x01000103, 
        Key_AudioRandomPlay = 0x01000104, 
        Key_Subtitle = 0x01000105,
        Key_AudioCycleTrack = 0x01000106,
        Key_Time = 0x01000107,
        Key_Hibernate = 0x01000108,
        Key_View = 0x01000109,
        Key_TopMenu = 0x0100010a,
        Key_PowerDown = 0x0100010b,
        Key_Suspend = 0x0100010c,
        Key_ContrastAdjust = 0x0100010d,

        Key_LaunchG  = 0x0100010e,
        Key_LaunchH  = 0x0100010f,

        Key_TouchpadToggle = 0x01000110,
        Key_TouchpadOn = 0x01000111,
        Key_TouchpadOff = 0x01000112,

        Key_MicMute = 0x01000113,

        Key_Red = 0x01000114,
        Key_Green = 0x01000115,
        Key_Yellow = 0x01000116,
        Key_Blue = 0x01000117,

        Key_ChannelUp = 0x01000118,
        Key_ChannelDown = 0x01000119,

        Key_Guide    = 0x0100011a,
        Key_Info     = 0x0100011b,
        Key_Settings = 0x0100011c,

        Key_MicVolumeUp   = 0x0100011d,
        Key_MicVolumeDown = 0x0100011e,

        Key_New      = 0x01000120,
        Key_Open     = 0x01000121,
        Key_Find     = 0x01000122,
        Key_Undo     = 0x01000123,
        Key_Redo     = 0x01000124,

        Key_MediaLast = 0x0100ffff,

        
        Key_Select = 0x01010000,
        Key_Yes = 0x01010001,
        Key_No = 0x01010002,

        
        Key_Cancel  = 0x01020001,
        Key_Printer = 0x01020002,
        Key_Execute = 0x01020003,
        Key_Sleep   = 0x01020004,
        Key_Play    = 0x01020005, 
        Key_Zoom    = 0x01020006,
        
        
        
        Key_Exit    = 0x0102000a,

        
        Key_Context1 = 0x01100000,
        Key_Context2 = 0x01100001,
        Key_Context3 = 0x01100002,
        Key_Context4 = 0x01100003,
        Key_Call = 0x01100004,      
        Key_Hangup = 0x01100005,    
        Key_Flip = 0x01100006,
        Key_ToggleCallHangup = 0x01100007, 
        Key_VoiceDial = 0x01100008,
        Key_LastNumberRedial = 0x01100009,

        Key_Camera = 0x01100020,
        Key_CameraFocus = 0x01100021,

        Key_unknown = 0x01ffffff
    };

    enum ArrowType {
        NoArrow,
        UpArrow,
        DownArrow,
        LeftArrow,
        RightArrow
    };

    enum PenStyle { 
        NoPen,
        SolidLine,
        DashLine,
        DotLine,
        DashDotLine,
        DashDotDotLine,
        CustomDashLine

        , MPenStyle = 0x0f
#line 1136 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
    };

    enum PenCapStyle { 
        FlatCap = 0x00,
        SquareCap = 0x10,
        RoundCap = 0x20,
        MPenCapStyle = 0x30
    };

    enum PenJoinStyle { 
        MiterJoin = 0x00,
        BevelJoin = 0x40,
        RoundJoin = 0x80,
        SvgMiterJoin = 0x100,
        MPenJoinStyle = 0x1c0
    };

    enum BrushStyle { 
        NoBrush,
        SolidPattern,
        Dense1Pattern,
        Dense2Pattern,
        Dense3Pattern,
        Dense4Pattern,
        Dense5Pattern,
        Dense6Pattern,
        Dense7Pattern,
        HorPattern,
        VerPattern,
        CrossPattern,
        BDiagPattern,
        FDiagPattern,
        DiagCrossPattern,
        LinearGradientPattern,
        RadialGradientPattern,
        ConicalGradientPattern,
        TexturePattern = 24
    };

    enum SizeMode {
        AbsoluteSize,
        RelativeSize
    };

    enum UIEffect {
        UI_General,
        UI_AnimateMenu,
        UI_FadeMenu,
        UI_AnimateCombo,
        UI_AnimateTooltip,
        UI_FadeTooltip,
        UI_AnimateToolBox
    };

    enum CursorShape {
        ArrowCursor,
        UpArrowCursor,
        CrossCursor,
        WaitCursor,
        IBeamCursor,
        SizeVerCursor,
        SizeHorCursor,
        SizeBDiagCursor,
        SizeFDiagCursor,
        SizeAllCursor,
        BlankCursor,
        SplitVCursor,
        SplitHCursor,
        PointingHandCursor,
        ForbiddenCursor,
        WhatsThisCursor,
        BusyCursor,
        OpenHandCursor,
        ClosedHandCursor,
        DragCopyCursor,
        DragMoveCursor,
        DragLinkCursor,
        LastCursor = DragLinkCursor,
        BitmapCursor = 24,
        CustomCursor = 25
    };

    enum TextFormat {
        PlainText,
        RichText,
        AutoText,
        MarkdownText
    };

    enum AspectRatioMode {
        IgnoreAspectRatio,
        KeepAspectRatio,
        KeepAspectRatioByExpanding
    };

    enum DockWidgetArea {
        LeftDockWidgetArea = 0x1,
        RightDockWidgetArea = 0x2,
        TopDockWidgetArea = 0x4,
        BottomDockWidgetArea = 0x8,

        DockWidgetArea_Mask = 0xf,
        AllDockWidgetAreas = DockWidgetArea_Mask,
        NoDockWidgetArea = 0
    };
    enum DockWidgetAreaSizes {
        NDockWidgetAreas = 4
    };

    typedef QFlags<DockWidgetArea> DockWidgetAreas;
    constexpr inline QFlags<DockWidgetAreas::enum_type> operator|(DockWidgetAreas::enum_type f1, DockWidgetAreas::enum_type f2) noexcept { return QFlags<DockWidgetAreas::enum_type>(f1) | f2; } constexpr inline QFlags<DockWidgetAreas::enum_type> operator|(DockWidgetAreas::enum_type f1, QFlags<DockWidgetAreas::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(DockWidgetAreas::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum ToolBarArea {
        LeftToolBarArea = 0x1,
        RightToolBarArea = 0x2,
        TopToolBarArea = 0x4,
        BottomToolBarArea = 0x8,

        ToolBarArea_Mask = 0xf,
        AllToolBarAreas = ToolBarArea_Mask,
        NoToolBarArea = 0
    };

    enum ToolBarAreaSizes {
        NToolBarAreas = 4
    };

    typedef QFlags<ToolBarArea> ToolBarAreas;
    constexpr inline QFlags<ToolBarAreas::enum_type> operator|(ToolBarAreas::enum_type f1, ToolBarAreas::enum_type f2) noexcept { return QFlags<ToolBarAreas::enum_type>(f1) | f2; } constexpr inline QFlags<ToolBarAreas::enum_type> operator|(ToolBarAreas::enum_type f1, QFlags<ToolBarAreas::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(ToolBarAreas::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum DateFormat {
        TextDate,      
        ISODate,       
        SystemLocaleDate, 
        LocalDate = SystemLocaleDate, 
        LocaleDate,     
        SystemLocaleShortDate,
        SystemLocaleLongDate,
        DefaultLocaleShortDate,
        DefaultLocaleLongDate,
        RFC2822Date,        
        ISODateWithMs
    };

    enum TimeSpec {
        LocalTime,
        UTC,
        OffsetFromUTC,
        TimeZone
    };

    enum DayOfWeek {
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7
    };

    enum ScrollBarPolicy {
        ScrollBarAsNeeded,
        ScrollBarAlwaysOff,
        ScrollBarAlwaysOn
    };

    enum CaseSensitivity {
        CaseInsensitive,
        CaseSensitive
    };

    enum Corner {
        TopLeftCorner = 0x00000,
        TopRightCorner = 0x00001,
        BottomLeftCorner = 0x00002,
        BottomRightCorner = 0x00003
    };

    enum Edge {
        TopEdge = 0x00001,
        LeftEdge = 0x00002,
        RightEdge = 0x00004,
        BottomEdge = 0x00008
    };

    typedef QFlags<Edge> Edges;
    constexpr inline QFlags<Edges::enum_type> operator|(Edges::enum_type f1, Edges::enum_type f2) noexcept { return QFlags<Edges::enum_type>(f1) | f2; } constexpr inline QFlags<Edges::enum_type> operator|(Edges::enum_type f1, QFlags<Edges::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(Edges::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum ConnectionType {
        AutoConnection,
        DirectConnection,
        QueuedConnection,
        BlockingQueuedConnection,
        UniqueConnection =  0x80
    };

    enum ShortcutContext {
        WidgetShortcut,
        WindowShortcut,
        ApplicationShortcut,
        WidgetWithChildrenShortcut
    };

    enum FillRule {
        OddEvenFill,
        WindingFill
    };

    enum MaskMode {
        MaskInColor,
        MaskOutColor
    };

    enum ClipOperation {
        NoClip,
        ReplaceClip,
        IntersectClip
    };

    
    enum ItemSelectionMode {
        ContainsItemShape = 0x0,
        IntersectsItemShape = 0x1,
        ContainsItemBoundingRect = 0x2,
        IntersectsItemBoundingRect = 0x3
    };

    enum ItemSelectionOperation {
        ReplaceSelection,
        AddToSelection
    };

    enum TransformationMode {
        FastTransformation,
        SmoothTransformation
    };

    enum Axis {
        XAxis,
        YAxis,
        ZAxis
    };

    enum FocusReason {
        MouseFocusReason,
        TabFocusReason,
        BacktabFocusReason,
        ActiveWindowFocusReason,
        PopupFocusReason,
        ShortcutFocusReason,
        MenuBarFocusReason,
        OtherFocusReason,
        NoFocusReason
    };

    enum ContextMenuPolicy {
        NoContextMenu,
        DefaultContextMenu,
        ActionsContextMenu,
        CustomContextMenu,
        PreventContextMenu
    };

    enum InputMethodQuery {
        ImEnabled = 0x1,
        ImCursorRectangle = 0x2,

        ImMicroFocus [[deprecated]] = 0x2,
#line 1406 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        ImFont = 0x4,
        ImCursorPosition = 0x8,
        ImSurroundingText = 0x10,
        ImCurrentSelection = 0x20,
        ImMaximumTextLength = 0x40,
        ImAnchorPosition = 0x80,
        ImHints = 0x100,
        ImPreferredLanguage = 0x200,

        ImAbsolutePosition = 0x400,
        ImTextBeforeCursor = 0x800,
        ImTextAfterCursor = 0x1000,
        ImEnterKeyType = 0x2000,
        ImAnchorRectangle = 0x4000,
        ImInputItemClipRectangle = 0x8000,

        ImPlatformData = 0x80000000,
        ImQueryInput = ImCursorRectangle | ImCursorPosition | ImSurroundingText |
                       ImCurrentSelection | ImAnchorRectangle | ImAnchorPosition,
        ImQueryAll = 0xffffffff
    };
    typedef QFlags<InputMethodQuery> InputMethodQueries;
    constexpr inline QFlags<InputMethodQueries::enum_type> operator|(InputMethodQueries::enum_type f1, InputMethodQueries::enum_type f2) noexcept { return QFlags<InputMethodQueries::enum_type>(f1) | f2; } constexpr inline QFlags<InputMethodQueries::enum_type> operator|(InputMethodQueries::enum_type f1, QFlags<InputMethodQueries::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(InputMethodQueries::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum InputMethodHint {
        ImhNone = 0x0,

        ImhHiddenText = 0x1,
        ImhSensitiveData = 0x2,
        ImhNoAutoUppercase = 0x4,
        ImhPreferNumbers = 0x8,
        ImhPreferUppercase = 0x10,
        ImhPreferLowercase = 0x20,
        ImhNoPredictiveText = 0x40,

        ImhDate = 0x80,
        ImhTime = 0x100,

        ImhPreferLatin = 0x200,

        ImhMultiLine = 0x400,

        ImhNoEditMenu = 0x800,
        ImhNoTextHandles = 0x1000,

        ImhDigitsOnly = 0x10000,
        ImhFormattedNumbersOnly = 0x20000,
        ImhUppercaseOnly = 0x40000,
        ImhLowercaseOnly = 0x80000,
        ImhDialableCharactersOnly = 0x100000,
        ImhEmailCharactersOnly = 0x200000,
        ImhUrlCharactersOnly = 0x400000,
        ImhLatinOnly = 0x800000,

        ImhExclusiveInputMask = 0xffff0000
    };
    typedef QFlags<InputMethodHint> InputMethodHints;
    constexpr inline QFlags<InputMethodHints::enum_type> operator|(InputMethodHints::enum_type f1, InputMethodHints::enum_type f2) noexcept { return QFlags<InputMethodHints::enum_type>(f1) | f2; } constexpr inline QFlags<InputMethodHints::enum_type> operator|(InputMethodHints::enum_type f1, QFlags<InputMethodHints::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(InputMethodHints::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum EnterKeyType {
        EnterKeyDefault,
        EnterKeyReturn,
        EnterKeyDone,
        EnterKeyGo,
        EnterKeySend,
        EnterKeySearch,
        EnterKeyNext,
        EnterKeyPrevious
    };

    enum ToolButtonStyle {
        ToolButtonIconOnly,
        ToolButtonTextOnly,
        ToolButtonTextBesideIcon,
        ToolButtonTextUnderIcon,
        ToolButtonFollowStyle
    };

    enum LayoutDirection {
        LeftToRight,
        RightToLeft,
        LayoutDirectionAuto
    };

    enum AnchorPoint {
        AnchorLeft = 0,
        AnchorHorizontalCenter,
        AnchorRight,
        AnchorTop,
        AnchorVerticalCenter,
        AnchorBottom
    };

    enum FindChildOption {
        FindDirectChildrenOnly = 0x0,
        FindChildrenRecursively = 0x1
    };
    typedef QFlags<FindChildOption> FindChildOptions;

    enum DropAction {
        CopyAction = 0x1,
        MoveAction = 0x2,
        LinkAction = 0x4,
        ActionMask = 0xff,
        TargetMoveAction = 0x8002,
        IgnoreAction = 0x0
    };
    typedef QFlags<DropAction> DropActions;
    constexpr inline QFlags<DropActions::enum_type> operator|(DropActions::enum_type f1, DropActions::enum_type f2) noexcept { return QFlags<DropActions::enum_type>(f1) | f2; } constexpr inline QFlags<DropActions::enum_type> operator|(DropActions::enum_type f1, QFlags<DropActions::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(DropActions::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum CheckState {
        Unchecked,
        PartiallyChecked,
        Checked
    };

    enum ItemDataRole {
        DisplayRole = 0,
        DecorationRole = 1,
        EditRole = 2,
        ToolTipRole = 3,
        StatusTipRole = 4,
        WhatsThisRole = 5,
        
        FontRole = 6,
        TextAlignmentRole = 7,
        BackgroundRole = 8,
        ForegroundRole = 9,

        BackgroundColorRole [[deprecated]] = BackgroundRole,
        TextColorRole [[deprecated]] = ForegroundRole,
#line 1538 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        CheckStateRole = 10,
        
        AccessibleTextRole = 11,
        AccessibleDescriptionRole = 12,
        
        SizeHintRole = 13,
        InitialSortOrderRole = 14,
        
        DisplayPropertyRole = 27,
        DecorationPropertyRole = 28,
        ToolTipPropertyRole = 29,
        StatusTipPropertyRole = 30,
        WhatsThisPropertyRole = 31,
        
        UserRole = 0x0100
    };

    enum ItemFlag {
        NoItemFlags = 0,
        ItemIsSelectable = 1,
        ItemIsEditable = 2,
        ItemIsDragEnabled = 4,
        ItemIsDropEnabled = 8,
        ItemIsUserCheckable = 16,
        ItemIsEnabled = 32,
        ItemIsAutoTristate = 64,

        ItemIsTristate = ItemIsAutoTristate,
#line 1567 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
        ItemNeverHasChildren = 128,
        ItemIsUserTristate = 256
    };
    typedef QFlags<ItemFlag> ItemFlags;
    constexpr inline QFlags<ItemFlags::enum_type> operator|(ItemFlags::enum_type f1, ItemFlags::enum_type f2) noexcept { return QFlags<ItemFlags::enum_type>(f1) | f2; } constexpr inline QFlags<ItemFlags::enum_type> operator|(ItemFlags::enum_type f1, QFlags<ItemFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(ItemFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum MatchFlag {
        MatchExactly = 0,
        MatchContains = 1,
        MatchStartsWith = 2,
        MatchEndsWith = 3,
        MatchRegExp = 4,
        MatchWildcard = 5,
        MatchFixedString = 8,
        MatchCaseSensitive = 16,
        MatchWrap = 32,
        MatchRecursive = 64
    };
    typedef QFlags<MatchFlag> MatchFlags;
    constexpr inline QFlags<MatchFlags::enum_type> operator|(MatchFlags::enum_type f1, MatchFlags::enum_type f2) noexcept { return QFlags<MatchFlags::enum_type>(f1) | f2; } constexpr inline QFlags<MatchFlags::enum_type> operator|(MatchFlags::enum_type f1, QFlags<MatchFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(MatchFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    typedef void * HANDLE;


#line 1592 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"

    enum WindowModality {
        NonModal,
        WindowModal,
        ApplicationModal
    };

    enum TextInteractionFlag {
        NoTextInteraction         = 0,
        TextSelectableByMouse     = 1,
        TextSelectableByKeyboard  = 2,
        LinksAccessibleByMouse    = 4,
        LinksAccessibleByKeyboard = 8,
        TextEditable              = 16,

        TextEditorInteraction     = TextSelectableByMouse | TextSelectableByKeyboard | TextEditable,
        TextBrowserInteraction    = TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard
    };
    typedef QFlags<TextInteractionFlag> TextInteractionFlags;
    constexpr inline QFlags<TextInteractionFlags::enum_type> operator|(TextInteractionFlags::enum_type f1, TextInteractionFlags::enum_type f2) noexcept { return QFlags<TextInteractionFlags::enum_type>(f1) | f2; } constexpr inline QFlags<TextInteractionFlags::enum_type> operator|(TextInteractionFlags::enum_type f1, QFlags<TextInteractionFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(TextInteractionFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum EventPriority {
        HighEventPriority = 1,
        NormalEventPriority = 0,
        LowEventPriority = -1
    };

    enum SizeHint {
        MinimumSize,
        PreferredSize,
        MaximumSize,
        MinimumDescent,
        NSizeHints
    };

    enum WindowFrameSection {
        NoSection,
        LeftSection,           
        TopLeftSection,
        TopSection,
        TopRightSection,
        RightSection,
        BottomRightSection,
        BottomSection,
        BottomLeftSection,
        TitleBarArea    
    };


    enum class Initialization {
        Uninitialized
    };
    static constexpr  Initialization Uninitialized = Initialization::Uninitialized;




#line 1650 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"

    enum CoordinateSystem {
        DeviceCoordinates,
        LogicalCoordinates
    };

    enum TouchPointState {
        TouchPointPressed    = 0x01,
        TouchPointMoved      = 0x02,
        TouchPointStationary = 0x04,
        TouchPointReleased   = 0x08
    };
    typedef QFlags<TouchPointState> TouchPointStates;
    constexpr inline QFlags<TouchPointStates::enum_type> operator|(TouchPointStates::enum_type f1, TouchPointStates::enum_type f2) noexcept { return QFlags<TouchPointStates::enum_type>(f1) | f2; } constexpr inline QFlags<TouchPointStates::enum_type> operator|(TouchPointStates::enum_type f1, QFlags<TouchPointStates::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(TouchPointStates::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }


    enum GestureState
    {
        NoGesture,
        GestureStarted  = 1,
        GestureUpdated  = 2,
        GestureFinished = 3,
        GestureCanceled = 4
    };

    enum GestureType
    {
        TapGesture        = 1,
        TapAndHoldGesture = 2,
        PanGesture        = 3,
        PinchGesture      = 4,
        SwipeGesture      = 5,

        CustomGesture     = 0x0100,

        LastGestureType   = ~0u
    };

    enum GestureFlag
    {
        DontStartGestureOnChildren = 0x01,
        ReceivePartialGestures     = 0x02,
        IgnoredGesturesPropagateToParent = 0x04
    };
    typedef QFlags<GestureFlag> GestureFlags;
    constexpr inline QFlags<GestureFlags::enum_type> operator|(GestureFlags::enum_type f1, GestureFlags::enum_type f2) noexcept { return QFlags<GestureFlags::enum_type>(f1) | f2; } constexpr inline QFlags<GestureFlags::enum_type> operator|(GestureFlags::enum_type f1, QFlags<GestureFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(GestureFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum NativeGestureType
    {
        BeginNativeGesture,
        EndNativeGesture,
        PanNativeGesture,
        ZoomNativeGesture,
        SmartZoomNativeGesture,
        RotateNativeGesture,
        SwipeNativeGesture
    };

#line 1709 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"

    enum NavigationMode
    {
        NavigationModeNone,
        NavigationModeKeypadTabOrder,
        NavigationModeKeypadDirectional,
        NavigationModeCursorAuto,
        NavigationModeCursorForceVisible
    };

    enum CursorMoveStyle {
        LogicalMoveStyle,
        VisualMoveStyle
    };

    enum TimerType {
        PreciseTimer,
        CoarseTimer,
        VeryCoarseTimer
    };

    enum ScrollPhase {
        NoScrollPhase = 0,
        ScrollBegin,
        ScrollUpdate,
        ScrollEnd,
        ScrollMomentum
    };

    enum MouseEventSource {
        MouseEventNotSynthesized,
        MouseEventSynthesizedBySystem,
        MouseEventSynthesizedByQt,
        MouseEventSynthesizedByApplication
    };

    enum MouseEventFlag {
        MouseEventCreatedDoubleClick = 0x01,
        MouseEventFlagMask = 0xFF
    };
    typedef QFlags<MouseEventFlag> MouseEventFlags;
    constexpr inline QFlags<MouseEventFlags::enum_type> operator|(MouseEventFlags::enum_type f1, MouseEventFlags::enum_type f2) noexcept { return QFlags<MouseEventFlags::enum_type>(f1) | f2; } constexpr inline QFlags<MouseEventFlags::enum_type> operator|(MouseEventFlags::enum_type f1, QFlags<MouseEventFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(MouseEventFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

    enum ChecksumType {
        ChecksumIso3309,
        ChecksumItuV41
    };

    enum class HighDpiScaleFactorRoundingPolicy {
        Unset,
        Round,
        Ceil,
        Floor,
        RoundPreferFloor,
        PassThrough
    };


    
    inline const QMetaObject *qt_getEnumMetaObject(ScrollBarPolicy) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ScrollBarPolicy) noexcept { return "ScrollBarPolicy"; }
    inline const QMetaObject *qt_getEnumMetaObject(FocusPolicy) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(FocusPolicy) noexcept { return "FocusPolicy"; }
    inline const QMetaObject *qt_getEnumMetaObject(ContextMenuPolicy) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ContextMenuPolicy) noexcept { return "ContextMenuPolicy"; }
    inline const QMetaObject *qt_getEnumMetaObject(ArrowType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ArrowType) noexcept { return "ArrowType"; }
    inline const QMetaObject *qt_getEnumMetaObject(ToolButtonStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ToolButtonStyle) noexcept { return "ToolButtonStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(PenStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(PenStyle) noexcept { return "PenStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(PenCapStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(PenCapStyle) noexcept { return "PenCapStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(PenJoinStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(PenJoinStyle) noexcept { return "PenJoinStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(BrushStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(BrushStyle) noexcept { return "BrushStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(FillRule) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(FillRule) noexcept { return "FillRule"; }
    inline const QMetaObject *qt_getEnumMetaObject(MaskMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(MaskMode) noexcept { return "MaskMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(BGMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(BGMode) noexcept { return "BGMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(ClipOperation) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ClipOperation) noexcept { return "ClipOperation"; }
    inline const QMetaObject *qt_getEnumMetaObject(SizeMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(SizeMode) noexcept { return "SizeMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(Axis) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Axis) noexcept { return "Axis"; }
    inline const QMetaObject *qt_getEnumMetaObject(Corner) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Corner) noexcept { return "Corner"; }
    inline const QMetaObject *qt_getEnumMetaObject(Edge) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Edge) noexcept { return "Edge"; }
    inline const QMetaObject *qt_getEnumMetaObject(LayoutDirection) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(LayoutDirection) noexcept { return "LayoutDirection"; }
    inline const QMetaObject *qt_getEnumMetaObject(SizeHint) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(SizeHint) noexcept { return "SizeHint"; }
    inline const QMetaObject *qt_getEnumMetaObject(Orientation) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Orientation) noexcept { return "Orientation"; }
    inline const QMetaObject *qt_getEnumMetaObject(DropAction) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DropAction) noexcept { return "DropAction"; }
    inline const QMetaObject *qt_getEnumMetaObject(Alignment) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Alignment) noexcept { return "Alignment"; }
    inline const QMetaObject *qt_getEnumMetaObject(TextFlag) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TextFlag) noexcept { return "TextFlag"; }
    inline const QMetaObject *qt_getEnumMetaObject(Orientations) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Orientations) noexcept { return "Orientations"; }
    inline const QMetaObject *qt_getEnumMetaObject(SplitBehavior) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(SplitBehavior) noexcept { return "SplitBehavior"; }
    inline const QMetaObject *qt_getEnumMetaObject(DropActions) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DropActions) noexcept { return "DropActions"; }
    inline const QMetaObject *qt_getEnumMetaObject(Edges) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Edges) noexcept { return "Edges"; }
    inline const QMetaObject *qt_getEnumMetaObject(DockWidgetAreas) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DockWidgetAreas) noexcept { return "DockWidgetAreas"; }
    inline const QMetaObject *qt_getEnumMetaObject(ToolBarAreas) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ToolBarAreas) noexcept { return "ToolBarAreas"; }
    inline const QMetaObject *qt_getEnumMetaObject(DockWidgetArea) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DockWidgetArea) noexcept { return "DockWidgetArea"; }
    inline const QMetaObject *qt_getEnumMetaObject(ToolBarArea) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ToolBarArea) noexcept { return "ToolBarArea"; }
    inline const QMetaObject *qt_getEnumMetaObject(TextFormat) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TextFormat) noexcept { return "TextFormat"; }
    inline const QMetaObject *qt_getEnumMetaObject(TextElideMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TextElideMode) noexcept { return "TextElideMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(DateFormat) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DateFormat) noexcept { return "DateFormat"; }
    inline const QMetaObject *qt_getEnumMetaObject(TimeSpec) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TimeSpec) noexcept { return "TimeSpec"; }
    inline const QMetaObject *qt_getEnumMetaObject(DayOfWeek) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(DayOfWeek) noexcept { return "DayOfWeek"; }
    inline const QMetaObject *qt_getEnumMetaObject(CursorShape) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(CursorShape) noexcept { return "CursorShape"; }
    inline const QMetaObject *qt_getEnumMetaObject(GlobalColor) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(GlobalColor) noexcept { return "GlobalColor"; }
    inline const QMetaObject *qt_getEnumMetaObject(AspectRatioMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(AspectRatioMode) noexcept { return "AspectRatioMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(TransformationMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TransformationMode) noexcept { return "TransformationMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(ImageConversionFlags) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ImageConversionFlags) noexcept { return "ImageConversionFlags"; }
    inline const QMetaObject *qt_getEnumMetaObject(Key) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(Key) noexcept { return "Key"; }
    inline const QMetaObject *qt_getEnumMetaObject(ShortcutContext) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ShortcutContext) noexcept { return "ShortcutContext"; }
    inline const QMetaObject *qt_getEnumMetaObject(TextInteractionFlag) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TextInteractionFlag) noexcept { return "TextInteractionFlag"; }
    inline const QMetaObject *qt_getEnumMetaObject(TextInteractionFlags) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TextInteractionFlags) noexcept { return "TextInteractionFlags"; }
    inline const QMetaObject *qt_getEnumMetaObject(ItemSelectionMode) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ItemSelectionMode) noexcept { return "ItemSelectionMode"; }
    inline const QMetaObject *qt_getEnumMetaObject(ItemSelectionOperation) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ItemSelectionOperation) noexcept { return "ItemSelectionOperation"; }
    inline const QMetaObject *qt_getEnumMetaObject(ItemFlags) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ItemFlags) noexcept { return "ItemFlags"; }
    inline const QMetaObject *qt_getEnumMetaObject(CheckState) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(CheckState) noexcept { return "CheckState"; }
    inline const QMetaObject *qt_getEnumMetaObject(ItemDataRole) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ItemDataRole) noexcept { return "ItemDataRole"; }
    inline const QMetaObject *qt_getEnumMetaObject(SortOrder) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(SortOrder) noexcept { return "SortOrder"; }
    inline const QMetaObject *qt_getEnumMetaObject(CaseSensitivity) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(CaseSensitivity) noexcept { return "CaseSensitivity"; }
    inline const QMetaObject *qt_getEnumMetaObject(MatchFlags) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(MatchFlags) noexcept { return "MatchFlags"; }
    inline const QMetaObject *qt_getEnumMetaObject(KeyboardModifiers) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(KeyboardModifiers) noexcept { return "KeyboardModifiers"; }
    inline const QMetaObject *qt_getEnumMetaObject(MouseButtons) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(MouseButtons) noexcept { return "MouseButtons"; }
    inline const QMetaObject *qt_getEnumMetaObject(WindowType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WindowType) noexcept { return "WindowType"; }
    inline const QMetaObject *qt_getEnumMetaObject(WindowState) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WindowState) noexcept { return "WindowState"; }
    inline const QMetaObject *qt_getEnumMetaObject(WindowModality) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WindowModality) noexcept { return "WindowModality"; }
    inline const QMetaObject *qt_getEnumMetaObject(WidgetAttribute) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WidgetAttribute) noexcept { return "WidgetAttribute"; }
    inline const QMetaObject *qt_getEnumMetaObject(ApplicationAttribute) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ApplicationAttribute) noexcept { return "ApplicationAttribute"; }
    inline const QMetaObject *qt_getEnumMetaObject(WindowFlags) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WindowFlags) noexcept { return "WindowFlags"; }
    inline const QMetaObject *qt_getEnumMetaObject(WindowStates) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(WindowStates) noexcept { return "WindowStates"; }
    inline const QMetaObject *qt_getEnumMetaObject(FocusReason) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(FocusReason) noexcept { return "FocusReason"; }
    inline const QMetaObject *qt_getEnumMetaObject(InputMethodHint) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(InputMethodHint) noexcept { return "InputMethodHint"; }
    inline const QMetaObject *qt_getEnumMetaObject(InputMethodQuery) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(InputMethodQuery) noexcept { return "InputMethodQuery"; }
    inline const QMetaObject *qt_getEnumMetaObject(InputMethodHints) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(InputMethodHints) noexcept { return "InputMethodHints"; }
    inline const QMetaObject *qt_getEnumMetaObject(EnterKeyType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(EnterKeyType) noexcept { return "EnterKeyType"; }
    inline const QMetaObject *qt_getEnumMetaObject(InputMethodQueries) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(InputMethodQueries) noexcept { return "InputMethodQueries"; }
    inline const QMetaObject *qt_getEnumMetaObject(TouchPointStates) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TouchPointStates) noexcept { return "TouchPointStates"; }
    inline const QMetaObject *qt_getEnumMetaObject(ScreenOrientation) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ScreenOrientation) noexcept { return "ScreenOrientation"; }
    inline const QMetaObject *qt_getEnumMetaObject(ScreenOrientations) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ScreenOrientations) noexcept { return "ScreenOrientations"; }
    inline const QMetaObject *qt_getEnumMetaObject(ConnectionType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ConnectionType) noexcept { return "ConnectionType"; }
    inline const QMetaObject *qt_getEnumMetaObject(ApplicationState) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ApplicationState) noexcept { return "ApplicationState"; }

    inline const QMetaObject *qt_getEnumMetaObject(GestureState) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(GestureState) noexcept { return "GestureState"; }
    inline const QMetaObject *qt_getEnumMetaObject(GestureType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(GestureType) noexcept { return "GestureType"; }
    inline const QMetaObject *qt_getEnumMetaObject(NativeGestureType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(NativeGestureType) noexcept { return "NativeGestureType"; }
#line 1846 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
    inline const QMetaObject *qt_getEnumMetaObject(CursorMoveStyle) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(CursorMoveStyle) noexcept { return "CursorMoveStyle"; }
    inline const QMetaObject *qt_getEnumMetaObject(TimerType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TimerType) noexcept { return "TimerType"; }
    inline const QMetaObject *qt_getEnumMetaObject(ScrollPhase) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ScrollPhase) noexcept { return "ScrollPhase"; }
    inline const QMetaObject *qt_getEnumMetaObject(MouseEventSource) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(MouseEventSource) noexcept { return "MouseEventSource"; }
    inline const QMetaObject *qt_getEnumMetaObject(MouseEventFlag) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(MouseEventFlag) noexcept { return "MouseEventFlag"; }
    inline const QMetaObject *qt_getEnumMetaObject(ChecksumType) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(ChecksumType) noexcept { return "ChecksumType"; }
    inline const QMetaObject *qt_getEnumMetaObject(HighDpiScaleFactorRoundingPolicy) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(HighDpiScaleFactorRoundingPolicy) noexcept { return "HighDpiScaleFactorRoundingPolicy"; }
    inline const QMetaObject *qt_getEnumMetaObject(TabFocusBehavior) noexcept { return qt_getQtMetaObject(); } inline constexpr const char *qt_getEnumName(TabFocusBehavior) noexcept { return "TabFocusBehavior"; }
#line 1855 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"

}







typedef bool (*qInternalCallback)(void **);

class __declspec(dllimport) QInternal {
public:
    enum PaintDeviceFlags {
        UnknownDevice = 0x00,
        Widget        = 0x01,
        Pixmap        = 0x02,
        Image         = 0x03,
        Printer       = 0x04,
        Picture       = 0x05,
        Pbuffer       = 0x06,    
        FramebufferObject = 0x07, 
        CustomRaster  = 0x08,
        MacQuartz     = 0x09,
        PaintBuffer   = 0x0a,
        OpenGL        = 0x0b
    };
    enum RelayoutType {
        RelayoutNormal,
        RelayoutDragging,
        RelayoutDropped
    };

    enum DockPosition {
        LeftDock,
        RightDock,
        TopDock,
        BottomDock,
        DockCount
    };

    enum Callback {
        EventNotifyCallback,
        LastCallback
    };
    static bool registerCallback(Callback, qInternalCallback);
    static bool unregisterCallback(Callback, qInternalCallback);
    static bool activateCallbacks(Callback, void **);
};



#line 1908 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qnamespace.h"
#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"



#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"




class __declspec(dllimport) QPoint
{
public:
    constexpr QPoint();
    constexpr QPoint(int xpos, int ypos);

    constexpr inline bool isNull() const;

    constexpr inline int x() const;
    constexpr inline int y() const;
    constexpr inline void setX(int x);
    constexpr inline void setY(int y);

    constexpr inline int manhattanLength() const;

    constexpr QPoint transposed() const noexcept { return {yp, xp}; }

    constexpr inline int &rx();
    constexpr inline int &ry();

    constexpr inline QPoint &operator+=(const QPoint &p);
    constexpr inline QPoint &operator-=(const QPoint &p);

    constexpr inline QPoint &operator*=(float factor);
    constexpr inline QPoint &operator*=(double factor);
    constexpr inline QPoint &operator*=(int factor);

    constexpr inline QPoint &operator/=(qreal divisor);

    constexpr static inline int dotProduct(const QPoint &p1, const QPoint &p2)
    { return p1.xp * p2.xp + p1.yp * p2.yp; }

    friend constexpr inline bool operator==(const QPoint &, const QPoint &);
    friend constexpr inline bool operator!=(const QPoint &, const QPoint &);
    friend constexpr inline const QPoint operator+(const QPoint &, const QPoint &);
    friend constexpr inline const QPoint operator-(const QPoint &, const QPoint &);
    friend constexpr inline const QPoint operator*(const QPoint &, float);
    friend constexpr inline const QPoint operator*(float, const QPoint &);
    friend constexpr inline const QPoint operator*(const QPoint &, double);
    friend constexpr inline const QPoint operator*(double, const QPoint &);
    friend constexpr inline const QPoint operator*(const QPoint &, int);
    friend constexpr inline const QPoint operator*(int, const QPoint &);
    friend constexpr inline const QPoint operator+(const QPoint &);
    friend constexpr inline const QPoint operator-(const QPoint &);
    friend constexpr inline const QPoint operator/(const QPoint &, qreal);



#line 101 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"

private:
    friend class QTransform;
    int xp;
    int yp;
};

template<> class QTypeInfo<QPoint > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QPoint>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QPoint>(), isLarge = (sizeof(QPoint)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QPoint >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPoint) }; static inline const char *name() { return "QPoint"; } };





__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QPoint &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QPoint &);
#line 117 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"





constexpr inline QPoint::QPoint() : xp(0), yp(0) {}

constexpr inline QPoint::QPoint(int xpos, int ypos) : xp(xpos), yp(ypos) {}

constexpr inline bool QPoint::isNull() const
{ return xp == 0 && yp == 0; }

constexpr inline int QPoint::x() const
{ return xp; }

constexpr inline int QPoint::y() const
{ return yp; }

constexpr inline void QPoint::setX(int xpos)
{ xp = xpos; }

constexpr inline void QPoint::setY(int ypos)
{ yp = ypos; }

inline int constexpr QPoint::manhattanLength() const
{ return qAbs(x())+qAbs(y()); }

constexpr inline int &QPoint::rx()
{ return xp; }

constexpr inline int &QPoint::ry()
{ return yp; }

constexpr inline QPoint &QPoint::operator+=(const QPoint &p)
{ xp+=p.xp; yp+=p.yp; return *this; }

constexpr inline QPoint &QPoint::operator-=(const QPoint &p)
{ xp-=p.xp; yp-=p.yp; return *this; }

constexpr inline QPoint &QPoint::operator*=(float factor)
{ xp = qRound(xp*factor); yp = qRound(yp*factor); return *this; }

constexpr inline QPoint &QPoint::operator*=(double factor)
{ xp = qRound(xp*factor); yp = qRound(yp*factor); return *this; }

constexpr inline QPoint &QPoint::operator*=(int factor)
{ xp = xp*factor; yp = yp*factor; return *this; }

constexpr inline bool operator==(const QPoint &p1, const QPoint &p2)
{ return p1.xp == p2.xp && p1.yp == p2.yp; }

constexpr inline bool operator!=(const QPoint &p1, const QPoint &p2)
{ return p1.xp != p2.xp || p1.yp != p2.yp; }

constexpr inline const QPoint operator+(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp+p2.xp, p1.yp+p2.yp); }

constexpr inline const QPoint operator-(const QPoint &p1, const QPoint &p2)
{ return QPoint(p1.xp-p2.xp, p1.yp-p2.yp); }

constexpr inline const QPoint operator*(const QPoint &p, float factor)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

constexpr inline const QPoint operator*(const QPoint &p, double factor)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

constexpr inline const QPoint operator*(const QPoint &p, int factor)
{ return QPoint(p.xp*factor, p.yp*factor); }

constexpr inline const QPoint operator*(float factor, const QPoint &p)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

constexpr inline const QPoint operator*(double factor, const QPoint &p)
{ return QPoint(qRound(p.xp*factor), qRound(p.yp*factor)); }

constexpr inline const QPoint operator*(int factor, const QPoint &p)
{ return QPoint(p.xp*factor, p.yp*factor); }

constexpr inline const QPoint operator+(const QPoint &p)
{ return p; }

constexpr inline const QPoint operator-(const QPoint &p)
{ return QPoint(-p.xp, -p.yp); }

constexpr inline QPoint &QPoint::operator/=(qreal c)
{
    xp = qRound(xp/c);
    yp = qRound(yp/c);
    return *this;
}

constexpr inline const QPoint operator/(const QPoint &p, qreal c)
{
    return QPoint(qRound(p.xp/c), qRound(p.yp/c));
}


__declspec(dllimport) QDebug operator<<(QDebug, const QPoint &);
#line 216 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"





class __declspec(dllimport) QPointF
{
public:
    constexpr QPointF();
    constexpr QPointF(const QPoint &p);
    constexpr QPointF(qreal xpos, qreal ypos);

    constexpr inline qreal manhattanLength() const;

    inline bool isNull() const;

    constexpr inline qreal x() const;
    constexpr inline qreal y() const;
    constexpr inline void setX(qreal x);
    constexpr inline void setY(qreal y);

    constexpr QPointF transposed() const noexcept { return {yp, xp}; }

    constexpr inline qreal &rx();
    constexpr inline qreal &ry();

    constexpr inline QPointF &operator+=(const QPointF &p);
    constexpr inline QPointF &operator-=(const QPointF &p);
    constexpr inline QPointF &operator*=(qreal c);
    constexpr inline QPointF &operator/=(qreal c);

    constexpr static inline qreal dotProduct(const QPointF &p1, const QPointF &p2)
    { return p1.xp * p2.xp + p1.yp * p2.yp; }

    friend constexpr inline bool operator==(const QPointF &, const QPointF &);
    friend constexpr inline bool operator!=(const QPointF &, const QPointF &);
    friend constexpr inline const QPointF operator+(const QPointF &, const QPointF &);
    friend constexpr inline const QPointF operator-(const QPointF &, const QPointF &);
    friend constexpr inline const QPointF operator*(qreal, const QPointF &);
    friend constexpr inline const QPointF operator*(const QPointF &, qreal);
    friend constexpr inline const QPointF operator+(const QPointF &);
    friend constexpr inline const QPointF operator-(const QPointF &);
    friend constexpr inline const QPointF operator/(const QPointF &, qreal);

    constexpr QPoint toPoint() const;




#line 266 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"

private:
    friend class QMatrix;
    friend class QTransform;

    qreal xp;
    qreal yp;
};

template<> class QTypeInfo<QPointF > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QPointF>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QPointF>(), isLarge = (sizeof(QPointF)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QPointF >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QPointF) }; static inline const char *name() { return "QPointF"; } };





__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QPointF &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QPointF &);
#line 284 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"





constexpr inline QPointF::QPointF() : xp(0), yp(0) { }

constexpr inline QPointF::QPointF(qreal xpos, qreal ypos) : xp(xpos), yp(ypos) { }

constexpr inline QPointF::QPointF(const QPoint &p) : xp(p.x()), yp(p.y()) { }

constexpr inline qreal QPointF::manhattanLength() const
{
    return qAbs(x())+qAbs(y());
}

inline bool QPointF::isNull() const
{
    return qIsNull(xp) && qIsNull(yp);
}

constexpr inline qreal QPointF::x() const
{
    return xp;
}

constexpr inline qreal QPointF::y() const
{
    return yp;
}

constexpr inline void QPointF::setX(qreal xpos)
{
    xp = xpos;
}

constexpr inline void QPointF::setY(qreal ypos)
{
    yp = ypos;
}

constexpr inline qreal &QPointF::rx()
{
    return xp;
}

constexpr inline qreal &QPointF::ry()
{
    return yp;
}

constexpr inline QPointF &QPointF::operator+=(const QPointF &p)
{
    xp+=p.xp;
    yp+=p.yp;
    return *this;
}

constexpr inline QPointF &QPointF::operator-=(const QPointF &p)
{
    xp-=p.xp; yp-=p.yp; return *this;
}

constexpr inline QPointF &QPointF::operator*=(qreal c)
{
    xp*=c; yp*=c; return *this;
}

__pragma(warning(push))




constexpr inline bool operator==(const QPointF &p1, const QPointF &p2)
{
    return ((!p1.xp || !p2.xp) ? qFuzzyIsNull(p1.xp - p2.xp) : qFuzzyCompare(p1.xp, p2.xp))
        && ((!p1.yp || !p2.yp) ? qFuzzyIsNull(p1.yp - p2.yp) : qFuzzyCompare(p1.yp, p2.yp));
}

constexpr inline bool operator!=(const QPointF &p1, const QPointF &p2)
{
    return !(p1 == p2);
}

__pragma(warning(pop))

constexpr inline const QPointF operator+(const QPointF &p1, const QPointF &p2)
{
    return QPointF(p1.xp+p2.xp, p1.yp+p2.yp);
}

constexpr inline const QPointF operator-(const QPointF &p1, const QPointF &p2)
{
    return QPointF(p1.xp-p2.xp, p1.yp-p2.yp);
}

constexpr inline const QPointF operator*(const QPointF &p, qreal c)
{
    return QPointF(p.xp*c, p.yp*c);
}

constexpr inline const QPointF operator*(qreal c, const QPointF &p)
{
    return QPointF(p.xp*c, p.yp*c);
}

constexpr inline const QPointF operator+(const QPointF &p)
{
    return p;
}

constexpr inline const QPointF operator-(const QPointF &p)
{
    return QPointF(-p.xp, -p.yp);
}

constexpr inline QPointF &QPointF::operator/=(qreal divisor)
{
    xp/=divisor;
    yp/=divisor;
    return *this;
}

constexpr inline const QPointF operator/(const QPointF &p, qreal divisor)
{
    return QPointF(p.xp/divisor, p.yp/divisor);
}

constexpr inline QPoint QPointF::toPoint() const
{
    return QPoint(qRound(xp), qRound(yp));
}


__declspec(dllimport) QDebug operator<<(QDebug d, const QPointF &p);
#line 420 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"



#line 424 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpoint.h"
#line 45 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"













































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"




namespace QtPrivate
{

class RefCount
{
public:
    inline bool ref() noexcept {
        int count = atomic.loadRelaxed();

        if (count == 0) 
            return false;
#line 60 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"
        if (count != -1) 
            atomic.ref();
        return true;
    }

    inline bool deref() noexcept {
        int count = atomic.loadRelaxed();

        if (count == 0) 
            return false;
#line 71 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"
        if (count == -1) 
            return true;
        return atomic.deref();
    }


    bool setSharable(bool sharable) noexcept
    {
        static_cast<void>(false && (!isShared()));
        if (sharable)
            return atomic.testAndSetRelaxed(0, 1);
        else
            return atomic.testAndSetRelaxed(1, 0);
    }

    bool isSharable() const noexcept
    {
        
        return atomic.loadRelaxed() != 0;
    }
#line 92 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"

    bool isStatic() const noexcept
    {
        
        return atomic.loadRelaxed() == -1;
    }

    bool isShared() const noexcept
    {
        int count = atomic.loadRelaxed();
        return (count != 1) && (count != 0);
    }

    void initializeOwned() noexcept { atomic.storeRelaxed(1); }
    void initializeUnsharable() noexcept { atomic.storeRelaxed(0); }

    QBasicAtomicInt atomic;
};

}





#line 118 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qrefcount.h"
#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"















































struct __declspec(dllimport) QArrayData
{
    QtPrivate::RefCount ref;
    int size;
    uint alloc : 31;
    uint capacityReserved : 1;

    qptrdiff offset; 

    void *data()
    {
        static_cast<void>(false && (size == 0 || offset < 0 || size_t(offset) >= sizeof(QArrayData)));
#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
        return reinterpret_cast<char *>(this) + offset;
    }

    const void *data() const
    {
        static_cast<void>(false && (size == 0 || offset < 0 || size_t(offset) >= sizeof(QArrayData)));
#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
        return reinterpret_cast<const char *>(this) + offset;
    }

    
    
    
    bool isMutable() const
    {
        return alloc != 0;
    }

    enum AllocationOption {
        CapacityReserved    = 0x1,

        Unsharable          = 0x2,
#line 84 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
        RawData             = 0x4,
        Grow                = 0x8,

        Default = 0
    };

    typedef QFlags<AllocationOption> AllocationOptions;

    size_t detachCapacity(size_t newSize) const
    {
        if (capacityReserved && newSize < alloc)
            return alloc;
        return newSize;
    }

    AllocationOptions detachFlags() const
    {
        AllocationOptions result;
        if (capacityReserved)
            result |= CapacityReserved;
        return result;
    }

    AllocationOptions cloneFlags() const
    {
        AllocationOptions result;
        if (capacityReserved)
            result |= CapacityReserved;
        return result;
    }

     static QArrayData *allocate(size_t objectSize, size_t alignment,
            size_t capacity, AllocationOptions options = Default) noexcept;
     static QArrayData *reallocateUnaligned(QArrayData *data, size_t objectSize,
            size_t newCapacity, AllocationOptions newOptions = Default) noexcept;
    static void deallocate(QArrayData *data, size_t objectSize,
            size_t alignment) noexcept;

    static const QArrayData shared_null[2];
    static QArrayData *sharedNull() noexcept { return const_cast<QArrayData*>(shared_null); }
};

constexpr inline QFlags<QArrayData::AllocationOptions::enum_type> operator|(QArrayData::AllocationOptions::enum_type f1, QArrayData::AllocationOptions::enum_type f2) noexcept { return QFlags<QArrayData::AllocationOptions::enum_type>(f1) | f2; } constexpr inline QFlags<QArrayData::AllocationOptions::enum_type> operator|(QArrayData::AllocationOptions::enum_type f1, QFlags<QArrayData::AllocationOptions::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QArrayData::AllocationOptions::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

template <class T>
struct QTypedArrayData
    : QArrayData
{








































































    typedef T* iterator;
    typedef const T* const_iterator;
#line 207 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"

    T *data() { return static_cast<T *>(QArrayData::data()); }
    const T *data() const { return static_cast<const T *>(QArrayData::data()); }

    iterator begin(iterator = iterator()) { return data(); }
    iterator end(iterator = iterator()) { return data() + size; }
    const_iterator begin(const_iterator = const_iterator()) const { return data(); }
    const_iterator end(const_iterator = const_iterator()) const { return data() + size; }
    const_iterator constBegin(const_iterator = const_iterator()) const { return data(); }
    const_iterator constEnd(const_iterator = const_iterator()) const { return data() + size; }

    class AlignmentDummy { QArrayData header; T data; };

     static QTypedArrayData *allocate(size_t capacity,
            AllocationOptions options = Default)
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        return static_cast<QTypedArrayData *>(QArrayData::allocate(sizeof(T),
                    alignof(AlignmentDummy), capacity, options));
    }

    static QTypedArrayData *reallocateUnaligned(QTypedArrayData *data, size_t capacity,
            AllocationOptions options = Default)
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        return static_cast<QTypedArrayData *>(QArrayData::reallocateUnaligned(data, sizeof(T),
                    capacity, options));
    }

    static void deallocate(QArrayData *data)
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        QArrayData::deallocate(data, sizeof(T), alignof(AlignmentDummy));
    }

    static QTypedArrayData *fromRawData(const T *data, size_t n,
            AllocationOptions options = Default)
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        QTypedArrayData *result = allocate(0, options | RawData);
        if (result) {
            static_cast<void>(false && (!result->ref.isShared())); 

            result->offset = reinterpret_cast<const char *>(data)
                - reinterpret_cast<const char *>(result);
            result->size = int(n);
        }
        return result;
    }

    static QTypedArrayData *sharedNull() noexcept
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        return static_cast<QTypedArrayData *>(QArrayData::sharedNull());
    }

    static QTypedArrayData *sharedEmpty()
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        return allocate( 0);
    }


    static QTypedArrayData *unsharableEmpty()
    {
        static_assert(bool(sizeof(QTypedArrayData) == sizeof(QArrayData)), "sizeof(QTypedArrayData) == sizeof(QArrayData)");
        return allocate( 0, Unsharable);
    }
#line 276 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
};

template <class T, size_t N>
struct QStaticArrayData
{
    QArrayData header;
    T data[N];
};


template <class T>
struct QArrayDataPointerRef
{
    QTypedArrayData<T> *ptr;
};







































#line 331 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
















namespace QtPrivate {
struct __declspec(dllimport) QContainerImplHelper
{
    enum CutResult { Null, Empty, Full, Subset };
    static CutResult mid(int originalLength, int *position, int *length);
};
}



#line 358 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qarraydata.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdarg.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

#pragma once







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

#pragma once





#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
template<class _Traits>
	using _Traits_ch_t = typename _Traits::char_type;

template<class _Traits>
	using _Traits_ptr_t = const typename _Traits::char_type *;

template<class _Traits>
	constexpr bool _Traits_equal(  const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		  const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
	{	
	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);
	}

template<class _Traits>
	constexpr int _Traits_compare(  const _Traits_ptr_t<_Traits> _Left, const size_t _Left_size,
		  const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept
	{	
	const int _Ans = _Traits::compare(_Left, _Right, _Min_value(_Left_size, _Right_size));

	if (_Ans != 0)
		{
		return (_Ans);
		}

	if (_Left_size < _Right_size)
		{
		return (-1);
		}

	if (_Left_size > _Right_size)
		{
		return (1);
		}

	return (0);
	}

template<class _Traits>
	constexpr size_t _Traits_find(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
	{	
	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)
		{	
			
			
			
			
			
			
			
		return (static_cast<size_t>(-1));
		}

	if (_Needle_size == 0)
		{	
		return (_Start_at);
		}

	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;
	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)
		{
		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);
		if (!_Match_try)
			{	
			return (static_cast<size_t>(-1));
			}

		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
			{	
			return (static_cast<size_t>(_Match_try - _Haystack));
			}
		}
	}

template<class _Traits>
	constexpr size_t _Traits_find_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Start_at < _Hay_size)
		{
		const auto _Found_at = _Traits::find(_Haystack + _Start_at, _Hay_size - _Start_at, _Ch);
		if (_Found_at)
			{
			return (static_cast<size_t>(_Found_at - _Haystack));
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size) noexcept
	{	
	if (_Needle_size == 0)
		{
		return (_Min_value(_Start_at, _Hay_size));	
		}

	if (_Needle_size <= _Hay_size)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - _Needle_size); ; --_Match_try)
			{
			if (_Traits::eq(*_Match_try, *_Needle)
				&& _Traits::compare(_Match_try, _Needle, _Needle_size) == 0)
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Elem,
	bool = _Is_character<_Elem>::value>
	class _String_bitmap
	{	
public:
	constexpr bool _Mark(const _Elem * _First, const _Elem * const _Last)
		{	
			
		for (; _First != _Last; ++_First)
			{
			_Matches[static_cast<unsigned char>(*_First)] = true;
			}

		return (true);
		}

	constexpr bool _Match(const _Elem _Ch) const
		{	
		return (_Matches[static_cast<unsigned char>(_Ch)]);
		}

private:
	bool _Matches[256] = {};
	};

template<class _Elem>
	class _String_bitmap<_Elem, false>
	{	
public:
	static_assert(is_unsigned_v<_Elem>,
		"Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N5687 [char.traits]. "
		"Visual C++ accepts other unsigned integral types as an extension.");

	constexpr bool _Mark(const _Elem * _First, const _Elem * const _Last)
		{	
			
		for (; _First != _Last; ++_First)
			{
			const auto _Ch = *_First;
			if (_Ch >= 256U)
				{
				return (false);
				}

			_Matches[static_cast<unsigned char>(_Ch)] = true;
			}

		return (true);
		}

	constexpr bool _Match(const _Elem _Ch) const
		{	
		return (_Ch < 256U && _Matches[_Ch]);
		}

private:
	bool _Matches[256] = {};
	};

template<class _Traits>
	constexpr size_t _Traits_find_first_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Start_at < _Hay_size)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_first_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Needle_size != 0 && _Hay_size != 0)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_last_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_first_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Start_at < _Hay_size)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_first_not_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_not_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Start_at < _Hay_size)
		{	
		const auto _End = _Haystack + _Hay_size;
		for (auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++_Match_try)
			{
			if (!_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, false_type) noexcept
	{	
		
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Traits::find(_Needle, _Needle_size, *_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_find_last_not_of(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		  const _Traits_ptr_t<_Traits> _Needle, const size_t _Needle_size, true_type) noexcept
	{	
		
	if (_Hay_size != 0)
		{	
		_String_bitmap<typename _Traits::char_type> _Matches;
		if (!_Matches._Mark(_Needle, _Needle + _Needle_size))
			{	
			return (_Traits_find_last_not_of<_Traits>(_Haystack, _Hay_size, _Start_at, _Needle, _Needle_size,
				false_type{}));
			}

		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Matches._Match(*_Match_try))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}

template<class _Traits>
	constexpr size_t _Traits_rfind_not_ch(
		  const _Traits_ptr_t<_Traits> _Haystack, const size_t _Hay_size, const size_t _Start_at,
		const _Traits_ch_t<_Traits> _Ch) noexcept
	{	
	if (_Hay_size != 0)
		{	
		for (auto _Match_try = _Haystack + _Min_value(_Start_at, _Hay_size - 1); ; --_Match_try)
			{
			if (!_Traits::eq(*_Match_try, _Ch))
				{
				return (static_cast<size_t>(_Match_try - _Haystack));	
				}

			if (_Match_try == _Haystack)
				{
				break;	
				}
			}
		}

	return (static_cast<size_t>(-1));	
	}



		
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	class basic_string_view;

template<class _Traits>
	class _String_view_iterator
	{	
public:
	using iterator_category = random_access_iterator_tag;
	using value_type        = typename _Traits::char_type;
	using difference_type   = ptrdiff_t;
	using pointer           = const value_type *;
	using reference         = const value_type&;

	constexpr _String_view_iterator() noexcept




#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		: _Myptr()
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	{	
	}

private:
	friend basic_string_view<value_type, _Traits>;








#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	constexpr explicit _String_view_iterator(const pointer _Ptr) noexcept
		: _Myptr(_Ptr)
	{	
	}
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

public:
	[[nodiscard]] constexpr reference operator*() const noexcept
		{	




#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (*_Myptr);
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr pointer operator->() const noexcept
		{	




#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Myptr);
#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	constexpr _String_view_iterator& operator++() noexcept
		{	




#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		++_Myptr;
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (*this);
		}

	constexpr _String_view_iterator operator++(int) noexcept
		{	
		_String_view_iterator _Tmp{*this};
		++*this;
		return (_Tmp);
		}

	constexpr _String_view_iterator& operator--() noexcept
		{	




#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		--_Myptr;
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (*this);
		}

	constexpr _String_view_iterator operator--(int) noexcept
		{	
		_String_view_iterator _Tmp{*this};
		--*this;
		return (_Tmp);
		}

	constexpr void _Verify_offset(const difference_type _Off) const noexcept
		{


















#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		(void)_Off;
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	constexpr _String_view_iterator& operator+=(const difference_type _Off) noexcept
		{	



#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Myptr += _Off;
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		return (*this);
		}

	[[nodiscard]] constexpr _String_view_iterator operator+(const difference_type _Off) const noexcept
		{	
		_String_view_iterator _Tmp{*this};
		_Tmp += _Off;
		return (_Tmp);
		}

	constexpr _String_view_iterator& operator-=(const difference_type _Off) noexcept
		{	




















#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Myptr -= _Off;
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		return (*this);
		}

	[[nodiscard]] constexpr _String_view_iterator operator-(const difference_type _Off) const noexcept
		{	
		_String_view_iterator _Tmp{*this};
		_Tmp -= _Off;
		return (_Tmp);
		}

	[[nodiscard]] constexpr difference_type operator-(const _String_view_iterator& _Right) const noexcept
		{	




#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Myptr - _Right._Myptr);
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr reference operator[](const difference_type _Off) const noexcept
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] constexpr bool operator==(const _String_view_iterator& _Right) const noexcept
		{	




#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Myptr == _Right._Myptr);
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr bool operator!=(const _String_view_iterator& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] constexpr bool operator<(const _String_view_iterator& _Right) const noexcept
		{	




#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Myptr < _Right._Myptr);
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr bool operator>(const _String_view_iterator& _Right) const noexcept
		{	
		return (_Right < *this);
		}

	[[nodiscard]] constexpr bool operator<=(const _String_view_iterator& _Right) const noexcept
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] constexpr bool operator>=(const _String_view_iterator& _Right) const noexcept
		{	
		return (!(*this < _Right));
		}








#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] constexpr pointer _Unwrapped() const noexcept
		{


#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Myptr);
#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	static constexpr bool _Unwrap_when_unverified = 0 == 0;

	constexpr void _Seek_to(pointer _It) noexcept
		{


#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Myptr = _It;
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

private:




#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	pointer _Myptr;
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	};

template<class _Traits>
	[[nodiscard]] constexpr _String_view_iterator<_Traits> operator+(
		const typename _String_view_iterator<_Traits>::difference_type _Off,
		_String_view_iterator<_Traits> _Right) noexcept
	{	
	_Right += _Off;
	return (_Right);
	}


		
template<class _Elem,
	class _Traits>
	class basic_string_view
	{	
public:
	static_assert(is_same_v<_Elem, typename _Traits::char_type>, "Bad char_traits for basic_string_view; "
	"N4659 24.4.2 [string.view.template]/1 \"the type traits::char_type shall name the same type as charT.\"");

	using traits_type            = _Traits;
	using value_type             = _Elem;
	using pointer                = _Elem *;
	using const_pointer          = const _Elem *;
	using reference              = _Elem&;
	using const_reference        = const _Elem&;
	using const_iterator         = _String_view_iterator<_Traits>;
	using iterator               = const_iterator;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;
	using reverse_iterator       = const_reverse_iterator;
	using size_type              = size_t;
	using difference_type        = ptrdiff_t;

	static constexpr auto npos{static_cast<size_type>(-1)};

	constexpr basic_string_view() noexcept
		: _Mydata(),
		_Mysize(0)
		{	
		}

	constexpr basic_string_view(const basic_string_view&) noexcept = default;
	constexpr basic_string_view& operator=(const basic_string_view&) noexcept = default;

	 constexpr basic_string_view(  const const_pointer _Ntcts) noexcept 
		: _Mydata(_Ntcts),
		_Mysize(_Traits::length(_Ntcts))
		{	
		}

	constexpr basic_string_view(  const const_pointer _Cts, const size_type _Count)
			noexcept 
		: _Mydata(_Cts),
		_Mysize(_Count)
		{	


#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr const_iterator begin() const noexcept
		{	


#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (const_iterator(_Mydata));
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr const_iterator end() const noexcept
		{	


#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (const_iterator(_Mydata + _Mysize));
#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	[[nodiscard]] constexpr const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] constexpr const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] constexpr const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator{end()});
		}

	[[nodiscard]] constexpr const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator{begin()});
		}

	[[nodiscard]] constexpr const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] constexpr const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	constexpr const_pointer _Unchecked_begin() const noexcept
		{	
		return (_Mydata);
		}

	constexpr const_pointer _Unchecked_end() const noexcept
		{	
		return (_Mydata + _Mysize);
		}

	[[nodiscard]] constexpr size_type size() const noexcept
		{	
		return (_Mysize);
		}

	[[nodiscard]] constexpr size_type length() const noexcept
		{	
		return (_Mysize);
		}

	[[nodiscard]] constexpr bool empty() const noexcept
		{	
		return (_Mysize == 0);
		}

	[[nodiscard]] constexpr const_pointer data() const noexcept
		{	
		return (_Mydata);
		}

	[[nodiscard]] constexpr size_type max_size() const noexcept
		{	
			
			
		return (_Min_value(static_cast<size_t>(9223372036854775807i64), static_cast<size_t>(-1) / sizeof(_Elem)));
		}

	[[nodiscard]] constexpr const_reference operator[](const size_type _Off) const noexcept 
		{	


#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Mydata[_Off]);
		}

	[[nodiscard]] constexpr const_reference at(const size_type _Off) const
		{	
		_Check_offset_exclusive(_Off);
		return (_Mydata[_Off]);
		}

	[[nodiscard]] constexpr const_reference front() const noexcept 
		{	


#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Mydata[0]);
		}

	[[nodiscard]] constexpr const_reference back() const noexcept 
		{	


#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_Mydata[_Mysize - 1]);
		}

	constexpr void remove_prefix(const size_type _Count) noexcept 
		{	


#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Mydata += _Count;
		_Mysize -= _Count;
		}

	constexpr void remove_suffix(const size_type _Count) noexcept 
		{	


#line 948 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Mysize -= _Count;
		}

	constexpr void swap(basic_string_view& _Other) noexcept
		{	
		const basic_string_view _Tmp{_Other};	
		_Other = *this;
		*this = _Tmp;
		}

	constexpr size_type copy(  _Elem * const _Ptr, size_type _Count,
		const size_type _Off = 0) const
		{	
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::copy(_Ptr, _Mydata + _Off, _Count);
		return (_Count);
		}

	  constexpr size_type _Copy_s(
		  _Elem * const _Dest, const size_type _Dest_size,
		size_type _Count, const size_type _Off = 0) const
		{	
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		_Traits::_Copy_s(_Dest, _Dest_size, _Mydata + _Off, _Count);
		return (_Count);
		}

	[[nodiscard]] constexpr basic_string_view substr(const size_type _Off = 0, size_type _Count = npos) const
		{	
		_Check_offset(_Off);
		_Count = _Clamp_suffix_size(_Off, _Count);
		return (basic_string_view(_Mydata + _Off, _Count));
		}

	constexpr bool _Equal(const basic_string_view _Right) const noexcept
		{	
		return (_Traits_equal<_Traits>(_Mydata, _Mysize, _Right._Mydata, _Right._Mysize));
		}

	[[nodiscard]] constexpr int compare(const basic_string_view _Right) const noexcept
		{	
		return (_Traits_compare<_Traits>(_Mydata, _Mysize, _Right._Mydata, _Right._Mysize));
		}

	[[nodiscard]] constexpr int compare(const size_type _Off, const size_type _N0, const basic_string_view _Right) const
		{	
		return (substr(_Off, _N0).compare(_Right));
		}

	[[nodiscard]] constexpr int compare(const size_type _Off, const size_type _N0,
		const basic_string_view _Right, const size_type _Roff, const size_type _Count) const
		{	
		return (substr(_Off, _N0).compare(_Right.substr(_Roff, _Count)));
		}

	[[nodiscard]] constexpr int compare(  const _Elem * const _Ptr) const
		{	
		return (compare(basic_string_view(_Ptr)));
		}

	[[nodiscard]] constexpr int compare(const size_type _Off, const size_type _N0,
		  const _Elem * const _Ptr) const
		{	
		return (substr(_Off, _N0).compare(basic_string_view(_Ptr)));
		}

	[[nodiscard]] constexpr int compare(const size_type _Off, const size_type _N0,
		  const _Elem * const _Ptr, const size_type _Count) const
		{	
		return (substr(_Off, _N0).compare(basic_string_view(_Ptr, _Count)));
		}

	[[nodiscard]] constexpr size_type find(const basic_string_view _Right, const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize));
		}

	[[nodiscard]] constexpr size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type find(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_find<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count));
		}

	[[nodiscard]] constexpr size_type find(  const _Elem * const _Ptr, const size_type _Off = 0) const
		noexcept 
		{	
		return (_Traits_find<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
		}

	[[nodiscard]] constexpr size_type rfind(const basic_string_view _Right, const size_type _Off = npos) const noexcept
		{	
		return (_Traits_rfind<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize));
		}

	[[nodiscard]] constexpr size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept
		{	
		return (_Traits_rfind_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type rfind(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_rfind<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count));
		}

	[[nodiscard]] constexpr size_type rfind(  const _Elem * const _Ptr, const size_type _Off = npos) const
		noexcept 
		{	
		return (_Traits_rfind<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr)));
		}

	[[nodiscard]] constexpr size_type find_first_of(const basic_string_view _Right,
		const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find_first_of<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_first_of(const _Elem _Ch, const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type find_first_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_find_first_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_first_of(  const _Elem * const _Ptr,
		const size_type _Off = 0) const noexcept 
		{	
		return (_Traits_find_first_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr),
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_of(const basic_string_view _Right, const size_type _Off = npos)
			const noexcept
		{	
		return (_Traits_find_last_of<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_of(const _Elem _Ch, const size_type _Off = npos) const noexcept
		{	
		return (_Traits_rfind_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_find_last_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off = npos) const
		noexcept 
		{	
		return (_Traits_find_last_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr),
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_first_not_of(const basic_string_view _Right,
		const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find_first_not_of<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_first_not_of(const _Elem _Ch, const size_type _Off = 0) const noexcept
		{	
		return (_Traits_find_not_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type find_first_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_find_first_not_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_first_not_of(  const _Elem * const _Ptr, const size_type _Off = 0) const
		noexcept 
		{	
		return (_Traits_find_first_not_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr),
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_not_of(const basic_string_view _Right,
		const size_type _Off = npos) const noexcept
		{	
		return (_Traits_find_last_not_of<_Traits>(_Mydata, _Mysize, _Off, _Right._Mydata, _Right._Mysize,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_not_of(const _Elem _Ch, const size_type _Off = npos) const noexcept
		{	
		return (_Traits_rfind_not_ch<_Traits>(_Mydata, _Mysize, _Off, _Ch));
		}

	[[nodiscard]] constexpr size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		return (_Traits_find_last_not_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Count,
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off = npos) const
		noexcept 
		{	
		return (_Traits_find_last_not_of<_Traits>(_Mydata, _Mysize, _Off, _Ptr, _Traits::length(_Ptr),
			_Is_specialization<_Traits, char_traits>{}));
		}

	[[nodiscard]] constexpr bool _Starts_with(const basic_string_view _View) const noexcept
		{	
		return (_Mysize >= _View._Mysize && _Traits::compare(_Mydata, _View._Mydata, _View._Mysize) == 0);
		}

private:
	constexpr void _Check_offset(const size_type _Off) const
		{	
		if (_Mysize < _Off)
			{
			_Xran();
			}
		}

	constexpr void _Check_offset_exclusive(const size_type _Off) const
		{	
		if (_Mysize <= _Off)
			{
			_Xran();
			}
		}

	constexpr size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept
		{	
		return (_Min_value(_Size, _Mysize - _Off));
		}

	[[noreturn]] static void _Xran()
		{	
		_Xout_of_range("invalid string_view position");
		}

	const_pointer _Mydata;
	size_type _Mysize;
	};


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator==(const basic_string_view<_Elem, _Traits> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs._Equal(_Rhs));
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator==(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs._Equal(_Rhs));
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator==(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (_Lhs._Equal(_Rhs));
	}


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator!=(const basic_string_view<_Elem, _Traits> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (!_Lhs._Equal(_Rhs));
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator!=(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (!_Lhs._Equal(_Rhs));
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator!=(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (!_Lhs._Equal(_Rhs));
	}


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator<(const basic_string_view<_Elem, _Traits> _Lhs,
	const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) < 0);
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator<(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) < 0);
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator<(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) < 0);
	}


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator>(const basic_string_view<_Elem, _Traits> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) > 0);
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator>(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) > 0);
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator>(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) > 0);
	}


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator<=(const basic_string_view<_Elem, _Traits> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) <= 0);
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator<=(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) <= 0);
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator<=(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) <= 0);
	}


		
template<class _Elem,
	class _Traits>
	[[nodiscard]] constexpr bool operator>=(const basic_string_view<_Elem, _Traits> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) >= 0);
	}

template<class _Elem,
	class _Traits,
	int = 1> 
	[[nodiscard]] constexpr bool operator>=(const _Identity_t<basic_string_view<_Elem, _Traits>> _Lhs,
		const basic_string_view<_Elem, _Traits> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) >= 0);
	}

template<class _Elem,
	class _Traits,
	int = 2> 
	[[nodiscard]] constexpr bool operator>=(const basic_string_view<_Elem, _Traits> _Lhs,
		const _Identity_t<basic_string_view<_Elem, _Traits>> _Rhs) noexcept
	{	
	return (_Lhs.compare(_Rhs) >= 0);
	}


		
using string_view    = basic_string_view<char>;
using u16string_view = basic_string_view<char16_t>;
using u32string_view = basic_string_view<char32_t>;
using wstring_view   = basic_string_view<wchar_t>;


		
template<class _Elem,
	class _Traits>
	struct hash<basic_string_view<_Elem, _Traits>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef basic_string_view<_Elem, _Traits> argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const basic_string_view<_Elem, _Traits> _Keyval) const noexcept
		{	
		return (_Hash_array_representation(_Keyval.data(), _Keyval.size()));
		}
	};
#line 1396 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		
template<class _Mystr>
	class _String_const_iterator
		: public _Iterator_base
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Mystr::value_type;
	using difference_type = typename _Mystr::difference_type;
	using pointer = typename _Mystr::const_pointer;
	using reference = const value_type&;

	_String_const_iterator()
		: _Ptr()
		{	
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pstring);
		}

	[[nodiscard]] reference operator*() const
		{	









#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		;
		return (*_Ptr);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_String_const_iterator& operator++()
		{	







#line 1453 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		++_Ptr;
		return (*this);
		}

	_String_const_iterator operator++(int)
		{	
		_String_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_String_const_iterator& operator--()
		{	






#line 1474 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		--_Ptr;
		return (*this);
		}

	_String_const_iterator operator--(int)
		{	
		_String_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	void _Verify_offset(const difference_type _Off) const noexcept
		{

























#line 1514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		(void)_Off;
#line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}

	_String_const_iterator& operator+=(const difference_type _Off)
		{	


#line 1523 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Ptr += _Off;
		return (*this);
		}

	[[nodiscard]] _String_const_iterator operator+(const difference_type _Off) const
		{	
		_String_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_String_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _String_const_iterator operator-(const difference_type _Off) const
		{	
		_String_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	[[nodiscard]] reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] bool operator==(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _String_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] bool operator<(const _String_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	[[nodiscard]] bool operator>(const _String_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	[[nodiscard]] bool operator<=(const _String_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] bool operator>=(const _String_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _String_const_iterator& _Right) const
		{	



#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		(void)_Right;
#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		}








#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] pointer _Unwrapped() const
		{
		return (_Ptr);
		}

	void _Seek_to(pointer _It)
		{
		_Ptr = _It;
		}

	pointer _Ptr;	
	};

template<class _Mystr>
	[[nodiscard]] inline _String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>::difference_type _Off,
		_String_const_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Mystr>
	class _String_iterator
		: public _String_const_iterator<_Mystr>
	{	
public:
	using _Mybase = _String_const_iterator<_Mystr>;
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Mystr::value_type;
	using difference_type = typename _Mystr::difference_type;
	using pointer = typename _Mystr::pointer;
	using reference = value_type&;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_String_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_String_iterator operator++(int)
		{	
		_String_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_String_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_String_iterator operator--(int)
		{	
		_String_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_String_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	[[nodiscard]] _String_iterator operator+(const difference_type _Off) const
		{	
		_String_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_String_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _String_iterator operator-(const difference_type _Off) const
		{	
		_String_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	[[nodiscard]] reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] pointer _Unwrapped() const
		{
		return (_Const_cast(this->_Ptr));
		}
	};

template<class _Mystr>
	[[nodiscard]] inline _String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>::difference_type _Off,
		_String_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _String_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	};

template<class _Ty,
	class _Alloc>
	struct _String_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
		_Simple_types<_Ty>,
		_String_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&>>;
	};

		
template<class _Val_types>
	class _String_val
		: public _Container_base
	{	
public:
	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	_String_val()
		: _Bx(),
		_Mysize(0),
		_Myres(0)
		{	
		}

	enum
		{	
		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
			: 16 / sizeof (value_type)};
	enum
		{	
		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
			: sizeof (value_type) <= 2 ? 7
			: sizeof (value_type) <= 4 ? 3
			: sizeof (value_type) <= 8 ? 1 : 0
		};

	value_type *_Myptr()
		{	
		value_type * _Result = _Bx._Buf;
		if (_Large_string_engaged())
			{
			_Result = _Unfancy(_Bx._Ptr);
			}

		return (_Result);
		}

	const value_type *_Myptr() const
		{	
		const value_type * _Result = _Bx._Buf;
		if (_Large_string_engaged())
			{
			_Result = _Unfancy(_Bx._Ptr);
			}

		return (_Result);
		}

	bool _Large_string_engaged() const
		{	
		return (_BUF_SIZE <= _Myres);
		}

	void _Check_offset(const size_type _Off) const
		{	
		if (_Mysize < _Off)
			{
			_Xran();
			}
		}

	void _Check_offset_exclusive(const size_type _Off) const
		{	
		if (_Mysize <= _Off)
			{
			_Xran();
			}
		}

	[[noreturn]] static void _Xran()
		{	
		_Xout_of_range("invalid string position");
		}

	size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept
		{	
		return (_Min_value(_Size, _Mysize - _Off));
		}

	union _Bxty
		{	
		_Bxty()
			{	
			}

		~_Bxty() noexcept
			{	
			}

		value_type _Buf[_BUF_SIZE];
		pointer _Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	};

		
template<class _Alloc_types>
	class _String_alloc
	{	
public:
	using _Alty = typename _Alloc_types::_Alty;
	using _Alty_traits = typename _Alloc_types::_Alty_traits;
	using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Val_types = typename _Alloc_types::_Val_types;
	using _Mydata_t = _String_val<_Val_types>;
	using _Bxty = typename _Mydata_t::_Bxty;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = _String_iterator<_Mydata_t>;
	using const_iterator = _String_const_iterator<_Mydata_t>;

	enum
		{	
		_BUF_SIZE = _Mydata_t::_BUF_SIZE
		};

	enum
		{	
		_ALLOC_MASK = _Mydata_t::_ALLOC_MASK
		};


	_String_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _String_alloc>>>
		_String_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

























































































#line 2020 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_String_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Mydata_t& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _Mydata_t& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

private:
	_Compressed_pair<_Alty, _Mydata_t> _Mypair;
	};


		
template<class _Ty>
	constexpr size_t _Size_after_ebco_v
		= is_empty_v<_Ty> ? 0 : sizeof(_Ty);	

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem>>
	class basic_string
		: public _String_alloc<_String_base_types<_Elem, _Alloc>>
	{	
public:
	static_assert(!1 || is_same_v<_Elem, typename _Alloc::value_type>,
		"basic_string<T, Traits, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	static_assert(is_same_v<_Elem, typename _Traits::char_type>,
		"N4659 24.3.2.1 [string.require]/3 requires that the supplied "
		"char_traits character type match the string's character type.");

	using _Mybase = _String_alloc<_String_base_types<_Elem, _Alloc>>;
	using traits_type = _Traits;
	using allocator_type = _Alloc;

	using _Alty = typename _Mybase::_Alty;
	using _Alty_traits = typename _Mybase::_Alty_traits;
	using _Mydata_t = typename _Mybase::_Mydata_t;

	using value_type = typename _Mybase::value_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;

	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	
	
	
	
	
	
	
	
	
	
	using _Use_memcpy_move = bool_constant<
		_Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>>;
	
	static constexpr size_t _Memcpy_move_offset = _Size_after_ebco_v<_Container_base>;
	static constexpr size_t _Memcpy_move_size = sizeof(_Mydata_t) - _Memcpy_move_offset;

	template<class _Iter>
		using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter,
			const _Elem * const,
			_Elem * const,
			const _Elem *,
			_Elem *>>;


	template<class _StringViewIsh>
		using _Is_string_view_ish = enable_if_t<conjunction_v<
			is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
			negation<is_convertible<const _StringViewIsh&, const _Elem *>>>>;
#line 2126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"


	basic_string(const basic_string& _Right)
		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		_Construct_lv_contents(_Right);
		}

	basic_string(const basic_string& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_lv_contents(_Right);
		}

	basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>)
		: _Mybase()
		{	
		_Tidy_init();
		}

	explicit basic_string(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		_Tidy_init();
		}

	basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right, _Roff, npos);
		}

	basic_string(const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right, _Roff, _Count);
		}

	basic_string(  const _Elem * const _Ptr,  const size_type _Count)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Ptr, _Count);
		}

	basic_string(  const _Elem * const _Ptr,  const size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ptr, _Count);
		}

	basic_string(  const _Elem * const _Ptr)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Ptr);
		}


	template<class _Alloc2 = _Alloc,
		enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
#line 2192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	basic_string(  const _Elem * const _Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ptr);
		}

	basic_string( const size_type _Count, const _Elem _Ch)
		: _Mybase()
		{	
		_Tidy_init();
		assign(_Count, _Ch);
		}


	template<class _Alloc2 = _Alloc,
		enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
#line 2210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
	basic_string( const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Count, _Ch);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		_Adl_verify_range(_First, _Last);
		_Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>());
		}

	template<class _Iter>
		void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			{
			push_back(static_cast<_Elem>(*_First));
			}

		} catch (...) {
		_Tidy_deallocate();
		throw;
		}
		}

	template<class _Iter>
		void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		reserve(_Count);
		_Construct(_First, _Last, input_iterator_tag());
		}

	void _Construct(_Elem * const _First, _Elem * const _Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			{
			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

	void _Construct(const _Elem * const _First, const _Elem * const _Last, random_access_iterator_tag)
		{	
		if (_First != _Last)
			{
			assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
			}
		}

	basic_string(basic_string&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
		}

	basic_string(basic_string&& _Right, const _Alloc& _Al)
		noexcept(_Alty_traits::is_always_equal::value) 
		: _Mybase(_Al)
		{	
		_Assign_rv_contents(::std:: move(_Right), typename _Alty_traits::is_always_equal{});
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		explicit basic_string(const _StringViewIsh& _Right, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right);
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string(const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count,
			const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Right, _Roff, _Count);
		}
#line 2299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& operator=(basic_string&& _Right) noexcept(_Always_equal_after_move<_Alty>)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Tidy_deallocate();
			this->_Move_alloc(_Right._Getal());
			
			
			_Assign_rv_contents(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});
			}

		return (*this);
		}

	basic_string& assign(basic_string&& _Right) noexcept(_Always_equal_after_move<_Alty>)
		{	
		*this = ::std:: move(_Right);
		return (*this);
		}

	void _Assign_rv_contents(basic_string&& _Right, true_type) noexcept
		{	
			
			
			
		_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
		}

	void _Assign_rv_contents(basic_string&& _Right, false_type)
		{	
			
			
			
		if (this->_Getal() == _Right._Getal())
			{
			_Assign_rv_contents_with_alloc_always_equal(::std:: move(_Right), _Use_memcpy_move{});
			}
		else
			{
			_Construct_lv_contents(_Right);
			}
		}

	void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, true_type) noexcept
		{	
			
			
			
		auto& _Right_data = _Right._Get_data();










#line 2360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

		const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
			+ _Memcpy_move_offset;
		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right_data))
			+ _Memcpy_move_offset;
		:: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
		_Right._Tidy_init();
		}

	void _Assign_rv_contents_with_alloc_always_equal(basic_string&& _Right, false_type) noexcept
		{	
			
			
			
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		if (_Right_data._Large_string_engaged())
			{	
			_Alty_traits::construct(this->_Getal(), ::std:: addressof(_My_data._Bx._Ptr), _Right_data._Bx._Ptr);
			_Right_data._Bx._Ptr = pointer();
			this->_Swap_all(_Right);
			}
		else
			{	
			_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);
			_Right._Orphan_all();
			}

		_My_data._Mysize = _Right_data._Mysize;
		_My_data._Myres = _Right_data._Myres;
		_Right._Tidy_init();
		}

	void _Construct_lv_contents(const basic_string& _Right)
		{	
			
			
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		const size_type _Right_size = _Right_data._Mysize;
		const _Elem * const _Right_ptr = _Right_data._Myptr();
		if (_Right_size < this->_BUF_SIZE)
			{	
			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);
			_My_data._Mysize = _Right_size;
			_My_data._Myres = this->_BUF_SIZE - 1;
			return;
			}

		auto& _Al = this->_Getal();
		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());
		const pointer _New_array = _Al.allocate(_New_capacity + 1); 
		_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_array);
		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);
		_My_data._Mysize = _Right_size;
		_My_data._Myres = _New_capacity;
		}

	basic_string(initializer_list<_Elem> _Ilist, const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Tidy_init();
		assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		}

	basic_string& operator=(initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& operator+=(initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& assign(initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	basic_string& append(initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	iterator insert(const const_iterator _Where, const initializer_list<_Elem> _Ilist)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), _Ilist.begin(), _Convert_size<size_type>(_Ilist.size()));
		return (begin() + _Off);
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last, const initializer_list<_Elem> _Ilist)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First),
			_Ilist.begin(), _Convert_size<size_type>(_Ilist.size())));
		}

	~basic_string() noexcept
		{	
		_Tidy_deallocate();
		}

	static constexpr auto npos{static_cast<size_type>(-1)};

	basic_string& operator=(const basic_string& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Alty_traits::propagate_on_container_copy_assignment::value
				&& this->_Getal() != _Right._Getal())
				{	
				_Tidy_deallocate();
				}
#pragma warning(pop)

			this->_Copy_alloc(_Right._Getal());

			auto& _Right_data = _Right._Get_data();
			assign(_Right_data._Myptr(), _Right_data._Mysize);
			}

		return (*this);
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& operator=(const _StringViewIsh& _Right)
		{	
		return (assign(_Right));
		}
#line 2495 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& operator=(  const _Elem * const _Ptr)
		{	
		return (assign(_Ptr));
		}

	basic_string& operator=(const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Mysize = 1;
		_Elem * const _Ptr = _My_data._Myptr();
		_Traits::assign(_Ptr[0], _Ch);
		_Traits::assign(_Ptr[1], _Elem());
		return (*this);
		}

	basic_string& operator+=(const basic_string& _Right)
		{	
		return (append(_Right));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& operator+=(const _StringViewIsh& _Right)
		{	
		return (append(_Right));
		}
#line 2524 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& operator+=(  const _Elem * const _Ptr)
		{	
		return (append(_Ptr));
		}

	basic_string& operator+=(_Elem _Ch)
		{	
		push_back(_Ch);
		return (*this);
		}

	basic_string& append(const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (append(_Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& append(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (append(_Right_data._Myptr() + _Roff, _Count));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& append(const _StringViewIsh& _Right)
		{	
		const basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (append(_As_view.data(), _Convert_size<size_type>(_As_view.size())));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& append(const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count = npos)
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (append(_As_view.substr(_Roff, _Count)));
		}
#line 2567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& append(  const _Elem * const _Ptr,  const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);
			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
			}, _Ptr, _Count));
		}

	basic_string& append(  const _Elem * const _Ptr)
		{	
		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& append( const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);
			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
			}, _Count, _Ch));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& append(const _Iter _First, const _Iter _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	basic_string& assign(const basic_string& _Right)
		{	
		*this = _Right;
		return (*this);
		}

	basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (assign(_Right_data._Myptr() + _Roff, _Count));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& assign(const _StringViewIsh& _Right)
		{	
		const basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (assign(_As_view.data(), _Convert_size<size_type>(_As_view.size())));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& assign(const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count = npos)
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (assign(_As_view.substr(_Roff, _Count)));
		}
#line 2655 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& assign(  const _Elem * const _Ptr,  const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		if (_Count <= _My_data._Myres)
			{
			_Elem * const _Old_ptr = _My_data._Myptr();
			_My_data._Mysize = _Count;
			_Traits::move(_Old_ptr, _Ptr, _Count);
			_Traits::assign(_Old_ptr[_Count], _Elem());
			return (*this);
			}

		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {
			_Traits::copy(_New_ptr, _Ptr, _Count);
			_Traits::assign(_New_ptr[_Count], _Elem());
			}, _Ptr));
		}

	basic_string& assign(  const _Elem * const _Ptr)
		{	
		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& assign( const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		if (_Count <= _My_data._Myres)
			{
			_Elem * const _Old_ptr = _My_data._Myptr();
			_My_data._Mysize = _Count;
			_Traits::assign(_Old_ptr, _Count, _Ch);
			_Traits::assign(_Old_ptr[_Count], _Elem());
			return (*this);
			}

		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {
			_Traits::assign(_New_ptr, _Count, _Ch);
			_Traits::assign(_New_ptr[_Count], _Elem());
			}, _Ch));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& assign(const _Iter _First, const _Iter _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	basic_string& insert(const size_type _Off, const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (insert(_Off, _Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& insert(const size_type _Off, const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (insert(_Off, _Right_data._Myptr() + _Roff, _Count));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& insert(const size_type _Off, const _StringViewIsh& _Right)
		{	
		const basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (insert(_Off, _As_view.data(), _Convert_size<size_type>(_As_view.size())));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& insert(const size_type _Off,
			const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count = npos)
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (insert(_Off, _As_view.substr(_Roff, _Count)));
		}
#line 2736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& insert(const size_type _Off,   const _Elem * const _Ptr,
		 const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			
			
			size_type _Ptr_shifted_after;
			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
				{	
				_Ptr_shifted_after = _Count; 
				}
			else if (_Insert_at <= _Ptr)
				{	
				_Ptr_shifted_after = 0;
				}
			else
				{	
				_Ptr_shifted_after = static_cast<size_type>(_Insert_at - _Ptr);
				}

			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); 
			_Traits::copy(_Insert_at, _Ptr, _Ptr_shifted_after);
			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after,
				_Count - _Ptr_shifted_after);
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
			}, _Off, _Ptr, _Count));
		}

	basic_string& insert(const size_type _Off,   const _Elem * const _Ptr)
		{	
		return (insert(_Off, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& insert(const size_type _Off,  const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		const size_type _Old_size = _My_data._Mysize;
		if (_Count <= _My_data._Myres - _Old_size)
			{
			_My_data._Mysize = _Old_size + _Count;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); 
			_Traits::assign(_Insert_at, _Count, _Ch); 
			return (*this);
			}

		return (_Reallocate_grow_by(_Count,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
			}, _Off, _Count, _Ch));
		}

	iterator insert(const const_iterator _Where, const _Elem _Ch)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), 1, _Ch);
		return (begin() + _Off);
		}

	iterator insert(const const_iterator _Where,  const size_type _Count, const _Elem _Ch)
		{	
		const difference_type _Off = _Where - begin();
		insert(static_cast<size_type>(_Off), _Count, _Ch);
		return (begin() + _Off);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const const_iterator _Where, const _Iter _First, const _Iter _Last)
		{	
		const difference_type _Off = _Where - begin();
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	basic_string& erase(const size_type _Off = 0)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Eos(_Off);
		return (*this);
		}

	basic_string& erase(const size_type _Off, size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		const size_type _Old_size = _My_data._Mysize;
		_Elem * const _My_ptr = _My_data._Myptr();
		_Elem * const _Erase_at = _My_ptr + _Off;
		const size_type _New_size = _Old_size - _Count;
		_My_data._Mysize = _New_size;
		_Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); 
		return (*this);
		}

	iterator erase(const const_iterator _Where)
		{	
		const difference_type _Off = _Where - begin();
		erase(static_cast<size_type>(_Off), 1);
		return (begin() + _Off);
		}

	iterator erase(const const_iterator _First, const const_iterator _Last)
		{	
		_Adl_verify_range(_First, _Last);
		const difference_type _Off = _First - begin();
		erase(static_cast<size_type>(_Off), static_cast<size_type>(_Last - _First));
		return (begin() + _Off);
		}

	void clear() noexcept
		{	
		_Eos(0);
		}

	basic_string& replace(const size_type _Off, const size_type _N0, const basic_string& _Right)
		{	
		auto& _Right_data = _Right._Get_data();
		return (replace(_Off, _N0, _Right_data._Myptr(), _Right_data._Mysize));
		}

	basic_string& replace(const size_type _Off, size_type _N0,
		const basic_string& _Right, const size_type _Roff, size_type _Count = npos)
		{	
		auto& _Right_data = _Right._Get_data();
		_Right_data._Check_offset(_Roff);
		_Count = _Right_data._Clamp_suffix_size(_Roff, _Count);
		return (replace(_Off, _N0, _Right_data._Myptr() + _Roff, _Count));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& replace(const size_type _Off, const size_type _N0, const _StringViewIsh& _Right)
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (replace(_Off, _N0, _As_view.data(), _Convert_size<size_type>(_As_view.size())));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& replace(const size_type _Off, const size_type _N0,
			const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count = npos)
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		return (replace(_Off, _N0, _As_view.substr(_Roff, _Count)));
		}
#line 2907 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& replace(const size_type _Off, size_type _N0,
		  const _Elem * const _Ptr, const size_type _Count)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
		if (_N0 == _Count)
			{	
			_Traits::move(_My_data._Myptr() + _Off, _Ptr, _Count);
			return (*this);
			}

		const size_type _Old_size = _My_data._Mysize;
		const size_type _Suffix_size = _Old_size - _N0 - _Off + 1;
		if (_Count < _N0)
			{	
			_My_data._Mysize = _Old_size - (_N0 - _Count);
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at, _Ptr, _Count);
			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Suffix_size);
			return (*this);
			}

		const size_type _Growth = static_cast<size_type>(_Count - _N0);
		if (_Growth <= _My_data._Myres - _Old_size)
			{	
			_My_data._Mysize = _Old_size + _Growth;
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Elem * const _Suffix_at = _Insert_at + _N0;

			size_type _Ptr_shifted_after; 
			if (_Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size)
				{
				_Ptr_shifted_after = _Count;
				}
			else if (_Suffix_at <= _Ptr)
				{
				_Ptr_shifted_after = 0;
				}
			else
				{
				_Ptr_shifted_after = static_cast<size_type>(_Suffix_at - _Ptr);
				}

			_Traits::move(_Suffix_at + _Growth, _Suffix_at, _Suffix_size);
			
			
			
			_Traits::move(_Insert_at, _Ptr, _Ptr_shifted_after);
			
			
			_Traits::copy(_Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after,
				_Count - _Ptr_shifted_after);
			return (*this);
			}

		return (_Reallocate_grow_by(_Growth,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _N0, const _Elem * const _Ptr, const size_type _Count) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::copy(_New_ptr + _Off, _Ptr, _Count);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
			}, _Off, _N0, _Ptr, _Count));
		}

	basic_string& replace(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr)
		{	
		return (replace(_Off, _N0, _Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));
		}

	basic_string& replace(const size_type _Off, size_type _N0, const size_type _Count, const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_N0 = _My_data._Clamp_suffix_size(_Off, _N0);
		if (_Count == _N0)
			{
			_Traits::assign(_My_data._Myptr() + _Off, _Count, _Ch);
			return (*this);
			}

		const size_type _Old_size = _My_data._Mysize;
		if (_Count < _N0 || _Count - _N0 <= _My_data._Myres - _Old_size)
			{	
			_My_data._Mysize = _Old_size + _Count - _N0; 
				
			_Elem * const _Old_ptr = _My_data._Myptr();
			_Elem * const _Insert_at = _Old_ptr + _Off;
			_Traits::move(_Insert_at + _Count, _Insert_at + _N0, _Old_size - _N0 - _Off + 1);
			_Traits::assign(_Insert_at, _Count, _Ch);
			return (*this);
			}

		return (_Reallocate_grow_by(_Count - _N0,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const size_type _Off, const size_type _N0, const size_type _Count, const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Off);
			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off + _N0, _Old_size - _N0 - _Off + 1);
			}, _Off, _N0, _Count, _Ch));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last, const basic_string& _Right)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Right));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		basic_string& replace(const const_iterator _First, const const_iterator _Last, const _StringViewIsh& _Right)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Right));
		}
#line 3025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	basic_string& replace(const const_iterator _First, const const_iterator _Last,
		  const _Elem * const _Ptr, const size_type _Count)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr, _Count));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last,   const _Elem * const _Ptr)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Ptr));
		}

	basic_string& replace(const const_iterator _First, const const_iterator _Last,
		const size_type _Count, const _Elem _Ch)
		{	
		return (replace(static_cast<size_type>(_First - begin()), static_cast<size_type>(_Last - _First), _Count, _Ch));
		}

	template<class _Iter>
		basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
		const _Iter _First2, const _Iter _Last2, false_type)
		{	
		const basic_string _Right(_First2, _Last2, get_allocator());
		replace(_First, _Last, _Right);
		return (*this);
		}

	template<class _Ptr>
		basic_string& _Replace_range(const const_iterator _First, const const_iterator _Last,
		const _Ptr _First2, const _Ptr _Last2, true_type)
		{	
		return (replace(static_cast<size_type>(_First - cbegin()), static_cast<size_type>(_Last - _First),
			_First2, static_cast<size_type>(_Last2 - _First2)));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		basic_string& replace(const const_iterator _First, const const_iterator _Last,
			const _Iter _First2, const _Iter _Last2)
		{	
		_Adl_verify_range(_First2, _Last2);
		const auto _UFirst2 = _Get_unwrapped(_First2);
		const auto _ULast2 = _Get_unwrapped(_Last2);
		return (_Replace_range(_First, _Last, _UFirst2, _ULast2, _Is_elem_cptr<decltype(_UFirst2)>()));
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (iterator(_Refancy<pointer>(_My_data->_Myptr()), _My_data));
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr()), _My_data));
		}

	[[nodiscard]] iterator end() noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (iterator(_Refancy<pointer>(_My_data->_Myptr())
			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		auto _My_data = ::std:: addressof(this->_Get_data());
		return (const_iterator(_Refancy<const_pointer>(_My_data->_Myptr())
			+ static_cast<difference_type>(_My_data->_Mysize), _My_data));
		}

	_Elem * _Unchecked_begin() noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	const _Elem * _Unchecked_begin() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	_Elem * _Unchecked_end() noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (_My_data._Myptr() + _My_data._Mysize);
		}

	const _Elem * _Unchecked_end() const noexcept
		{	
		const auto& _My_data = this->_Get_data();
		return (_My_data._Myptr() + _My_data._Mysize);
		}

	[[nodiscard]] reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	[[nodiscard]] const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	[[nodiscard]] reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	[[nodiscard]] const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		auto& _My_data = this->_Get_data();
		if (!_My_data._Large_string_engaged())
			{	
			return;
			}

		if (_My_data._Mysize < this->_BUF_SIZE)
			{
			_Become_small();
			return;
			}

		const size_type _Target_capacity = _Min_value(_My_data._Mysize | this->_ALLOC_MASK, max_size());
		if (_Target_capacity < _My_data._Myres)
			{	
			auto& _Al = this->_Getal();
			const pointer _New_ptr = _Al.allocate(_Target_capacity + 1); 
			this->_Orphan_all();
			_Traits::copy(_Unfancy(_New_ptr), _Unfancy(_My_data._Bx._Ptr), _My_data._Mysize + 1);
			_Al.deallocate(_My_data._Bx._Ptr, _My_data._Myres + 1);
			_My_data._Bx._Ptr = _New_ptr;
			_My_data._Myres = _Target_capacity;
			}
		}

	[[nodiscard]] reference at(const size_type _Off)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset_exclusive(_Off);
		return (_My_data._Myptr()[_Off]);
		}

	[[nodiscard]] const_reference at(const size_type _Off) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset_exclusive(_Off);
		return (_My_data._Myptr()[_Off]);
		}

	[[nodiscard]] reference operator[](const size_type _Off)
		{	
		auto& _My_data = this->_Get_data();


#line 3206 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_My_data._Myptr()[_Off]);
		}

	[[nodiscard]] const_reference operator[](const size_type _Off) const
		{	
		auto& _My_data = this->_Get_data();


#line 3215 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		return (_My_data._Myptr()[_Off]);
		}


	 operator basic_string_view<_Elem, _Traits>() const noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (basic_string_view<_Elem, _Traits>(_My_data._Myptr(), _My_data._Mysize));
		}
#line 3225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	void push_back(const _Elem _Ch)
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (_Old_size < _My_data._Myres)
			{
			_My_data._Mysize = _Old_size + 1;
			_Elem * const _Ptr = _My_data._Myptr();
			_Traits::assign(_Ptr[_Old_size], _Ch);
			_Traits::assign(_Ptr[_Old_size + 1], _Elem());
			return;
			}

		_Reallocate_grow_by(1,
			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
				const _Elem _Ch) {
			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
			_Traits::assign(_New_ptr[_Old_size], _Ch);
			_Traits::assign(_New_ptr[_Old_size + 1], _Elem());
			}, _Ch);
		}

	void pop_back()
		{	
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;


#line 3255 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
		_Eos(_Old_size - 1);
		}

	[[nodiscard]] reference front()
		{	
		return (*begin());
		}

	[[nodiscard]] const_reference front() const
		{	
		return (*begin());
		}

	[[nodiscard]] reference back()
		{	
		return (*(end() - 1));
		}

	[[nodiscard]] const_reference back() const
		{	
		return (*(end() - 1));
		}

	[[nodiscard]]   const _Elem * c_str() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}

	[[nodiscard]]   const _Elem * data() const noexcept
		{	
		return (this->_Get_data()._Myptr());
		}


	[[nodiscard]]   _Elem * data() noexcept
		{	
		return (this->_Get_data()._Myptr());
		}
#line 3294 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type length() const noexcept
		{	
		return (this->_Get_data()._Mysize);
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (this->_Get_data()._Mysize);
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
		const size_type _Storage_max = 
			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
		return (_Min_value(
			static_cast<size_type>((numeric_limits<difference_type>::max)()),
			_Storage_max - 1 
			));

		}

	void resize( const size_type _Newsize, const _Elem _Ch = _Elem())
		{	
		const size_type _Old_size = size();
		if (_Newsize <= _Old_size)
			{
			_Eos(_Newsize);
			}
		else
			{
			append(_Newsize - _Old_size, _Ch);
			}
		}

	[[nodiscard]] size_type capacity() const noexcept
		{	
		return (this->_Get_data()._Myres);
		}

	void reserve( const size_type _Newcap = 0)
		{	
		auto& _My_data = this->_Get_data();
		if (_My_data._Mysize > _Newcap)
			{	
			return;	
			}

		if (_My_data._Myres == _Newcap)
			{	
			return;	
			}

		if (_My_data._Myres < _Newcap)
			{	
			const size_type _Old_size = _My_data._Mysize;
			_Reallocate_grow_by(_Newcap - _Old_size,
				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {
				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
				});

			_My_data._Mysize = _Old_size;
			return;
			}

		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())
			{	
			_Become_small();
			return;
			}

		
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (size() == 0);
		}

	size_type copy(  _Elem * const _Ptr,
		size_type _Count, const size_type _Off = 0) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		_Traits::copy(_Ptr, _My_data._Myptr() + _Off, _Count);
		return (_Count);
		}

	  size_type _Copy_s(
		  _Elem * const _Dest, const size_type _Dest_size,
		size_type _Count, const size_type _Off = 0) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		_Count = _My_data._Clamp_suffix_size(_Off, _Count);
		_Traits::_Copy_s(_Dest, _Dest_size, _My_data._Myptr() + _Off, _Count);
		return (_Count);
		}

	void _Swap_data(basic_string& _Right, true_type)
		{	
		const auto _My_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(this->_Get_data()))
			+ _Memcpy_move_offset;
		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(::std:: addressof(_Right._Get_data()))
			+ _Memcpy_move_offset;
		unsigned char _Temp_mem[_Memcpy_move_size];
		:: memcpy(_Temp_mem, _My_data_mem, _Memcpy_move_size);
		:: memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);
		:: memcpy(_Right_data_mem, _Temp_mem, _Memcpy_move_size);
		}

	void _Swap_bx_large_with_small(_Mydata_t& _Starts_large, _Mydata_t& _Starts_small)
		{	
		const pointer _Ptr = _Starts_large._Bx._Ptr;
		auto& _Al = this->_Getal();
		_Alty_traits::destroy(_Al, ::std:: addressof(_Starts_large._Bx._Ptr));
		_Traits::copy(_Starts_large._Bx._Buf, _Starts_small._Bx._Buf, this->_BUF_SIZE);
		_Alty_traits::construct(_Al, ::std:: addressof(_Starts_small._Bx._Ptr), _Ptr);
		}

	void _Swap_data(basic_string& _Right, false_type)
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		const bool _My_large = _My_data._Large_string_engaged();
		const bool _Right_large = _Right_data._Large_string_engaged();
		if (_My_large)
			{
			if (_Right_large)
				{	
				_Swap_adl(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);
				}
			else
				{	
				_Swap_bx_large_with_small(_My_data, _Right_data);
				}
			}
		else
			{
			if (_Right_large)
				{	
				_Swap_bx_large_with_small(_Right_data, _My_data);
				}
			else
				{
				_Elem _Temp_buf[this->_BUF_SIZE];
				_Traits::copy(_Temp_buf, _My_data._Bx._Buf, this->_BUF_SIZE);
				_Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, this->_BUF_SIZE);
				_Traits::copy(_Right_data._Bx._Buf, _Temp_buf, this->_BUF_SIZE);
				}
			}

		::std:: swap(_My_data._Mysize, _Right_data._Mysize);
		::std:: swap(_My_data._Myres, _Right_data._Myres);
		}

	void swap(basic_string& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Pocs(this->_Getal(), _Right._Getal());




















#line 3478 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
			}

		_Swap_data(_Right, _Use_memcpy_move{});
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type find(const _StringViewIsh& _Right, const size_type _Off = 0) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _As_view.data(), _As_view.size())));
		}
#line 3494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type find(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize)));
		}

	[[nodiscard]] size_type find(  const _Elem * const _Ptr, const size_type _Off, const size_type _Count)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
		}

	[[nodiscard]] size_type find(  const _Elem * const _Ptr, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
		}

	[[nodiscard]] size_type find(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type rfind(const _StringViewIsh& _Right, const size_type _Off = npos) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _As_view.data(), _As_view.size())));
		}
#line 3537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type rfind(const basic_string& _Right, const size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
				_Right_data._Myptr(), _Right_data._Mysize)));
		}

	[[nodiscard]] size_type rfind(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count)));
		}

	[[nodiscard]] size_type rfind(  const _Elem * const _Ptr, const size_type _Off = npos)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr))));
		}

	[[nodiscard]] size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type find_first_of(const _StringViewIsh& _Right, const size_type _Off = 0) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_As_view.data(), _As_view.size(), _Is_specialization<_Traits, char_traits>{})));
		}
#line 3581 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type find_first_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_of(  const _Elem * const _Ptr, const size_type _Off = 0)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr),
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_of(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type find_last_of(const _StringViewIsh& _Right, const size_type _Off = npos) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_As_view.data(), _As_view.size(), _Is_specialization<_Traits, char_traits>{})));
		}
#line 3626 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type find_last_of(const basic_string& _Right, size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_of(  const _Elem * const _Ptr, const size_type _Off = npos)
		const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Traits::length(_Ptr),
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_of(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_rfind_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type find_first_not_of(const _StringViewIsh& _Right, const size_type _Off = 0) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_As_view.data(), _As_view.size(), _Is_specialization<_Traits, char_traits>{})));
		}
#line 3670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type find_first_not_of(const basic_string& _Right, const size_type _Off = 0) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_not_of(  const _Elem * const _Ptr, size_type _Off = 0) const
		noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_first_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr,
				_Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_first_not_of(const _Elem _Ch, const size_type _Off = 0) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] size_type find_last_not_of(const _StringViewIsh& _Right, const size_type _Off = npos) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_As_view.data(), _As_view.size(), _Is_specialization<_Traits, char_traits>{})));
		}
#line 3714 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] size_type find_last_not_of(const basic_string& _Right, const size_type _Off = npos) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Right_data._Myptr(), _Right_data._Mysize, _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off,
		const size_type _Count) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ptr, _Count,
				_Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_not_of(  const _Elem * const _Ptr, const size_type _Off = npos) const
		noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(_Traits_find_last_not_of<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
			_Ptr, _Traits::length(_Ptr), _Is_specialization<_Traits, char_traits>{})));
		}

	[[nodiscard]] size_type find_last_not_of(const _Elem _Ch, const size_type _Off = npos) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (static_cast<size_type>(
			_Traits_rfind_not_ch<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off, _Ch)));
		}


	[[nodiscard]] bool _Starts_with(const basic_string_view<_Elem, _Traits> _Right) const noexcept
		{	
		return (basic_string_view<_Elem, _Traits>(*this)._Starts_with(_Right));
		}
#line 3753 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] basic_string substr(const size_type _Off = 0, const size_type _Count = npos) const
		{	
		return (basic_string(*this, _Off, _Count, get_allocator()));
		}

	bool _Equal(const basic_string& _Right) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Right_data._Myptr(), _Right_data._Mysize));
		}

	bool _Equal(  const _Elem * const _Ptr) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));
		}


	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] int compare(const _StringViewIsh& _Right) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
			_As_view.data(), _As_view.size()));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] int compare(const size_type _Off, const size_type _N0, const _StringViewIsh& _Right) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_As_view.data(), _As_view.size()));
		}

	template<class _StringViewIsh,
		class = _Is_string_view_ish<_StringViewIsh>>
		[[nodiscard]] int compare(const size_type _Off, const size_type _N0,
			const _StringViewIsh& _Right, const size_type _Roff, const size_type _Count = npos) const
		{	
		basic_string_view<_Elem, _Traits> _As_view = _Right;
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		const auto _With_substr = _As_view.substr(_Roff, _Count);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_With_substr.data(), _With_substr.size()));
		}
#line 3807 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

	[[nodiscard]] int compare(const basic_string& _Right) const noexcept
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
			_Right_data._Myptr(), _Right_data._Mysize));
		}

	[[nodiscard]] int compare(size_type _Off, size_type _N0, const basic_string& _Right) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		auto& _Right_data = _Right._Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Right_data._Myptr(), _Right_data._Mysize));
		}

	[[nodiscard]] int compare(const size_type _Off, const size_type _N0, const basic_string& _Right,
		const size_type _Roff, const size_type _Count = npos) const
		{	
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		_My_data._Check_offset(_Off);
		_Right_data._Check_offset(_Roff);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Right_data._Myptr() + _Roff, _Right_data._Clamp_suffix_size(_Roff, _Count)));
		}

	[[nodiscard]] int compare(  const _Elem * const _Ptr) const noexcept 
		{	
		auto& _My_data = this->_Get_data();
		return (_Traits_compare<_Traits>(_My_data._Myptr(), _My_data._Mysize,
			_Ptr, _Traits::length(_Ptr)));
		}

	[[nodiscard]] int compare(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Ptr, _Traits::length(_Ptr)));
		}

	[[nodiscard]] int compare(const size_type _Off, const size_type _N0,   const _Elem * const _Ptr,
		const size_type _Count) const
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Check_offset(_Off);
		return (_Traits_compare<_Traits>(_My_data._Myptr() + _Off, _My_data._Clamp_suffix_size(_Off, _N0),
			_Ptr, _Count));
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

	size_type _Calculate_growth(const size_type _Requested) const
		{	
		const size_type _Max = max_size();
		auto& _My_data = this->_Get_data();
		const size_type _Masked = _Requested | this->_ALLOC_MASK;
		if (_Masked > _Max)
			{	
			return (_Max);
			}

		const size_type _Old = _My_data._Myres;
		if (_Old > _Max - _Old / 2)
			{	
			return (_Max);
			}

		return (_Max_value(_Masked, _Old + _Old / 2));
		}

	template<class _Fty,
		class... _ArgTys>
		basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args)
		{	
			
		if (_New_size > max_size())
			{
			_Xlen();	
			}

		auto& _My_data = this->_Get_data();
		const size_type _Old_capacity = _My_data._Myres;
		const size_type _New_capacity = _Calculate_growth(_New_size);
		auto& _Al = this->_Getal();
		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); 
		_My_data._Orphan_all();
		_My_data._Mysize = _New_size;
		_My_data._Myres = _New_capacity;
		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);
		if (this->_BUF_SIZE <= _Old_capacity)
			{
			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);
			_My_data._Bx._Ptr = _New_ptr;
			}
		else
			{
			_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
			}

		return (*this);
		}

	template<class _Fty,
		class... _ArgTys>
		basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args)
		{	
			
		auto& _My_data = this->_Get_data();
		const size_type _Old_size = _My_data._Mysize;
		if (max_size() - _Old_size < _Size_increase)
			{
			_Xlen();	
			}

		const size_type _New_size = _Old_size + _Size_increase;
		const size_type _Old_capacity = _My_data._Myres;
		const size_type _New_capacity = _Calculate_growth(_New_size);
		auto& _Al = this->_Getal();
		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); 
		_My_data._Orphan_all();
		_My_data._Mysize = _New_size;
		_My_data._Myres = _New_capacity;
		_Elem * const _Raw_new = _Unfancy(_New_ptr);
		if (this->_BUF_SIZE <= _Old_capacity)
			{
			const pointer _Old_ptr = _My_data._Bx._Ptr;
			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
			_Al.deallocate(_Old_ptr, _Old_capacity + 1);
			_My_data._Bx._Ptr = _New_ptr;
			}
		else
			{
			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
			_Alty_traits::construct(_Al, ::std:: addressof(_My_data._Bx._Ptr), _New_ptr);
			}

		return (*this);
		}

	void _Become_small()
		{	
			
			
		auto& _My_data = this->_Get_data();
		_My_data._Orphan_all();
		const pointer _Ptr = _My_data._Bx._Ptr;
		auto& _Al = this->_Getal();
		_Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);
		_Al.deallocate(_Ptr, _My_data._Myres + 1);
		_My_data._Myres = this->_BUF_SIZE - 1;
		}

	void _Eos(const size_type _Newsize)
		{	
		auto& _My_data = this->_Get_data();
		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());
		}

	void _Tidy_init()
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Mysize = 0;
		_My_data._Myres = this->_BUF_SIZE - 1;
		
		
		_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

	void _Tidy_deallocate()
		{	
		this->_Orphan_all();
		auto& _My_data = this->_Get_data();
		if (_My_data._Large_string_engaged())
			{
			const pointer _Ptr = _My_data._Bx._Ptr;
			auto& _Al = this->_Getal();
			_Alty_traits::destroy(_Al, ::std:: addressof(_My_data._Bx._Ptr));
			_Al.deallocate(_Ptr, _My_data._Myres + 1);
			}

		_My_data._Mysize = 0;
		_My_data._Myres = this->_BUF_SIZE - 1;
		
		
		_Traits::assign(_My_data._Bx._Buf[0], _Elem());
		}

	[[noreturn]] static void _Xlen()
		{	
		_Xlength_error("string too long");
		}
	};


template<class _Iter,
	class _Alloc = allocator<_Iter_value_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	basic_string(_Iter, _Iter, _Alloc = _Alloc())
		-> basic_string<_Iter_value_t<_Iter>, char_traits<_Iter_value_t<_Iter>>, _Alloc>;

template<class _Elem,
	class _Traits,
	class _Alloc = allocator<_Elem>,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	explicit basic_string(basic_string_view<_Elem, _Traits>, const _Alloc& = _Alloc())
		-> basic_string<_Elem, _Traits, _Alloc>;

template<class _Elem,
	class _Traits,
	class _Alloc = allocator<_Elem>,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	basic_string(basic_string_view<_Elem, _Traits>, _Guide_size_type_t<_Alloc>, _Guide_size_type_t<_Alloc>,
		const _Alloc& = _Alloc())
		-> basic_string<_Elem, _Traits, _Alloc>;
#line 4033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept 
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
	using _Size_type = typename _String_type::size_type;
	_String_type _Ans;
	_Ans.reserve(_Convert_size<_Size_type>(_Traits::length(_Left) + _Right.size()));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	using _String_type = basic_string<_Elem, _Traits, _Alloc>;
	using _Size_type = typename _String_type::size_type;
	_String_type _Ans;
	_Ans.reserve(_Convert_size<_Size_type>(_Left.size() + _Traits::length(_Right)));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		  const _Elem * const _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	using size_type = typename allocator_traits<_Alloc>::size_type;
	return (::std:: move(_Right.insert(static_cast<size_type>(0), static_cast<size_type>(1), _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		  const _Elem * const _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	_Left.push_back(_Right);
	return (::std:: move(_Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left._Equal(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator==(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right._Equal(_Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>=(
		  const _Elem * const _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc>
	[[nodiscard]] inline bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		  const _Elem * const _Right)
	{	
	return (!(_Left < _Right));
	}

using string = basic_string<char, char_traits<char>, allocator<char>>;
using wstring = basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t>>;
using u16string = basic_string<char16_t, char_traits<char16_t>, allocator<char16_t>>;
using u32string = basic_string<char32_t, char_traits<char32_t>, allocator<char32_t>>;

	
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef basic_string<_Elem, _Traits, _Alloc> argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const basic_string<_Elem, _Traits, _Alloc>& _Keyval) const noexcept
		{	
		return (_Hash_array_representation(_Keyval.c_str(), _Keyval.size()));
		}
	};
}



#pragma warning(pop)
#pragma pack(pop)
#line 4399 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"
#line 4400 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {
		
class logic_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class runtime_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdexcept"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
















#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




#pragma warning(disable: 4275)	

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"







#pragma once




#pragma pack(push, 8)






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
    struct __type_info_node;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"




    extern __type_info_node __type_info_root_node;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"



__pragma(pack(push, 8)) extern "C" {

struct __std_type_info_data
{
    const char * _UndecoratedName;
    const char   _DecoratedName[1];
    __std_type_info_data() = delete;
    __std_type_info_data(const __std_type_info_data&) = delete;
    __std_type_info_data(__std_type_info_data&&) = delete;

    __std_type_info_data& operator=(const __std_type_info_data&) = delete;
    __std_type_info_data& operator=(__std_type_info_data&&) = delete;
};

 int __cdecl __std_type_info_compare(
      const __std_type_info_data* _Lhs,
      const __std_type_info_data* _Rhs
    );

 size_t __cdecl __std_type_info_hash(
      const __std_type_info_data* _Data
    );

 const char* __cdecl __std_type_info_name(
      __std_type_info_data* _Data,
      __type_info_node*     _RootNode
    );

} __pragma(pack(pop))


#pragma warning(push)
#pragma warning(disable: 4577) 
class type_info
{
public:

    type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;

    size_t hash_code() const noexcept
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(const type_info& _Other) const noexcept
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    const char* name() const noexcept
    {
        


        return __std_type_info_name(&_Data, &__type_info_root_node);
        #line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
    }

    const char* raw_name() const noexcept
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() noexcept;

private:

    mutable __std_type_info_data _Data;
};
#pragma warning(pop)

namespace std {
	using ::type_info;
}



namespace std {

#pragma warning(push)
#pragma warning(disable: 4577) 
class bad_cast
    : public exception
{
public:

    bad_cast() noexcept
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(const char* const _Message) noexcept
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(const char* const _Message, int) noexcept
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() noexcept
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(const char* const _Message) noexcept
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(const char* const _Message, int) noexcept
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(const char* const _Message) noexcept
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(const char* const _Message, int) noexcept
        : bad_typeid(_Message, 1)
    {
    }
};

#pragma warning(pop)
} 

#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime_typeinfo.h"
#pragma pack(pop)
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"

 namespace std {


constexpr int _Small_object_num_ptrs = 6 + 16 / sizeof (void *);

 




















































#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"

 }



#pragma pack(pop)
#pragma warning(pop)
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\typeinfo"







#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {









  __declspec(dllimport) int __cdecl _isctype(  int _C,   int _Type);
  __declspec(dllimport) int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalpha(  int _C);
  __declspec(dllimport) int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isupper(  int _C);
  __declspec(dllimport) int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl islower(  int _C);
  __declspec(dllimport) int __cdecl _islower_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isdigit(  int _C);

  __declspec(dllimport) int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isxdigit(  int _C);
  __declspec(dllimport) int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl isspace(  int _C);

  __declspec(dllimport) int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl ispunct(  int _C);
  __declspec(dllimport) int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isblank(  int _C);
  __declspec(dllimport) int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl isalnum(  int _C);
  __declspec(dllimport) int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isprint(  int _C);
  __declspec(dllimport) int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl isgraph(  int _C);
  __declspec(dllimport) int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl iscntrl(  int _C);
  __declspec(dllimport) int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);


   __declspec(dllimport) int __cdecl toupper(  int _C);


   __declspec(dllimport) int __cdecl tolower(  int _C);

   __declspec(dllimport) int __cdecl _tolower(  int _C);
  __declspec(dllimport) int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
   __declspec(dllimport) int __cdecl _toupper(  int _C);
  __declspec(dllimport) int __cdecl _toupper_l(  int _C,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl __isascii(  int _C);
  __declspec(dllimport) int __cdecl __toascii(  int _C);
  __declspec(dllimport) int __cdecl __iscsymf(  int _C);
  __declspec(dllimport) int __cdecl __iscsym(  int _C);








__inline int __cdecl __acrt_locale_get_ctype_array_value(
      unsigned short const * const _Locale_pctype_array,
              int                    const _Char_value,
                             int                    const _Mask
    )
{
    
    
    
    
    if (_Char_value >= -1 && _Char_value <= 255)
    {
        return _Locale_pctype_array[_Char_value] & _Mask;
    }

    return 0;
}



    
    
    




















    
    
    




        
    #line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"



    
    
    
    
    
    
    
    



    












#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"

    __inline __crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers)
    {
        _locale_t const _TypedLocalePointers = (_locale_t)_LocalePointers;
        return (__crt_locale_data_public*)_TypedLocalePointers->locinfo;
    }

    



    __inline int __cdecl _chvalidchk_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        


        if (_Locale)
        {
            return __acrt_locale_get_ctype_array_value(__acrt_get_locale_data_prefix(_Locale)->_locale_pctype, _C, _Mask);
        }

        return (__acrt_locale_get_ctype_array_value(__pctype_func(), (_C), (_Mask)));
        #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"
    }

    
    

    __inline int __cdecl _ischartype_l(
              int       const _C,
              int       const _Mask,
          _locale_t const _Locale
        )
    {
        if (_Locale && __acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max > 1)
        {
            return _isctype_l(_C, _Mask, _Locale);
        }

        return _chvalidchk_l(_C, _Mask, _Locale);
    }

    
    
    
    
    
    
    
    
    
    
    
    

    
    

    
    


    
    
    
    
    

    
    
    
    

#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"



    
    
    
    
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"



#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"
} __pragma(pack(pop))
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\ctype.h"
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\locale.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {















struct lconv
{
    char*    decimal_point;
    char*    thousands_sep;
    char*    grouping;
    char*    int_curr_symbol;
    char*    currency_symbol;
    char*    mon_decimal_point;
    char*    mon_thousands_sep;
    char*    mon_grouping;
    char*    positive_sign;
    char*    negative_sign;
    char     int_frac_digits;
    char     frac_digits;
    char     p_cs_precedes;
    char     p_sep_by_space;
    char     n_cs_precedes;
    char     n_sep_by_space;
    char     p_sign_posn;
    char     n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
};

struct tm;























    __declspec(dllimport) void __cdecl _lock_locales(void);
    __declspec(dllimport) void __cdecl _unlock_locales(void);

    
    __declspec(dllimport) int __cdecl _configthreadlocale(
          int _Flag
        );

        
    __declspec(dllimport) char* __cdecl setlocale(
                int         _Category,
          char const* _Locale
        );

    
    __declspec(dllimport) struct lconv* __cdecl localeconv(void);

    
    __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);

    
    __declspec(dllimport) _locale_t __cdecl _create_locale(
            int         _Category,
          char const* _Locale
        );

    __declspec(dllimport) void __cdecl _free_locale(
          _locale_t _Locale
        );

    
        
    __declspec(dllimport) wchar_t* __cdecl _wsetlocale(
                int            _Category,
          wchar_t const* _Locale
        );

    
    __declspec(dllimport) _locale_t __cdecl _wcreate_locale(
            int            _Category,
          wchar_t const* _Locale
        );



    __declspec(dllimport) wchar_t**    __cdecl ___lc_locale_name_func(void);
    __declspec(dllimport) unsigned int __cdecl ___lc_codepage_func   (void);
    __declspec(dllimport) unsigned int __cdecl ___lc_collate_cp_func (void);




    
     
     
    __declspec(dllimport) char*    __cdecl _Getdays(void);

     
     
    __declspec(dllimport) char*    __cdecl _Getmonths(void);

    __declspec(dllimport) void*    __cdecl _Gettnames(void);

     
     
    __declspec(dllimport) wchar_t* __cdecl _W_Getdays(void);

     
     
    __declspec(dllimport) wchar_t* __cdecl _W_Getmonths(void);

    __declspec(dllimport) void*    __cdecl _W_Gettnames(void);

     
    __declspec(dllimport) size_t __cdecl _Strftime(
          char*           _Buffer,
                              size_t           _Max_size,
                            char const*      _Format,
                              struct tm const* _Timeptr,
                          void*            _Lc_time_arg);

     
    __declspec(dllimport) size_t __cdecl _Wcsftime(
          wchar_t*        _Buffer,
                              size_t           _Max_size,
                            wchar_t const*   _Format,
                              struct tm const* _Timeptr,
                          void*            _Lc_time_arg
        );

#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\locale.h"


} __pragma(pack(pop))
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\locale.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 


 
extern "C" {
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

		












		










 
 
 
 
 
 
 
 

typedef struct _Collvec
	{	
	unsigned int _Page;		
	wchar_t *_LocaleName;
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned int _Page;		
	unsigned int _Mbcurmax;
	int _Isclocale;	
	unsigned char _Isleadbyte[32];	
	} _Cvtvec;

		
 _Collvec __cdecl _Getcoll(void);
 _Ctypevec __cdecl _Getctype(void);
 _Cvtvec __cdecl _Getcvt(void);



extern "C"
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
 int __cdecl _Getdateorder(void);
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

 








 int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
 #line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

 float __cdecl _Stof(const char *,
	    char **, long);
 double __cdecl _Stod(const char *,
	    char **, long);
 long double __cdecl _Stold(const char *,
	    char **, long);

 int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
 size_t __cdecl _Strxfrm(
	    char *_String1,
	  char *_End1, const char *, const char *, const _Collvec *);
 int __cdecl _Tolower(int, const _Ctypevec *);
 int __cdecl _Toupper(int, const _Ctypevec *);
 int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
 int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
 size_t __cdecl _Wcsxfrm(
	    wchar_t *_String1,
	  wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

 short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
 const wchar_t *__cdecl _Getwctypes(const wchar_t *,
	const wchar_t *, short *, const _Ctypevec *);
 wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
 wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);


 
}
 #line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

extern "C" {
 
 
__declspec(dllimport) char *__cdecl _Getdays(void);

 
 
__declspec(dllimport) char *__cdecl _Getmonths(void);

__declspec(dllimport) void *__cdecl _Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Strftime(  char *,
	  size_t _Maxsize,   const char *,   const struct tm *,
	  void *);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getdays(void);

 
 
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths(void);

__declspec(dllimport) void *__cdecl _W_Gettnames(void);

 
__declspec(dllimport) size_t __cdecl _Wcsftime(  wchar_t *,
	  size_t _Maxsize,   const wchar_t *,   const struct tm *,
	  void *);
}

 







 _locale_t __cdecl _GetLocaleForCP(unsigned int);
 #line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
class __declspec(dllimport) _Timevec
	{	
public:
	 _Timevec(void *_Ptr = nullptr)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec() noexcept
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = nullptr;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		
class __declspec(dllimport) _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, const char *);
	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, int, const char *);
	static  void __cdecl _Locinfo_dtor(
		_Locinfo *);
	static  _Locinfo& __cdecl _Locinfo_Addcats(
		_Locinfo *, int, const char *);

	 _Locinfo(const char *_Pch = "C")
 
		: _Lock(0)
 #line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"

		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Pch);
		}

	 _Locinfo(int _Cat, const char *_Pch)
 
		: _Lock(0)
 #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"

		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Cat, _Pch);
		}

	 ~_Locinfo() noexcept
		{	
		_Locinfo_dtor(this);
		}

	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == nullptr)
			throw runtime_error("bad locale name");
		return (_Locinfo_Addcats(this, _Cat, _Pch));
		}

	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return (::_Getdateorder());
		}

	_Timevec  _W_Gettnames() const
		{	
		return (_Timevec(::_W_Gettnames()));
		}

	const unsigned short * _W_Getdays() const
		{	
		const wchar_t *_Ptr = ::_W_Getdays();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_W_Days = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Days._Empty()
			? _W_Days._C_str()
			: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
		}

	const unsigned short * _W_Getmonths() const
		{	
		const wchar_t *_Ptr = ::_W_Getmonths();

		if (_Ptr != nullptr)
			{	
			((_Locinfo *)this)->_W_Months = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Months._Empty()
			? _W_Months._C_str()
			: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December"));
		}

	_Locinfo(const _Locinfo&) = delete;
	_Locinfo& operator=(const _Locinfo&) = delete;

private:
 



	_Lockit _Lock;	
 #line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<wchar_t> _W_Days;	
	_Yarn<wchar_t> _W_Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	const ptrdiff_t _Count = _Last2 - _First2;
	if (_Count <= _Last1 - _First1)
		{
		:: memcpy(_First1, _First2, _Count * sizeof(_Elem));
		}

	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  char *_First1,   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  wchar_t *_First1,   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocinfo"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

#pragma once








 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(_InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; _First != _Last; ++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(const _InIt _First, const _InIt _Last,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _FwdIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
	return (_Dest);
	}

 








#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

		

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked2(_InIt _First, _Diff _Count,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; 0 < _Count; --_Count, (void)++_First)
		{
		_Backout._Emplace_back(*_First);
		}

	return (_Backout._Release());
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked2(const _InIt _First, const _Diff _Count,
		const _FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _First + _Count, _Dest));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _FwdIt _Dest)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		const auto _UDest = _Get_unwrapped_n(_Dest, _Count);
		_Seek_wrapped(_Dest,
			_Uninitialized_copy_n_unchecked2(_UFirst, _Count, _UDest, _Ptr_copy_cat(_UFirst, _UDest)));
		}

	return (_Dest);
	}

 




















































#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"


		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_move(const _InIt _First, const _InIt _Last, _FwdIt _Dest)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Uninitialized_move_unchecked(_UFirst, _ULast, _UDest));
	return (_Dest);
	}

 







#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	pair<_InIt, _FwdIt> _Uninitialized_move_n_unchecked1(_InIt _First, _Diff _Count,
		const _FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_Dest};
	for (; 0 < _Count; --_Count, (void)++_First)
		{
		_Backout._Emplace_back(::std:: move(*_First));
		}

	return (pair<_InIt, _FwdIt>(_First, _Backout._Release()));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	pair<_InIt, _FwdIt> _Uninitialized_move_n_unchecked1(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	if (0 < _Count)
		{
		_Dest = _Copy_memmove(_First, _First + _Count, _Dest);
		_First += _Count;
		}

	return (pair<_InIt, _FwdIt>(_First, _Dest));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	pair<_InIt, _FwdIt> _Uninitialized_move_n_unchecked(const _InIt _First, const _Diff _Count, const _FwdIt _Dest)
	{	
	return (_Uninitialized_move_n_unchecked1(_First, _Count,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	pair<_InIt, _FwdIt> uninitialized_move_n(_InIt _First, const _Diff _Count_raw, _FwdIt _Dest)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _Result = _Uninitialized_move_n_unchecked(
			_Get_unwrapped_n(_First, _Count), _Count, _Get_unwrapped_n(_Dest, _Count));
		_Seek_wrapped(_Dest, _Result.second);
		_Seek_wrapped(_First, _Result.first);
		}

	return {_First, _Dest};
	}

 






















































#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	while (_Backout._Last != _Last)
		{
		_Backout._Emplace_back(_Val);
		}

	_Backout._Release();
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First));
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(const _FwdIt _First, const _FwdIt _Last, const _Tval& _Val)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	_Uninitialized_fill_unchecked(_UFirst, _Get_unwrapped(_Last), _Val, _Fill_memset_is_safe(_UFirst, _Val));
	}


		

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(const _FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back(_Val);
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(const _FwdIt _First, const _Diff _Count, const _Tval& _Val, true_type)
	{	
	:: memset(_First, static_cast<unsigned char>(_Val), _Count);
	return (_First + _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt uninitialized_fill_n(_FwdIt _First, const _Diff _Count_raw, const _Tval& _Val)
	{	
	_Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		_Seek_wrapped(_First,
			_Uninitialized_fill_n_unchecked1(_UFirst, _Count, _Val, _Fill_memset_is_safe(_UFirst, _Val)));
		}

	return (_First);
	}


		
template<class _Ty> inline
	void destroy_at(_Ty * const _Location)
	{	
	_Location->~_Ty();
	}

		
template<class _FwdIt> inline
	void destroy(const _FwdIt _First, const _FwdIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	_Destroy_range(_Get_unwrapped(_First), _Get_unwrapped(_Last));
	}

		
template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Destroy_n1(_FwdIt _First, _Diff _Count, false_type)
	{	
	for (; 0 < _Count; ++_First, (void)--_Count)
		{
		_Destroy_in_place(*_First);
		}

	return (_First);
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Destroy_n1(const _FwdIt _First, const _Diff _Count, true_type)
	{	
	return (::std:: next(_First, _Count)); 
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt destroy_n(_FwdIt _First, const _Diff _Count_raw)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		_Seek_wrapped(_First, _Destroy_n1(_UFirst, _Count,
			is_trivially_destructible<_Iter_value_t<_FwdIt>>()));
		}

	return (_First);
	}

		
template<class _FwdIt> inline
	void _Uninitialized_default_construct_unchecked(const _FwdIt _First, const _FwdIt _Last, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	for (; _Backout._Last != _Last; ++_Backout._Last)
		{
		::new (static_cast<void *>(_Unfancy(_Backout._Last))) _Iter_value_t<_FwdIt>;
		}

	_Backout._Release();
	}

template<class _FwdIt> inline
	void _Uninitialized_default_construct_unchecked(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void uninitialized_default_construct(const _FwdIt _First, const _FwdIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	_Uninitialized_default_construct_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
		is_trivially_default_constructible<_Iter_value_t<_FwdIt>>());
	}

		
template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Uninitialized_default_construct_n_unchecked(const _FwdIt _First, _Diff _Count, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	for (; 0 < _Count; ++_Backout._Last, (void)--_Count)
		{
		::new (static_cast<void *>(_Unfancy(_Backout._Last))) _Iter_value_t<_FwdIt>;
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Uninitialized_default_construct_n_unchecked(const _FwdIt _First, const _Diff _Count, true_type)
	{	
		
	return (::std:: next(_First, _Count));
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt uninitialized_default_construct_n(_FwdIt _First, const _Diff _Count_raw)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		_Seek_wrapped(_First,
			_Uninitialized_default_construct_n_unchecked(_UFirst, _Count,
			is_trivially_default_constructible<_Iter_value_t<_FwdIt>>()));
		}

	return (_First);
	}

		
template<class _FwdIt> inline
	void _Uninitialized_value_construct_unchecked(const _FwdIt _First, const _FwdIt _Last, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	while (_Backout._Last != _Last)
		{
		_Backout._Emplace_back();
		}

	_Backout._Release();
	}

template<class _FwdIt> inline
	void _Uninitialized_value_construct_unchecked(const _FwdIt _First, const _FwdIt _Last, true_type)
	{	
	_Zero_range(_First, _Last);
	}

template<class _FwdIt> inline
	void uninitialized_value_construct(const _FwdIt _First, const _FwdIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	_Uninitialized_value_construct_unchecked(_UFirst, _ULast,
		_Use_memset_value_construct_t<_Unwrapped_t<_FwdIt>>());
	}

		

template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Uninitialized_value_construct_n_unchecked1(const _FwdIt _First, _Diff _Count, false_type)
	{	
	_Uninitialized_backout<_FwdIt> _Backout{_First};
	for (; 0 < _Count; --_Count)
		{
		_Backout._Emplace_back();
		}

	return (_Backout._Release());
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt _Uninitialized_value_construct_n_unchecked1(const _FwdIt _First, const _Diff _Count, true_type)
	{	
	return (_Zero_range(_First, _First + _Count));
	}

template<class _FwdIt,
	class _Diff> inline
	_FwdIt uninitialized_value_construct_n(_FwdIt _First, const _Diff _Count_raw)
	{	
	const _Algorithm_int_t<_Diff> _Count = _Count_raw;
	if (0 < _Count)
		{
		const auto _UFirst = _Get_unwrapped_n(_First, _Count);
		_Seek_wrapped(_First,
			_Uninitialized_value_construct_n_unchecked1(_UFirst, _Count,
				_Use_memset_value_construct_t<_Unwrapped_n_t<_FwdIt>>()));
		}

	return (_First);
	}

#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"


		
template<class _OutIt,
	class _Ty>
	class [[deprecated("warning STL4011: " "std::raw_storage_iterator is deprecated in C++17. " "Consider using the std::uninitialized_copy() family of algorithms instead. " "You can define _SILENCE_CXX17_RAW_STORAGE_ITERATOR_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] raw_storage_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	explicit raw_storage_iterator(_OutIt _First)
		: _Next(_First)
		{	
		}

	[[nodiscard]] raw_storage_iterator& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator& operator=(const _Ty& _Val)
		{	
		_Construct_in_place(*_Next, _Val);
		return (*this);
		}

	raw_storage_iterator& operator=(_Ty&& _Val)
		{	
		_Construct_in_place(*_Next, ::std:: move(_Val));
		return (*this);
		}

	raw_storage_iterator& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator operator++(int)
		{	
		raw_storage_iterator _Ans = *this;
		++_Next;
		return (_Ans);
		}

	[[nodiscard]] _OutIt base() const
		{	
		return (_Next);
		}

private:
	_OutIt _Next;	
	};


 




































































































































#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"


	
class bad_weak_ptr
	: public exception
	{	
public:
	bad_weak_ptr() noexcept
		{	
		}

	[[nodiscard]] virtual const char *  what() const noexcept override
		{	
		return ("bad_weak_ptr");
		}
	};

	
class __declspec(novtable) _Ref_count_base
	{	
private:











	virtual void _Destroy() noexcept = 0;
	virtual void _Delete_this() noexcept = 0;
#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	_Atomic_counter_t _Uses;
	_Atomic_counter_t _Weaks;

protected:
	_Ref_count_base()
		: _Uses(1), _Weaks(1)	
		{	
		}

public:
	virtual ~_Ref_count_base() noexcept
		{	
		}

	bool _Incref_nz()
		{	
		for (;;)
			{	
 
			const _Atomic_integral_t _Count =
				static_cast<volatile _Atomic_counter_t&>(_Uses);

			if (_Count == 0)
				return (false);

			if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
					reinterpret_cast<volatile long *>(&_Uses),
					static_cast<long>(_Count + 1), static_cast<long>(_Count))) == _Count)
				return (true);

 








#line 830 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
			}
		}

	void _Incref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
		}

	void _Incwref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
			{
			_Delete_this();
			}
		}

	long _Use_count() const noexcept
		{	
		return (static_cast<long>(_Get_atomic_count(_Uses)));
		}

	virtual void * _Get_deleter(const type_info&) const noexcept
		{	
		return (nullptr);
		}
	};

	
template<class _Ty>
	class _Ref_count
		: public _Ref_count_base
	{	
public:
	explicit _Ref_count(_Ty * _Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy() noexcept override
		{	
		delete _Ptr;
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

	
template<class _Resource,
	class _Dx>
	class _Ref_count_resource
		: public _Ref_count_base
	{	
public:
	_Ref_count_resource(_Resource _Px, _Dx _Dt)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt), _Px)
		{	
		}

	virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
		{	

		if (_Typeid == typeid(_Dx))
			{
			return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
			}


#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

		return (nullptr);
		}

private:
	virtual void _Destroy() noexcept override
		{	
		_Mypair._Get_first()(_Mypair._Get_second());
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	_Compressed_pair<_Dx, _Resource> _Mypair;
	};

	
template<class _Resource,
	class _Dx,
	class _Alloc>
	class _Ref_count_resource_alloc
		: public _Ref_count_base
	{	
public:
	_Ref_count_resource_alloc(_Resource _Px, _Dx _Dt, const _Alloc& _Ax)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), ::std:: move(_Dt),
			_One_then_variadic_args_t(), _Ax, _Px)
		{	
		}

	virtual void * _Get_deleter(const type_info& _Typeid) const noexcept override
		{	

		if (_Typeid == typeid(_Dx))
			{
			return (const_cast<_Dx *>(::std:: addressof(_Mypair._Get_first())));
			}


#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

		return (nullptr);
		}

private:
	using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_resource_alloc>;

	virtual void _Destroy() noexcept override
		{	
		_Mypair._Get_first()(_Mypair._Get_second()._Get_second());
		}

	virtual void _Delete_this() noexcept override
		{	
		_Myalty _Al = _Mypair._Get_second()._Get_first();
		allocator_traits<_Myalty>::destroy(_Al, this);
		_Deallocate_plain(_Al, this);
		}

	_Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Resource>> _Mypair;
	};

	
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty>>
	class unique_ptr;

template<class _Ty>
	class shared_ptr;

template<class _Ty>
	class weak_ptr;

template<class _Yty,
	class = void>
	struct _Can_enable_shared
		: false_type
	{	
	};

template<class _Yty>
	struct _Can_enable_shared<_Yty, void_t<typename _Yty::_Esft_type>>
		: is_convertible<remove_cv_t<_Yty> *, typename _Yty::_Esft_type *>::type
	{	
	};

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type)
	{	
	if (_Ptr && _Ptr->_Wptr.expired())
		{
		_Ptr->_Wptr = shared_ptr<remove_cv_t<_Yty>>(_This, const_cast<remove_cv_t<_Yty> *>(_Ptr));
		}
	}

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this1(const shared_ptr<_Other>&, _Yty *, false_type)
	{	
	}

template<class _Other,
	class _Yty>
	void _Enable_shared_from_this(const shared_ptr<_Other>& _This, _Yty * _Ptr)
	{	
	_Enable_shared_from_this1(_This, _Ptr, bool_constant<conjunction_v<
		negation<is_array<_Other>>,
		negation<is_volatile<_Yty>>,
		_Can_enable_shared<_Yty>>>{});
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	using element_type = remove_extent_t<_Ty>;

	[[nodiscard]] long use_count() const noexcept
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	template<class _Ty2>
		[[nodiscard]] bool owner_before(const _Ptr_base<_Ty2>& _Right) const noexcept
		{	
		return (_Rep < _Right._Rep);
		}

	_Ptr_base(const _Ptr_base&) = delete;
	_Ptr_base& operator=(const _Ptr_base&) = delete;

protected:
	[[nodiscard]] element_type * get() const noexcept
		{	
		return (_Ptr);
		}

	constexpr _Ptr_base() noexcept = default;

	~_Ptr_base() = default;

	template<class _Ty2>
		void _Move_construct_from(_Ptr_base<_Ty2>&& _Right)
		{	
		_Ptr = _Right._Ptr;
		_Rep = _Right._Rep;

		_Right._Ptr = nullptr;
		_Right._Rep = nullptr;
		}

	template<class _Ty2>
		void _Copy_construct_from(const shared_ptr<_Ty2>& _Other)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incref();
			}

		_Ptr = _Other._Ptr;
		_Rep = _Other._Rep;
		}

	template<class _Ty2>
		void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type * _Px)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incref();
			}

		_Ptr = _Px;
		_Rep = _Other._Rep;
		}

	template<class _Ty0>
		friend class weak_ptr;	

	template<class _Ty2>
		bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other)
		{	
		if (_Other._Rep && _Other._Rep->_Incref_nz())
			{
			_Ptr = _Other._Ptr;
			_Rep = _Other._Rep;
			return (true);
			}

		return (false);
		}

	void _Decref()
		{	
		if (_Rep)
			{
			_Rep->_Decref();
			}
		}

	void _Swap(_Ptr_base& _Right) noexcept
		{	
		::std:: swap(_Ptr, _Right._Ptr);
		::std:: swap(_Rep, _Right._Rep);
		}

	void _Set_ptr_rep(element_type * _Other_ptr, _Ref_count_base * _Other_rep)
		{	
		_Ptr = _Other_ptr;
		_Rep = _Other_rep;
		}

	template<class _Ty2>
		void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other)
		{	
		if (_Other._Rep)
			{
			_Other._Rep->_Incwref();
			}

		_Ptr = _Other._Ptr;
		_Rep = _Other._Rep;
		}

	void _Decwref()
		{	
		if (_Rep)
			{
			_Rep->_Decwref();
			}
		}

private:
	element_type * _Ptr{nullptr};
	_Ref_count_base * _Rep{nullptr};

	template<class _Ty0>
		friend class _Ptr_base;


	template<class _Dx,
		class _Ty0>
		friend _Dx * get_deleter(const shared_ptr<_Ty0>& _Sx) noexcept;
#line 1168 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
	};

	
template<class _Yty,
	class = void>
	struct _Can_scalar_delete
		: false_type
	{};
template<class _Yty>
	struct _Can_scalar_delete<_Yty, void_t<decltype(delete ::std:: declval<_Yty *>())>>
		: true_type
	{};

	
template<class _Yty,
	class = void>
	struct _Can_array_delete
		: false_type
	{};
template<class _Yty>
	struct _Can_array_delete<_Yty, void_t<decltype(delete[] ::std:: declval<_Yty *>())>>
		: true_type
	{};

	
template<class _Fx,
	class _Arg,
	class = void>
	struct _Can_call_function_object
		: false_type
	{};
template<class _Fx,
	class _Arg>
	struct _Can_call_function_object<_Fx, _Arg, void_t<decltype(::std:: declval<_Fx>()(::std:: declval<_Arg>()))>>
		: true_type
	{};

	
template<class _Yty,
	class _Ty>
	struct _SP_convertible
		: is_convertible<_Yty *, _Ty *>::type
	{};
template<class _Yty,
	class _Uty>
	struct _SP_convertible<_Yty, _Uty[]>
		: is_convertible<_Yty(*)[], _Uty(*)[]>::type
	{};
template<class _Yty,
	class _Uty,
	size_t _Ext>
	struct _SP_convertible<_Yty, _Uty[_Ext]>
		: is_convertible<_Yty(*)[_Ext], _Uty(*)[_Ext]>::type
	{};

	
template<class _Yty,
	class _Ty>
	struct _SP_pointer_compatible
		: is_convertible<_Yty *, _Ty *>::type
	{	
		
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], volatile _Uty[]>
		: true_type
	{	
	};
template<class _Uty,
	size_t _Ext>
	struct _SP_pointer_compatible<_Uty[_Ext], const volatile _Uty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
private:
	using _Mybase = _Ptr_base<_Ty>;

public:
	using typename _Mybase::element_type;


	using weak_type = weak_ptr<_Ty>;
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	constexpr shared_ptr() noexcept
		{	
		}

	constexpr shared_ptr(nullptr_t) noexcept
		{	
		}

	template<class _Ux,
		enable_if_t<conjunction_v<conditional_t<is_array_v<_Ty>, _Can_array_delete<_Ux>, _Can_scalar_delete<_Ux>>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		explicit shared_ptr(_Ux * _Px)
		{	
		_Setp(_Px, is_array<_Ty>{});
		}

	template<class _Ux,
		class _Dx,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, _Ux *&>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		shared_ptr(_Ux * _Px, _Dx _Dt)
		{	
		_Setpd(_Px, ::std:: move(_Dt));
		}

	template<class _Ux,
		class _Dx,
		class _Alloc,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, _Ux *&>,
			_SP_convertible<_Ux, _Ty>>, int> = 0>
		shared_ptr(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Setpda(_Px, ::std:: move(_Dt), _Ax);
		}

	template<class _Dx,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, nullptr_t&>
		>, int> = 0>
		shared_ptr(nullptr_t, _Dx _Dt)
		{	
		_Setpd(nullptr, ::std:: move(_Dt));
		}

	template<class _Dx,
		class _Alloc,
		enable_if_t<conjunction_v<is_move_constructible<_Dx>,
			_Can_call_function_object<_Dx&, nullptr_t&>
		>, int> = 0>
		shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Setpda(nullptr, ::std:: move(_Dt), _Ax);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, element_type * _Px) noexcept
		{	
		this->_Alias_construct_from(_Right, _Px);
		}

	shared_ptr(const shared_ptr& _Other) noexcept
		{	
		this->_Copy_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Copy_construct_from(_Other);
		}

	shared_ptr(shared_ptr&& _Right) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Right));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Right));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other)
		{	
		if (!this->_Construct_from_weak(_Other))
			{
			throw bad_weak_ptr{};
			}
		}

 








#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	template<class _Ux,
		class _Dx,
		enable_if_t<conjunction_v<
			_SP_pointer_compatible<_Ux, _Ty>,
			is_convertible<typename unique_ptr<_Ux, _Dx>::pointer, element_type *>
		>, int> = 0>
		shared_ptr(unique_ptr<_Ux, _Dx>&& _Other)
		{	
		using _Fancy_t = typename unique_ptr<_Ux, _Dx>::pointer;
		using _Raw_t = typename unique_ptr<_Ux, _Dx>::element_type *;
		using _Deleter_t = conditional_t<is_reference_v<_Dx>, decltype(::std:: ref(_Other.get_deleter())), _Dx>;

		const _Fancy_t _Fancy = _Other.get();

		if (_Fancy)
			{
			const _Raw_t _Raw = _Fancy;
			const auto _Rx = new _Ref_count_resource<_Fancy_t, _Deleter_t>(_Fancy, _Other.get_deleter());
			_Set_ptr_rep_and_enable_shared(_Raw, _Rx);
			_Other.release();
			}
		}

	~shared_ptr() noexcept
		{	
		this->_Decref();
		}

	shared_ptr& operator=(const shared_ptr& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		shared_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	shared_ptr& operator=(shared_ptr&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		shared_ptr& operator=(shared_ptr<_Ty2>&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

 






#line 1440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	template<class _Ux,
		class _Dx>
		shared_ptr& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	void swap(shared_ptr& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	void reset() noexcept
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux * _Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux * _Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux * _Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}

	using _Mybase::get;

	template<class _Ty2 = _Ty,
		enable_if_t<!disjunction_v<is_array<_Ty2>, is_void<_Ty2>>, int> = 0>
		[[nodiscard]] _Ty2& operator*() const noexcept
		{	
		return (*get());
		}

	template<class _Ty2 = _Ty,
		enable_if_t<!is_array_v<_Ty2>, int> = 0>
		[[nodiscard]] _Ty2 * operator->() const noexcept
		{	
		return (get());
		}

	template<class _Ty2 = _Ty,
		class _Elem = element_type,
		enable_if_t<is_array_v<_Ty2>, int> = 0>
		[[nodiscard]] _Elem& operator[](ptrdiff_t _Idx) const
		{	
		return (get()[_Idx]);
		}

	[[nodiscard]] [[deprecated("warning STL4016: " "std::shared_ptr::unique() is deprecated in C++17. " "You can define _SILENCE_CXX17_SHARED_PTR_UNIQUE_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] bool unique() const noexcept
		{	
		return (this->use_count() == 1);
		}

	explicit operator bool() const noexcept
		{	
		return (get() != nullptr);
		}

private:
	template<class _Ux>
		void _Setp(_Ux * _Px, true_type)
		{	
		_Setpd(_Px, default_delete<_Ux[]>{});
		}

	template<class _Ux>
		void _Setp(_Ux * _Px, false_type)
		{	
		try {	
		_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _UxptrOrNullptr,
		class _Dx>
		void _Setpd(_UxptrOrNullptr _Px, _Dx _Dt)
		{	
		try {	
		_Set_ptr_rep_and_enable_shared(_Px, new _Ref_count_resource<_UxptrOrNullptr, _Dx>(_Px, ::std:: move(_Dt)));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _UxptrOrNullptr,
		class _Dx,
		class _Alloc>
		void _Setpda(_UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax)
		{	
		using _Refd = _Ref_count_resource_alloc<_UxptrOrNullptr, _Dx, _Alloc>;
		using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refd>;
		using _Alref_traits = allocator_traits<_Alref_alloc>;
		_Alref_alloc _Alref(_Ax);

		try {	
		const auto _Pfancy = _Alref_traits::allocate(_Alref, 1);
		_Refd * const _Pref = _Unfancy(_Pfancy);
			try {
			_Alref_traits::construct(_Alref, _Pref, _Px, ::std:: move(_Dt), _Ax);
			_Set_ptr_rep_and_enable_shared(_Px, _Pref);
			} catch (...) {
			_Alref_traits::deallocate(_Alref, _Pfancy, 1);
			throw;
			}
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _Ty0,
		class... _Types>
		friend shared_ptr<_Ty0> make_shared(_Types&&... _Args);

	template<class _Ty0,
		class _Alloc,
		class... _Types>
		friend shared_ptr<_Ty0> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args);

	template<class _Ux>
		void _Set_ptr_rep_and_enable_shared(_Ux * _Px, _Ref_count_base * _Rx)
		{	
		this->_Set_ptr_rep(_Px, _Rx);
		_Enable_shared_from_this(*this, _Px);
		}

	void _Set_ptr_rep_and_enable_shared(nullptr_t, _Ref_count_base * _Rx)
		{	
		this->_Set_ptr_rep(nullptr, _Rx);
		}
	};


template<class _Ty>
	shared_ptr(weak_ptr<_Ty>) -> shared_ptr<_Ty>;

template<class _Ty,
	class _Dx>
	shared_ptr(unique_ptr<_Ty, _Dx>) -> shared_ptr<_Ty>;
#line 1600 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator==(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator!=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() != _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator<(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() < _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator>=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() >= _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator>(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() > _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] bool operator<=(const shared_ptr<_Ty1>& _Left, const shared_ptr<_Ty2>& _Right) noexcept
	{
	return (_Left.get() <= _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator==(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() == nullptr);
	}

template<class _Ty>
	[[nodiscard]] bool operator==(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (nullptr == _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator!=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() != nullptr);
	}

template<class _Ty>
	[[nodiscard]] bool operator!=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (nullptr != _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator<(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() < static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	[[nodiscard]] bool operator<(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) < _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator>=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() >= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	[[nodiscard]] bool operator>=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) >= _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator>(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() > static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	[[nodiscard]] bool operator>(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) > _Right.get());
	}

template<class _Ty>
	[[nodiscard]] bool operator<=(const shared_ptr<_Ty>& _Left, nullptr_t) noexcept
	{
	return (_Left.get() <= static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr));
	}

template<class _Ty>
	[[nodiscard]] bool operator<=(nullptr_t, const shared_ptr<_Ty>& _Right) noexcept
	{
	return (static_cast<typename shared_ptr<_Ty>::element_type *>(nullptr) <= _Right.get());
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left, shared_ptr<_Ty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = static_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = const_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] shared_ptr<_Ty1> reinterpret_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = reinterpret_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}


template<class _Ty1,
	class _Ty2>
	[[nodiscard]] shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	const auto _Ptr = dynamic_cast<typename shared_ptr<_Ty1>::element_type *>(_Other.get());

	if (_Ptr)
		{
		return (shared_ptr<_Ty1>(_Other, _Ptr));
		}

	return (shared_ptr<_Ty1>());
	}




#line 1772 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"


template<class _Dx,
	class _Ty>
	[[nodiscard]] _Dx * get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
	{	
	if (_Sx._Rep)
		{
		return (static_cast<_Dx *>(_Sx._Rep->_Get_deleter(typeid(_Dx))));
		}

	return (nullptr);
	}




#line 1790 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	
template<class _Ty>
	class _Ref_count_obj
		: public _Ref_count_base
	{	
public:
	template<class... _Types>
		explicit _Ref_count_obj(_Types&&... _Args)
		: _Ref_count_base()
		{	
		::new (static_cast<void *>(&_Storage)) _Ty(::std:: forward<_Types>(_Args)...);
		}

	_Ty * _Getptr()
		{	
		return (reinterpret_cast<_Ty *>(&_Storage));
		}

private:
	virtual void _Destroy() noexcept override
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept override
		{	
		delete this;
		}

	aligned_union_t<1, _Ty> _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
		: public _Ref_count_base
	{	
public:
	template<class... _Types>
		explicit _Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
		{	
		::new (static_cast<void *>(&_Mypair._Get_second())) _Ty(::std:: forward<_Types>(_Args)...);
		}

	_Ty * _Getptr()
		{	
		return (reinterpret_cast<_Ty *>(&_Mypair._Get_second()));
		}

private:
	using _Myalty = _Rebind_alloc_t<_Alloc, _Ref_count_obj_alloc>;
	using _Mystoragety = aligned_union_t<1, _Ty>;

	virtual void _Destroy() noexcept override
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept override
		{	
		_Myalty _Al = _Mypair._Get_first();
		allocator_traits<_Myalty>::destroy(_Al, this);
		_Deallocate_plain(_Al, this);
		}

	_Compressed_pair<_Myalty, _Mystoragety> _Mypair;
	};

	
template<class _Ty,
	class... _Types>
	[[nodiscard]] inline shared_ptr<_Ty> make_shared(_Types&&... _Args)
	{	
	const auto _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

	shared_ptr<_Ty> _Ret;
	_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc,
	class... _Types>
	[[nodiscard]] inline shared_ptr<_Ty> allocate_shared(const _Alloc& _Al_arg, _Types&&... _Args)
	{	
	using _Refoa = _Ref_count_obj_alloc<_Ty, _Alloc>;
	using _Alref_alloc = _Rebind_alloc_t<_Alloc, _Refoa>;
	using _Alref_traits = allocator_traits<_Alref_alloc>;
	_Alref_alloc _Alref(_Al_arg);

	const auto _Rx = _Alref_traits::allocate(_Alref, 1);

	try {
		_Alref_traits::construct(_Alref, _Unfancy(_Rx), _Al_arg, ::std:: forward<_Types>(_Args)...);
	} catch (...) {
		_Alref_traits::deallocate(_Alref, _Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Set_ptr_rep_and_enable_shared(_Rx->_Getptr(), _Unfancy(_Rx));
	return (_Ret);
	}

	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	constexpr weak_ptr() noexcept
		{	
		}

	weak_ptr(const weak_ptr& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other);
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other.lock());
		}

	weak_ptr(weak_ptr&& _Other) noexcept
		{	
		this->_Move_construct_from(::std:: move(_Other));
		}

	template<class _Ty2,
		enable_if_t<_SP_pointer_compatible<_Ty2, _Ty>::value, int> = 0>
		weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
		{	
		this->_Weakly_construct_from(_Other.lock());
		_Other.reset();
		}

	~weak_ptr() noexcept
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	weak_ptr& operator=(weak_ptr&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(weak_ptr<_Ty2>&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		weak_ptr(_Right).swap(*this);
		return (*this);
		}

	void reset() noexcept
		{	
		weak_ptr().swap(*this);
		}

	void swap(weak_ptr& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	[[nodiscard]] bool expired() const noexcept
		{	
		return (this->use_count() == 0);
		}

	[[nodiscard]] shared_ptr<_Ty> lock() const noexcept
		{	
		shared_ptr<_Ty> _Ret;
		(void) _Ret._Construct_from_weak(*this);
		return (_Ret);
		}
	};


template<class _Ty>
	weak_ptr(shared_ptr<_Ty>) -> weak_ptr<_Ty>;
#line 2005 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

template<class _Ty>
	void swap(weak_ptr<_Ty>& _Left, weak_ptr<_Ty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

	
template<class _Ty>
	class enable_shared_from_this
	{	
public:
	using _Esft_type = enable_shared_from_this;

	[[nodiscard]] shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	[[nodiscard]] shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

	[[nodiscard]] weak_ptr<_Ty> weak_from_this() noexcept
		{	
		return (_Wptr);
		}

	[[nodiscard]] weak_ptr<const _Ty> weak_from_this() const noexcept
		{	
		return (_Wptr);
		}

protected:
	constexpr enable_shared_from_this() noexcept
		: _Wptr()
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&) noexcept
		: _Wptr()
		{	
		}

	enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept
		{	
		return (*this);
		}

	~enable_shared_from_this() = default;

private:
	template<class _Other,
		class _Yty>
		friend void _Enable_shared_from_this1(const shared_ptr<_Other>& _This, _Yty * _Ptr, true_type);

	mutable weak_ptr<_Ty> _Wptr;
	};


	

	
template<class _Ty>
	struct default_delete
	{	
	constexpr default_delete() noexcept = default;

	template<class _Ty2,
		enable_if_t<is_convertible_v<_Ty2 *, _Ty *>, int> = 0>
		default_delete(const default_delete<_Ty2>&) noexcept
		{	
		}

	void operator()(_Ty * _Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Ty),
			"can't delete an incomplete type");
		delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	constexpr default_delete() noexcept = default;

	template<class _Uty,
		enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		default_delete(const default_delete<_Uty[]>&) noexcept
		{	
		}

	template<class _Uty,
		enable_if_t<is_convertible_v<_Uty(*)[], _Ty(*)[]>, int> = 0>
		void operator()(_Uty * _Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Uty),
			"can't delete an incomplete type");
		delete[] _Ptr;
		}
	};

		
template<class _Ty,
	class _Dx_noref,
	class = void>
	struct _Get_deleter_pointer_type
	{	
	typedef _Ty * type;
	};

template<class _Ty,
	class _Dx_noref>
	struct _Get_deleter_pointer_type<_Ty, _Dx_noref, void_t<typename _Dx_noref::pointer>>
	{	
	typedef typename _Dx_noref::pointer type;
	};

	
template<class _Ty,
	class _Dx>
	class _Unique_ptr_base
	{	
public:
	typedef remove_reference_t<_Dx> _Dx_noref;
	typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
		: _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
		{	
		}

	template<class _Ptr2>
		constexpr _Unique_ptr_base(_Ptr2 _Ptr)
		: _Mypair(_Zero_then_variadic_args_t(), _Ptr)
		{	
		}

	[[nodiscard]] _Dx& get_deleter() noexcept
		{	
		return (_Mypair._Get_first());
		}

	[[nodiscard]] const _Dx& get_deleter() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	pointer& _Myptr() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const pointer& _Myptr() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	_Compressed_pair<_Dx, pointer> _Mypair;
	};

template<class _Dx2>
	using _Unique_ptr_enable_default_t = enable_if_t<conjunction_v<negation<is_pointer<_Dx2>>,
		is_default_constructible<_Dx2>>, int>;

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept
			: _Mybase(pointer())
		{	
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept
			: _Mybase(pointer())
		{	
		}

	unique_ptr& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		explicit unique_ptr(pointer _Ptr) noexcept
			: _Mybase(_Ptr)
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0>
		unique_ptr(pointer _Ptr, const _Dx& _Dt) noexcept
			: _Mybase(_Ptr, _Dt)
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
			is_constructible<_Dx2, _Dx2>>, int> = 0>
		unique_ptr(pointer _Ptr, _Dx&& _Dt) noexcept
			: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		}

	template<class _Dx2 = _Dx,
		enable_if_t<conjunction_v<is_reference<_Dx2>,
			is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
		unique_ptr(pointer, remove_reference_t<_Dx>&&) = delete;

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2,
		enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
			is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>,
			conditional_t<is_reference_v<_Dx>, is_same<_Dx2, _Dx>, is_convertible<_Dx2, _Dx>>
		>, int> = 0>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

 







#line 2262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

	template<class _Ty2,
		class _Dx2,
		enable_if_t<conjunction_v<negation<is_array<_Ty2>>,
			is_assignable<_Dx&, _Dx2>,
			is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer, pointer>
		>, int> = 0>
		unique_ptr& operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
		return (*this);
		}

	unique_ptr& operator=(unique_ptr&& _Right) noexcept
		{	
		if (this != ::std:: addressof(_Right))
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(unique_ptr& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		if (get() != pointer())
			{
			this->get_deleter()(get());
			}
		}

	[[nodiscard]] add_lvalue_reference_t<_Ty> operator*() const
		{	
		return (*get());
		}

	[[nodiscard]] pointer operator->() const noexcept
		{	
		return (this->_Myptr());
		}

	[[nodiscard]] pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer()) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			{
			this->get_deleter()(_Old);
			}
		}

	unique_ptr(const unique_ptr&) = delete;
	unique_ptr& operator=(const unique_ptr&) = delete;
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr() noexcept
			: _Mybase(pointer())
		{	
		}

	template<class _Uty,
		class _Is_nullptr = is_same<_Uty, nullptr_t>>
		using _Enable_ctor_reset = enable_if_t<
			is_same_v<_Uty, pointer>
			|| _Is_nullptr::value
			|| (is_same_v<pointer, element_type *>
			&& is_pointer_v<_Uty>
			&& is_convertible_v<
				remove_pointer_t<_Uty>(*)[],
				element_type(*)[]
			>)>;

	template<class _Uty,
		class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0,
		class = _Enable_ctor_reset<_Uty>>
		explicit unique_ptr(_Uty _Ptr) noexcept
			: _Mybase(_Ptr)
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<is_constructible_v<_Dx2, const _Dx2&>, int> = 0,
		class = _Enable_ctor_reset<_Uty>>
		unique_ptr(_Uty _Ptr, const _Dx& _Dt) noexcept
			: _Mybase(_Ptr, _Dt)
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<conjunction_v<negation<is_reference<_Dx2>>,
			is_constructible<_Dx2, _Dx2>>, int> = 0,
		class = _Enable_ctor_reset<_Uty>>
		unique_ptr(_Uty _Ptr, _Dx&& _Dt) noexcept
			: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		}

	template<class _Uty,
		class _Dx2 = _Dx,
		enable_if_t<conjunction_v<is_reference<_Dx2>,
			is_constructible<_Dx2, remove_reference_t<_Dx2>>>, int> = 0>
		unique_ptr(_Uty, remove_reference_t<_Dx>&&) = delete;

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	unique_ptr& operator=(unique_ptr&& _Right) noexcept
		{	
		if (this != ::std:: addressof(_Right))
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	template<class _Uty,
		class _Ex,
		class _More,
		class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
		class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
		using _Enable_conversion = enable_if_t<conjunction_v<
			is_array<_Uty>,
			is_same<pointer, element_type *>,
			is_same<_UP_pointer, _UP_element_type *>,
			is_convertible<_UP_element_type(*)[], element_type(*)[]>,
			_More>>;

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex,
			conditional_t<is_reference_v<_Dx>, is_same<_Ex, _Dx>, is_convertible<_Ex, _Dx>>>>
		unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Ex>(_Right.get_deleter()))
		{	
		}

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex, is_assignable<_Dx&, _Ex>>>
		unique_ptr& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
		return (*this);
		}

	template<class _Dx2 = _Dx,
		_Unique_ptr_enable_default_t<_Dx2> = 0>
		constexpr unique_ptr(nullptr_t) noexcept
			: _Mybase(pointer())
		{	
		}

	unique_ptr& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	void reset(nullptr_t = nullptr) noexcept
		{	
		reset(pointer());
		}

	void swap(unique_ptr& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		_Delete();
		}

	[[nodiscard]] _Ty& operator[](size_t _Idx) const
		{	
		return (get()[_Idx]);
		}

	[[nodiscard]] pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty, false_type>>
		void reset(_Uty _Ptr) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			{
			this->get_deleter()(_Old);
			}
		}

	unique_ptr(const unique_ptr&) = delete;
	unique_ptr& operator=(const unique_ptr&) = delete;

private:
	void _Delete()
		{	
		if (get() != pointer())
			{
			this->get_deleter()(get());
			}
		}
	};


	
template<class _Ty,
	class... _Types,
	enable_if_t<!is_array_v<_Ty>, int> = 0>
	[[nodiscard]] inline unique_ptr<_Ty> make_unique(_Types&&... _Args)
	{	
	return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
	}

template<class _Ty,
	enable_if_t<is_array_v<_Ty> && extent_v<_Ty> == 0, int> = 0>
	[[nodiscard]] inline unique_ptr<_Ty> make_unique(size_t _Size)
	{	
	typedef remove_extent_t<_Ty> _Elem;
	return (unique_ptr<_Ty>(new _Elem[_Size]()));
	}

template<class _Ty,
	class... _Types,
	enable_if_t<extent_v<_Ty> != 0, int> = 0>
	void make_unique(_Types&&...) = delete;


	
template<class _Alloc>
	struct _Allocator_deleter
	{
	_Alloc _Al;

	using pointer = typename allocator_traits<_Alloc>::pointer;
	void operator()(pointer _Ptr) noexcept
		{	
		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_Ptr));
		_Al.deallocate(_Ptr, 1);
		}
	};

template<class _Alloc>
	using _Unique_ptr_alloc = unique_ptr<typename _Alloc::value_type, _Allocator_deleter<_Alloc>>;

template<class _Alloc,
	class... _Args>
	_Unique_ptr_alloc<_Alloc> _Make_unique_alloc(_Alloc& _Al, _Args&&... _Vals)
	{	
	auto _Ptr = _Al.allocate(1);
	try {
		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Ptr), ::std:: forward<_Args>(_Vals)...);
	} catch (...) {
		_Al.deallocate(_Ptr, 1);
	throw;
	}

	return (_Unique_ptr_alloc<_Alloc>(_Ptr, _Allocator_deleter<_Alloc>{_Al}));
	}

template<class _Ty,
	class _Dx,
	enable_if_t<_Is_swappable<_Dx>::value, int> = 0>
	void swap(unique_ptr<_Ty, _Dx>& _Left, unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
	typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
	typedef common_type_t<_Ptr1, _Ptr2> _Common;
	return (less<_Common>()(_Left.get(), _Right.get()));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	[[nodiscard]] bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left, const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator==(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t) noexcept
	{	
	return (!_Left);
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator==(nullptr_t, const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!_Right);
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator!=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator!=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator<(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left.get(), _Right));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator<(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left, _Right.get()));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator>=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator>=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator>(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator>(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator<=(const unique_ptr<_Ty, _Dx>& _Left, nullptr_t _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	[[nodiscard]] bool operator<=(nullptr_t _Left, const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _OutTy,
	class _PxTy,
	class = void>
	struct _Can_stream_unique_ptr
		: false_type
	{};
template<class _OutTy,
	class _PxTy>
	struct _Can_stream_unique_ptr<_OutTy, _PxTy, void_t<
		decltype(::std:: declval<_OutTy>() << ::std:: declval<_PxTy>().get())>>
		: true_type
	{};

template<class _Elem,
	class _Traits,
	class _Yty,
	class _Dx,
	enable_if_t<_Can_stream_unique_ptr<basic_ostream<_Elem, _Traits>&, const unique_ptr<_Yty, _Dx>&>::value, int> = 0>
	basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Out, const unique_ptr<_Yty, _Dx>& _Px)
	{	
	_Out << _Px.get();
	return (_Out);
	}

		
enum class pointer_safety {	
	relaxed,
	preferred,
	strict
	};

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty * undeclare_reachable(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline pointer_safety get_pointer_safety() noexcept
	{	
	return (pointer_safety::relaxed);
	}

		
template<class _Ty = void>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef shared_ptr<_Ty> first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef shared_ptr<_Ty> second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	[[nodiscard]] bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	[[nodiscard]] bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	[[nodiscard]] bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef weak_ptr<_Ty> first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef weak_ptr<_Ty> second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	[[nodiscard]] bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	[[nodiscard]] bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	[[nodiscard]] bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Ty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<>
	struct owner_less<void>
	{	
	using is_transparent = int;

	template<class _Ty,
		class _Uty>
		[[nodiscard]] bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		[[nodiscard]] bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		[[nodiscard]] bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		[[nodiscard]] bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const noexcept
		{	
		return (_Left.owner_before(_Right));
		}
	};

	
template<class _Ty,
	class _Dx>
	struct hash<unique_ptr<_Ty, _Dx>>
		: _Conditionally_enabled_hash<unique_ptr<_Ty, _Dx>,
			is_default_constructible_v<hash<typename unique_ptr<_Ty, _Dx>::pointer>>>
	{	
	static size_t _Do_hash(const unique_ptr<_Ty, _Dx>& _Keyval)
			noexcept(_Is_nothrow_hashable<typename unique_ptr<_Ty, _Dx>::pointer>::value) 
		{	
		return (hash<typename unique_ptr<_Ty, _Dx>::pointer>{}(_Keyval.get()));
		}
	};

template<class _Ty>
	struct hash<shared_ptr<_Ty>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef shared_ptr<_Ty> argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const shared_ptr<_Ty>& _Keyval) const noexcept
		{	
		return (hash<typename shared_ptr<_Ty>::element_type *>()(_Keyval.get()));
		}
	};

		
inline void * align(size_t _Bound, size_t _Size, void *& _Ptr, size_t& _Space) noexcept
	{	
	size_t _Off = static_cast<size_t>(reinterpret_cast<uintptr_t>(_Ptr) & (_Bound - 1));
	if (_Off != 0)
		{
		_Off = _Bound - _Off;	
		}

	if (_Space < _Off || _Space - _Off < _Size)
		{
		return (nullptr);
		}

	
	_Ptr = static_cast<char *>(_Ptr) + _Off;
	_Space -= _Off;
	return (_Ptr);
	}



		
extern "C" {
 void __cdecl _Lock_shared_ptr_spin_lock();
 void __cdecl _Unlock_shared_ptr_spin_lock();
}

		
struct _Shared_ptr_spin_lock
	{	
	_Shared_ptr_spin_lock()
		{	
		_Lock_shared_ptr_spin_lock();
		}

	~_Shared_ptr_spin_lock() noexcept
		{	
		_Unlock_shared_ptr_spin_lock();
		}
	};

template<class _Ty>
	[[nodiscard]] inline bool atomic_is_lock_free(const shared_ptr<_Ty> *)
	{	
	return (false);
	}

template<class _Ty>
	[[nodiscard]] inline shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> * _Ptr,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	shared_ptr<_Ty> _Result = *_Ptr;
	return (_Result);
	}

template<class _Ty>
	[[nodiscard]] inline shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> * _Ptr)
	{	
	return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
	}

template<class _Ty> inline
	void atomic_store_explicit(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	}

template<class _Ty> inline
	void atomic_store(shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
	{	
	::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	return (_Other);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> _Other)
	{	
	return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	shared_ptr<_Ty> _Old_exp;	
	_Shared_ptr_spin_lock _Lock;
	bool _Success = _Ptr->get() == _Exp->get()
		&& !_Ptr->owner_before(*_Exp)
		&& !_Exp->owner_before(*_Ptr);
	if (_Success)
		_Ptr->swap(_Value);
	else
		{	
		_Exp->swap(_Old_exp);
		*_Exp = *_Ptr;
		}
	return (_Success);
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
			shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong_explicit(
		shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong(
	shared_ptr<_Ty> * _Ptr, shared_ptr<_Ty> * _Exp,
		shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}















#line 3059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3066 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"
#line 3067 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\memory"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 






namespace std {
	
class __declspec(dllimport) _Facet_base
	{	
public:
	virtual  ~_Facet_base() noexcept
		{	
		}

	
	virtual void  _Incref() = 0;

	
	virtual _Facet_base *  _Decref() = 0;
	};

 


#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *);
 #line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xfacet"

 



#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << ((6 + 1))) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
	class collate;

struct __declspec(dllimport) _Crt_new_delete
	{	
  
































	};

class locale
	: public _Locbase<int>, public _Crt_new_delete
	{	
public:
	typedef int category;

			
	class __declspec(dllimport) id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						{
						_Id = static_cast<size_t>(++_Id_cnt);
						}
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

	public:
		 id(const id&) = delete;
		id&  operator=(const id&) = delete;
		};

	class _Locimp;

			
	class __declspec(dllimport) facet
		: public _Facet_base, public _Crt_new_delete
		{	
	public:
		static size_t __cdecl _Getcat(const facet ** = nullptr,
			const locale * = nullptr)
			{	
			return (static_cast<size_t>(-1));
			}

		virtual void  _Incref() override
			{	
			_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Myrefs));
			}

		virtual _Facet_base * _Decref() override
			{	
			if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Myrefs)) == 0)
				{
				return (this);
				}

			return (nullptr);
			}

	private:
		_Atomic_counter_t _Myrefs;	

	protected:
		explicit  facet(size_t _Initrefs = 0)
			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	
			{	
			}

		virtual  ~facet() noexcept
			{	
			}

	public:
		 facet(const facet&) = delete;
		facet&  operator=(const facet&) = delete;
		};

			
	class __declspec(dllimport) _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp() noexcept
		{	
		_Locimp_dtor(this);
		}

	private:
		static  _Locimp *__cdecl
			_New_Locimp(bool _Transparent = false);
		static  _Locimp *__cdecl
			_New_Locimp(const _Locimp& _Right);

		static  void __cdecl
			_Locimp_dtor(_Locimp *);
		static  void __cdecl
			_Locimp_Addfac(_Locimp *, facet *, size_t);	
		static void __cdecl
			_Locimp_ctor(_Locimp *, const _Locimp&);

		friend locale;

		 _Locimp(bool _Transparent)
			: locale::facet(1), _Facetvec(nullptr), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

public:
		_Locimp&  operator=(const _Locimp&) = delete;
		};

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const auto& _Coll_fac = use_facet<::std:: collate<_Elem>>(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = none;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != nullptr)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			_Ptr->_Catmask = none;
			_Ptr->_Name = "*";
			}
		}

	locale(_Uninitialized)
		{	
		}

	locale(const locale& _Right) noexcept
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() noexcept
		: _Ptr(_Init(true))
		{	
		}

 
	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj;
					_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
					_Lobj._Addcats(_Loc._Ptr->_Catmask,
						_Loc.name().c_str());
					_Lobj._Addcats(_Other._Ptr->_Catmask,
						_Other.name().c_str());
					_Ptr->_Catmask = _Loc._Ptr->_Catmask
						| _Other._Ptr->_Catmask;
					_Ptr->_Name = _Lobj._Getname();
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}
		}

private:
	void _Construct(const string &_Str,
		category _Cat)
		{	
		bool _Bad = false;
		_Init();
		if (_Cat != none)
			{	
			try {
				{ _Locinfo _Lobj(_Cat, _Str.c_str());
					if (_Badname(_Lobj))
						_Bad = true;
					else
						{	
						_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
						_Ptr->_Catmask = _Cat;
						_Ptr->_Name = _Str.c_str();
						}
				}
			} catch (...) {
			delete _Ptr->_Decref();
			throw;
			}
			}

		if (_Bad)
			{	
			delete _Ptr->_Decref();
			_Xruntime_error("bad locale name");
			}
		}

public:
	explicit locale(const char *_Locname,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		
		
		if (_Locname == nullptr)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		
		
		if (_Locname == nullptr)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(_Locimp::_New_Locimp())
		{	
		_Construct(_Str, _Cat);
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		_Construct(_Str, _Cat);
		}
 #line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

	~locale() noexcept
		{	
		if (_Ptr != nullptr)
			delete _Ptr->_Decref();
		}

	locale& operator=(const locale& _Right) noexcept
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete _Ptr->_Decref();
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}

	string name() const
		{	
		return (_Ptr == nullptr ? string() : _Ptr->_Name.c_str());
		}

	  const char *c_str() const
		{	
		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : nullptr;	
		if (_Facptr != nullptr || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr0 = _Getgloballocale();
			return (_Id < _Ptr0->_Facetcount
				? _Ptr0->_Facetvec[_Id]	
				: nullptr);	
			}
		}

	[[nodiscard]] bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| (name().compare("*") != 0
				&& name().compare(_Loc.name()) == 0));
		}

	[[nodiscard]] bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static  const locale& __cdecl
		classic();	

	static  locale __cdecl
		global(const locale&);	

	static  locale __cdecl
		empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

	static  _Locimp *__cdecl
		_Init(bool _Do_incref = false);	
	static  _Locimp *__cdecl
		_Getgloballocale();
	static  void __cdecl
		_Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		
template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = nullptr;

template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		const size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf == nullptr)
			{
			if (_Psave != nullptr)
				{
				_Pf = _Psave;	
				}
			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))
				{
 
				throw bad_cast{};	
 

#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
				}
			else
				{	
				auto _Pfmod = const_cast<locale::facet *>(_Psave);
				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

 

#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
				_Facet_Register(_Pfmod);
 #line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

				_Pfmod->_Incref();
				_Facetptr<_Facet>::_Psave = _Psave;
				_Pf = _Psave;

				(void) _Psave_guard.release();
				}
			}

		return (static_cast<const _Facet&>(*_Pf));	
	}
	}	

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, (void)++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			while (_Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0])
				{	
				++_Off;
				}

			if (_Str[_Field] != '\0')
				{
				_Off += _Str[_Field];	
				}
			else if (_Ptr[_Off += _Column] == _Ptr[0] || _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				{
				_Str[_Field] = (char)(_Column < 127 ? _Column : 127);	
				}
			else
				{
				_Prefix = true;	
				}
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		
template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 629 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		
template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		
template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;

	_Elem *_Ptrdest = (_Elem *)calloc(_Count, sizeof (_Elem));
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

	if (!_Ptrdest)
		_Xbad_alloc();

	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

	if (!_Ptrdest)
		_Xbad_alloc();
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};

	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		{
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			{
			break;
			}
		}

	++_Wchars;	

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Wchars, sizeof (wchar_t));
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

	if (!_Ptrdest)
		{
		_Xbad_alloc();
		}

	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		{
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			{
			break;
			}
		}

	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		
class __declspec(dllimport) codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const noexcept
		{	
		return (do_always_noconv());
		}

	int  max_length() const noexcept
		{	
		return (do_max_length());
		}

	int  encoding() const noexcept
		{	
		return (do_encoding());
		}

	 ~codecvt_base() noexcept
		{	
		}

protected:
	virtual bool  do_always_noconv() const noexcept
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept
		{	
		return (1);
		}

	virtual int  do_encoding() const noexcept
		{	
		return (1);	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual bool  do_always_noconv() const noexcept
		{	
		return (is_same_v<_Byte, _Elem>);
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1;
		_Mid2 = _First2;
		if (is_same_v<_Byte, _Elem>)
			{
			return (noconv);	
			}

		
		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
			{
			*_Mid2 = (_Elem)*_Mid1;
			}

		return (ok);
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1;
		_Mid2 = _First2;
		if (is_same_v<_Byte, _Elem>)
			{
			return (noconv);	
			}

		
		for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
			{
			*_Mid2 = (_Byte)*_Mid1;
			}

		return (ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (ok);	
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (static_cast<int>(_Min_value(_Count, static_cast<size_t>(_Last1 - _First1)))); 
		}
	};

		





template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;





		
enum _Codecvt_mode {
	_Consume_header = 4,
	_Generate_header = 2
	};

		
template<>
	class __declspec(dllimport) codecvt<char16_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char16_t, char, _Mbstatet> _Mybase;
	typedef char16_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0x10ffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra, _Nskip;

			if (*_Pstate > 1)
				{
				if (_By < 0x80 || 0xc0 <= _By)
					{
					return (_Mybase::error);	
					}

				
				++_Mid1;
				*_Mid2++ = (_Elem)(*_Pstate | (_By & 0x3f));
				*_Pstate = 1;
				continue;
				}

			if (_By < 0x80)
				{
				_Ch = _By;
				_Nextra = 0;
				}
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x1f);
				_Nextra = 1;
				}
			else if (_By < 0xf0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x0f);
				_Nextra = 2;
				}
			else if (_By < 0xf8)
				{
				_Ch = static_cast<unsigned long>(_By & 0x07);
				_Nextra = 3;
				}
			else
				{
				_Ch = static_cast<unsigned long>(_By & 0x03);
				_Nextra = _By < 0xfc ? 4 : 5;
				}

			_Nskip = _Nextra < 3 ? 0 : 1;	
			_First1 = _Mid1;	

			if (_Nextra == 0)
				{
				++_Mid1;
				}
			else if (_Last1 - _Mid1 < _Nextra + 1 - _Nskip)
				{
				break;	
				}
			else
				{
				for (++_Mid1; _Nskip < _Nextra; --_Nextra, ++_Mid1)
					{
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						{
						return (_Mybase::error);	
						}
					else
						{
						_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

			if (0 < _Nskip)
				{
				_Ch <<= 6;	
				}

			if ((_Maxcode < 0x10ffff ? _Maxcode : 0x10ffff) < _Ch)
				{
				return (_Mybase::error);	
				}

			if (0xffff < _Ch)
				{	
				unsigned short _Ch0 =
					(unsigned short)(0xd800 | (_Ch >> 10) - 0x0040);

				*_Mid2++ = (_Elem)_Ch0;
				*_Pstate = (unsigned short)(0xdc00 | (_Ch & 0x03ff));
				continue;
				}

			if (_Nskip != 0)
				{
				if (_Mid1 == _Last1)
					{	
					_Mid1 = _First1;
					break;
					}

				if ((_By = (unsigned char)*_Mid1++) < 0x80 || 0xc0 <= _By)
					{
					return (_Mybase::error);	
					}

				_Ch |= _By & 0x3f;	
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}

					return (_Ans);
					}
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned long _Ch;
			const unsigned short _Ch1 = (unsigned short)*_Mid1;
			bool _Save = false;

			if (1 < *_Pstate)
				{	
				if (_Ch1 < 0xdc00 || 0xe000 <= _Ch1)
					return (_Mybase::error);	
				_Ch = static_cast<unsigned long>((*_Pstate << 10) | (_Ch1 - 0xdc00));
				}
			else if (0xd800 <= _Ch1 && _Ch1 < 0xdc00)
				{	
				_Ch = static_cast<unsigned long>((_Ch1 - 0xd800 + 0x0040) << 10);
				_Save = true;	
				}
			else
				_Ch = _Ch1;	

			_Byte _By;
			int _Nextra;

			if (_Ch < 0x0080)
				{
				_By = (_Byte)_Ch;
				_Nextra = 0;
				}
			else if (_Ch < 0x0800)
				{
				_By = (_Byte)(0xc0 | _Ch >> 6);
				_Nextra = 1;
				}
			else if (_Ch < 0x10000)
				{
				_By = (_Byte)(0xe0 | _Ch >> 12);
				_Nextra = 2;
				}
			else
				{
				_By = (_Byte)(0xf0 | _Ch >> 18);
				_Nextra = 3;
				}

			int _Nput = _Nextra < 3 ? _Nextra + 1 : _Save ? 1 : 3;

			if (_Last2 - _Mid2 < _Nput)
				{
				break;	
				}

			if (*_Pstate == 0 && (_Mode & _Generate_header) != 0)
				{
				if (_Last2 - _Mid2 < 3 + _Nput)
					{
					break;	
					}

				
				*_Mid2++ = (_Byte)(unsigned char)0xef;
				*_Mid2++ = (_Byte)(unsigned char)0xbb;
				*_Mid2++ = (_Byte)(unsigned char)0xbf;
				}

			++_Mid1;
			if (_Save || _Nextra < 3)
				{	
				*_Mid2++ = _By;
				--_Nput;
				}

			for (; 0 < _Nput; --_Nput)
				{
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}

			*_Pstate = (unsigned short)(_Save ? _Ch >> 10 : 1);
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		unsigned short *_Pstate = (unsigned short *)&_State;
		_Mid2 = _First2;

		return (1 < *_Pstate
			? _Mybase::error : _Mybase::ok);	
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		while (_Wchars < _Count && _First1 != _Last1)
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;
			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
			if (_Result == _Mybase::noconv)
				{
				_Wchars += static_cast<size_t>(_Last1 - _First1);
				break;
				}

			if (_Result == _Mybase::ok)
				{
				if (_Mid2 == &_Ch + 1)
					{
					++_Wchars;	
					}

				_First1 = _Mid1;
				continue;
				}

			break;	
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return ((_Mode & _Consume_header) != 0 ? 9	
			: (_Mode & _Generate_header) != 0 ? 7	
			: 6);	
		}

	virtual int do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<char32_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef codecvt<char32_t, char, _Mbstatet> _Mybase;
	typedef char32_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(0xffffffff), _Mode(_Consume_header)
		{	
		_Init(_Lobj);
		}

	 codecvt(const _Locinfo& _Lobj, unsigned long _Maxcode_arg,
		_Codecvt_mode _Mode_arg, size_t _Refs = 0)
		: codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			unsigned char _By = (unsigned char)*_Mid1;
			unsigned long _Ch;
			int _Nextra;

			if (_By < 0x80)
				{
				_Ch = _By;
				_Nextra = 0;
				}
			else if (_By < 0xc0)
				{	
				++_Mid1;
				return (_Mybase::error);
				}
			else if (_By < 0xe0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x1f);
				_Nextra = 1;
				}
			else if (_By < 0xf0)
				{
				_Ch = static_cast<unsigned long>(_By & 0x0f);
				_Nextra = 2;
				}
			else if (_By < 0xf8)
				{
				_Ch = static_cast<unsigned long>(_By & 0x07);
				_Nextra = 3;
				}
			else
				{
				_Ch = static_cast<unsigned long>(_By & 0x03);
				_Nextra = _By < 0xfc ? 4 : 5;
				}

			if (_Nextra == 0)
				{
				++_Mid1;
				}
			else if (_Last1 - _Mid1 < _Nextra + 1)
				{
				break;	
				}
			else
				{
				for (++_Mid1; 0 < _Nextra; --_Nextra, ++_Mid1)
					{
					if ((_By = (unsigned char)*_Mid1) < 0x80 || 0xc0 <= _By)
						{
						return (_Mybase::error);	
						}
					else
						{
						_Ch = _Ch << 6 | (_By & 0x3f);
						}
					}
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;

				if ((_Mode & _Consume_header) != 0 && _Ch == 0xfeff)
					{	
					const result _Ans = do_in(_State, _Mid1, _Last1, _Mid1,
						_First2, _Last2, _Mid2);

					if (_Ans == _Mybase::partial)
						{	
						*_Pstate = 0;
						_Mid1 = _First1;
						}
					return (_Ans);
					}
				}

			if (_Maxcode < _Ch)
				{
				return (_Mybase::error);	
				}

			*_Mid2++ = (_Elem)_Ch;
			}

		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		char *_Pstate = (char *)&_State;
		_Mid1 = _First1;
		_Mid2 = _First2;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{	
			_Byte _By;
			int _Nextra;
			unsigned long _Ch = (unsigned long)*_Mid1;

			if (_Maxcode < _Ch)
				return (_Mybase::error);

			if (_Ch < 0x0080)
				{
				_By = (_Byte)_Ch;
				_Nextra = 0;
				}
			else if (_Ch < 0x0800)
				{
				_By = (_Byte)(0xc0 | _Ch >> 6);
				_Nextra = 1;
				}
			else if (_Ch < 0x00010000)
				{
				_By = (_Byte)(0xe0 | _Ch >> 12);
				_Nextra = 2;
				}
			else if (_Ch < 0x00200000)
				{
				_By = (_Byte)(0xf0 | _Ch >> 18);
				_Nextra = 3;
				}
			else if (_Ch < 0x04000000)
				{
				_By = (_Byte)(0xf8 | _Ch >> 24);
				_Nextra = 4;
				}
			else
				{
				_By = (_Byte)(0xfc | (_Ch >> 30 & 0x03));
				_Nextra = 5;
				}

			if (*_Pstate == 0)
				{	
				*_Pstate = 1;
				if ((_Mode & _Generate_header) != 0)
					{
					if (_Last2 - _Mid2 < 3 + 1 + _Nextra)
						{
						return (_Mybase::partial);	
						}

					
					*_Mid2++ = (_Byte)(unsigned char)0xef;
					*_Mid2++ = (_Byte)(unsigned char)0xbb;
					*_Mid2++ = (_Byte)(unsigned char)0xbf;
					}
				}

			if (_Last2 - _Mid2 < 1 + _Nextra)
				{
				break;	
				}

			++_Mid1;
			for (*_Mid2++ = _By; 0 < _Nextra; )
				{
				*_Mid2++ = (_Byte)((_Ch >> 6 * --_Nextra & 0x3f) | 0x80);
				}
			}
		return (_First1 == _Mid1 ? _Mybase::partial : _Mybase::ok);
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid2 = _First2;

		return (_Mybase::ok);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		size_t _Wchars = 0;
		_Statype _Mystate = _State;

		while (_Wchars < _Count && _First1 != _Last1)
			{	
			const _Byte *_Mid1;
			_Elem *_Mid2;
			_Elem _Ch;
			const auto _Result = do_in(_Mystate, _First1, _Last1, _Mid1, &_Ch, &_Ch + 1, _Mid2);
			if (_Result == _Mybase::noconv)
				{
				_Wchars += static_cast<size_t>(_Last1 - _First1);
				break;
				}

			if (_Result == _Mybase::ok)
				{
				if (_Mid2 == &_Ch + 1)
					{
					++_Wchars;	
					}

				_First1 = _Mid1;
				continue;
				}

			break;	
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? 9 : 6);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return ((_Mode & (_Consume_header | _Generate_header)) != 0
			? -1 : 0);	
		}

private:
	unsigned long _Maxcode;	
	_Codecvt_mode _Mode;	
	};

		
template<>
	class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Statype _Mystate{};
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		for (;;)
			{
			if (_Mid1 == _Last1)
				{
				return (ok);
				}

			if (_Mid2 == _Last2)
				{
				return (partial);
				}

			int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
			switch (_Bytes)
				{
				case -2:	
					return (partial);

				case -1:	
					return (error);

				case 0:	
					_Bytes = 1;
					

				default:	
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{
			if ((int)5 <= _Last2 - _Mid2)
				{
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else
					{
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			}

		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First2, _Last2);
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		_Adl_verify_range(_First1, _Last1);
		size_t _Wchars = 0;
		_Statype _Mystate{};

		while (_Wchars < _Count && _First1 != _Last1)
			{
			_Elem _Ch;
			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
			if (_Bytes < 0)
				{	
				break;
				}

			if (_Bytes == 0)
				{	
				_Bytes = 1;
				}

			
			_First1 += _Bytes;
			++_Wchars;
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() noexcept
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Statype _Mystate{};
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		for (;;)
			{
			if (_Mid1 == _Last1)
				{
				return (ok);
				}

			if (_Mid2 == _Last2)
				{
				return (partial);
				}

			int _Bytes = _Mbrtowc(reinterpret_cast<wchar_t *>(_Mid2), _Mid1,
				static_cast<size_t>(_Last1 - _Mid1), &_Mystate, &_Cvt);
			switch (_Bytes)
				{
				case -2:	
					return (partial);

				case -1:	
					return (error);

				case 0:	
					_Bytes = 1;
					

				default:	
					_Mid1 += _Bytes;
					++_Mid2;
					break;
				}
			}
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First1, _Last1);
		_Adl_verify_range(_First2, _Last2);
		_Mid1 = _First1;
		_Mid2 = _First2;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			{
			if ((int)5 <= _Last2 - _Mid2)
				{
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else
					{
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					{
					return (error);	
					}
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					break;
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
					++_Mid1;
					_Mid2 += _Bytes;
					}
				}
			}

		return (_Mid1 == _Last1 ? ok : partial);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Adl_verify_range(_First2, _Last2);
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			{
			_Ans = error;	
			}
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, static_cast<size_t>(_Bytes));
			_Mid2 += _Bytes;
			}

		return (_Ans);
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		_Adl_verify_range(_First1, _Last1);
		size_t _Wchars = 0;
		_Statype _Mystate{};

		while (_Wchars < _Count && _First1 != _Last1)
			{
			wchar_t _Ch;
			int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast<size_t>(_Last1 - _First1), &_Mystate, &_Cvt);
			if (_Bytes < 0)
				{	
				break;
				}

			if (_Bytes == 0)
				{	
				_Bytes = 1;
				}

			
			_First1 += _Bytes;
			++_Wchars;
			}

		return (static_cast<int>(_Min_value(static_cast<size_t>(2147483647), _Wchars)));
		}

	virtual bool  do_always_noconv() const noexcept override
		{	
		return (false);
		}

	virtual int  do_max_length() const noexcept override
		{	
		return (5);
		}

	virtual int  do_encoding() const noexcept override
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 2173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~codecvt_byname() noexcept
		{	
		}
	};

		
struct __declspec(dllimport) ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x04 | 0x02 | 0x01 | 0x100, alpha = 0x02 | 0x01 | 0x100,
		cntrl = 0x20, digit = 0x04, graph = 0x04 | 0x02 | 0x10 | 0x01 | 0x100,
		lower = 0x02, print = 0x04 | 0x02 | 0x10 | 0x40 | 0x01 | 0x100 | 0x80,
		punct = 0x10, space = 0x08 | 0x40 | 0x000, upper = 0x01,
		xdigit = 0x80, blank = 0x08 | 0x40 | 0x000 | 0x000};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base() noexcept
		{	
		}
	};

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
			}

		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			{
			return (_Ch);
			}

		return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				{
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
				}
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			{
			return (_Ch);
			}

		return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				{
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
				}
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, static_cast<_Elem *>(nullptr), _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Maklocchr(*_First, static_cast<_Elem *>(nullptr), _Cvt);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			{
			return ('\0');
			}

		if ((_Byte = _Maklocbyte(_Ch, _Cvt)) == '\0')
			{
			return (_Dflt);
			}

		return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		





template<class _Elem>
	locale::id ctype<_Elem>::id;





		
template<>
	class __declspec(dllimport) ctype<char>
	: public ctype_base
	{	
public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = nullptr,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}

		_Tidy();	
		if (_Table != nullptr)
			{	
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		else
			{	
			_Ctype._Table = classic_table();
			_Ctype._Delfl = 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const noexcept
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() noexcept
		{	
		return (::std:: use_facet<ctype>(locale::classic()).table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype() noexcept
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			:: free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] _Ctype._Table;

		:: free(_Ctype._LocaleName);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		:: memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		:: memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class __declspec(dllimport) ctype<wchar_t>
	: public ctype_base
	{	
public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towlower(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towupper(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Dowiden(*_First);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class __declspec(dllimport) ctype<unsigned short>
	: public ctype_base
	{	
public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			{
			*_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));
			}

		return (2);
		}

protected:
	virtual  ~ctype() noexcept
		{	
		if (_Ctype._Delfl)
			:: free((void *)_Ctype._Table);

		:: free(_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && !is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		_Adl_verify_range(_First, _Last);
		while (_First != _Last && is(_Maskval, *_First))
			{
			++_First;
			}

		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towlower(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		_Adl_verify_range((const _Elem *)_First, _Last);
		for (; _First != _Last; ++_First)
			{
			*_First = _Towupper(*_First, &_Ctype);
			}

		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)((wint_t)(0xFFFF)) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Dowiden(*_First);
			}

		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		_Adl_verify_range(_First, _Last);
		for (; _First != _Last; ++_First, ++_Dest)
			{
			*_Dest = _Donarrow(*_First, _Dflt);
			}

		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 3207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;
  #line 3257 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
 #line 3258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"
#line 3265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocale"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cerrno"

#pragma once






#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cerrno"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\cerrno"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
struct once_flag
	{	
	constexpr once_flag() noexcept
		: _Opaque(nullptr)
		{	
		}

	once_flag(const once_flag&) = delete;
	once_flag& operator=(const once_flag&) = delete;

	void *_Opaque;
	};

typedef int (__stdcall *_Execute_once_fp_t)(void *, void *, void **);
 int __cdecl _Execute_once(
	once_flag& _Flag, _Execute_once_fp_t _Callback, void *_Pv) noexcept;

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xcall_once.h"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"

#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
	
enum class errc
	{	
	address_family_not_supported = 102, 
	address_in_use = 100, 
	address_not_available = 101, 
	already_connected = 113, 
	argument_list_too_long = 7, 
	argument_out_of_domain = 33, 
	bad_address = 14, 
	bad_file_descriptor = 9, 
	bad_message = 104, 
	broken_pipe = 32, 
	connection_aborted = 106, 
	connection_already_in_progress = 103, 
	connection_refused = 107, 
	connection_reset = 108, 
	cross_device_link = 18, 
	destination_address_required = 109, 
	device_or_resource_busy = 16, 
	directory_not_empty = 41, 
	executable_format_error = 8, 
	file_exists = 17, 
	file_too_large = 27, 
	filename_too_long = 38, 
	function_not_supported = 40, 
	host_unreachable = 110, 
	identifier_removed = 111, 
	illegal_byte_sequence = 42, 
	inappropriate_io_control_operation = 25, 
	interrupted = 4, 
	invalid_argument = 22, 
	invalid_seek = 29, 
	io_error = 5, 
	is_a_directory = 21, 
	message_size = 115, 
	network_down = 116, 
	network_reset = 117, 
	network_unreachable = 118, 
	no_buffer_space = 119, 
	no_child_process = 10, 
	no_link = 121, 
	no_lock_available = 39, 
	no_message_available = 120, 
	no_message = 122, 
	no_protocol_option = 123, 
	no_space_on_device = 28, 
	no_stream_resources = 124, 
	no_such_device_or_address = 6, 
	no_such_device = 19, 
	no_such_file_or_directory = 2, 
	no_such_process = 3, 
	not_a_directory = 20, 
	not_a_socket = 128, 
	not_a_stream = 125, 
	not_connected = 126, 
	not_enough_memory = 12, 
	not_supported = 129, 
	operation_canceled = 105, 
	operation_in_progress = 112, 
	operation_not_permitted = 1, 
	operation_not_supported = 130, 
	operation_would_block = 140, 
	owner_dead = 133, 
	permission_denied = 13, 
	protocol_error = 134, 
	protocol_not_supported = 135, 
	read_only_file_system = 30, 
	resource_deadlock_would_occur = 36, 
	resource_unavailable_try_again = 11, 
	result_out_of_range = 34, 
	state_not_recoverable = 127, 
	stream_timeout = 137, 
	text_file_busy = 139, 
	timed_out = 138, 
	too_many_files_open_in_system = 23, 
	too_many_files_open = 24, 
	too_many_links = 31, 
	too_many_symbolic_link_levels = 114, 
	value_too_large = 132, 
	wrong_protocol_type = 136 
	};

}



#pragma warning(pop)
#pragma pack(pop)

#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xerrc.h"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
enum class io_errc {	
	stream = 1
	};

		
template<class _Enum>
	struct is_error_code_enum
		: false_type
	{	
	};

template<>
	struct is_error_code_enum<io_errc>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_error_code_enum_v = is_error_code_enum<_Ty>::value;

		
template<class _Enum>
	struct is_error_condition_enum
		: false_type
	{	
	};

template<>
	struct is_error_condition_enum<errc>
		: true_type
	{	
	};

template<class _Ty>
	inline constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Ty>::value;

class error_code;
class error_condition;
[[nodiscard]] error_code make_error_code(errc) noexcept;
[[nodiscard]] error_code make_error_code(io_errc) noexcept;
[[nodiscard]] error_condition make_error_condition(errc) noexcept;
[[nodiscard]] error_condition make_error_condition(io_errc) noexcept;

		
class error_category;

[[nodiscard]] const error_category& generic_category() noexcept;
[[nodiscard]] const error_category& iostream_category() noexcept;
[[nodiscard]] const error_category& system_category() noexcept;

class __declspec(novtable) error_category
	{	
public:
	 error_category() noexcept	
		{	
		_Addr = reinterpret_cast<uintptr_t>(this);
		}

	virtual ~error_category() noexcept
		{
		}

	[[nodiscard]] virtual const char *name() const noexcept = 0;

	[[nodiscard]] virtual string message(int _Errval) const = 0;

	[[nodiscard]] virtual error_condition default_error_condition(int _Errval) const noexcept;

	[[nodiscard]] virtual bool equivalent(int _Errval, const error_condition& _Cond) const noexcept;

	[[nodiscard]] virtual bool equivalent(const error_code& _Code, int _Errval) const noexcept;

	[[nodiscard]] bool operator==(const error_category& _Right) const noexcept
		{	
		return (_Addr == _Right._Addr);
		}

	[[nodiscard]] bool operator!=(const error_category& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] bool operator<(const error_category& _Right) const noexcept
		{	
		return (_Addr < _Right._Addr);
		}

	error_category(const error_category&) = delete;
	error_category& operator=(const error_category&) = delete;

protected:
	uintptr_t _Addr;

	enum : uintptr_t
		{	
		_Future_addr = 1,
		_Generic_addr = 3,
		_Iostream_addr = 5,
		_System_addr = 7
		};
	};

		
class error_code
	{	
public:
	error_code() noexcept
		: _Myval(0),
		_Mycat(&system_category())
		{	
		}

	error_code(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val),
		_Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code(_Enum _Errcode) noexcept
		: _Myval(0),
		_Mycat(nullptr)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum,
		enable_if_t<is_error_code_enum_v<_Enum>, int> = 0>
		error_code& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	[[nodiscard]] int value() const noexcept
		{	
		return (_Myval);
		}

	[[nodiscard]] const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	[[nodiscard]] error_condition default_error_condition() const noexcept;

	[[nodiscard]] string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	error_condition() noexcept
		: _Myval(0),
		_Mycat(&generic_category())
		{	
		}

	error_condition(int _Val, const error_category& _Cat) noexcept
		: _Myval(_Val),
		_Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition(_Enum _Errcode) noexcept
		: _Myval(0),
		_Mycat(nullptr)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) noexcept
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum,
		enable_if_t<is_error_condition_enum_v<_Enum>, int> = 0>
		error_condition& operator=(_Enum _Errcode) noexcept
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear() noexcept
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	[[nodiscard]] int value() const noexcept
		{	
		return (_Myval);
		}

	[[nodiscard]] const error_category& category() const noexcept
		{	
		return (*_Mycat);
		}

	[[nodiscard]] string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const noexcept
		{	
		return (value() != 0);
		}

private:
	int _Myval;	
	const error_category * _Mycat;	
	};

		
[[nodiscard]] inline bool operator==(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

[[nodiscard]] inline bool operator==(const error_code& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

[[nodiscard]] inline bool operator==(const error_condition& _Left, const error_code& _Right) noexcept
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

[[nodiscard]] inline bool operator==(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category() == _Right.category()
		&& _Left.value() == _Right.value());
	}

		
[[nodiscard]] inline bool operator!=(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

[[nodiscard]] inline bool operator!=(const error_code& _Left, const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

[[nodiscard]] inline bool operator!=(const error_condition& _Left, const error_code& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

[[nodiscard]] inline bool operator!=(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
[[nodiscard]] inline bool operator<(const error_code& _Left, const error_code& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

[[nodiscard]] inline bool operator<(const error_condition& _Left, const error_condition& _Right) noexcept
	{	
	return (_Left.category() < _Right.category()
		|| (_Left.category() == _Right.category()
			&& _Left.value() < _Right.value()));
	}

		
[[nodiscard]] inline error_condition error_category::default_error_condition(int _Errval) const noexcept
	{	
	return (error_condition(_Errval, *this));
	}

[[nodiscard]] inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

[[nodiscard]] inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
[[nodiscard]] inline error_condition error_code::default_error_condition() const noexcept
	{	
	return (category().default_error_condition(value()));
	}

		
[[nodiscard]] inline error_code make_error_code(errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, generic_category()));
	}

[[nodiscard]] inline error_code make_error_code(io_errc _Errno) noexcept
	{	
	return (error_code((int)_Errno, iostream_category()));
	}

		
[[nodiscard]] inline error_condition make_error_condition(errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, generic_category()));
	}

[[nodiscard]] inline error_condition make_error_condition(io_errc _Errno) noexcept
	{	
	return (error_condition((int)_Errno, iostream_category()));
	}

		
template<>
	struct hash<error_code>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef error_code argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const error_code& _Keyval) const noexcept
		{	
		return (hash<int>{}(_Keyval.value()));
		}
	};

template<>
	struct hash<error_condition>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef error_condition argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const error_condition& _Keyval) const noexcept
		{	
		return (hash<int>{}(_Keyval.value()));
		}
	};

		
class _System_error
	: public runtime_error
	{	
private:
	static string _Makestr(error_code _Errcode, string _Message)
		{	
		if (!_Message.empty())
			{
			_Message.append(": ");
			}

		_Message.append(_Errcode.message());
		return (_Message);
		}

protected:
	_System_error(error_code _Errcode, const string& _Message)
		: runtime_error(_Makestr(_Errcode, _Message)),
		_Mycode(_Errcode)
		{	
		}

	error_code _Mycode;	
	};

class system_error
	: public _System_error
	{	
private:
	typedef _System_error _Mybase;

public:
	system_error(error_code _Errcode)
		: _Mybase(_Errcode, "")
		{	
		}

	system_error(error_code _Errcode, const string& _Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(error_code _Errcode, const char *_Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat)
		: _Mybase(error_code(_Errval, _Errcat), "")
		{	
		}

	system_error(int _Errval, const error_category& _Errcat, const string& _Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat, const char *_Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	[[nodiscard]] const error_code& code() const noexcept
		{	
		return (_Mycode);
		}

 

 





#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
	};

 const char *__cdecl _Syserror_map(int);
 int __cdecl _Winerror_map(int);
 unsigned long __cdecl _Winerror_message(
	unsigned long _Message_id, char *_Narrow, unsigned long _Size);

		
class _Generic_error_category
	: public error_category
	{	
public:
	_Generic_error_category() noexcept
		{	
		_Addr = _Generic_addr;
		}

	[[nodiscard]] virtual const char *name() const noexcept override
		{	
		return ("generic");
		}

	[[nodiscard]] virtual string message(int _Errcode) const override
		{	
		return (_Syserror_map(_Errcode));
		}
	};

		
class _Iostream_error_category
	: public _Generic_error_category
	{	
public:
	_Iostream_error_category() noexcept
		{	
		_Addr = _Iostream_addr;
		}

	[[nodiscard]] virtual const char *name() const noexcept override
		{	
		return ("iostream");
		}

	[[nodiscard]] virtual string message(int _Errcode) const override
		{	
		if (_Errcode == (int)io_errc::stream)
			{
			return ("iostream stream error");
			}
		else
			{
			return (_Generic_error_category::message(_Errcode));
			}
		}
	};

		
class _System_error_category
	: public error_category
	{	
public:
	_System_error_category() noexcept
		{	
		_Addr = _System_addr;
		}

	[[nodiscard]] virtual const char *name() const noexcept override
		{	
		return ("system");
		}

	[[nodiscard]] virtual string message(int _Errcode) const override
		{	
		const unsigned long _Size = 32767;
		string _Narrow(_Size, '\0');

		const unsigned long _Val = _Winerror_message(static_cast<unsigned long>(_Errcode), &_Narrow[0], _Size);
		if (_Val == 0)
			{
			_Narrow = "unknown error";
			}
		else
			{
			_Narrow.resize(_Val);
			}

		_Narrow.shrink_to_fit();
		return (_Narrow);
		}

	[[nodiscard]] virtual error_condition default_error_condition(int _Errval) const noexcept override
		{	
		const int _Posv = _Winerror_map(_Errval);
		if (_Posv == 0)
			{
			return (error_condition(_Errval, system_category()));
			}
		else
			{
			return (error_condition(_Posv, generic_category()));
			}
		}
	};























template<class _Ty> inline
	int __stdcall _Immortalize_impl(void *, void * _Storage_ptr, void **) noexcept
	{	
	::new (_Storage_ptr) _Ty();
	return (1);
	}

template<class _Ty> inline
	_Ty& _Immortalize()
	{	
	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
	static void * _Flag = nullptr;
	static aligned_union_t<1, _Ty> _Storage;
	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)
		{	
		::std:: terminate();
		}

	return (reinterpret_cast<_Ty&>(_Storage));
	}
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"

[[nodiscard]] inline const error_category& generic_category() noexcept
	{	
	return (_Immortalize<_Generic_error_category>());
	}

[[nodiscard]] inline const error_category& iostream_category() noexcept
	{	
	return (_Immortalize<_Iostream_error_category>());
	}

[[nodiscard]] inline const error_category& system_category() noexcept
	{	
	return (_Immortalize<_System_error_category>());
	}
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\system_error"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\share.h"







#pragma once




#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\share.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static constexpr _Fmtflags skipws = (_Fmtflags)0x0001;
	static constexpr _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static constexpr _Fmtflags uppercase = (_Fmtflags)0x0004;
	static constexpr _Fmtflags showbase = (_Fmtflags)0x0008;
	static constexpr _Fmtflags showpoint = (_Fmtflags)0x0010;
	static constexpr _Fmtflags showpos = (_Fmtflags)0x0020;
	static constexpr _Fmtflags left = (_Fmtflags)0x0040;
	static constexpr _Fmtflags right = (_Fmtflags)0x0080;
	static constexpr _Fmtflags internal = (_Fmtflags)0x0100;
	static constexpr _Fmtflags dec = (_Fmtflags)0x0200;
	static constexpr _Fmtflags oct = (_Fmtflags)0x0400;
	static constexpr _Fmtflags hex = (_Fmtflags)0x0800;
	static constexpr _Fmtflags scientific = (_Fmtflags)0x1000;
	static constexpr _Fmtflags fixed = (_Fmtflags)0x2000;

	static constexpr _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static constexpr _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static constexpr _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static constexpr _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static constexpr _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static constexpr _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static constexpr _Iostate goodbit = (_Iostate)0x0;
	static constexpr _Iostate eofbit = (_Iostate)0x1;
	static constexpr _Iostate failbit = (_Iostate)0x2;
	static constexpr _Iostate badbit = (_Iostate)0x4;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static constexpr _Openmode in = (_Openmode)0x01;
	static constexpr _Openmode out = (_Openmode)0x02;
	static constexpr _Openmode ate = (_Openmode)0x04;
	static constexpr _Openmode app = (_Openmode)0x08;
	static constexpr _Openmode trunc = (_Openmode)0x10;
	static constexpr _Openmode _Nocreate = (_Openmode)0x40;
	static constexpr _Openmode _Noreplace = (_Openmode)0x80;
	static constexpr _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekbeg,
		_Seekcur,
		_Seekend
		};

	static constexpr _Seekdir beg = _Seekbeg;
	static constexpr _Seekdir cur = _Seekcur;
	static constexpr _Seekdir end = _Seekend;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class __declspec(dllimport) ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

 


#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);

 

#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

			
	class failure

		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}


 

 





#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
		};

			
	class __declspec(dllimport) Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init() noexcept
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	explicit  operator bool() const
		{	
		return (!fail());
		}

	[[nodiscard]] bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_State &= _Statmask;
		_Mystate = _State;
		const auto _Filtered = _State & _Except;
		if (_Filtered)
			{
			if (_Reraise)
				{
				throw;
				}

			const char * _Msg;
			if (_Filtered & ios_base::badbit)
				{
				_Msg = "ios_base::badbit set";
				}
			else if (_Filtered & ios_base::failbit)
				{
				_Msg = "ios_base::failbit set";
				}
			else
				{
				_Msg = "ios_base::eofbit set";
				}

			throw failure(_Msg);
			}
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

 




#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

	[[nodiscard]] iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		clear(rdstate() | _State, _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		clear(rdstate() | _State, false);
		}

 




#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

	[[nodiscard]] bool  good() const
		{	
		return (rdstate() == ios_base::goodbit);
		}

	[[nodiscard]] bool  eof() const
		{	
		return (rdstate() & ios_base::eofbit);
		}

	[[nodiscard]] bool  fail() const
		{	
		return (rdstate() & (ios_base::badbit | ios_base::failbit));
		}

	[[nodiscard]] bool  bad() const
		{	
		return (rdstate() & ios_base::badbit);
		}

	[[nodiscard]] iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = _Newexcept & _Statmask;
		clear(rdstate());
		}

 




#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"

	[[nodiscard]] fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		const fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = _Newfmtflags & _Fmtmask;
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl |= _Newfmtflags & _Fmtmask;
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		const ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (_Oldfmtflags & ~_Mask) | (_Newfmtflags & _Mask & _Fmtmask);
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl &= ~_Mask;
		}

	[[nodiscard]] streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		const streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	[[nodiscard]] streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		const streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	[[nodiscard]] locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	[[nodiscard]] static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	[[nodiscard]] long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	[[nodiscard]] void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != ::std:: addressof(_Other))
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = nullptr; _Ptr != nullptr; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != nullptr)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != nullptr;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base() noexcept	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl
		_Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = nullptr;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = nullptr;
		_Calls = nullptr;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		: public _Crt_new_delete
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(nullptr)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		: public _Crt_new_delete
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != nullptr; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = nullptr; _Ptr1 != nullptr; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == nullptr && _Ptr1->_Lo == 0 && _Ptr1->_Vp == nullptr)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != nullptr)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != nullptr; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete _Ptr1;
			}
		_Arr = nullptr;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != nullptr; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete _Pfa1;
			}
		_Calls = nullptr;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl
		_Ios_base_dtor(ios_base *);

public:
	ios_base(const ios_base&) = delete;
	ios_base& operator=(const ios_base&) = delete;
	};
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xiosbase"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		{	
		}

	 basic_streambuf(const basic_streambuf& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	basic_streambuf&  operator=(const basic_streambuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(basic_streambuf& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Elem *_Pfirst0 = pbase();
			_Elem *_Pnext0 = pptr();
			_Elem *_Pend = epptr();
			_Elem *_Gfirst0 = eback();
			_Elem *_Gnext0 = gptr();
			_Elem *_Gend = egptr();

			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Pfirst0, _Pnext0, _Pend);

			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Gfirst0, _Gnext0, _Gend);

			::std:: swap(_Plocale, _Right._Plocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf() noexcept
		{	
		delete _Plocale;
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

 







#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

 





#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

	basic_streambuf * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != nullptr && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

 







#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

	int_type  sungetc()
		{	
		return (gptr() != nullptr && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		}

	virtual void  _Unlock()
		{	
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != nullptr ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != nullptr ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(nullptr, nullptr);
		setg(nullptr, nullptr, nullptr);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr, streamsize _Count)
		{	
		const streamsize _Start_count = _Count;

		while (0 < _Count)
			{
			streamsize _Size = _Gnavail();
			if (0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(_Ptr, gptr(), static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				gbump(static_cast<int>(_Size));
				}
			else
				{
				const int_type _Meta = uflow();
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{
					break;	
					}

				
				*_Ptr++ = _Traits::to_char_type(_Meta);
				--_Count;
				}
			}

		return (_Start_count - _Count);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr, streamsize _Count)
		{	
		const streamsize _Start_count = _Count;
		while (0 < _Count)
			{
			streamsize _Size = _Pnavail();
			if (0 < _Size)
				{	
				if (_Count < _Size)
					{
					_Size = _Count;
					}

				_Traits::copy(pptr(), _Ptr, static_cast<size_t>(_Size));
				_Ptr += _Size;
				_Count -= _Size;
				pbump(static_cast<int>(_Size));
				}
			else if (_Traits::eq_int_type(_Traits::eof(), overflow(_Traits::to_int_type(*_Ptr))))
				{
				break;	
				}
			else
				{	
				++_Ptr;
				--_Count;
				}
			}

		return (_Start_count - _Count);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(-1));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(-1));
		}

	virtual basic_streambuf * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

protected:
	locale *_Plocale;	
	};

 

  
template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
  #line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

  



 #line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
	{	
public:
	using iterator_category = input_iterator_tag;
	using value_type = _Elem;
	using difference_type = typename _Traits::off_type;
	using pointer = const _Elem *;
	using reference = _Elem;

	using char_type = _Elem;
	using traits_type = _Traits;
	using streambuf_type = basic_streambuf<_Elem, _Traits>;
	using istream_type = basic_istream<_Elem, _Traits>;

	using int_type = typename traits_type::int_type;

	constexpr istreambuf_iterator() noexcept
		: _Strbuf(nullptr),
		_Got(true),
		_Val()
		{
		}

	istreambuf_iterator(streambuf_type * _Sb) noexcept
		: _Strbuf(_Sb),
		_Got(_Sb == nullptr),
		_Val()
		{	
		}

	istreambuf_iterator(istream_type& _Istr) noexcept
		: _Strbuf(_Istr.rdbuf()),
		_Got(_Strbuf == nullptr),
		_Val()
		{	
		}

private:
	class _Istreambuf_proxy
		{
	public:
		[[nodiscard]] _Elem operator*() const
			{
			return (_Keep);
			}
	private:
		friend istreambuf_iterator;
		_Istreambuf_proxy(streambuf_type * _Strbuf_, _Elem _Keep_)
			: _Strbuf(_Strbuf_),
			_Keep(_Keep_)
			{
			}

		streambuf_type * _Strbuf;
		_Elem _Keep;
		};

public:
	istreambuf_iterator(const _Istreambuf_proxy& _Px) noexcept
		: _Strbuf(_Px._Strbuf),
		_Got(_Strbuf == nullptr),
		_Val()
		{	
		}

	[[nodiscard]] _Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 

#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

		return (_Val);
		}

	istreambuf_iterator& operator++()
		{	
 

#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"

		_Inc();
		return (*this);
		}

	_Istreambuf_proxy operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Istreambuf_proxy _Tmp{_Strbuf, _Val};
		++*this;
		return (_Tmp);
		}

	[[nodiscard]] bool equal(const istreambuf_iterator& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return ((_Strbuf == nullptr && _Right._Strbuf == nullptr)
			|| (_Strbuf != nullptr && _Right._Strbuf != nullptr));
		}

private:
	void _Inc()
		{	
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			{
			_Strbuf = nullptr;
			_Got = true;
			}
		else
			{
			_Got = false;
			}
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = nullptr;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type * _Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	[[nodiscard]] inline bool operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits>
	[[nodiscard]] inline bool operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using char_type = _Elem;
	using traits_type = _Traits;
	using streambuf_type = basic_streambuf<_Elem, _Traits>;
	using ostream_type = basic_ostream<_Elem, _Traits>;

	ostreambuf_iterator(streambuf_type *_Sb) noexcept
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) noexcept
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	ostreambuf_iterator& operator=(_Elem _Right)
		{	
		if (_Strbuf == nullptr
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	[[nodiscard]] ostreambuf_iterator& operator*()
		{	
		return (*this);
		}

	ostreambuf_iterator& operator++()
		{	
		return (*this);
		}

	ostreambuf_iterator& operator++(int)
		{	
		return (*this);
		}

	[[nodiscard]] bool failed() const noexcept
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\streambuf"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

		

 
extern "C" {
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

extern  float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern  double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern  long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern  long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern  unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern  long long __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern  unsigned long long __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

namespace std {

		
inline double _Stodx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	double _Val = :: strtod(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: pow(10.0, static_cast<double>(_Pten));

	return (_Val);
	}

		
inline float _Stofx_v2(const char *_Str, char **_Endptr, int _Pten, int *_Perr)
	{	
	int& _Errno_ref = (*_errno());	
	const int _Orig = _Errno_ref;

	_Errno_ref = 0;
	float _Val = :: strtof(_Str, _Endptr);
	*_Perr = _Errno_ref;
	_Errno_ref = _Orig;

	if (_Pten != 0)
		_Val *= :: powf(10.0f, static_cast<float>(_Pten));

	return (_Val);
	}

		
template<class _Elem,
	size_t _Base_size> inline
	size_t _Find_elem(const _Elem (&_Base)[_Base_size], const _Elem _Ch)
	{	
		
	return (static_cast<size_t>(_Find_unchecked(_Base, _Base + (_Base_size - 1), _Ch) - _Base));
	}

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
	{	
	const size_t _Count = :: wcslen(_Ptr) + 1;

	wchar_t *_Ptrdest = (wchar_t *)calloc(_Count, sizeof (wchar_t));
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

	if (!_Ptrdest)
		_Xbad_alloc();
	:: wmemcpy(_Ptrdest, _Ptr, _Count);
	return (_Ptrdest);
	}

		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	 __declspec(dllimport) static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', static_cast<_Elem *>(nullptr), _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct() noexcept
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
		{	
		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);
		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);
		}

	void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
		{	
		_Dp = (_Elem)_Ptr->_W_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();
		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	

		_Grouping = nullptr;
		_Falsename = nullptr;
		_Truename = nullptr;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());
		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);
		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);
		} catch (...) {
		_Tidy();
		throw;
		}

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', static_cast<_Elem *>(nullptr), _Cvt);
			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);
			}
		else
			_Getvals((_Elem)0, _Ptr, _Cvt);
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		:: free((void *)_Grouping);
		:: free((void *)_Falsename);
		:: free((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~numpunct_byname() noexcept
		{	
		}
	};

		






template<class _Elem>
	 locale::id numpunct<_Elem>::id;




#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get() noexcept
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			bool& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Str(static_cast<size_t>(1), _Elem{});
			_Str += _Punct_fac.falsename();
			_Str.push_back(_Elem{});
			_Str += _Punct_fac.truename();	
			switch (_Getloctxt(_First, _Last, 2, _Str.c_str()))
				{
				case 0:
					_Val = false;
					break;
				case 1:
					_Val = true;
					break;
				default:
					_Val = false;
					_State = ios_base::failbit;
					break;
				}
			}
		else
			{	
			char _Ac[32];
			const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
			if (_Ac[0] == '\0')
				{	
					
					
					
					
					
				_Val = false;
				_State = ios_base::failbit;
				}
			else
				{
				char * _Ep;
				int _Errno;
				const long _Ans = :: _Stolx(_Ac, &_Ep, _Base, &_Errno);	
				if (_Ep == _Ac || _Errno != 0)
					{
					_Val = true;
					_State = ios_base::failbit;
					}
				else
					{
					_Val = _Ans != 0;
					if (_Ans != 0 && _Ans != 1)
						{
						_State = ios_base::failbit;
						}
					}
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			const bool _Minus = _Ac[0] == '-';
			const char * _Digits = _Ac;
			
			
			if (_Minus)
				{	
				++_Digits;
				}

			char * _Ep;
			int _Errno;
			const unsigned long _Tmp = :: _Stoulx(_Digits, &_Ep, _Base, &_Errno);	
			_Val = static_cast<unsigned short>(_Tmp);
			if (_Ep == _Digits || _Errno != 0 || _Tmp > 0xffff)
				{
				_State = ios_base::failbit;
				_Val = 0xffff;
				}
			else if (_Minus)
				{	
					
				_Val = static_cast<unsigned short>(0 - _Val);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		static_assert(sizeof(unsigned int) == sizeof(unsigned long),
			"Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)");
		unsigned long _Tmp;
		_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Tmp); 
		_Val = _Tmp;
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stolx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc()); 
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stoulx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			char * _Ep;
			int _Errno;
			_Val = :: _Stollx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long long& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(), _Iosbase.getloc());
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}







	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[(8 + 768 + 16)];
		int _Hexexp = 1000000000;
		const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0.0f;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = _Stofx_v2(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = 0.0f;
				}
			else if (_Hexexp != 1000000000 && _Hexexp != 0)
				{
				_Val = :: ldexpf(_Val, 4 * _Hexexp);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[(8 + 768 + 16)];
		int _Hexexp = 1000000000;
		const int _Base = _Getffld(_Ac, _First, _Last, _Iosbase, &_Hexexp);	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = 0.0;
			}
		else
			{
			int _Errno;
			char * _Ep;
			_Val = _Stodx_v2(_Ac, &_Ep, _Base, &_Errno);	
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = 0.0;
				}
			else if (_Hexexp != 1000000000 && _Hexexp != 0)
				{
				_Val = :: ldexp(_Val, 4 * _Hexexp);
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}


	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		static_assert(sizeof(double) == sizeof(long double),
			"Bad assumption: sizeof(double) == sizeof(long double).");
		double _Result;
		_First = num_get::do_get(_First, _Last, _Iosbase, _State, _Result); 
		_Val = _Result;
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		_Adl_verify_range(_First, _Last);
		char _Ac[32];
		const int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex, _Iosbase.getloc());	
		if (_Ac[0] == '\0')
			{	
			_State = ios_base::failbit;
			_Val = nullptr;
			}
		else
			{
			int _Errno;
			char * _Ep;

			_Val = reinterpret_cast<void *>(:: _Stoullx(_Ac, &_Ep, _Base, &_Errno));


#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
			if (_Ep == _Ac || _Errno != 0)
				{
				_State = ios_base::failbit;
				_Val = nullptr;
				}
			}

		if (_First == _Last)
			{
			_State |= ios_base::eofbit;
			}

		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();

		constexpr int _Numget_signoff = 22;
		constexpr int _Numget_xoff = 24;
		static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Loc);
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _Atoms[0])
			{	
			_Seendigit = true;
			++_First;
			if (_First != _Last && (*_First == _Atoms[_Numget_xoff + 1]
					|| *_First == _Atoms[_Numget_xoff])
				&& (_Base == 0 || _Base == 16))
				{
				_Base = 16;
				_Seendigit = false;
				++_First;
				}
			else if (_Base == 0)
				{
				_Base = 8;
				}
			}

		const auto _Dlen = static_cast<size_t>(_Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6);
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			{	
			size_t _Idx = _Find_elem(_Atoms, *_First);
			if (_Idx < _Dlen)
				{	
				*_Ptr = _Src[_Idx];
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					{
					++_Ptr;
					_Nonzero = true;
					}

				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.push_back('\0');
				++_Group;
				}
			}

		if (_Group != 0)
			{
			if ('\0' < _Groups[_Group])
				{
				++_Group;	
				}
			else
				{
				_Seendigit = false;	
				}
			}

		for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if ((0 < --_Group && *_Pg != _Groups[_Group])
				|| (0 == _Group && *_Pg < _Groups[_Group]))
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		char *_Ptr = _Ac;
		bool _Bad = false;
		bool _Sticky = false;

		constexpr int _Numget_signoff = 10;
		constexpr int _Numget_eoff = 12;
		static constexpr char _Src[] = {"0123456789-+Ee"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		char *_Leading = _Ptr;	
		*_Ptr++ = '0';	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	
		size_t _Idx;

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			{
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
					_Seendigit = true, (void)++_First)
				{
				if (_Max_sig_dig <= _Significant)
					{	
					++_Pten;
					if (0 < _Idx)
						{
						_Sticky = true;
						}
					}
				else if (_Idx != 0 || _Significant != 0)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
				}
			}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				{
				if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{	
						++_Pten;
						if (0 < _Idx)
							{
							_Sticky = true;
							}
						}
					else if (_Idx != 0 || _Significant != 0)
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}

					if (_Groups[_Group] != 127)
						{
						++_Groups[_Group];
						}
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					{
					break;	
					}
				else
					{	
					_Groups.push_back('\0');
					++_Group;
					}
				}

			if (_Group != 0)
				{
				if ('\0' < _Groups[_Group])
					{
					++_Group;	
					}
				else
					{
					_Bad = true;	
					}
				}

			while (!_Bad && 0 < _Group)
				{
				if (*_Pg == 127)
					{
					break;	
					}

				if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					{
					_Bad = true;	
					}
				else if ('\0' < _Pg[1])
					{
					++_Pg;	
					}
				}
			}

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			{	
			*_Ptr++ = localeconv()->decimal_point[0];
			++_First;
			}

		if (*_Phexexp != 1000000000 && _Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, (void)++_First)
				--_Pten;	
			if (_Pten < 0)
				{	
				*_Ptr++ = '0';
				++_Pten;
				}
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, (void)++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}
			else if (0 < _Idx)
				_Sticky = true;	

		if (_Sticky)
			{	
			char *_Px = _Ptr;
			while (--_Px != _Leading)
				{	
				if (*_Px != localeconv()->decimal_point[0])
					{	
					if (*_Px != '9')
						{	
						++*_Px;
						break;
						}

					*_Px = '0';	
					}
				}

			if (_Px == _Leading)
				{	
				*_Px = '1';
				++_Pten;
				}
			}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_Numget_eoff + 1]
				|| *_First == _Atoms[_Numget_eoff]))
			{	
			*_Ptr++ = 'e';
			++_First;
			_Seendigit = false;
			_Significant = 0;

			if (_First != _Last)
				{
				if (*_First == _Atoms[_Numget_signoff + 1])
					{	
					*_Ptr++ = '+';
					++_First;
					}
				else if (*_First == _Atoms[_Numget_signoff])
					{	
					*_Ptr++ = '-';
					++_First;
					}
				}

			for (; _First != _Last && *_First == _Atoms[0]; ++_First)
				{	
				_Seendigit = true;
				}

			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, (void)++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();

		constexpr int _Numget_signoff = 22;
		constexpr int _Numget_xoff = 24;
		constexpr int _Numget_poff = 26;
		static constexpr char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
		_Elem _Atoms[sizeof (_Src)];
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src)], _Atoms);

		char *_Ptr = _Ac;
		bool _Bad = false;
		size_t _Idx;

		if (_First != _Last)
			{
			if (*_First == _Atoms[_Numget_signoff + 1])
				{	
				*_Ptr++ = '+';
				++_First;
				}
			else if (*_First == _Atoms[_Numget_signoff])
				{	
				*_Ptr++ = '-';
				++_First;
				}
			}

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First != _Last && *_First == _Atoms[0])
			{
			if (++_First != _Last
				&& (*_First == _Atoms[_Numget_xoff + 1]
					|| *_First == _Atoms[_Numget_xoff]))
				{
				++_First;	
				}
			else
				{
				_Seendigit = true;	
				}
			}

		const int _Max_sig_dig = (*_Phexexp == 1000000000 ? 768 : 36);

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			{
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
					_Seendigit = true, (void)++_First)
				{
				if (_Max_sig_dig <= _Significant)
					{
					++_Phex;	
					}
				else if (_Idx != 0 || _Significant != 0)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
				}
			}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				{
				if ((_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff)
					{	
					_Seendigit = true;
					if (_Max_sig_dig <= _Significant)
						{
						++_Phex;	
						}
					else if (_Idx != 0 || _Significant != 0)
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}

					if (_Groups[_Group] != 127)
						{
						++_Groups[_Group];
						}
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					{
					break;	
					}
				else
					{	
					_Groups.push_back('\0');
					++_Group;
					}
				}

			if (_Group != 0)
				{
				if ('\0' < _Groups[_Group])
					{
					++_Group;	
					}
				else
					{
					_Bad = true;	
					}
				}

			while (!_Bad && 0 < _Group)
				{
				if (*_Pg == 127)
					{
					break;	
					}

				if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					{
					_Bad = true;	
					}
				else if ('\0' < _Pg[1])
					{
					++_Pg;	
					}
				}
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			{	
			*_Ptr++ = localeconv()->decimal_point[0];
			++_First;
			}

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, (void)++_First)
				--_Phex;	
			if (_Phex < 0)
				{	
				*_Ptr++ = '0';
				++_Phex;
				}
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
				_Seendigit = true, (void)++_First)
			if (_Significant < _Max_sig_dig)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_Numget_poff + 1]
				|| *_First == _Atoms[_Numget_poff]))
			{	
			*_Ptr++ = 'p';
			++_First;
			_Seendigit = false;
			_Significant = 0;

			if (_First != _Last)
				{
				if (*_First == _Atoms[_Numget_signoff + 1])
					{	
					*_Ptr++ = '+';
					++_First;
					}
				else if (*_First == _Atoms[_Numget_signoff])
					{	
					*_Ptr++ = '-';
					++_First;
					}
				}

			for (; _First != _Last && *_First == _Atoms[0]; ++_First)
				{	
				_Seendigit = true;
				}

			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _Numget_signoff;
				_Seendigit = true, (void)++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}



	};

		





template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;





		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	static size_t __cdecl _Getcat(const locale::facet **_Ppf = nullptr,
		const locale *_Ploc = nullptr)
		{	
		if (_Ppf != nullptr && *_Ppf == nullptr)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put() noexcept
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, bool _Val) const
		{	
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
			basic_string<_Elem> _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val))));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabs(_Val))
			{	
			int _Ptwo;
			(void):: frexp(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}

		_Buf.resize(_Bufsize + 50);	
		const auto _Ngen = static_cast<size_t>(:: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val));

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		string _Buf;
		char _Fmt[8];
		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
			== ios_base::fixed;
		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed
			? 6 : _Iosbase.precision();	
		size_t _Bufsize = (size_t)_Precision;
		if (_Isfixed && 1e10 < :: fabsl(_Val))
			{	
			int _Ptwo;
			(void):: frexpl(_Val, &_Ptwo);
			_Bufsize += :: abs(_Ptwo) * 30103L / 100000L;
			}

		_Buf.resize(_Bufsize + 50);	
		const auto _Ngen = static_cast<size_t>(:: sprintf_s((char *)_Buf.c_str(), _Buf.size(),
			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val));

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			static_cast<size_t>(:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val))));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		if (_Flags & ios_base::uppercase)
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'A'	
				: _Ffl == ios_base::scientific ? 'E' : 'G';	
		else
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'a'	
				: _Ffl == ios_base::scientific ? 'e' : 'g';	

		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Count) const
		{	
		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
		const char *_Exps;
		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
			_Exps = "eE";
		else
			{	
			_Exps = "pP";
			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
				_Prefix += 2;
			}
		const size_t _Eoff =
			:: strcspn(&_Buf[0], _Exps);	
		char _Dp[2] = {"."};
		_Dp[0] = :: localeconv()->decimal_point[0];
		const size_t _Poff =
			:: strcspn(&_Buf[0], &_Dp[0]);	

		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();

		if (_Poff != _Count)
			_Groupstring[_Poff] = _Punct_fac.decimal_point();

		size_t _Off = _Poff == _Count ? _Eoff : _Poff;
		const char *_Pg = &_Grouping[0];
		while (*_Pg != 127 && '\0' < *_Pg
			&& (size_t)*_Pg < _Off - _Prefix)
			{	
			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
			if ('\0' < _Pg[1])
				++_Pg;	
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));
		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
			{
			_Prefix += 2;
			}

		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Iosbase.getloc());
		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const auto& _Punct_fac = ::std:: use_facet<numpunct<_Elem>>(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const char *_Pg = &_Grouping[0];
		if (*_Pg != 127 && '\0' < *_Pg)
			{	
			const _Elem _Kseparator = _Punct_fac.thousands_sep();
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Count - _Prefix)
				{	
				_Count -= *_Pg;
				_Groupstring.insert(_Count, 1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, (void)++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		





template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 

  
template  locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template  locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
  #line 1860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"

  






 #line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"




}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1879 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"
#line 1880 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xlocnum"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios() noexcept
		{	
		}

	void  clear(iostate _State = goodbit, bool _Reraise = false)
		{	
		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);
		}

 




#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

	void  setstate(iostate _State, bool _Reraise = false)
		{	
		clear(rdstate() | _State, _Reraise);
		}

 




#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

	basic_ios&  copyfmt(const basic_ios& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	[[nodiscard]] _Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != nullptr)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (::std:: use_facet<_Ctype>(getloc()).narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		return (::std:: use_facet<_Ctype>(getloc()).widen(_Byte));
		}

	void  move(basic_ios& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mystrbuf = nullptr;
			_Tiestr = nullptr;
			this->swap(_Right);
			}
		}

	void  move(basic_ios&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Mystrbuf = nullptr;
			_Tiestr = nullptr;
			this->swap(_Right);
			}
		}

	void  swap(basic_ios& _Right) noexcept
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = nullptr,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = nullptr;
		_Fillch = widen(' ');

		if (_Mystrbuf == nullptr)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

public:
	 basic_ios(const basic_ios&) = delete;
	basic_ios&  operator=(const basic_ios&) = delete;
	};

 

  
template class __declspec(dllimport) basic_ios<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
	char_traits<wchar_t> >;
  #line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

  



 #line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}





#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ios"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		

 
 

 



 



 



#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			this->_Addstd(this);	
		}

protected:
	 basic_ostream(basic_ostream&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	basic_ostream&  operator=(basic_ostream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_ostream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			_Myios::swap(_Right);
		}

public:
	 basic_ostream(const basic_ostream&) = delete;
	basic_ostream&  operator=(const basic_ostream&) = delete;

	virtual  ~basic_ostream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(basic_ostream& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != nullptr)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myostr.rdbuf() != nullptr)
				_Myostr.rdbuf()->_Unlock();
			}

		basic_ostream& _Myostr;	

		_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(basic_ostream& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

 



  #pragma warning(push)
  #pragma warning(disable: 4996)	
 #line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
		 ~sentry() noexcept
			{	
 
			if (!::std:: uncaught_exception())	
				{
				this->_Myostr._Osfx();
				}
 

#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
			}
 


  #pragma warning(pop)
 #line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  opfx()
		{	
		if (this->good() && _Myios::tie() != nullptr && _Myios::tie() != this)
			_Myios::tie()->flush();
		return (this->good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (this->good() && this->flags() & ios_base::unitbuf)
			if (_Myios::rdbuf()->pubsync() == -1)	
				_Myios::setstate(ios_base::badbit);
		} catch (...) {
		}
		}

  


















	basic_ostream&  operator<<(basic_ostream& (__cdecl *_Pfn)(basic_ostream&))
		{	
		return ((*_Pfn)(*this));
		}

	basic_ostream&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	basic_ostream&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	basic_ostream&  operator<<(bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	basic_ostream&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(unsigned long long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = ::std:: use_facet<_Nput>(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}


	template<class = void>	
		basic_ostream& operator<<(nullptr_t)
		{	
		return (*this << "nullptr");
		}
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

	basic_ostream&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != nullptr)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		this->width(0);
		_Myios::setstate(_Strbuf == nullptr ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	basic_ostream&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  write(const _Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else if (0 < _Count)
			{	
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_ostream&  flush()
		{	
		if (_Myios::rdbuf() != nullptr)
			{	
			const sentry _Ok(*this);

			if (_Ok && _Myios::rdbuf()->pubsync() == -1)
				_Myios::setstate(ios_base::badbit);	
			}
		return (*this);
		}

	basic_ostream&  seekp(pos_type _Pos)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == -1)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	basic_ostream&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == -1)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		const sentry _Ok(*this);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(-1));
		}
	};

 #pragma vtordisp(pop)	

  

















































 

  
template class __declspec(dllimport) basic_ostream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
	char_traits<wchar_t> >;
  #line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

  



 #line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Ostr,
	class _Ty,
	class = void>
	struct _Can_stream_out
		: false_type
	{
	};

template<class _Ostr,
	class _Ty>
	struct _Can_stream_out<_Ostr, _Ty, void_t<decltype(::std:: declval<_Ostr&>() << ::std:: declval<const _Ty&>())>>
		: true_type
	{
	};

template<class _Ostr,
	class _Ty,
	enable_if_t<conjunction_v< 
		negation<is_lvalue_reference<_Ostr>>,
		is_base_of<ios_base, _Ostr>,
		_Can_stream_out<_Ostr, _Ty>>, int> = 0> inline
	_Ostr&& operator<<(_Ostr&& _Os, const _Ty& _Val)
	{	
	_Os << _Val;
	return (::std:: move(_Os));
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ostream"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;

  







#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		this->_Addstd(this);
		}

protected:
	 basic_istream(basic_istream&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	basic_istream&  operator=(basic_istream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_istream& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

public:
	 basic_istream(const basic_istream&) = delete;
	basic_istream&  operator=(const basic_istream&) = delete;

	virtual  ~basic_istream() noexcept
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(basic_istream& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != nullptr)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() noexcept
			{	
			if (_Myistr.rdbuf() != nullptr)
				_Myistr.rdbuf()->_Unlock();
			}

		basic_istream& _Myistr;	

		_Sentry_base& operator=(const _Sentry_base&) = delete;
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(basic_istream& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

		 sentry(const sentry&) = delete;
		sentry&  operator=(const sentry&) = delete;

	private:
		bool _Ok;	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (this->good())
			{	
			if (_Myios::tie() != nullptr)
				_Myios::tie()->flush();

			if (!_Noskip && this->flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(this->getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (this->good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  


















	basic_istream&  operator>>(basic_istream& (__cdecl *_Pfn)(basic_istream&))
		{	
		return ((*_Pfn)(*this));
		}

	basic_istream&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	basic_istream&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

private:
	template<class _Ty>
		basic_istream& _Common_extract_with_num_get(_Ty& _Val)
		{	
		ios_base::iostate _Err = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			try {
			::std:: use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Err);
		return (*this);
		}

public:
	basic_istream&  operator>>(bool& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(short& _Val)
		{	
		ios_base::iostate _Err = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			try {
			long _Lval;
			::std:: use_facet<_Nget>(this->getloc()).get(*this, {}, *this, _Err, _Lval);
			if (_Lval < (-32768))
				{
				_Err |= ios_base::failbit;
				_Val = (-32768);
				}
			else if (_Lval > 32767)
				{
				_Err |= ios_base::failbit;
				_Val = 32767;
				}
			else
				{
				_Val = static_cast<short>(_Lval);
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Err);
		return (*this);
		}










	basic_istream&  operator>>(unsigned short& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(int& _Val)
		{	
		static_assert(sizeof(int) == sizeof(long),
			"Bad overflow assumptions due to sizeof(int) != sizeof(long)");
		long _Result = _Val;
		_Common_extract_with_num_get(_Result);
		_Val = _Result;
		return (*this);
		}

	basic_istream&  operator>>(unsigned int& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(unsigned long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(unsigned long long& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(float& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(double& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(long double& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(void *& _Val)
		{	
		return (_Common_extract_with_num_get(_Val));
		}

	basic_istream&  operator>>(_Mysb * _Strbuf)
		{	
		_Chcount = 0;	
		const sentry _Ok(*this, true);
		ios_base::iostate _State = ios_base::goodbit;
		if (_Ok && _Strbuf != nullptr)
			{	
			try {
			for (int_type _Meta = _Myios::rdbuf()->sgetc(); ; _Meta = _Myios::rdbuf()->snextc())
				{
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				
				try {
					if (_Traits::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Traits::to_char_type(_Meta))))
						{
						break;
						}

				} catch (...) {
					break;
				}

				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			{	
			_State = ios_base::failbit;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	basic_istream&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	basic_istream&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	basic_istream&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	basic_istream&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	basic_istream&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	basic_istream&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	basic_istream&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (;;)
				{	
				int_type _Meta;
				if (_Count != (numeric_limits<streamsize>::max)()
					&& --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  read(_Elem *_Str, streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Count && 0 < _Num)
			{	
			read(_Str, _Num < _Count ? _Num : _Count);
			}

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	basic_istream&  putback(_Elem _Ch)
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	basic_istream&  unget()
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	[[nodiscard]] streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		const sentry _Ok(*this, true);

		if (_Myios::rdbuf() == nullptr)
			return (-1);
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_Myios::setstate(ios_base::badbit);
			return (-1);
			}
		else
			return (0);
		}

	basic_istream&  seekg(pos_type _Pos)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == -1)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	basic_istream&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == -1)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		const sentry _Ok(*this, true);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(-1));
		}

private:
	streamsize _Chcount;	
	};

 #pragma vtordisp(pop)	

  






















 

  
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
  #line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

  



 #line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

protected:
	 basic_iostream(basic_iostream&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	basic_iostream&  operator=(basic_iostream&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(basic_iostream& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			_Myios::swap(_Right);
		}

public:
	 basic_iostream(const basic_iostream&) = delete;
	basic_iostream&  operator=(const basic_iostream&) = delete;

	virtual  ~basic_iostream() noexcept
		{	
		}
	};

 

  
template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
  #line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

  



 #line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"

		

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width()
			: (numeric_limits<streamsize>::max)();
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Istr,
	class _Ty,
	class = void>
	struct _Can_stream_in
		: false_type
	{
	};

template<class _Istr,
	class _Ty>
	struct _Can_stream_in<_Istr, _Ty, void_t<decltype(::std:: declval<_Istr&>() >> ::std:: declval<_Ty>())>>
		: true_type
	{
	};

template<class _Istr,
	class _Ty,
	enable_if_t<conjunction_v<	
		negation<is_lvalue_reference<_Istr>>,
		is_base_of<ios_base, _Istr>,
		_Can_stream_in<_Istr, _Ty>>, int> = 0> inline
	_Istr&& operator>>(_Istr&& _Is, _Ty&& _Val)
	{	
	_Is >> ::std:: forward<_Ty>(_Val);
	return (::std:: move(_Is));
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	const typename basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const auto& _Ctype_fac = ::std:: use_facet<ctype<_Elem>>(_Istr.getloc());

		try {
		for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ; _Meta = _Istr.rdbuf()->snextc())
			{
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (!_Ctype_fac.is(ctype<_Elem>::space, _Traits::to_char_type(_Meta)))
				{
				break;	
				}
			}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		_Istr.setstate(_State);
		}

	return (_Istr);
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"
#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\istream"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring_insert.h"


#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {

template<class _Elem,
	class _Traits,
	class _SizeT> inline
	basic_ostream<_Elem, _Traits>& _Insert_string(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const _Elem * const _Data, const _SizeT _Size)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	_SizeT _Pad = _Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size
		? 0 : static_cast<_SizeT>(_Ostr.width()) - _Size;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Data, (streamsize)_Size)
				!= (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

}



#pragma warning(pop)
#pragma pack(pop)
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring_insert.h"
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xstring_insert.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"


 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"


#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<
			is_constructible<_Dests, _Srcs>...,
			is_convertible<_Srcs, _Dests>...
		>>
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val
		: _Tuple_implicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<
			is_constructible<_Dests, _Srcs>...,
			negation<conjunction<is_convertible<_Srcs, _Dests>...>>
		>>
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val
		: _Tuple_explicit_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_constructible_val0
		: false_type
	{
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_constructible_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_constructible<_Dests, _Srcs>...>>
	{
	};

template<class _Dest,
	class... _Srcs>
	inline constexpr bool _Tuple_constructible_v =
		_Tuple_constructible_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_nothrow_constructible_val0
		: false_type
	{
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_nothrow_constructible_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_nothrow_constructible<_Dests, _Srcs>...>>
	{
	};

template<class _Dest,
	class... _Srcs>
	inline constexpr bool _Tuple_nothrow_constructible_v =
		_Tuple_nothrow_constructible_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_assignable_val0
		: false_type
	{
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_assignable_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_assignable<_Dests&, _Srcs>...>>	
	{
	};

template<class _Dest,
	class... _Srcs>
	inline constexpr bool _Tuple_assignable_v =
		_Tuple_assignable_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;

template<class _Dest,
	class... _Srcs>
	struct _Tuple_assignable_val
		: bool_constant<_Tuple_assignable_v<_Dest, _Srcs...>>
	{
	};

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_nothrow_assignable_val0
		: false_type
	{
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_nothrow_assignable_val0<true, tuple<_Dests...>, _Srcs...>
		: bool_constant<conjunction_v<is_nothrow_assignable<_Dests&, _Srcs>...>>	
	{
	};

template<class _Dest,
	class... _Srcs>
	inline constexpr bool _Tuple_nothrow_assignable_v =
		_Tuple_nothrow_assignable_val0<tuple_size_v<_Dest> == sizeof...(_Srcs), _Dest, _Srcs...>::value;

	
template<class _Myself,
	class... _Other>
	struct _Tuple_convert_copy_val
		: true_type
	{	
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_copy_val<tuple<_This>, _Uty>
		: bool_constant<!disjunction_v<
			is_same<_This, _Uty>,
			is_constructible<_This, const tuple<_Uty>&>,
			is_convertible<const tuple<_Uty>&, _This>>>
	{	
	};

	
template<class _Myself,
	class... _Other>
	struct _Tuple_convert_move_val
		: true_type
	{	
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_move_val<tuple<_This>, _Uty>
		: bool_constant<!disjunction_v<
			is_same<_This, _Uty>,
			is_constructible<_This, tuple<_Uty>>,
			is_convertible<tuple<_Uty>, _This>>>
	{	
	};

	
template<class _Myself,
	class _This2,
	class... _Rest2>
	struct _Tuple_perfect_val
		: true_type
	{	
	};

template<class _Myself,
	class _This2>
	struct _Tuple_perfect_val<_Myself, _This2>
		: bool_constant<!is_same_v<_Myself, remove_const_t<remove_reference_t<_This2>>>>
	{	
	};

	
struct _Ignore
	{	
	template<class _Ty>
		constexpr const _Ignore& operator=(const _Ty&) const noexcept	
		{	
		return (*this);
		}
	};

inline constexpr _Ignore ignore{};

	
template<class _Ty>
	struct _Tuple_val
	{	
	constexpr _Tuple_val()
		: _Val()
		{	
		}

	template<class _Other>
		constexpr _Tuple_val(_Other&& _Arg)
		: _Val(::std:: forward<_Other>(_Arg))
		{	
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<!uses_allocator_v<_Ty, _Alloc>, int> = 0>
		_Tuple_val(const _Alloc&, allocator_arg_t, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			uses_allocator<_Ty, _Alloc>,
			is_constructible<_Ty, allocator_arg_t, const _Alloc&, _Other...>
		>, int> = 0>
		_Tuple_val(const _Alloc& _Al, allocator_arg_t, _Other&&... _Arg)
		: _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			uses_allocator<_Ty, _Alloc>,
			negation<is_constructible<_Ty, allocator_arg_t, const _Alloc&, _Other...>>
		>, int> = 0>
		_Tuple_val(const _Alloc& _Al, allocator_arg_t, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)..., _Al)
		{	
		}

	_Ty _Val;
	};

	
struct _Exact_args_t
	{	
	};

struct _Unpack_tuple_t
	{	
	};

struct _Alloc_exact_args_t
	{	
	};

struct _Alloc_unpack_tuple_t
	{	
	};

template<class... _Types>
	class tuple;

template<>
	class tuple<>
	{	
public:
	constexpr tuple() noexcept
		{	
		}

	constexpr tuple(const tuple&) noexcept	
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&) noexcept
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept
		{	
		}

	template<class _Tag,
		enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
		constexpr tuple(_Tag) noexcept
		{	
		}

	template<class _Tag,
		class _Alloc,
		enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
		tuple(_Tag, const _Alloc&) noexcept
		{	
		}

	void swap(tuple&) noexcept
		{	
		}

	constexpr bool _Equals(const tuple&) const noexcept
		{	
		return (true);
		}

	constexpr bool _Less(const tuple&) const noexcept
		{	
		return (false);
		}
	};

template<class _This,
	class... _Rest>
	class tuple<_This, _Rest...>
		: private tuple<_Rest...>
	{	
public:
	typedef _This _This_type;
	typedef tuple<_Rest...> _Mybase;

	template<class _Tag,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same_v<_Tag, _Exact_args_t>, int> = 0>
		constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Tag,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
		constexpr tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>);

	template<class _Tag,
		class _Tpl,
		enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int> = 0>
		constexpr tuple(_Tag, _Tpl&& _Right)
		: tuple(_Unpack_tuple_t{}, ::std:: forward<_Tpl>(_Right),
			make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{})
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same_v<_Tag, _Alloc_exact_args_t>, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(_Al, allocator_arg, ::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0> inline
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>);

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
			make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>{})
		{	
		}

	template<class _This2 = _This,
		enable_if_t<conjunction_v<
			is_default_constructible<_This2>,
			is_default_constructible<_Rest>...,
			_Is_implicitly_default_constructible<_This2>,
			_Is_implicitly_default_constructible<_Rest>...
		>, int> = 0>
		constexpr tuple()
			noexcept(conjunction_v< is_nothrow_default_constructible<_This2>, is_nothrow_default_constructible<_Rest>... >)	
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
		: _Mybase(), _Myfirst()
		{
		}

	template<class _This2 = _This,
		enable_if_t<conjunction_v<
			is_default_constructible<_This2>,
			is_default_constructible<_Rest>...,
			negation<conjunction<
				_Is_implicitly_default_constructible<_This2>,
				_Is_implicitly_default_constructible<_Rest>...
		>>>, int> = 0>
		constexpr explicit tuple()
			noexcept(conjunction_v< is_nothrow_default_constructible<_This2>, is_nothrow_default_constructible<_Rest>... >)	
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
		: _Mybase(), _Myfirst()
		{
		}

	template<class _This2 = _This,
		enable_if_t<_Tuple_implicit_val<tuple, const _This2&, const _Rest&...>::value, int> = 0>
		constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
			noexcept(conjunction_v< is_nothrow_copy_constructible<_This2>, is_nothrow_copy_constructible<_Rest>... >)	
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)
		{
		}

	template<class _This2 = _This,
		enable_if_t<_Tuple_explicit_val<tuple, const _This2&, const _Rest&...>::value, int> = 0>
		constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
			noexcept(conjunction_v< is_nothrow_copy_constructible<_This2>, is_nothrow_copy_constructible<_Rest>... >)	
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
			: tuple(_Exact_args_t{}, _This_arg, _Rest_arg...)
		{
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction_v<
			_Tuple_perfect_val<tuple, _This2, _Rest2...>,
			_Tuple_implicit_val<tuple, _This2, _Rest2...>
		>, int> = 0>
		constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _This2, _Rest2...>)	
			: tuple(_Exact_args_t{}, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction_v<
			_Tuple_perfect_val<tuple, _This2, _Rest2...>,
			_Tuple_explicit_val<tuple, _This2, _Rest2...>
		>, int> = 0>
		constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _This2, _Rest2...>)	
			: tuple(_Exact_args_t{}, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{
		}

	tuple(const tuple&) = default;
	tuple(tuple&&) = default;

	template<class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_implicit_val<tuple, const _Other&...>,
			_Tuple_convert_copy_val<tuple, _Other...>
		>, int> = 0>
		constexpr tuple(const tuple<_Other...>& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _Other&...>)	
			: tuple(_Unpack_tuple_t{}, _Right)
		{
		}

	template<class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_explicit_val<tuple, const _Other&...>,
			_Tuple_convert_copy_val<tuple, _Other...>
		>, int> = 0>
		constexpr explicit tuple(const tuple<_Other...>& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _Other&...>)	
			: tuple(_Unpack_tuple_t{}, _Right)
		{
		}

	template<class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_implicit_val<tuple, _Other...>,
			_Tuple_convert_move_val<tuple, _Other...>
		>, int> = 0>
		constexpr tuple(tuple<_Other...>&& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _Other...>)	
			: tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
		{
		}

	template<class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_explicit_val<tuple, _Other...>,
			_Tuple_convert_move_val<tuple, _Other...>
		>, int> = 0>
		constexpr explicit tuple(tuple<_Other...>&& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _Other...>)	
			: tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
		{
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_implicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
		constexpr tuple(const pair<_First, _Second>& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _First&, const _Second&>)	
			: tuple(_Unpack_tuple_t{}, _Right)
		{
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_explicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
		constexpr explicit tuple(const pair<_First, _Second>& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, const _First&, const _Second&>)	
			: tuple(_Unpack_tuple_t{}, _Right)
		{
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_implicit_val<tuple, _First, _Second>::value, int> = 0>
		constexpr tuple(pair<_First, _Second>&& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _First, _Second>)	
			: tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
		{
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_explicit_val<tuple, _First, _Second>::value, int> = 0>
		constexpr explicit tuple(pair<_First, _Second>&& _Right)
			noexcept(_Tuple_nothrow_constructible_v<tuple, _First, _Second>)	
			: tuple(_Unpack_tuple_t{}, ::std:: move(_Right))
		{
		}

	template<class _Alloc,
		class _This2 = _This,
		enable_if_t<conjunction_v<
			is_default_constructible<_This2>,
			is_default_constructible<_Rest>...
		>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al)
		: _Mybase(allocator_arg, _Al), _Myfirst(_Al, allocator_arg)
		{
		}

	template<class _Alloc,
		class _This2 = _This,
		enable_if_t<_Tuple_implicit_val<tuple, const _This2&, const _Rest&...>::value, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{
		}

	template<class _Alloc,
		class _This2 = _This,
		enable_if_t<_Tuple_explicit_val<tuple, const _This2&, const _Rest&...>::value, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction_v<
			_Tuple_perfect_val<tuple, _This2, _Rest2...>,
			_Tuple_implicit_val<tuple, _This2, _Rest2...>
		>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction_v<
			_Tuple_perfect_val<tuple, _This2, _Rest2...>,
			_Tuple_explicit_val<tuple, _This2, _Rest2...>
		>, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{
		}

	template<class _Alloc,
		class _This2 = _This,
		enable_if_t<_Tuple_constructible_v<tuple, const _This2&, const _Rest&...>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{
		}

	template<class _Alloc,
		class _This2 = _This,
		enable_if_t<_Tuple_constructible_v<tuple, _This2, _Rest...>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			tuple&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_implicit_val<tuple, const _Other&...>,
			_Tuple_convert_copy_val<tuple, _Other...>
		>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_explicit_val<tuple, const _Other&...>,
			_Tuple_convert_copy_val<tuple, _Other...>
		>, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_implicit_val<tuple, _Other...>,
			_Tuple_convert_move_val<tuple, _Other...>
		>, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{
		}

	template<class _Alloc,
		class... _Other,
		enable_if_t<conjunction_v<
			_Tuple_explicit_val<tuple, _Other...>,
			_Tuple_convert_move_val<tuple, _Other...>
		>, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{
		}

	template<class _Alloc,
		class _First,
		class _Second,
		enable_if_t<_Tuple_implicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{
		}

	template<class _Alloc,
		class _First,
		class _Second,
		enable_if_t<_Tuple_explicit_val<tuple, const _First&, const _Second&>::value, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{
		}

	template<class _Alloc,
		class _First,
		class _Second,
		enable_if_t<_Tuple_implicit_val<tuple, _First, _Second>::value, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{
		}

	template<class _Alloc,
		class _First,
		class _Second,
		enable_if_t<_Tuple_explicit_val<tuple, _First, _Second>::value, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{
		}

	tuple& operator=(const volatile tuple&) = delete;

	template<class _Myself = tuple,
		class _This2 = _This,
		enable_if_t<conjunction_v<
			is_copy_assignable<_This2>,
			is_copy_assignable<_Rest>...
		>, int> = 0>
		tuple& operator=(_Identity_t<const _Myself&> _Right)
			noexcept(conjunction_v< is_nothrow_copy_assignable<_This2>, is_nothrow_copy_assignable<_Rest>... >)	
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
		{
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class _Myself = tuple,
		class _This2 = _This,
		enable_if_t<conjunction_v<
			is_move_assignable<_This2>,
			is_move_assignable<_Rest>...
		>, int> = 0>
		tuple& operator=(_Identity_t<_Myself&&> _Right)
			noexcept(conjunction_v< is_nothrow_move_assignable<_This2>, is_nothrow_move_assignable<_Rest>... >)
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
		{
		_Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
		return (*this);
		}

	template<class... _Other,
		enable_if_t<conjunction_v<
			negation<is_same<tuple, tuple<_Other...>>>,
			_Tuple_assignable_val<tuple, const _Other&...>
		>, int> = 0>
		tuple& operator=(const tuple<_Other...>& _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, const _Other&...>)	
		{
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class... _Other,
		enable_if_t<conjunction_v<
			negation<is_same<tuple, tuple<_Other...>>>,
			_Tuple_assignable_val<tuple, _Other...>
		>, int> = 0>
		tuple& operator=(tuple<_Other...>&& _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, _Other...>)	
		{
		_Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>(_Right._Get_rest());
		return (*this);
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_assignable_v<tuple, const _First&, const _Second&>, int> = 0>
		tuple& operator=(const pair<_First, _Second>& _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, const _First&, const _Second&>)	
		{
		_Myfirst._Val = _Right.first;
		_Get_rest()._Myfirst._Val = _Right.second;
		return (*this);
		}

	template<class _First,
		class _Second,
		enable_if_t<_Tuple_assignable_v<tuple, _First, _Second>, int> = 0>
		tuple& operator=(pair<_First, _Second>&& _Right)
			noexcept(_Tuple_nothrow_assignable_v<tuple, _First, _Second>)	
		{
		_Myfirst._Val = ::std:: forward<_First>(_Right.first);
		_Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
		return (*this);
		}

	void swap(tuple& _Right)
		noexcept(conjunction_v<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>)
#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
		{
		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
		_Mybase::swap(_Right._Get_rest());
		}

	_Mybase& _Get_rest() noexcept
		{	
		return (*this);
		}

	constexpr const _Mybase& _Get_rest() const noexcept
		{	
		return (*this);
		}

	template<class... _Other>
		constexpr bool _Equals(const tuple<_Other...>& _Right) const
		{	
		return (_Myfirst._Val == _Right._Myfirst._Val
			&& _Mybase::_Equals(_Right._Get_rest()));
		}

	template<class... _Other>
		constexpr bool _Less(const tuple<_Other...>& _Right) const
		{	
		return (_Myfirst._Val < _Right._Myfirst._Val
			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
				&& _Mybase::_Less(_Right._Get_rest())));
		}

	_Tuple_val<_This> _Myfirst;	
	};


template<class... _Types>
	tuple(_Types...) -> tuple<_Types...>;

template<class _Ty1,
	class _Ty2>
	tuple(pair<_Ty1, _Ty2>) -> tuple<_Ty1, _Ty2>;

template<class _Alloc,
	class... _Types>
	tuple(allocator_arg_t, _Alloc, _Types...) -> tuple<_Types...>;

template<class _Alloc,
	class _Ty1,
	class _Ty2>
	tuple(allocator_arg_t, _Alloc, pair<_Ty1, _Ty2>) -> tuple<_Ty1, _Ty2>;

template<class _Alloc,
	class... _Types>
	tuple(allocator_arg_t, _Alloc, tuple<_Types...>) -> tuple<_Types...>;
#line 869 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"

	
template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator==(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	static_assert(sizeof...(_Types1) == sizeof...(_Types2), "cannot compare tuples of different sizes");
	return (_Left._Equals(_Right));
	}

template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator!=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator<(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	static_assert(sizeof...(_Types1) == sizeof...(_Types2), "cannot compare tuples of different sizes");
	return (_Left._Less(_Right));
	}

template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator>=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator>(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	return (_Right < _Left);
	}

template<class... _Types1,
	class... _Types2>
	[[nodiscard]] constexpr bool operator<=(const tuple<_Types1...>& _Left, const tuple<_Types2...>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class... _Types,
	enable_if_t<conjunction_v<_Is_swappable<_Types>...>, int> = 0> inline
	void swap(tuple<_Types...>& _Left, tuple<_Types...>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	return (_Left.swap(_Right));
	}


	
template<class _Ty,
	class _Tuple>
	struct _Tuple_element;

template<class _This,
	class... _Rest>
	struct _Tuple_element<_This, tuple<_This, _Rest...>>
	{	
	typedef int _Check_type;
	static_assert(is_void_v<typename _Tuple_element<_This, tuple<_Rest...>>::_Check_type>,
		"duplicate type T in get<T>(tuple)");

	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<class _Ty,
	class _This,
	class... _Rest>
	struct _Tuple_element<_Ty, tuple<_This, _Rest...>>
		: _Tuple_element<_Ty, tuple<_Rest...>>
	{	
	};

template<class _Ty>
	struct _Tuple_element<_Ty, tuple<>>
	{	
	typedef void _Check_type;	
	};

	
template<size_t _Index,
	class... _Types>
	[[nodiscard]] constexpr tuple_element_t<_Index, tuple<_Types...>>&
		get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types>
	[[nodiscard]] constexpr const tuple_element_t<_Index, tuple<_Types...>>&
		get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types>
	[[nodiscard]] constexpr tuple_element_t<_Index, tuple<_Types...>>&&
		get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
	typedef tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
	return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

template<size_t _Index,
	class... _Types>
	[[nodiscard]] constexpr const tuple_element_t<_Index, tuple<_Types...>>&&
		get(const tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...>>::_Ttype _Ttype;
	typedef const tuple_element_t<_Index, tuple<_Types...>>&& _RRtype;
	return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
	return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr const _Ty&& get(const tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...>>::_Ttype _Ttype;
	return (::std:: forward<const _Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	
template<class _This,
	class... _Rest>
	template<class _Tag,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same_v<_Tag, _Unpack_tuple_t>, int>>
		constexpr tuple<_This, _Rest...>::tuple(_Tag, _Tpl&& _Right, index_sequence<_Indices...>)
		: tuple(_Exact_args_t{}, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
		{	
		}

template<class _This,
	class... _Rest>
	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same_v<_Tag, _Alloc_unpack_tuple_t>, int>> inline
		tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, index_sequence<_Indices...>)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
		{	
		}

	
template<class... _Types>
	[[nodiscard]] constexpr tuple<_Unrefwrap_t<_Types>...>
		make_tuple(_Types&&... _Args)
	{	
	typedef tuple<_Unrefwrap_t<_Types>...> _Ttype;
	return (_Ttype(::std:: forward<_Types>(_Args)...));
	}

	
template<class... _Types>
	[[nodiscard]] constexpr tuple<_Types&...>
		tie(_Types&... _Args) noexcept
	{	
	typedef tuple<_Types&...> _Ttype;
	return (_Ttype(_Args...));
	}

	
template<class... _Types>
	[[nodiscard]] constexpr tuple<_Types&&...>
		forward_as_tuple(_Types&&... _Args) noexcept
	{	
	return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
	}

	
template<class _Seq_type1,
	class _Seq_type2>
	struct _Cat_sequences;

template<size_t... _Indexes1,
	size_t... _Indexes2>
	struct _Cat_sequences<index_sequence<_Indexes1...>,
		index_sequence<_Indexes2...>>
	{	
	typedef index_sequence<_Indexes1..., _Indexes2...> type;
	};

	
template<class _Ty,
	size_t _Size>
	class array;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	[[nodiscard]] constexpr const _Ty&& get(const array<_Ty, _Size>&& _Arr) noexcept;

	
template<class _Ty,
	class... _For_array>
	struct _View_as_tuple
	{	
	static_assert(_Always_false<_Ty>,
		"Unsupported tuple_cat arguments.");
	};

template<class... _Types>
	struct _View_as_tuple<tuple<_Types...>>
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty1,
	class _Ty2>
	struct _View_as_tuple<pair<_Ty1, _Ty2>>
	{	
	typedef tuple<_Ty1, _Ty2> type;
	};

template<class _Ty,
	class... _Types>
	struct _View_as_tuple<array<_Ty, 0>, _Types...>
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty,
	size_t _Size,
	class... _Types>
	struct _View_as_tuple<array<_Ty, _Size>, _Types...>
		: _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
	{	
	};

	
template<size_t _Nx,
	class _Ty>
	struct _Repeat_for
		: integral_constant<size_t, _Nx>
	{	
	};

	
template<class _Ret,
	class _Kx_arg,
	class _Ix_arg,
	size_t _Ix_next,
	class... _Tuples>
	struct _Tuple_cat2
	{	
	static_assert(sizeof...(_Tuples) == 0,
		"Unsupported tuple_cat arguments.");
	typedef _Ret type;
	typedef _Kx_arg _Kx_arg_seq;
	typedef _Ix_arg _Ix_arg_seq;
	};

template<class... _Types1,
	class _Kx_arg,
	size_t... _Ix,
	size_t _Ix_next,
	class... _Types2,
	class... _Rest>
	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
		index_sequence<_Ix...>, _Ix_next,
		tuple<_Types2...>, _Rest...>
		: _Tuple_cat2<
			tuple<_Types1..., _Types2...>,
			typename _Cat_sequences<_Kx_arg, index_sequence_for<_Types2...>>::type,
			index_sequence<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
			_Ix_next + 1,
			_Rest...>
	{	
	};

template<class... _Tuples>
	struct _Tuple_cat1
		: _Tuple_cat2<tuple<>, index_sequence<>,
				index_sequence<>, 0,
			typename _View_as_tuple<decay_t<_Tuples>>::type...>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4100)	
template<class _Ret,
	size_t... _Kx,
	size_t... _Ix,
	class _Ty>
	constexpr _Ret _Tuple_cat(index_sequence<_Kx...>,
		index_sequence<_Ix...>, _Ty&& _Arg)
	{	
	return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
	}
#pragma warning(pop)

template<class... _Tuples>
	[[nodiscard]] constexpr typename _Tuple_cat1<_Tuples...>::type
		tuple_cat(_Tuples&&... _Tpls)
	{	
	typedef _Tuple_cat1<_Tuples...> _Cat1;
	return (_Tuple_cat<typename _Cat1::type>(
		typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
		::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
	}


	
#pragma warning(push)
#pragma warning(disable: 4100)	
template<class _Callable,
	class _Tuple,
	size_t... _Indices>
	constexpr decltype(auto) _Apply_impl(_Callable&& _Obj, _Tuple&& _Tpl, index_sequence<_Indices...>)
	{	
	return (_C_invoke(::std:: forward<_Callable>(_Obj), ::std:: get<_Indices>(::std:: forward<_Tuple>(_Tpl))...));
	}
#pragma warning(pop)

template<class _Callable,
	class _Tuple>
	constexpr decltype(auto) apply(_Callable&& _Obj, _Tuple&& _Tpl)
	{	
	return (_Apply_impl(::std:: forward<_Callable>(_Obj), ::std:: forward<_Tuple>(_Tpl),
		make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{}));
	}

	
#pragma warning(push)
#pragma warning(disable: 4100)	
template<class _Ty,
	class _Tuple,
	size_t... _Indices>
	constexpr _Ty _Make_from_tuple_impl(_Tuple&& _Tpl, index_sequence<_Indices...>)
	{	
	return (_Ty(::std:: get<_Indices>(::std:: forward<_Tuple>(_Tpl))...));
	}
#pragma warning(pop)

template<class _Ty,
	class _Tuple>
	[[nodiscard]] constexpr _Ty make_from_tuple(_Tuple&& _Tpl)
	{	
	return (_Make_from_tuple_impl<_Ty>(::std:: forward<_Tuple>(_Tpl),
		make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{}));
	}
#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"

	
template<class _Tpl,
	class _Fx,
	size_t... _Indices> inline
	void _For_each_tuple_element_impl(_Tpl&& _Tuple,
		_Fx _Func, index_sequence<_Indices...>)
	{	
	int _Ignored[] = { (static_cast<void>(_Func(
		::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
		)), 0)... };
	(void)_Ignored;
	}

template<class _Tpl,
	class _Fx> inline
	void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
	{	
	_For_each_tuple_element_impl(
		::std:: forward<_Tpl>(_Tuple),
		_Func,
		make_index_sequence<tuple_size_v<remove_reference_t<_Tpl>>>()
		);
	}


#pragma warning(push)
#pragma warning(disable: 4100)	
	
template<class _Ty1,
	class _Ty2>
	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			index_sequence<_Indexes1...>,
			index_sequence<_Indexes2...>)
		: first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
			second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
		{	
		}
#pragma warning(pop)

	
template<class _Ty1,
	class _Ty2>
	template<class... _Types1,
		class... _Types2> inline
		pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2)
		: pair(_Val1, _Val2,
			index_sequence_for<_Types1...>(),
			index_sequence_for<_Types2...>())
		{	
		}

	
template<class... _Types,
	class _Alloc>
	struct uses_allocator<tuple<_Types...>, _Alloc>
		: true_type
	{	
	};










#line 1342 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"
#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tuple"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"




 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {

		
template<class _Ty,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types> inline
	void _Uses_allocator_construct2(
		true_type, _Ty * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner, _Types&&... _Args)
	{	
	allocator_traits<_Outer_alloc>::construct(
		_Outer, _Ptr, allocator_arg, _Inner, ::std:: forward<_Types>(_Args)...);
	}

template<class _Ty,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types> inline
	void _Uses_allocator_construct2(
		false_type, _Ty * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner, _Types&&... _Args)
	{	
	static_assert(is_constructible_v<_Ty, _Types..., _Inner_alloc&>,
		"N4700 23.10.7.2 [allocator.uses.construction]/1 requires "
		"is_constructible_v<T, Args..., Alloc&> when uses_allocator_v<T, Alloc> is true and "
		"is_constructible_v<T, allocator_arg_t, Alloc&, Args...> is false");
	allocator_traits<_Outer_alloc>::construct(_Outer, _Ptr, ::std:: forward<_Types>(_Args)..., _Inner);
	}

template<class _Ty,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types> inline
	void _Uses_allocator_construct1(
		true_type, _Ty * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner, _Types&&... _Args)
	{	
		
	using _IsConstructible = typename is_constructible<_Ty, allocator_arg_t, _Inner_alloc&, _Types...>::type;
	_Uses_allocator_construct2(_IsConstructible{}, _Ptr, _Outer, _Inner, ::std:: forward<_Types>(_Args)...);
	}

template<class _Ty,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types> inline
	void _Uses_allocator_construct1(
		false_type, _Ty * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc&, _Types&&... _Args)
	{	
		
	static_assert(is_constructible_v<_Ty, _Types...>,
		"N4700 23.10.7.2 [allocator.uses.construction]/1 requires "
		"is_constructible_v<T, Args...> when uses_allocator_v<T, Alloc> is false");
	allocator_traits<_Outer_alloc>::construct(_Outer, _Ptr, ::std:: forward<_Types>(_Args)...);
	}

template<class _Ty,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types,
	enable_if_t<!_Is_specialization_v<_Ty, pair>, int> = 0> inline
	void _Uses_allocator_construct(
		_Ty * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner, _Types&&... _Args)
	{	
	_Uses_allocator_construct1(uses_allocator<_Ty, _Inner_alloc>(), _Ptr, _Outer,
		_Inner, ::std:: forward<_Types>(_Args)...); 
	}

template<class _Alloc,
	class... _Types> inline
	auto _Uses_allocator_piecewise2(true_type, _Alloc& _Al, tuple<_Types...>&& _Tuple)
	{
	return (::std:: tuple_cat(tuple<allocator_arg_t, _Alloc&>(allocator_arg, _Al), ::std:: move(_Tuple)));
	}

template<class _Alloc,
	class... _Types> inline
	auto _Uses_allocator_piecewise2(false_type, _Alloc& _Al, tuple<_Types...>&& _Tuple)
	{
	return (::std:: tuple_cat(::std:: move(_Tuple), tuple<_Alloc&>(_Al)));
	}

template<class _Ty,
	class _Alloc,
	class... _Types> inline
	auto _Uses_allocator_piecewise(true_type, _Alloc& _Al, tuple<_Types...>&& _Tuple)
	{
	return (_Uses_allocator_piecewise2(
		is_constructible<_Ty, allocator_arg_t, _Alloc&, _Types...>(), _Al, ::std:: move(_Tuple)));
	}

template<class,
	class _Alloc,
	class... _Types> inline
	tuple<_Types...>&& _Uses_allocator_piecewise(false_type, _Alloc&, tuple<_Types...>&& _Tuple)
	{
	return (::std:: move(_Tuple));
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types1,
	class... _Types2> inline
	void _Uses_allocator_construct_pair(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner,
		tuple<_Types1...>&& _Val1, tuple<_Types2...>&& _Val2)
	{	
	allocator_traits<_Outer_alloc>::construct(_Outer, _Ptr, piecewise_construct,
		_Uses_allocator_piecewise<_Ty1>(uses_allocator<_Ty1, _Inner_alloc>(), _Inner, ::std:: move(_Val1)),
		_Uses_allocator_piecewise<_Ty2>(uses_allocator<_Ty2, _Inner_alloc>(), _Inner, ::std:: move(_Val2)));
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc,
	class... _Types1,
	class... _Types2> inline
	void _Uses_allocator_construct(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner,
		piecewise_construct_t, tuple<_Types1...> _Val1, tuple<_Types2...> _Val2)
	{	
	_Uses_allocator_construct_pair(_Ptr, _Outer, _Inner, ::std:: move(_Val1), ::std:: move(_Val2));
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc> inline
	void _Uses_allocator_construct(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner)
	{	
	_Uses_allocator_construct_pair(_Ptr, _Outer, _Inner, tuple<>{}, tuple<>{});
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc,
	class _Uty,
	class _Vty> inline
	void _Uses_allocator_construct(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner,
		_Uty&& _Arg1, _Vty&& _Arg2)
	{	
	_Uses_allocator_construct_pair(_Ptr, _Outer, _Inner, ::std:: forward_as_tuple(::std:: forward<_Uty>(_Arg1)),
		::std:: forward_as_tuple(::std:: forward<_Vty>(_Arg2)));
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc,
	class _Uty,
	class _Vty> inline
	void _Uses_allocator_construct(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner,
		const pair<_Uty, _Vty>& _Pair)
	{	
	_Uses_allocator_construct_pair(_Ptr, _Outer, _Inner, ::std:: forward_as_tuple(_Pair.first),
		::std:: forward_as_tuple(_Pair.second));
	}

template<class _Ty1,
	class _Ty2,
	class _Outer_alloc,
	class _Inner_alloc,
	class _Uty,
	class _Vty> inline
	void _Uses_allocator_construct(pair<_Ty1, _Ty2> * const _Ptr, _Outer_alloc& _Outer, _Inner_alloc& _Inner,
		pair<_Uty, _Vty>&& _Pair)
	{	
	_Uses_allocator_construct_pair(_Ptr, _Outer, _Inner, ::std:: forward_as_tuple(::std:: forward<_Uty>(_Pair.first)),
		::std:: forward_as_tuple(::std:: forward<_Vty>(_Pair.second)));
	}

 
namespace pmr {

		
class __declspec(novtable) memory_resource
	{
public:
	virtual ~memory_resource() noexcept
		{}

	[[nodiscard]] __declspec(allocator) void * allocate( const size_t _Bytes,
		const size_t _Align = alignof(max_align_t))
		{	
		;
		return (do_allocate(_Bytes, _Align));
		}

	void deallocate(void * const _Ptr, const size_t _Bytes, const size_t _Align = alignof(max_align_t))
		{	
		;
		return (do_deallocate(_Ptr, _Bytes, _Align));
		}

	[[nodiscard]] bool is_equal(const memory_resource& _That) const noexcept
		{	
		return (do_is_equal(_That));
		}

private:
	virtual void * do_allocate(size_t _Bytes, size_t _Align) = 0;
	virtual void do_deallocate(void * _Ptr, size_t _Bytes, size_t _Align) = 0;
	virtual bool do_is_equal(const memory_resource& _That) const noexcept = 0;
	};

[[nodiscard]] inline bool operator==(const memory_resource& _Left, const memory_resource& _Right) noexcept
	{
	return (&_Left == &_Right || _Left.is_equal(_Right));
	}

[[nodiscard]] inline bool operator!=(const memory_resource& _Left, const memory_resource& _Right) noexcept
	{
	return (!(_Left == _Right));
	}

		
extern "C"  memory_resource * __cdecl _Aligned_get_default_resource() noexcept;
extern "C"  memory_resource * __cdecl _Unaligned_get_default_resource() noexcept;

[[nodiscard]] inline memory_resource * get_default_resource() noexcept
	{

	return (_Aligned_get_default_resource());


#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"
	}

		
template<class _Ty>
	class polymorphic_allocator
	{
public:
	template<class>
		friend class polymorphic_allocator;

	using value_type = _Ty;

	polymorphic_allocator() noexcept = default;

	 polymorphic_allocator(memory_resource * const _Resource_) noexcept 
		: _Resource{_Resource_}
		{	
		;
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"
		}

	polymorphic_allocator(const polymorphic_allocator&) = default;

	template<class _Uty>
		polymorphic_allocator(const polymorphic_allocator<_Uty>& _That) noexcept
		: _Resource{_That._Resource}
		{	
		}

	polymorphic_allocator& operator=(const polymorphic_allocator&) = delete;

	[[nodiscard]] __declspec(allocator) _Ty * allocate( const size_t _Count)
		{	
		void * const _Vp = _Resource->allocate(_Get_size_of_n<sizeof(_Ty)>(_Count), alignof(_Ty));
		return (static_cast<_Ty *>(_Vp));
		}

	void deallocate(_Ty * const _Ptr, const size_t _Count) noexcept 
		{	
		_Resource->deallocate(_Ptr, _Get_size_of_n<sizeof(_Ty)>(_Count), alignof(_Ty));
		}

	template<class _Uty,
		class... _Types>
		void construct(_Uty * const _Ptr, _Types&&... _Args)
		{	
		allocator<char> _Al{};
		_Uses_allocator_construct(_Ptr, _Al, *this, ::std:: forward<_Types>(_Args)...);
		}

	[[nodiscard]] polymorphic_allocator select_on_container_copy_construction() const noexcept 
		{	
		return {};
		}

	[[nodiscard]] memory_resource * resource() const noexcept 
		{	
		return (_Resource);
		}

private:
	memory_resource * _Resource = ::std:: pmr::get_default_resource();
	};

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] inline bool operator==(
		const polymorphic_allocator<_Ty1>& _Left,
		const polymorphic_allocator<_Ty2>& _Right) noexcept
	{	
	return (*_Left.resource() == *_Right.resource());
	}

template<class _Ty1,
	class _Ty2>
	[[nodiscard]] inline bool operator!=(
		const polymorphic_allocator<_Ty1>& _Left,
		const polymorphic_allocator<_Ty2>& _Right) noexcept
	{
	return (!(_Left == _Right));
	}

} 

 #line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xpolymorphic_allocator.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = ::std:: use_facet<_Ctype>(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.push_back(_Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (_Insert_string(_Ostr, _Str.data(), _Str.size()));
	}

		

inline int stoi(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long long _Ans = :: strtoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const string& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const unsigned long long _Ans = :: strtoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const float _Ans = :: strtof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	_Errno_ref = 0;
	const long double _Ans = :: strtold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
inline int stoi(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno_ref == 34 || _Ans < (-2147483647 - 1) || 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long long stoll(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long long _Ans = :: wcstoll(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long long stoull(const wstring& _Str, size_t *_Idx = nullptr,
	int _Base = 10)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const unsigned long long _Ans = :: wcstoull(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const float _Ans = :: wcstof(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const wstring& _Str, size_t *_Idx = nullptr)
	{	
	int& _Errno_ref = (*_errno());	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	_Errno_ref = 0;
	const long double _Ans = :: wcstold(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno_ref == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != nullptr)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
template<class _Elem,
	class _UTy> inline
	_Elem* _UIntegral_to_buff(_Elem* _RNext, _UTy _UVal)
	{	
	static_assert(is_unsigned_v<_UTy>, "_UTy must be unsigned");


	auto _UVal_trunc = _UVal;





















#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"

	do
		{
		*--_RNext = static_cast<_Elem>('0' + _UVal_trunc % 10);
		_UVal_trunc /= 10;
		}
	while (_UVal_trunc != 0);
	return (_RNext);
	}

template<class _Elem,
	class _Ty> inline
	basic_string<_Elem> _Integral_to_string(const _Ty _Val)
	{	
	static_assert(is_integral_v<_Ty>, "_Ty must be integral");
	using _UTy = make_unsigned_t<_Ty>;
	_Elem _Buff[21]; 
	_Elem* const _Buff_end = ::std:: end(_Buff);
	_Elem* _RNext = _Buff_end;
	const auto _UVal = static_cast<_UTy>(_Val);
	if (_Val < 0)
		{
		_RNext = _UIntegral_to_buff(_RNext, 0 - _UVal);
		*--_RNext = '-';
		}
	else
		_RNext = _UIntegral_to_buff(_RNext, _UVal);

	return (basic_string<_Elem>(_RNext, _Buff_end));
	}

template<class _Ty> inline
	string _Floating_to_string(const char *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point_v<_Ty>,
		"_Ty must be floating point");

	const auto _Len = static_cast<size_t>(:: _scprintf(_Fmt, _Val));
	string _Str(_Len, '\0');
	:: sprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	return (_Str);
	}

template<class _Ty> inline
	wstring _Floating_to_wstring(const wchar_t *_Fmt, _Ty _Val)
	{	
	static_assert(is_floating_point_v<_Ty>,
		"_Ty must be floating point");

	const auto _Len = static_cast<size_t>(:: _scwprintf(_Fmt, _Val));
	wstring _Str(_Len, L'\0');
	:: swprintf_s(&_Str[0], _Len + 1, _Fmt, _Val);
	return (_Str);
	}



		
[[nodiscard]] inline string to_string(int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(unsigned int _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(unsigned long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(unsigned long long _Val)
	{	
	return (_Integral_to_string<char>(_Val));
	}

[[nodiscard]] inline string to_string(float _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

[[nodiscard]] inline string to_string(double _Val)
	{	
	return (_Floating_to_string("%f", _Val));
	}

[[nodiscard]] inline string to_string(long double _Val)
	{	
	return (_Floating_to_string("%Lf", _Val));
	}

		
[[nodiscard]] inline wstring to_wstring(int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(unsigned int _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(unsigned long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(unsigned long long _Val)
	{	
	return (_Integral_to_string<wchar_t>(_Val));
	}

[[nodiscard]] inline wstring to_wstring(float _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

[[nodiscard]] inline wstring to_wstring(double _Val)
	{	
	return (_Floating_to_wstring(L"%f", _Val));
	}

[[nodiscard]] inline wstring to_wstring(long double _Val)
	{	
	return (_Floating_to_wstring(L"%Lf", _Val));
	}

	
inline namespace literals {
inline namespace string_literals {
[[nodiscard]] inline string operator "" s(const char *_Str, size_t _Len)
	{	
	return (string(_Str, _Len));
	}

[[nodiscard]] inline wstring operator "" s(const wchar_t *_Str, size_t _Len)
	{	
	return (wstring(_Str, _Len));
	}

[[nodiscard]] inline u16string operator "" s(const char16_t *_Str, size_t _Len)
	{	
	return (u16string(_Str, _Len));
	}

[[nodiscard]] inline u32string operator "" s(const char32_t *_Str, size_t _Len)
	{	
	return (u32string(_Str, _Len));
	}
}	
}	


namespace pmr {
template<class _Elem,
	class _Traits = char_traits<_Elem>>
	using basic_string = ::std:: basic_string<_Elem, _Traits, polymorphic_allocator<_Elem>>;

using string = basic_string<char>;
using u16string = basic_string<char16_t>;
using u32string = basic_string<char32_t>;
using wstring = basic_string<wchar_t>;
} 
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\string"





#line 53 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"

#pragma once






#pragma pack(push,8)
#pragma warning(push,3)
#pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )




namespace std {
		
template<class _Container>
	class front_insert_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using container_type = _Container;

	explicit front_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	front_insert_iterator& operator=(const typename _Container::value_type& _Val)
		{	
		container->push_front(_Val);
		return (*this);
		}

	front_insert_iterator& operator=(typename _Container::value_type&& _Val)
		{	
		container->push_front(::std:: move(_Val));
		return (*this);
		}

	[[nodiscard]] front_insert_iterator& operator*()
		{	
		return (*this);
		}

	front_insert_iterator& operator++()
		{	
		return (*this);
		}

	front_insert_iterator operator++(int)
		{	
		return (*this);
		}

protected:
	_Container * container;	
	};

		
template<class _Container>
	[[nodiscard]] inline front_insert_iterator<_Container> front_inserter(_Container& _Cont)
	{	
	return (front_insert_iterator<_Container>(_Cont));
	}


		
template<class _Container>
	class insert_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using container_type = _Container;

	insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
		: container(::std:: addressof(_Cont)), iter(_Where)
		{	
		}

	insert_iterator& operator=(const typename _Container::value_type& _Val)
		{	
		iter = container->insert(iter, _Val);
		++iter;
		return (*this);
		}

	insert_iterator& operator=(typename _Container::value_type&& _Val)
		{	
		iter = container->insert(iter, ::std:: move(_Val));
		++iter;
		return (*this);
		}

	[[nodiscard]] insert_iterator& operator*()
		{	
		return (*this);
		}

	insert_iterator& operator++()
		{	
		return (*this);
		}

	insert_iterator& operator++(int)
		{	
		return (*this);
		}

protected:
	_Container * container;	
	typename _Container::iterator iter;	
	};

		
template<class _Container>
	[[nodiscard]] inline insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where)
	{	
	return (insert_iterator<_Container>(_Cont, _Where));
	}


		
template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem>,
	class _Diff = ptrdiff_t>
	class istream_iterator
	{	
public:
	using iterator_category = input_iterator_tag;
	using value_type = _Ty;
	using difference_type = _Diff;
	using pointer = const _Ty *;
	using reference = const _Ty&;

	using char_type = _Elem;
	using traits_type = _Traits;
	using istream_type = basic_istream<_Elem, _Traits>;

	constexpr istream_iterator()
		: _Myistr(nullptr), _Myval()
		{	
		}

	istream_iterator(istream_type& _Istr)
		: _Myistr(::std:: addressof(_Istr))
		{	
		_Getval();
		}

	[[nodiscard]] const _Ty& operator*() const
		{	
		return (_Myval);
		}

	[[nodiscard]] const _Ty * operator->() const
		{	
		return (::std:: addressof(_Myval));
		}

	istream_iterator& operator++()
		{	
		_Getval();
		return (*this);
		}

	istream_iterator operator++(int)
		{	
		istream_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool _Equal(const istream_iterator& _Right) const
		{	
		return (_Myistr == _Right._Myistr);
		}

protected:
	void _Getval()
		{	
		if (_Myistr != nullptr && !(*_Myistr >> _Myval))
			{
			_Myistr = nullptr;
			}
		}

	istream_type * _Myistr;	
	_Ty _Myval;	
	};

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	[[nodiscard]] inline bool operator==(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	[[nodiscard]] inline bool operator!=(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (!(_Left == _Right));
	}


		
template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem> >
	class ostream_iterator
	{	
public:
	using iterator_category = output_iterator_tag;
	using value_type = void;
	using difference_type = void;
	using pointer = void;
	using reference = void;

	using char_type = _Elem;
	using traits_type = _Traits;
	using ostream_type = basic_ostream<_Elem, _Traits>;

	ostream_iterator(ostream_type& _Ostr, const _Elem * const _Delim = nullptr)
		: _Mydelim(_Delim), _Myostr(::std:: addressof(_Ostr))
		{	
		}

	ostream_iterator& operator=(const _Ty& _Val)
		{	
		*_Myostr << _Val;
		if (_Mydelim != nullptr)
			{
			*_Myostr << _Mydelim;
			}

		return (*this);
		}

	[[nodiscard]] ostream_iterator& operator*()
		{	
		return (*this);
		}

	ostream_iterator& operator++()
		{	
		return (*this);
		}

	ostream_iterator& operator++(int)
		{	
		return (*this);
		}

protected:
	const _Elem * _Mydelim;	
	ostream_type * _Myostr;	
	};
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;

		
template<class _Ptr>
	class checked_array_iterator
	{	
	static_assert(::std:: is_pointer_v<_Ptr>, "checked_array_iterator requires pointers");
public:
	using iterator_category = typename iterator_traits<_Ptr>::iterator_category;
	using value_type = typename iterator_traits<_Ptr>::value_type;
	using difference_type = typename iterator_traits<_Ptr>::difference_type;
	using pointer = typename iterator_traits<_Ptr>::pointer;
	using reference = typename iterator_traits<_Ptr>::reference;

	constexpr checked_array_iterator() noexcept
		: _Myarray(nullptr), _Mysize(0), _Myindex(0)
		{	
		}

	constexpr checked_array_iterator(const _Ptr _Array, const size_t _Size, const size_t _Index = 0) noexcept
		: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
		{	
		do { if (_Index <= _Size) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		}

	[[nodiscard]] constexpr _Ptr base() const noexcept
		{	
		return (_Myarray + _Myindex);
		}

	[[nodiscard]] constexpr reference operator*() const noexcept
		{	
		return (*operator->());
		}

	[[nodiscard]] constexpr pointer operator->() const noexcept
		{	
		do { if (_Myarray) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		do { if (_Myindex < _Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		return (_Myarray + _Myindex);
		}

	constexpr checked_array_iterator& operator++() noexcept
		{	
		do { if (_Myarray) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		do { if (_Myindex < _Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		++_Myindex;
		return (*this);
		}

	constexpr checked_array_iterator operator++(int) noexcept
		{	
		checked_array_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	constexpr checked_array_iterator& operator--() noexcept
		{	
		do { if (_Myarray) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		do { if (_Myindex != 0) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		--_Myindex;
		return (*this);
		}

	constexpr checked_array_iterator operator--(int) noexcept
		{	
		checked_array_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	constexpr checked_array_iterator& operator+=(const difference_type _Off) noexcept
		{	
		if (_Off != 0)
			{
			do { if (_Myarray) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
			}

		if (_Off < 0)
			{
#pragma warning(suppress: 4146)	
			do { if (_Myindex >= -static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}

		if (_Off > 0)
			{
			do { if (_Mysize - _Myindex >= static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}

		_Myindex += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr checked_array_iterator operator+(const difference_type _Off) const noexcept
		{	
		checked_array_iterator _Tmp = *this;
		_Tmp += _Off;
		return (_Tmp);
		}

	friend constexpr checked_array_iterator operator+(const difference_type _Off,
		const checked_array_iterator<_Ptr>& _Next) noexcept 
		{	
		return (_Next + _Off);
		}

	constexpr checked_array_iterator& operator-=(const difference_type _Off) noexcept
		{	
		if (_Off != 0)
			{
			do { if (_Myarray) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
			}

		if (_Off > 0)
			{
			do { if (_Myindex >= static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}

		if (_Off < 0)
			{
#pragma warning(suppress: 4146)	
			do { if (_Mysize - _Myindex >= -static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}

		_Myindex -= _Off;
		return (*this);
		}

	[[nodiscard]] constexpr checked_array_iterator operator-(const difference_type _Off) const noexcept
		{	
		checked_array_iterator _Tmp = *this;
		_Tmp -= _Off;
		return (_Tmp);
		}

	[[nodiscard]] constexpr difference_type operator-(const checked_array_iterator& _Right) const noexcept
		{	
		do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
		return (static_cast<difference_type>(_Myindex - _Right._Myindex));
		}

	[[nodiscard]] constexpr reference operator[](const difference_type _Off) const noexcept
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] constexpr bool operator==(const checked_array_iterator& _Right) const noexcept
		{	
		do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
		return (_Myindex == _Right._Myindex);
		}

	[[nodiscard]] constexpr bool operator!=(const checked_array_iterator& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] constexpr bool operator<(const checked_array_iterator& _Right) const noexcept
		{	
		do { if (_Myarray == _Right._Myarray && _Mysize == _Right._Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
		return (_Myindex < _Right._Myindex);
		}

	[[nodiscard]] constexpr bool operator>(const checked_array_iterator& _Right) const noexcept
		{	
		return (_Right < *this);
		}

	[[nodiscard]] constexpr bool operator<=(const checked_array_iterator& _Right) const noexcept
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] constexpr bool operator>=(const checked_array_iterator& _Right) const noexcept
		{	
		return (!(*this < _Right));
		}

	friend constexpr void _Verify_range(const checked_array_iterator& _First,
		const checked_array_iterator& _Last) noexcept
		{
		do { if (_First._Myarray == _Last._Myarray && _First._Mysize == _Last._Mysize) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
		do { if (_First._Myindex <= _Last._Myindex) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
		}

	constexpr void _Verify_offset(const difference_type _Off) const noexcept
		{
		if (_Off < 0)
			{
#pragma warning(suppress: 4146)	
			do { if (_Myindex >= -static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}

		if (_Off > 0)
			{
			do { if (_Mysize - _Myindex >= static_cast<size_t>(_Off)) { } else { do { ; ::_invalid_parameter_noinfo_noreturn(); } while (false); } ; } while (false);
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
			}
		}

	[[nodiscard]] constexpr _Ptr _Unwrapped() const noexcept
		{
		return (_Myarray + _Myindex);
		}

	constexpr void _Seek_to(_Ptr _It) noexcept
		{
		_Myindex = static_cast<size_t>(_It - _Myarray);
		}

private:
	_Ptr _Myarray;	
	size_t _Mysize;	
	size_t _Myindex;	
	};

template<class _Ptr>
	[[nodiscard]] constexpr checked_array_iterator<_Ptr> make_checked_array_iterator(
		const _Ptr _Array, const size_t _Size, const size_t _Index = 0)
	{	
	return (checked_array_iterator<_Ptr>(_Array, _Size, _Index));
	}

		
template<class _Ptr>
	class unchecked_array_iterator
	{	
	static_assert(::std:: is_pointer_v<_Ptr>, "unchecked_array_iterator requires pointers");
public:
	using iterator_category = typename iterator_traits<_Ptr>::iterator_category;
	using value_type = typename iterator_traits<_Ptr>::value_type;
	using difference_type = typename iterator_traits<_Ptr>::difference_type;
	using pointer = typename iterator_traits<_Ptr>::pointer;
	using reference = typename iterator_traits<_Ptr>::reference;

	constexpr unchecked_array_iterator() noexcept
		: _Myptr(nullptr)
		{	
		}

	constexpr explicit unchecked_array_iterator(const _Ptr _Src) noexcept
		: _Myptr(_Src)
		{	
		}

	[[nodiscard]] constexpr _Ptr base() const noexcept
		{	
		return (_Myptr);
		}

	[[nodiscard]] constexpr reference operator*() const noexcept
		{	
		return (*_Myptr);
		}

	[[nodiscard]] constexpr pointer operator->() const noexcept
		{	
		return (_Myptr);
		}

	constexpr unchecked_array_iterator& operator++() noexcept
		{	
		++_Myptr;
		return (*this);
		}

	constexpr unchecked_array_iterator operator++(int) noexcept
		{	
		unchecked_array_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	constexpr unchecked_array_iterator& operator--() noexcept
		{	
		--_Myptr;
		return (*this);
		}

	constexpr unchecked_array_iterator operator--(int) noexcept
		{	
		unchecked_array_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	constexpr unchecked_array_iterator& operator+=(const difference_type _Off) noexcept
		{	
		_Myptr += _Off;
		return (*this);
		}

	[[nodiscard]] constexpr unchecked_array_iterator operator+(const difference_type _Off) const noexcept
		{	
		unchecked_array_iterator _Tmp = *this;
		_Tmp += _Off;
		return (_Tmp);
		}

	friend constexpr unchecked_array_iterator operator+(const difference_type _Off,
		const unchecked_array_iterator& _Next) noexcept  
		{	
		return (_Next + _Off);
		}

	constexpr unchecked_array_iterator& operator-=(const difference_type _Off) noexcept
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] constexpr unchecked_array_iterator operator-(const difference_type _Off) const noexcept
		{	
		unchecked_array_iterator _Tmp = *this;
		_Tmp -= _Off;
		return (_Tmp);
		}

	[[nodiscard]] constexpr difference_type operator-(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (_Myptr - _Right._Myptr);
		}

	[[nodiscard]] constexpr reference operator[](const difference_type _Off) const noexcept
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] constexpr bool operator==(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (_Myptr == _Right._Myptr);
		}

	[[nodiscard]] constexpr bool operator!=(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] constexpr bool operator<(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (_Myptr < _Right._Myptr);
		}

	[[nodiscard]] constexpr bool operator>(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (_Right < *this);
		}

	[[nodiscard]] constexpr bool operator<=(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] constexpr bool operator>=(const unchecked_array_iterator& _Right) const noexcept
		{	
		return (!(*this < _Right));
		}







#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"

	static constexpr bool _Unwrap_when_unverified = true;

	[[nodiscard]] constexpr _Ptr _Unwrapped() const noexcept
		{
		return (_Myptr);
		}

	constexpr void _Seek_to(_Ptr _It) noexcept
		{
		_Myptr = _It;
		}

private:
	_Ptr _Myptr;	
	};

template<class _Ptr>
	[[nodiscard]] inline unchecked_array_iterator<_Ptr> make_unchecked_array_iterator(const _Ptr _It) noexcept
	{	
	return (unchecked_array_iterator<_Ptr>(_It));
	}
}



#pragma warning(pop)
#pragma pack(pop)
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\iterator"





#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"








#line 63 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"








__declspec(dllimport) char *qstrdup(const char *);

inline uint qstrlen(const char *str)
{ return str ? uint(strlen(str)) : 0; }

inline uint qstrnlen(const char *str, uint maxlen)
{
    uint length = 0;
    if (str) {
        while (length < maxlen && *str++)
            length++;
    }
    return length;
}

__declspec(dllimport) char *qstrcpy(char *dst, const char *src);
__declspec(dllimport) char *qstrncpy(char *dst, const char *src, uint len);

__declspec(dllimport) int qstrcmp(const char *str1, const char *str2);
__declspec(dllimport) int qstrcmp(const QByteArray &str1, const QByteArray &str2);
__declspec(dllimport) int qstrcmp(const QByteArray &str1, const char *str2);
static inline int qstrcmp(const char *str1, const QByteArray &str2)
{ return -qstrcmp(str2, str1); }

inline int qstrncmp(const char *str1, const char *str2, uint len)
{
    return (str1 && str2) ? strncmp(str1, str2, len)
        : (str1 ? 1 : (str2 ? -1 : 0));
}
__declspec(dllimport) int qstricmp(const char *, const char *);
__declspec(dllimport) int qstrnicmp(const char *, const char *, uint len);
__declspec(dllimport) int qstrnicmp(const char *, qsizetype, const char *, qsizetype = -1);


__declspec(dllimport) int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
__declspec(dllimport) int qsnprintf(char *str, size_t n, const char *fmt, ...);


__declspec(dllimport) quint16 qChecksum(const char *s, uint len);                            
__declspec(dllimport) quint16 qChecksum(const char *s, uint len, Qt::ChecksumType standard); 

class QByteRef;
class QString;
class QDataStream;
template <typename T> class QList;

typedef QArrayData QByteArrayData;

template<int N> struct QStaticByteArrayData
{
    QByteArrayData ba;
    char data[N + 1];

    QByteArrayData *data_ptr() const
    {
        static_cast<void>(false && (ba.ref.isStatic()));
        return const_cast<QByteArrayData *>(&ba);
    }
};

struct QByteArrayDataPtr
{
    QByteArrayData *ptr;
};



    

















class __declspec(dllimport) QByteArray
{
private:
    typedef QTypedArrayData<char> Data;

public:
    enum Base64Option {
        Base64Encoding = 0,
        Base64UrlEncoding = 1,

        KeepTrailingEquals = 0,
        OmitTrailingEquals = 2
    };
    typedef QFlags<Base64Option> Base64Options;

    inline QByteArray() noexcept;
    QByteArray(const char *, int size = -1);
    QByteArray(int size, char c);
    QByteArray(int size, Qt::Initialization);
    inline QByteArray(const QByteArray &) noexcept;
    inline ~QByteArray();

    QByteArray &operator=(const QByteArray &) noexcept;
    QByteArray &operator=(const char *str);
    inline QByteArray(QByteArray && other) noexcept : d(other.d) { other.d = Data::sharedNull(); }
    inline QByteArray &operator=(QByteArray &&other) noexcept
    { qSwap(d, other.d); return *this; }

    inline void swap(QByteArray &other) noexcept
    { qSwap(d, other.d); }

    inline int size() const;
    inline bool isEmpty() const;
    void resize(int size);

    QByteArray &fill(char c, int size = -1);

    inline int capacity() const;
    inline void reserve(int size);
    inline void squeeze();


    inline operator const char *() const;
    inline operator const void *() const;
#line 201 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
    inline char *data();
    inline const char *data() const;
    inline const char *constData() const;
    inline void detach();
    inline bool isDetached() const;
    inline bool isSharedWith(const QByteArray &other) const { return d == other.d; }
    void clear();

    inline char at(int i) const;
    inline char operator[](int i) const;
    inline char operator[](uint i) const;
     inline QByteRef operator[](int i);
     inline QByteRef operator[](uint i);
     char front() const { return at(0); }
     inline QByteRef front();
     char back() const { return at(size() - 1); }
     inline QByteRef back();

    int indexOf(char c, int from = 0) const;
    int indexOf(const char *c, int from = 0) const;
    int indexOf(const QByteArray &a, int from = 0) const;
    int lastIndexOf(char c, int from = -1) const;
    int lastIndexOf(const char *c, int from = -1) const;
    int lastIndexOf(const QByteArray &a, int from = -1) const;

    inline bool contains(char c) const;
    inline bool contains(const char *a) const;
    inline bool contains(const QByteArray &a) const;
    int count(char c) const;
    int count(const char *a) const;
    int count(const QByteArray &a) const;

    inline int compare(const char *c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline int compare(const QByteArray &a, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     QByteArray left(int len) const;
     QByteArray right(int len) const;
     QByteArray mid(int index, int len = -1) const;
     QByteArray chopped(int len) const
    { static_cast<void>(false && (len >= 0)); static_cast<void>(false && (len <= size())); return left(size() - len); }

    bool startsWith(const QByteArray &a) const;
    bool startsWith(char c) const;
    bool startsWith(const char *c) const;

    bool endsWith(const QByteArray &a) const;
    bool endsWith(char c) const;
    bool endsWith(const char *c) const;

    bool isUpper() const;
    bool isLower() const;

    void truncate(int pos);
    void chop(int n);








#line 264 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
     QByteArray toLower() const &
    { return toLower_helper(*this); }
     QByteArray toLower() &&
    { return toLower_helper(*this); }
     QByteArray toUpper() const &
    { return toUpper_helper(*this); }
     QByteArray toUpper() &&
    { return toUpper_helper(*this); }
     QByteArray trimmed() const &
    { return trimmed_helper(*this); }
     QByteArray trimmed() &&
    { return trimmed_helper(*this); }
     QByteArray simplified() const &
    { return simplified_helper(*this); }
     QByteArray simplified() &&
    { return simplified_helper(*this); }








#line 289 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

     QByteArray leftJustified(int width, char fill = ' ', bool truncate = false) const;
     QByteArray rightJustified(int width, char fill = ' ', bool truncate = false) const;

    QByteArray &prepend(char c);
    inline QByteArray &prepend(int count, char c);
    QByteArray &prepend(const char *s);
    QByteArray &prepend(const char *s, int len);
    QByteArray &prepend(const QByteArray &a);
    QByteArray &append(char c);
    inline QByteArray &append(int count, char c);
    QByteArray &append(const char *s);
    QByteArray &append(const char *s, int len);
    QByteArray &append(const QByteArray &a);
    QByteArray &insert(int i, char c);
    QByteArray &insert(int i, int count, char c);
    QByteArray &insert(int i, const char *s);
    QByteArray &insert(int i, const char *s, int len);
    QByteArray &insert(int i, const QByteArray &a);
    QByteArray &remove(int index, int len);
    QByteArray &replace(int index, int len, const char *s);
    QByteArray &replace(int index, int len, const char *s, int alen);
    QByteArray &replace(int index, int len, const QByteArray &s);
    inline QByteArray &replace(char before, const char *after);
    QByteArray &replace(char before, const QByteArray &after);
    inline QByteArray &replace(const char *before, const char *after);
    QByteArray &replace(const char *before, int bsize, const char *after, int asize);
    QByteArray &replace(const QByteArray &before, const QByteArray &after);
    inline QByteArray &replace(const QByteArray &before, const char *after);
    QByteArray &replace(const char *before, const QByteArray &after);
    QByteArray &replace(char before, char after);
    inline QByteArray &operator+=(char c);
    inline QByteArray &operator+=(const char *s);
    inline QByteArray &operator+=(const QByteArray &a);

    QList<QByteArray> split(char sep) const;

     QByteArray repeated(int times) const;


     QByteArray &append(const QString &s);
     QByteArray &insert(int i, const QString &s);
     QByteArray &replace(const QString &before, const char *after);
     QByteArray &replace(char c, const QString &after);
     QByteArray &replace(const QString &before, const QByteArray &after);

     QByteArray &operator+=(const QString &s);
     int indexOf(const QString &s, int from = 0) const;
     int lastIndexOf(const QString &s, int from = -1) const;
#line 339 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

    inline  bool operator==(const QString &s2) const;
    inline  bool operator!=(const QString &s2) const;
    inline  bool operator<(const QString &s2) const;
    inline  bool operator>(const QString &s2) const;
    inline  bool operator<=(const QString &s2) const;
    inline  bool operator>=(const QString &s2) const;
#line 347 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

    short toShort(bool *ok = nullptr, int base = 10) const;
    ushort toUShort(bool *ok = nullptr, int base = 10) const;
    int toInt(bool *ok = nullptr, int base = 10) const;
    uint toUInt(bool *ok = nullptr, int base = 10) const;
    long toLong(bool *ok = nullptr, int base = 10) const;
    ulong toULong(bool *ok = nullptr, int base = 10) const;
    qlonglong toLongLong(bool *ok = nullptr, int base = 10) const;
    qulonglong toULongLong(bool *ok = nullptr, int base = 10) const;
    float toFloat(bool *ok = nullptr) const;
    double toDouble(bool *ok = nullptr) const;
    QByteArray toBase64(Base64Options options) const;
    QByteArray toBase64() const; 
    QByteArray toHex() const;
    QByteArray toHex(char separator) const; 
    QByteArray toPercentEncoding(const QByteArray &exclude = QByteArray(),
                                 const QByteArray &include = QByteArray(),
                                 char percent = '%') const;

    inline QByteArray &setNum(short, int base = 10);
    inline QByteArray &setNum(ushort, int base = 10);
    inline QByteArray &setNum(int, int base = 10);
    inline QByteArray &setNum(uint, int base = 10);
    QByteArray &setNum(qlonglong, int base = 10);
    QByteArray &setNum(qulonglong, int base = 10);
    inline QByteArray &setNum(float, char f = 'g', int prec = 6);
    QByteArray &setNum(double, char f = 'g', int prec = 6);
    QByteArray &setRawData(const char *a, uint n); 

     static QByteArray number(int, int base = 10);
     static QByteArray number(uint, int base = 10);
     static QByteArray number(qlonglong, int base = 10);
     static QByteArray number(qulonglong, int base = 10);
     static QByteArray number(double, char f = 'g', int prec = 6);
     static QByteArray fromRawData(const char *, int size);
     static QByteArray fromBase64(const QByteArray &base64, Base64Options options);
     static QByteArray fromBase64(const QByteArray &base64); 
     static QByteArray fromHex(const QByteArray &hexEncoded);
     static QByteArray fromPercentEncoding(const QByteArray &pctEncoded, char percent = '%');










#line 397 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

    typedef char *iterator;
    typedef const char *const_iterator;
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    inline iterator begin();
    inline const_iterator begin() const;
    inline const_iterator cbegin() const;
    inline const_iterator constBegin() const;
    inline iterator end();
    inline const_iterator end() const;
    inline const_iterator cend() const;
    inline const_iterator constEnd() const;
    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const { return const_reverse_iterator(begin()); }

    
    typedef int size_type;
    typedef qptrdiff difference_type;
    typedef const char & const_reference;
    typedef char & reference;
    typedef char *pointer;
    typedef const char *const_pointer;
    typedef char value_type;
    inline void push_back(char c);
    inline void push_back(const char *c);
    inline void push_back(const QByteArray &a);
    inline void push_front(char c);
    inline void push_front(const char *c);
    inline void push_front(const QByteArray &a);
    void shrink_to_fit() { squeeze(); }

    static inline QByteArray fromStdString(const std::string &s);
    inline std::string toStdString() const;

    inline int count() const { return d->size; }
    int length() const { return d->size; }
    bool isNull() const;

    inline QByteArray(QByteArrayDataPtr dd)
        : d(static_cast<Data *>(dd.ptr))
    {
    }

private:
    operator QNoImplicitBoolCast() const;
    Data *d;
    void reallocData(uint alloc, Data::AllocationOptions options);
    void expand(int i);
    QByteArray nulTerminated() const;

    static QByteArray toLower_helper(const QByteArray &a);
    static QByteArray toLower_helper(QByteArray &a);
    static QByteArray toUpper_helper(const QByteArray &a);
    static QByteArray toUpper_helper(QByteArray &a);
    static QByteArray trimmed_helper(const QByteArray &a);
    static QByteArray trimmed_helper(QByteArray &a);
    static QByteArray simplified_helper(const QByteArray &a);
    static QByteArray simplified_helper(QByteArray &a);

    friend class QByteRef;
    friend class QString;
    friend __declspec(dllimport) QByteArray qUncompress(const uchar *data, int nbytes);
public:
    typedef Data * DataPtr;
    inline DataPtr &data_ptr() { return d; }
};

constexpr inline QFlags<QByteArray::Base64Options::enum_type> operator|(QByteArray::Base64Options::enum_type f1, QByteArray::Base64Options::enum_type f2) noexcept { return QFlags<QByteArray::Base64Options::enum_type>(f1) | f2; } constexpr inline QFlags<QByteArray::Base64Options::enum_type> operator|(QByteArray::Base64Options::enum_type f1, QFlags<QByteArray::Base64Options::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QByteArray::Base64Options::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

inline QByteArray::QByteArray() noexcept : d(Data::sharedNull()) { }
inline QByteArray::~QByteArray() { if (!d->ref.deref()) Data::deallocate(d); }
inline int QByteArray::size() const
{ return d->size; }

inline char QByteArray::at(int i) const
{ static_cast<void>(false && (uint(i) < uint(size()))); return d->data()[i]; }
inline char QByteArray::operator[](int i) const
{ static_cast<void>(false && (uint(i) < uint(size()))); return d->data()[i]; }
inline char QByteArray::operator[](uint i) const
{ static_cast<void>(false && (i < uint(size()))); return d->data()[i]; }

inline bool QByteArray::isEmpty() const
{ return d->size == 0; }

inline QByteArray::operator const char *() const
{ return d->data(); }
inline QByteArray::operator const void *() const
{ return d->data(); }
#line 493 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
inline char *QByteArray::data()
{ detach(); return d->data(); }
inline const char *QByteArray::data() const
{ return d->data(); }
inline const char *QByteArray::constData() const
{ return d->data(); }
inline void QByteArray::detach()
{ if (d->ref.isShared() || (d->offset != sizeof(QByteArrayData))) reallocData(uint(d->size) + 1u, d->detachFlags()); }
inline bool QByteArray::isDetached() const
{ return !d->ref.isShared(); }
inline QByteArray::QByteArray(const QByteArray &a) noexcept : d(a.d)
{ d->ref.ref(); }

inline int QByteArray::capacity() const
{ return d->alloc ? d->alloc - 1 : 0; }

inline void QByteArray::reserve(int asize)
{
    if (d->ref.isShared() || uint(asize) + 1u > d->alloc) {
        reallocData(qMax(uint(size()), uint(asize)) + 1u, d->detachFlags() | Data::CapacityReserved);
    } else {
        
        
        d->capacityReserved = true;
    }
}

inline void QByteArray::squeeze()
{
    if (d->ref.isShared() || uint(d->size) + 1u < d->alloc) {
        reallocData(uint(d->size) + 1u, d->detachFlags() & ~Data::CapacityReserved);
    } else {
        
        
        d->capacityReserved = false;
    }
}

namespace QtPrivate {
namespace DeprecatedRefClassBehavior {
    enum class EmittingClass {
        QByteRef,
        QCharRef,
    };

    enum class WarningType {
        OutOfRange,
        DelayedDetach,
    };

    __declspec(dllimport)  void warn(WarningType w, EmittingClass c);
} 
} 

class

__declspec(dllimport)
#line 551 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
QByteRef {  
    QByteArray &a;
    int i;
    inline QByteRef(QByteArray &array, int idx)
        : a(array),i(idx) {}
    friend class QByteArray;
public:
    inline operator char() const
    {
        using namespace QtPrivate::DeprecatedRefClassBehavior;
        if ((i < a.d->size))
            return a.d->data()[i];



        return char(0);
    }
    inline QByteRef &operator=(char c)
    {
        using namespace QtPrivate::DeprecatedRefClassBehavior;
        if ((i >= a.d->size)) {



            a.expand(i);
        } else {




            a.detach();
        }
        a.d->data()[i] = c;
        return *this;
    }
    inline QByteRef &operator=(const QByteRef &c)
    {
        return operator=(char(c));
    }
    inline bool operator==(char c) const
    { return a.d->data()[i] == c; }
    inline bool operator!=(char c) const
    { return a.d->data()[i] != c; }
    inline bool operator>(char c) const
    { return a.d->data()[i] > c; }
    inline bool operator>=(char c) const
    { return a.d->data()[i] >= c; }
    inline bool operator<(char c) const
    { return a.d->data()[i] < c; }
    inline bool operator<=(char c) const
    { return a.d->data()[i] <= c; }
};

inline QByteRef QByteArray::operator[](int i)
{ static_cast<void>(false && (i >= 0)); detach(); return QByteRef(*this, i); }
inline QByteRef QByteArray::operator[](uint i)
{  detach(); return QByteRef(*this, i); }
inline QByteRef QByteArray::front() { return operator[](0); }
inline QByteRef QByteArray::back() { return operator[](size() - 1); }
inline QByteArray::iterator QByteArray::begin()
{ detach(); return d->data(); }
inline QByteArray::const_iterator QByteArray::begin() const
{ return d->data(); }
inline QByteArray::const_iterator QByteArray::cbegin() const
{ return d->data(); }
inline QByteArray::const_iterator QByteArray::constBegin() const
{ return d->data(); }
inline QByteArray::iterator QByteArray::end()
{ detach(); return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::end() const
{ return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::cend() const
{ return d->data() + d->size; }
inline QByteArray::const_iterator QByteArray::constEnd() const
{ return d->data() + d->size; }
inline QByteArray &QByteArray::append(int n, char ch)
{ return insert(d->size, n, ch); }
inline QByteArray &QByteArray::prepend(int n, char ch)
{ return insert(0, n, ch); }
inline QByteArray &QByteArray::operator+=(char c)
{ return append(c); }
inline QByteArray &QByteArray::operator+=(const char *s)
{ return append(s); }
inline QByteArray &QByteArray::operator+=(const QByteArray &a)
{ return append(a); }
inline void QByteArray::push_back(char c)
{ append(c); }
inline void QByteArray::push_back(const char *c)
{ append(c); }
inline void QByteArray::push_back(const QByteArray &a)
{ append(a); }
inline void QByteArray::push_front(char c)
{ prepend(c); }
inline void QByteArray::push_front(const char *c)
{ prepend(c); }
inline void QByteArray::push_front(const QByteArray &a)
{ prepend(a); }
inline bool QByteArray::contains(const QByteArray &a) const
{ return indexOf(a) != -1; }
inline bool QByteArray::contains(char c) const
{ return indexOf(c) != -1; }
inline int QByteArray::compare(const char *c, Qt::CaseSensitivity cs) const
{
    return cs == Qt::CaseSensitive ? qstrcmp(*this, c) :
                                     qstrnicmp(data(), size(), c, -1);
}
inline int QByteArray::compare(const QByteArray &a, Qt::CaseSensitivity cs) const
{
    return cs == Qt::CaseSensitive ? qstrcmp(*this, a) :
                                     qstrnicmp(data(), size(), a.data(), a.size());
}
inline bool operator==(const QByteArray &a1, const QByteArray &a2) noexcept
{ return (a1.size() == a2.size()) && (memcmp(a1.constData(), a2.constData(), a1.size())==0); }
inline bool operator==(const QByteArray &a1, const char *a2) noexcept
{ return a2 ? qstrcmp(a1,a2) == 0 : a1.isEmpty(); }
inline bool operator==(const char *a1, const QByteArray &a2) noexcept
{ return a1 ? qstrcmp(a1,a2) == 0 : a2.isEmpty(); }
inline bool operator!=(const QByteArray &a1, const QByteArray &a2) noexcept
{ return !(a1==a2); }
inline bool operator!=(const QByteArray &a1, const char *a2) noexcept
{ return a2 ? qstrcmp(a1,a2) != 0 : !a1.isEmpty(); }
inline bool operator!=(const char *a1, const QByteArray &a2) noexcept
{ return a1 ? qstrcmp(a1,a2) != 0 : !a2.isEmpty(); }
inline bool operator<(const QByteArray &a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) < 0; }
 inline bool operator<(const QByteArray &a1, const char *a2) noexcept
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<(const char *a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) < 0; }
inline bool operator<=(const QByteArray &a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const QByteArray &a1, const char *a2) noexcept
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator<=(const char *a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) <= 0; }
inline bool operator>(const QByteArray &a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const QByteArray &a1, const char *a2) noexcept
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>(const char *a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) > 0; }
inline bool operator>=(const QByteArray &a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const QByteArray &a1, const char *a2) noexcept
{ return qstrcmp(a1, a2) >= 0; }
inline bool operator>=(const char *a1, const QByteArray &a2) noexcept
{ return qstrcmp(a1, a2) >= 0; }

inline const QByteArray operator+(const QByteArray &a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, const char *a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const QByteArray &a1, char a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(const char *a1, const QByteArray &a2)
{ return QByteArray(a1) += a2; }
inline const QByteArray operator+(char a1, const QByteArray &a2)
{ return QByteArray(&a1, 1) += a2; }
#line 710 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
inline bool QByteArray::contains(const char *c) const
{ return indexOf(c) != -1; }
inline QByteArray &QByteArray::replace(char before, const char *c)
{ return replace(&before, 1, c, qstrlen(c)); }
inline QByteArray &QByteArray::replace(const QByteArray &before, const char *c)
{ return replace(before.constData(), before.size(), c, qstrlen(c)); }
inline QByteArray &QByteArray::replace(const char *before, const char *after)
{ return replace(before, qstrlen(before), after, qstrlen(after)); }

inline QByteArray &QByteArray::setNum(short n, int base)
{ return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(ushort(n)), base); }
inline QByteArray &QByteArray::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(int n, int base)
{ return base == 10 ? setNum(qlonglong(n), base) : setNum(qulonglong(uint(n)), base); }
inline QByteArray &QByteArray::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QByteArray &QByteArray::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }

inline std::string QByteArray::toStdString() const
{ return std::string(constData(), length()); }

inline QByteArray QByteArray::fromStdString(const std::string &s)
{ return QByteArray(s.data(), int(s.size())); }


__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QByteArray &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QByteArray &);
#line 740 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"


__declspec(dllimport) QByteArray qCompress(const uchar* data, int nbytes, int compressionLevel = -1);
__declspec(dllimport) QByteArray qUncompress(const uchar* data, int nbytes);
inline QByteArray qCompress(const QByteArray& data, int compressionLevel = -1)
{ return qCompress(reinterpret_cast<const uchar *>(data.constData()), data.size(), compressionLevel); }
inline QByteArray qUncompress(const QByteArray& data)
{ return qUncompress(reinterpret_cast<const uchar*>(data.constData()), data.size()); }
#line 749 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"

template<> class QTypeInfo<QByteArray > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QByteArray>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QByteArray>(), isLarge = (sizeof(QByteArray)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QByteArray >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QByteArray) }; static inline const char *name() { return "QByteArray"; } }; inline void swap(QByteArray &value1, QByteArray &value2) noexcept(noexcept(value1.swap(value2))) { value1.swap(value2); }



#line 755 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearray.h"
#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainerfwd.h"















































template <class Key, class T> class QCache;
template <class Key, class T> class QHash;

template <class T> class QLinkedList;
#line 53 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainerfwd.h"
template <class T> class QList;
template <class Key, class T> class QMap;
template <class Key, class T> class QMultiHash;
template <class Key, class T> class QMultiMap;
template <class T1, class T2> struct QPair;
template <class T> class QQueue;
template <class T> class QSet;
template <class T> class QStack;
template<class T, int Prealloc = 256> class QVarLengthArray;
template <class T> class QVector;



#line 67 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainerfwd.h"
#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"













































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"












#pragma once






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"







#pragma once












__pragma(pack(push, 8)) extern "C" {
























#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"

    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;

    
    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;






















































#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"





    
    typedef _JBTYPE jmp_buf[16];
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"




    
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"




int __cdecl _setjmp(
      jmp_buf _Buf
    );


    __declspec(noreturn) void __cdecl longjmp(
          jmp_buf _Buf,
          int     _Value
        ) noexcept(false);





#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\setjmp.h"


} __pragma(pack(pop))
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"



#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"



    
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"













#pragma once



#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"







#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"










#pragma once



#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"







#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"




















#pragma once



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"







#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"



#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"



























#pragma once



#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"







#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"














#pragma once






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"



#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"


extern "C" { 


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;









































































































































#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"


}; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\mmintrin.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;




#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 












































































 
 
 


extern "C" { 
  
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);








#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"





extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128  _mm_cvtsi64_ss(__m128 _A, __int64 _B);
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);



















#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);


#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
























#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"







 
 
 


















































































































#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"



}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"

#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xmmintrin.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);





#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);


#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);


#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);


#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);

extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);

extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);







#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);


#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);


#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);



#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);


#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"


}; 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"

#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\emmintrin.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


}; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"

#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\pmmintrin.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"









extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    

    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    
    

    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);





#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    
    
    
    
    
    
    

    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);



#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);



#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);





#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);



#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);





#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"


};
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"

#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\tmmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"


















































extern "C" {
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128, __m128, const int );
        extern __m128  _mm_blendv_ps(__m128, __m128, __m128 );

        
        

        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );

        
        

        extern __m128  _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);

        

        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);

        
        

        extern __m128i _mm_mullo_epi32(__m128i, __m128i);

        
        

        extern __m128i _mm_mul_epi32(__m128i, __m128i);

        
        

        extern int _mm_testz_si128(__m128i , __m128i );

        
        

        extern int _mm_testc_si128(__m128i , __m128i );

        
        
        

        extern int _mm_testnzc_si128(__m128i , __m128i );

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );

        




        
        

        extern int _mm_extract_ps(__m128 , const int );

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i , const int );
        extern int   _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i);

        

        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );

        

        extern __m128  _mm_round_ps(__m128  , int );
        extern __m128  _mm_round_ss(__m128 , __m128  , int );

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);


        
        

        extern __m128i _mm_packus_epi32(__m128i, __m128i);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );

        





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"
        extern __m128i _mm_stream_load_si128(const __m128i*);
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"


}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"

#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\smmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"



extern "C" {
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"













































    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int     _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int     _mm_cmpistrz (__m128i , __m128i , const int );
    extern int     _mm_cmpistrc (__m128i , __m128i , const int );
    extern int     _mm_cmpistrs (__m128i , __m128i , const int );
    extern int     _mm_cmpistro (__m128i , __m128i , const int );
    extern int     _mm_cmpistra (__m128i , __m128i , const int );

    extern int     _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"


}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\nmmintrin.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"



extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



}; 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"

#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\wmmintrin.h"
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"




typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);



























#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"








extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);
#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);
#line 1301 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);
#line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);
#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"





extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);
#line 1329 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"







extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);
#line 1341 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"





extern unsigned int     __cdecl _readfsbase_u32();
extern unsigned int     __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);
#line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"




extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
















extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64          _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );
#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"








extern unsigned int     _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"








extern unsigned int     _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);
#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"






extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);
#line 1975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"











extern unsigned int     __cdecl _xbegin(void);
extern void             __cdecl _xend(void);
extern void             __cdecl _xabort(const unsigned int);
extern unsigned char    __cdecl _xtest(void);








extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);
#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"










extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"





extern unsigned short   __cdecl _load_be_u16(void const*);
extern unsigned int     __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


extern __m256i __cdecl _mm256_insert_epi8 (__m256i , int , const int );
extern __m256i __cdecl _mm256_insert_epi16(__m256i , int , const int );
extern __m256i __cdecl _mm256_insert_epi32(__m256i , int , const int );

extern __m256i __cdecl _mm256_insert_epi64(__m256i , __int64 , const int );
#line 2081 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"


extern int __cdecl _mm256_extract_epi8 (__m256i , const int );
extern int __cdecl _mm256_extract_epi16(__m256i , const int );
extern int __cdecl _mm256_extract_epi32(__m256i , const int );

extern __int64 __cdecl _mm256_extract_epi64(__m256i , const int );
#line 2089 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"


extern __m256d __cdecl _mm256_zextpd128_pd256(__m128d);
extern __m256  __cdecl _mm256_zextps128_ps256(__m128);
extern __m256i __cdecl _mm256_zextsi128_si256(__m128i);


extern unsigned int __cdecl _rdpid_u32(void);

extern void         __cdecl _ptwrite32(unsigned int);

extern void         __cdecl _ptwrite64(unsigned __int64);
#line 2102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"




extern void             __cdecl _incsspd (unsigned int);
extern unsigned int     __cdecl _rdsspd (void);
extern void             __cdecl _saveprevssp (void);
extern void             __cdecl _rstorssp (void *);
extern void             __cdecl _wrssd (unsigned int, void *);
extern void             __cdecl _wrussd (unsigned int, void *);
extern void             __cdecl _setssbsy (void);
extern void             __cdecl _clrssbsy (void *);
extern void *           __cdecl _switchssp(void *);

extern void             __cdecl _incsspq (unsigned __int64);
extern unsigned __int64 __cdecl _rdsspq (void);
extern void             __cdecl _wrssq (unsigned __int64, void *);
extern void             __cdecl _wrussq(unsigned __int64, void *);
#line 2121 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"


}; 
#line 2125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"










































typedef unsigned char       __mmask8;
typedef unsigned short      __mmask16;
typedef unsigned int        __mmask32;
typedef unsigned __int64    __mmask64;

typedef union __declspec(intrin_type) __declspec(align(64)) __m512 {
    float m512_f32[16];
} __m512;

typedef struct __declspec(intrin_type) __declspec(align(64)) __m512d {
    double m512d_f64[8];
} __m512d;

typedef union  __declspec(intrin_type) __declspec(align(64)) __m512i {
    __int8              m512i_i8[64];
    __int16             m512i_i16[32];
    __int32             m512i_i32[16];
    __int64             m512i_i64[8];
    unsigned __int8     m512i_u8[64];
    unsigned __int16    m512i_u16[32];
    unsigned __int32    m512i_u32[16];
    unsigned __int64    m512i_u64[8];
} __m512i;



extern "C" {

#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"


extern __m256  __cdecl _mm512_castps512_ps256(__m512);
extern __m512  __cdecl _mm512_castpd_ps(__m512d);
extern __m512  __cdecl _mm512_castps256_ps512(__m256);
extern __m512  __cdecl _mm512_castsi512_ps(__m512i);
extern __m512  __cdecl _mm512_castps128_ps512(__m128);

extern __m256d __cdecl _mm512_castpd512_pd256(__m512d);
extern __m512d __cdecl _mm512_castpd256_pd512(__m256d);
extern __m512d __cdecl _mm512_castps_pd(__m512);
extern __m512d __cdecl _mm512_castsi512_pd(__m512i);
extern __m512d __cdecl _mm512_castpd128_pd512(__m128d);

extern __m256i __cdecl _mm512_castsi512_si256(__m512i);
extern __m512i __cdecl _mm512_castpd_si512(__m512d);
extern __m512i __cdecl _mm512_castps_si512(__m512);
extern __m512i __cdecl _mm512_castsi256_si512(__m256i);






typedef enum {
    _MM_BROADCAST32_NONE,   

    _MM_BROADCAST_1X16,     
    _MM_BROADCAST_4X16      
} _MM_BROADCAST32_ENUM;


typedef enum {
    _MM_BROADCAST64_NONE,   

    _MM_BROADCAST_1X8,      
    _MM_BROADCAST_4X8       
} _MM_BROADCAST64_ENUM;






typedef enum {
    _MM_ROUND_MODE_NEAREST,             
    _MM_ROUND_MODE_DOWN,                
    _MM_ROUND_MODE_UP,                  
    _MM_ROUND_MODE_TOWARD_ZERO,         
    _MM_ROUND_MODE_DEFAULT,             
    _MM_ROUND_MODE_NO_EXC = 8,          
} _MM_ROUND_MODE_ENUM;


typedef enum {
    _MM_EXPADJ_NONE,               
    _MM_EXPADJ_4,                  
    _MM_EXPADJ_5,                  
    _MM_EXPADJ_8,                  
    _MM_EXPADJ_16,                 
    _MM_EXPADJ_24,                 
    _MM_EXPADJ_31,                 
    _MM_EXPADJ_32                  
} _MM_EXP_ADJ_ENUM;


typedef enum {
    _MM_SCALE_1 = 1,
    _MM_SCALE_2 = 2,
    _MM_SCALE_4 = 4,
    _MM_SCALE_8 = 8
} _MM_INDEX_SCALE_ENUM;


typedef enum {
    _MM_PERM_AAAA = 0x00, _MM_PERM_AAAB = 0x01, _MM_PERM_AAAC = 0x02,
    _MM_PERM_AAAD = 0x03, _MM_PERM_AABA = 0x04, _MM_PERM_AABB = 0x05,
    _MM_PERM_AABC = 0x06, _MM_PERM_AABD = 0x07, _MM_PERM_AACA = 0x08,
    _MM_PERM_AACB = 0x09, _MM_PERM_AACC = 0x0A, _MM_PERM_AACD = 0x0B,
    _MM_PERM_AADA = 0x0C, _MM_PERM_AADB = 0x0D, _MM_PERM_AADC = 0x0E,
    _MM_PERM_AADD = 0x0F, _MM_PERM_ABAA = 0x10, _MM_PERM_ABAB = 0x11,
    _MM_PERM_ABAC = 0x12, _MM_PERM_ABAD = 0x13, _MM_PERM_ABBA = 0x14,
    _MM_PERM_ABBB = 0x15, _MM_PERM_ABBC = 0x16, _MM_PERM_ABBD = 0x17,
    _MM_PERM_ABCA = 0x18, _MM_PERM_ABCB = 0x19, _MM_PERM_ABCC = 0x1A,
    _MM_PERM_ABCD = 0x1B, _MM_PERM_ABDA = 0x1C, _MM_PERM_ABDB = 0x1D,
    _MM_PERM_ABDC = 0x1E, _MM_PERM_ABDD = 0x1F, _MM_PERM_ACAA = 0x20,
    _MM_PERM_ACAB = 0x21, _MM_PERM_ACAC = 0x22, _MM_PERM_ACAD = 0x23,
    _MM_PERM_ACBA = 0x24, _MM_PERM_ACBB = 0x25, _MM_PERM_ACBC = 0x26,
    _MM_PERM_ACBD = 0x27, _MM_PERM_ACCA = 0x28, _MM_PERM_ACCB = 0x29,
    _MM_PERM_ACCC = 0x2A, _MM_PERM_ACCD = 0x2B, _MM_PERM_ACDA = 0x2C,
    _MM_PERM_ACDB = 0x2D, _MM_PERM_ACDC = 0x2E, _MM_PERM_ACDD = 0x2F,
    _MM_PERM_ADAA = 0x30, _MM_PERM_ADAB = 0x31, _MM_PERM_ADAC = 0x32,
    _MM_PERM_ADAD = 0x33, _MM_PERM_ADBA = 0x34, _MM_PERM_ADBB = 0x35,
    _MM_PERM_ADBC = 0x36, _MM_PERM_ADBD = 0x37, _MM_PERM_ADCA = 0x38,
    _MM_PERM_ADCB = 0x39, _MM_PERM_ADCC = 0x3A, _MM_PERM_ADCD = 0x3B,
    _MM_PERM_ADDA = 0x3C, _MM_PERM_ADDB = 0x3D, _MM_PERM_ADDC = 0x3E,
    _MM_PERM_ADDD = 0x3F, _MM_PERM_BAAA = 0x40, _MM_PERM_BAAB = 0x41,
    _MM_PERM_BAAC = 0x42, _MM_PERM_BAAD = 0x43, _MM_PERM_BABA = 0x44,
    _MM_PERM_BABB = 0x45, _MM_PERM_BABC = 0x46, _MM_PERM_BABD = 0x47,
    _MM_PERM_BACA = 0x48, _MM_PERM_BACB = 0x49, _MM_PERM_BACC = 0x4A,
    _MM_PERM_BACD = 0x4B, _MM_PERM_BADA = 0x4C, _MM_PERM_BADB = 0x4D,
    _MM_PERM_BADC = 0x4E, _MM_PERM_BADD = 0x4F, _MM_PERM_BBAA = 0x50,
    _MM_PERM_BBAB = 0x51, _MM_PERM_BBAC = 0x52, _MM_PERM_BBAD = 0x53,
    _MM_PERM_BBBA = 0x54, _MM_PERM_BBBB = 0x55, _MM_PERM_BBBC = 0x56,
    _MM_PERM_BBBD = 0x57, _MM_PERM_BBCA = 0x58, _MM_PERM_BBCB = 0x59,
    _MM_PERM_BBCC = 0x5A, _MM_PERM_BBCD = 0x5B, _MM_PERM_BBDA = 0x5C,
    _MM_PERM_BBDB = 0x5D, _MM_PERM_BBDC = 0x5E, _MM_PERM_BBDD = 0x5F,
    _MM_PERM_BCAA = 0x60, _MM_PERM_BCAB = 0x61, _MM_PERM_BCAC = 0x62,
    _MM_PERM_BCAD = 0x63, _MM_PERM_BCBA = 0x64, _MM_PERM_BCBB = 0x65,
    _MM_PERM_BCBC = 0x66, _MM_PERM_BCBD = 0x67, _MM_PERM_BCCA = 0x68,
    _MM_PERM_BCCB = 0x69, _MM_PERM_BCCC = 0x6A, _MM_PERM_BCCD = 0x6B,
    _MM_PERM_BCDA = 0x6C, _MM_PERM_BCDB = 0x6D, _MM_PERM_BCDC = 0x6E,
    _MM_PERM_BCDD = 0x6F, _MM_PERM_BDAA = 0x70, _MM_PERM_BDAB = 0x71,
    _MM_PERM_BDAC = 0x72, _MM_PERM_BDAD = 0x73, _MM_PERM_BDBA = 0x74,
    _MM_PERM_BDBB = 0x75, _MM_PERM_BDBC = 0x76, _MM_PERM_BDBD = 0x77,
    _MM_PERM_BDCA = 0x78, _MM_PERM_BDCB = 0x79, _MM_PERM_BDCC = 0x7A,
    _MM_PERM_BDCD = 0x7B, _MM_PERM_BDDA = 0x7C, _MM_PERM_BDDB = 0x7D,
    _MM_PERM_BDDC = 0x7E, _MM_PERM_BDDD = 0x7F, _MM_PERM_CAAA = 0x80,
    _MM_PERM_CAAB = 0x81, _MM_PERM_CAAC = 0x82, _MM_PERM_CAAD = 0x83,
    _MM_PERM_CABA = 0x84, _MM_PERM_CABB = 0x85, _MM_PERM_CABC = 0x86,
    _MM_PERM_CABD = 0x87, _MM_PERM_CACA = 0x88, _MM_PERM_CACB = 0x89,
    _MM_PERM_CACC = 0x8A, _MM_PERM_CACD = 0x8B, _MM_PERM_CADA = 0x8C,
    _MM_PERM_CADB = 0x8D, _MM_PERM_CADC = 0x8E, _MM_PERM_CADD = 0x8F,
    _MM_PERM_CBAA = 0x90, _MM_PERM_CBAB = 0x91, _MM_PERM_CBAC = 0x92,
    _MM_PERM_CBAD = 0x93, _MM_PERM_CBBA = 0x94, _MM_PERM_CBBB = 0x95,
    _MM_PERM_CBBC = 0x96, _MM_PERM_CBBD = 0x97, _MM_PERM_CBCA = 0x98,
    _MM_PERM_CBCB = 0x99, _MM_PERM_CBCC = 0x9A, _MM_PERM_CBCD = 0x9B,
    _MM_PERM_CBDA = 0x9C, _MM_PERM_CBDB = 0x9D, _MM_PERM_CBDC = 0x9E,
    _MM_PERM_CBDD = 0x9F, _MM_PERM_CCAA = 0xA0, _MM_PERM_CCAB = 0xA1,
    _MM_PERM_CCAC = 0xA2, _MM_PERM_CCAD = 0xA3, _MM_PERM_CCBA = 0xA4,
    _MM_PERM_CCBB = 0xA5, _MM_PERM_CCBC = 0xA6, _MM_PERM_CCBD = 0xA7,
    _MM_PERM_CCCA = 0xA8, _MM_PERM_CCCB = 0xA9, _MM_PERM_CCCC = 0xAA,
    _MM_PERM_CCCD = 0xAB, _MM_PERM_CCDA = 0xAC, _MM_PERM_CCDB = 0xAD,
    _MM_PERM_CCDC = 0xAE, _MM_PERM_CCDD = 0xAF, _MM_PERM_CDAA = 0xB0,
    _MM_PERM_CDAB = 0xB1, _MM_PERM_CDAC = 0xB2, _MM_PERM_CDAD = 0xB3,
    _MM_PERM_CDBA = 0xB4, _MM_PERM_CDBB = 0xB5, _MM_PERM_CDBC = 0xB6,
    _MM_PERM_CDBD = 0xB7, _MM_PERM_CDCA = 0xB8, _MM_PERM_CDCB = 0xB9,
    _MM_PERM_CDCC = 0xBA, _MM_PERM_CDCD = 0xBB, _MM_PERM_CDDA = 0xBC,
    _MM_PERM_CDDB = 0xBD, _MM_PERM_CDDC = 0xBE, _MM_PERM_CDDD = 0xBF,
    _MM_PERM_DAAA = 0xC0, _MM_PERM_DAAB = 0xC1, _MM_PERM_DAAC = 0xC2,
    _MM_PERM_DAAD = 0xC3, _MM_PERM_DABA = 0xC4, _MM_PERM_DABB = 0xC5,
    _MM_PERM_DABC = 0xC6, _MM_PERM_DABD = 0xC7, _MM_PERM_DACA = 0xC8,
    _MM_PERM_DACB = 0xC9, _MM_PERM_DACC = 0xCA, _MM_PERM_DACD = 0xCB,
    _MM_PERM_DADA = 0xCC, _MM_PERM_DADB = 0xCD, _MM_PERM_DADC = 0xCE,
    _MM_PERM_DADD = 0xCF, _MM_PERM_DBAA = 0xD0, _MM_PERM_DBAB = 0xD1,
    _MM_PERM_DBAC = 0xD2, _MM_PERM_DBAD = 0xD3, _MM_PERM_DBBA = 0xD4,
    _MM_PERM_DBBB = 0xD5, _MM_PERM_DBBC = 0xD6, _MM_PERM_DBBD = 0xD7,
    _MM_PERM_DBCA = 0xD8, _MM_PERM_DBCB = 0xD9, _MM_PERM_DBCC = 0xDA,
    _MM_PERM_DBCD = 0xDB, _MM_PERM_DBDA = 0xDC, _MM_PERM_DBDB = 0xDD,
    _MM_PERM_DBDC = 0xDE, _MM_PERM_DBDD = 0xDF, _MM_PERM_DCAA = 0xE0,
    _MM_PERM_DCAB = 0xE1, _MM_PERM_DCAC = 0xE2, _MM_PERM_DCAD = 0xE3,
    _MM_PERM_DCBA = 0xE4, _MM_PERM_DCBB = 0xE5, _MM_PERM_DCBC = 0xE6,
    _MM_PERM_DCBD = 0xE7, _MM_PERM_DCCA = 0xE8, _MM_PERM_DCCB = 0xE9,
    _MM_PERM_DCCC = 0xEA, _MM_PERM_DCCD = 0xEB, _MM_PERM_DCDA = 0xEC,
    _MM_PERM_DCDB = 0xED, _MM_PERM_DCDC = 0xEE, _MM_PERM_DCDD = 0xEF,
    _MM_PERM_DDAA = 0xF0, _MM_PERM_DDAB = 0xF1, _MM_PERM_DDAC = 0xF2,
    _MM_PERM_DDAD = 0xF3, _MM_PERM_DDBA = 0xF4, _MM_PERM_DDBB = 0xF5,
    _MM_PERM_DDBC = 0xF6, _MM_PERM_DDBD = 0xF7, _MM_PERM_DDCA = 0xF8,
    _MM_PERM_DDCB = 0xF9, _MM_PERM_DDCC = 0xFA, _MM_PERM_DDCD = 0xFB,
    _MM_PERM_DDDA = 0xFC, _MM_PERM_DDDB = 0xFD, _MM_PERM_DDDC = 0xFE,
    _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;





typedef enum {
    _MM_FIXUP_NO_CHANGE,
    _MM_FIXUP_NEG_INF,
    _MM_FIXUP_NEG_ZERO,
    _MM_FIXUP_POS_ZERO,
    _MM_FIXUP_POS_INF,
    _MM_FIXUP_NAN,
    _MM_FIXUP_MAX_FLOAT,
    _MM_FIXUP_MIN_FLOAT
} _MM_FIXUPRESULT_ENUM;





















typedef enum {
    _MM_MANT_NORM_1_2,      
    _MM_MANT_NORM_p5_2,     
    _MM_MANT_NORM_p5_1,     
    _MM_MANT_NORM_p75_1p5   
} _MM_MANTISSA_NORM_ENUM;

typedef enum {
    _MM_MANT_SIGN_src,      
    _MM_MANT_SIGN_zero,     
    _MM_MANT_SIGN_nan       
} _MM_MANTISSA_SIGN_ENUM;






typedef enum {
    _MM_CMPINT_EQ,      
    _MM_CMPINT_LT,      
    _MM_CMPINT_LE,      
    _MM_CMPINT_UNUSED,
    _MM_CMPINT_NE,      
    _MM_CMPINT_NLT,     

    _MM_CMPINT_NLE      

} _MM_CMPINT_ENUM;





extern __m512  __cdecl _mm512_setzero_ps(void);
extern __m512d __cdecl _mm512_setzero_pd(void);

extern __m512  __cdecl _mm512_set_ps(float , float, float, float, float, float, float, float, float, float, float, float, float, float, float, float );
extern __m512d __cdecl _mm512_set_pd(double , double, double, double, double, double, double, double );

extern __m512  __cdecl _mm512_set1_ps(float);
extern __m512d __cdecl _mm512_set1_pd(double);

extern __m512  __cdecl _mm512_maskz_load_ps(__mmask16, void const*);
extern __m512d __cdecl _mm512_maskz_load_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_load_ps(__m512, __mmask16, void const*);
extern __m512d __cdecl _mm512_mask_load_pd(__m512d, __mmask8, void const*);
extern __m512  __cdecl _mm512_maskz_loadu_ps(__mmask16, void const*);
extern __m512d __cdecl _mm512_maskz_loadu_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_loadu_ps(__m512, __mmask16, void const*);
extern __m512d __cdecl _mm512_mask_loadu_pd(__m512d, __mmask8, void const*);

extern void    __cdecl _mm512_storeu_ps(void*, __m512);
extern void    __cdecl _mm512_storeu_pd(void*, __m512d);
extern void    __cdecl _mm512_mask_store_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_store_pd(void*, __mmask8, __m512d);
extern void    __cdecl _mm512_mask_storeu_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_storeu_pd(void*, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_add_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_add_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_add_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_add_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_sub_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_sub_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_sub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_sub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_mul_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_mul_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_mul_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_mul_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512d __cdecl _mm512_maskz_div_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_maskz_div_round_ps(__mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask_div_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_div_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmadd_round_ps(__mmask16, __m512, __m512, __m512, const int);
extern __m512d __cdecl _mm512_mask_fmadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int);

extern __m512  __cdecl _mm512_mask_fmsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmaddsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmaddsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmaddsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmaddsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmaddsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmaddsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fmsubadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fmsubadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fmsubadd_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fmsubadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fmsubadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fmsubadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fnmadd_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fnmadd_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fnmadd_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fnmadd_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fnmadd_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fnmadd_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_mask_fnmsub_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512  __cdecl _mm512_mask3_fnmsub_round_ps(__m512, __m512, __m512, __mmask16, const int );
extern __m512  __cdecl _mm512_maskz_fnmsub_round_ps(__mmask16, __m512, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_fnmsub_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );
extern __m512d __cdecl _mm512_mask3_fnmsub_round_pd(__m512d, __m512d, __m512d, __mmask8, const int );
extern __m512d __cdecl _mm512_maskz_fnmsub_round_pd(__mmask8, __m512d, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_sqrt_round_ps(__mmask16, __m512, const int );
extern __m512d __cdecl _mm512_maskz_sqrt_round_pd(__mmask8, __m512d, const int );
extern __m512  __cdecl _mm512_mask_sqrt_round_ps(__m512, __mmask16, __m512, const int );
extern __m512d __cdecl _mm512_mask_sqrt_round_pd(__m512d, __mmask8, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_abs_ps(__mmask16, __m512);
extern __m512  __cdecl _mm512_mask_abs_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_abs_pd(__mmask8, __m512d);
extern __m512d __cdecl _mm512_mask_abs_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_max_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_max_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_max_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_max_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_min_round_ps(__mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_maskz_min_round_pd(__mmask8, __m512d, __m512d, const int );
extern __m512  __cdecl _mm512_mask_min_round_ps(__m512, __mmask16, __m512, __m512, const int );
extern __m512d __cdecl _mm512_mask_min_round_pd(__m512d, __mmask8, __m512d, __m512d, const int );

extern __m512  __cdecl _mm512_maskz_rcp14_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_rcp14_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_rcp14_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_mask_rcp14_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_maskz_rsqrt14_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_maskz_rsqrt14_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_rsqrt14_ps(__m512, __mmask16, __m512);
extern __m512d __cdecl _mm512_mask_rsqrt14_pd(__m512d, __mmask8, __m512d);

extern __m512  __cdecl _mm512_mask_rcp28_round_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_rcp28_round_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_rcp28_round_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_rcp28_round_pd(__mmask8, __m512d, const int);
extern __m512  __cdecl _mm512_mask_rsqrt28_round_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_rsqrt28_round_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_rsqrt28_round_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_rsqrt28_round_pd(__mmask8, __m512d, const int);

extern __m512d __cdecl _mm512_maskz_cvt_roundps_pd(__mmask8, __m256, const int );
extern __m256  __cdecl _mm512_maskz_cvt_roundpd_ps(__mmask8, __m512d, const int );
extern __m512d __cdecl _mm512_mask_cvt_roundps_pd(__m512d, __mmask8, __m256, const int );
extern __m256  __cdecl _mm512_mask_cvt_roundpd_ps(__m256, __mmask8, __m512d, const int );

extern __mmask16 __cdecl _mm512_mask_cmp_round_ps_mask(__mmask16, __m512, __m512, const int, const int );
extern __mmask8  __cdecl _mm512_mask_cmp_round_pd_mask(__mmask8, __m512d, __m512d, const int, const int );

extern __m512  __cdecl _mm512_mask_broadcast_f32x2(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x2(__mmask16, __m128);
extern __m512  __cdecl _mm512_mask_broadcast_f32x4(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x4(__mmask16, __m128);
extern __m512  __cdecl _mm512_mask_broadcast_f32x8(__m512, __mmask16, __m256);
extern __m512  __cdecl _mm512_maskz_broadcast_f32x8(__mmask16, __m256);
extern __m512d __cdecl _mm512_mask_broadcast_f64x2(__m512d, __mmask8, __m128d);
extern __m512d __cdecl _mm512_maskz_broadcast_f64x2(__mmask8, __m128d);
extern __m512d __cdecl _mm512_mask_broadcast_f64x4(__m512d, __mmask8, __m256d);
extern __m512d __cdecl _mm512_maskz_broadcast_f64x4(__mmask8, __m256d);
extern __m512d __cdecl _mm512_mask_broadcastsd_pd(__m512d, __mmask8, __m128d);
extern __m512d __cdecl _mm512_maskz_broadcastsd_pd(__mmask8, __m128d);
extern __m512  __cdecl _mm512_mask_broadcastss_ps(__m512, __mmask16, __m128);
extern __m512  __cdecl _mm512_maskz_broadcastss_ps(__mmask16, __m128);

extern __m128  __cdecl _mm512_mask_extractf32x4_ps(__m128, __mmask8, __m512, const int);
extern __m128  __cdecl _mm512_maskz_extractf32x4_ps(__mmask8, __m512, int);
extern __m256  __cdecl _mm512_mask_extractf32x8_ps(__m256, __mmask8, __m512, const int);
extern __m256  __cdecl _mm512_maskz_extractf32x8_ps(__mmask8, __m512, int);
extern __m128d __cdecl _mm512_mask_extractf64x2_pd(__m128d, __mmask8, __m512d, const int);
extern __m128d __cdecl _mm512_maskz_extractf64x2_pd(__mmask8, __m512d, int);
extern __m256d __cdecl _mm512_mask_extractf64x4_pd(__m256d, __mmask8, __m512d, const int);
extern __m256d __cdecl _mm512_maskz_extractf64x4_pd(__mmask8, __m512d, int);

extern __m512  __cdecl _mm512_mask_insertf32x4(__m512, __mmask16, __m512, __m128, const int);
extern __m512  __cdecl _mm512_maskz_insertf32x4(__mmask16, __m512, __m128, int);
extern __m512  __cdecl _mm512_mask_insertf32x8(__m512, __mmask16, __m512, __m256, const int);
extern __m512  __cdecl _mm512_maskz_insertf32x8(__mmask16, __m512, __m256, int);
extern __m512d __cdecl _mm512_mask_insertf64x2(__m512d, __mmask8, __m512d, __m128d, const int);
extern __m512d __cdecl _mm512_maskz_insertf64x2(__mmask8, __m512d, __m128d, int);
extern __m512d __cdecl _mm512_mask_insertf64x4(__m512d, __mmask8, __m512d, __m256d, const int);
extern __m512d __cdecl _mm512_maskz_insertf64x4(__mmask8, __m512d, __m256d, int);

extern __m512  __cdecl _mm512_mask_shuffle_f32x4(__m512, __mmask16, __m512, __m512, const int);
extern __m512  __cdecl _mm512_maskz_shuffle_f32x4(__mmask16, __m512, __m512, const int);
extern __m512d __cdecl _mm512_mask_shuffle_f64x2(__m512d, __mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_shuffle_f64x2(__mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_mask_shuffle_pd(__m512d, __mmask8, __m512d, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_shuffle_pd(__mmask8, __m512d, __m512d, const int);
extern __m512  __cdecl _mm512_mask_shuffle_ps(__m512, __mmask16, __m512, __m512, const int);
extern __m512  __cdecl _mm512_maskz_shuffle_ps(__mmask16, __m512, __m512, const int);
































































































































































































































































































































































































































extern __m512i __cdecl _mm512_setzero_si512(void);

extern __m512i __cdecl _mm512_set_epi8(char , char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char );
extern __m512i __cdecl _mm512_set_epi16(short , short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short, short );
extern __m512i __cdecl _mm512_set_epi32(int , int, int, int, int, int, int, int, int, int, int, int, int, int, int, int );
extern __m512i __cdecl _mm512_set_epi64(__int64 , __int64, __int64, __int64, __int64, __int64, __int64, __int64 );

extern __m512i __cdecl _mm512_mask_set1_epi8(__m512i, __mmask64, char);
extern __m512i __cdecl _mm512_maskz_set1_epi8(__mmask64, char);
extern __m512i __cdecl _mm512_mask_set1_epi16(__m512i, __mmask32, short);
extern __m512i __cdecl _mm512_maskz_set1_epi16(__mmask32, short);
extern __m512i __cdecl _mm512_mask_set1_epi32(__m512i, __mmask16, int);
extern __m512i __cdecl _mm512_maskz_set1_epi32(__mmask16, int);
extern __m512i __cdecl _mm512_mask_set1_epi64(__m512i, __mmask8, __int64);
extern __m512i __cdecl _mm512_maskz_set1_epi64(__mmask8, __int64);

extern __m512i __cdecl _mm512_mask_add_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_add_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_add_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_adds_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_adds_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_abs_epi8(__m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi8(__mmask64, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi16(__m512i, __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi16(__mmask32, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_abs_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_abs_epi64(__mmask8, __m512i);

extern __m512i  __cdecl _mm512_mask_broadcast_i32x2(__m512i, __mmask16, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x2(__mmask16, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i32x4(__m512i, __mmask16, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x4(__mmask16, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i32x8(__m512i, __mmask16, __m256i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i32x8(__mmask16, __m256i);
extern __m512i  __cdecl _mm512_mask_broadcast_i64x2(__m512i, __mmask8, __m128i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i64x2(__mmask8, __m128i);
extern __m512i  __cdecl _mm512_mask_broadcast_i64x4(__m512i, __mmask8, __m256i);
extern __m512i  __cdecl _mm512_maskz_broadcast_i64x4(__mmask8, __m256i);
extern __m512i __cdecl _mm512_mask_broadcastb_epi8(__m512i, __mmask64, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastb_epi8(__mmask64, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastw_epi16(__m512i, __mmask32, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastw_epi16(__mmask32, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastd_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastd_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_broadcastq_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_broadcastmw_epi32(__mmask16);
extern __m512i __cdecl _mm512_broadcastmb_epi64(__mmask8);

extern __m512i __cdecl _mm512_mask_sub_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sub_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sub_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_subs_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_subs_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_max_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_max_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_max_epu64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_min_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_min_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_min_epu64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_mul_epi32(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mul_epi32(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mul_epu32(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mul_epu32(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhi_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhi_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhi_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhi_epu16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullo_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mullo_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mullox_epi64(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mullox_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_mulhrs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_mulhrs_epi16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_load_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_load_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_load_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_load_epi64(__mmask8, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi8(__m512i, __mmask64, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi8(__mmask64, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi16(__m512i, __mmask32, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi16(__mmask32, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_loadu_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_loadu_epi64(__mmask8, void const*);

extern void    __cdecl _mm512_mask_store_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_store_epi64(void*, __mmask8, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi8(void*, __mmask64, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi16(void*, __mmask32, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_storeu_epi64(void*, __mmask8, __m512i);

extern __m128i __cdecl _mm512_mask_extracti32x4_epi32(__m128i, __mmask8, __m512i, int);
extern __m128i __cdecl _mm512_maskz_extracti32x4_epi32(__mmask8, __m512i, int);
extern __m256i __cdecl _mm512_mask_extracti32x8_epi32(__m256i, __mmask8, __m512i, int);
extern __m256i __cdecl _mm512_maskz_extracti32x8_epi32(__mmask8, __m512i, int);
extern __m128i __cdecl _mm512_mask_extracti64x2_epi64(__m128i, __mmask8, __m512i, int);
extern __m128i __cdecl _mm512_maskz_extracti64x2_epi64(__mmask8, __m512i, int);
extern __m256i __cdecl _mm512_mask_extracti64x4_epi64(__m256i, __mmask8, __m512i, int);
extern __m256i __cdecl _mm512_maskz_extracti64x4_epi64(__mmask8, __m512i, int);

extern __m512i __cdecl _mm512_mask_inserti32x4(__m512i, __mmask16, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_maskz_inserti32x4(__mmask16, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_mask_inserti32x8(__m512i, __mmask16, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_maskz_inserti32x8(__mmask16, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_mask_inserti64x2(__m512i, __mmask8, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_maskz_inserti64x2(__mmask8, __m512i, __m128i, int);
extern __m512i __cdecl _mm512_mask_inserti64x4(__m512i, __mmask8, __m512i, __m256i, int);
extern __m512i __cdecl _mm512_maskz_inserti64x4(__mmask8, __m512i, __m256i, int);

extern __m512i __cdecl _mm512_mask_shuffle_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_shuffle_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_shuffle_epi32(__m512i, __mmask16, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shuffle_epi32(__mmask16, __m512i, int);
extern __m512i __cdecl _mm512_mask_shuffle_i32x4(__m512i, __mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_shuffle_i32x4(__mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_shuffle_i64x2(__m512i, __mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_shuffle_i64x2(__mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_shufflehi_epi16(__m512i, __mmask32, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shufflehi_epi16(__mmask32, __m512i, int);
extern __m512i __cdecl _mm512_mask_shufflelo_epi16(__m512i, __mmask32, __m512i, int);
extern __m512i __cdecl _mm512_maskz_shufflelo_epi16(__mmask32, __m512i, int);

extern __m512  __cdecl _mm512_mask_mov_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_mov_ps(__mmask16, __m512);
extern __m512d __cdecl _mm512_mask_mov_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_mov_pd(__mmask8, __m512d);
extern __m512i __cdecl _mm512_mask_mov_epi8(__m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi8(__mmask64, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi16(__m512i, __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi16(__mmask32, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_mov_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_mov_epi64(__mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_movedup_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_movedup_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_movehdup_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_movehdup_ps(__mmask16, __m512);
extern __m512  __cdecl _mm512_mask_moveldup_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_moveldup_ps(__mmask16, __m512);

extern __m512i __cdecl _mm512_movm_epi8(__mmask64);
extern __m512i __cdecl _mm512_movm_epi16(__mmask32);
extern __m512i __cdecl _mm512_movm_epi32(__mmask16);
extern __m512i __cdecl _mm512_movm_epi64(__mmask8);
extern __mmask64 __cdecl _mm512_movepi8_mask(__m512i);
extern __mmask32 __cdecl _mm512_movepi16_mask(__m512i);
extern __mmask16 __cdecl _mm512_movepi32_mask(__m512i);
extern __mmask8  __cdecl _mm512_movepi64_mask(__m512i);

extern __m512i __cdecl _mm512_mask_alignr_epi8(__m512i, __mmask64, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_alignr_epi8(__mmask64, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_alignr_epi32(__m512i, __mmask16, __m512i, __m512i, const int );
extern __m512i __cdecl _mm512_maskz_alignr_epi32(__mmask16, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_mask_alignr_epi64(__m512i, __mmask8, __m512i, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_alignr_epi64(__mmask8, __m512i, __m512i, const int);

extern __m512d __cdecl _mm512_mask_and_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_and_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_and_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_and_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_and_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_and_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_and_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_and_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_andnot_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_andnot_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_andnot_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_andnot_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_andnot_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_andnot_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_andnot_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_andnot_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_or_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_or_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_or_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_or_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_or_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_or_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_or_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_or_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_xor_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_xor_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_xor_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_xor_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_xor_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_xor_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_xor_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_xor_epi64(__mmask8, __m512i, __m512i);

extern __m512  __cdecl _mm512_mask_blend_ps(__mmask16, __m512, __m512);
extern __m512d __cdecl _mm512_mask_blend_pd(__mmask8, __m512d, __m512d);
extern __m512i __cdecl _mm512_mask_blend_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_blend_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_sll_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sll_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sll_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sll_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_slli_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi16(__mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_slli_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_slli_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_slli_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_sllv_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sllv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_sllv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_sllv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_srl_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srl_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srl_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_srl_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srli_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi16(__mmask32, __m512i, int);
extern __m512i __cdecl _mm512_mask_srli_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srli_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srli_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srlv_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srlv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srlv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srlv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_sra_epi16(__m512i, __mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi16(__mmask32, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sra_epi32(__m512i, __mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi32(__mmask16, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_sra_epi64(__m512i, __mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_maskz_sra_epi64(__mmask8, __m512i, __m128i);
extern __m512i __cdecl _mm512_mask_srai_epi16(__m512i, __mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi16(__mmask32, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srai_epi32(__m512i, __mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi32(__mmask16, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srai_epi64(__m512i, __mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_maskz_srai_epi64(__mmask8, __m512i, unsigned int);
extern __m512i __cdecl _mm512_mask_srav_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srav_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_srav_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_srav_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_bslli_epi128(__m512i, int);
extern __m512i __cdecl _mm512_bsrli_epi128(__m512i, int);

extern __m512i __cdecl _mm512_mask_rol_epi32(__m512i, __mmask16, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_rol_epi32(__mmask16, __m512i, const int);
extern __m512i __cdecl _mm512_mask_rol_epi64(__m512i, __mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_rol_epi64(__mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_mask_rolv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rolv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_rolv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rolv_epi64(__mmask8, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_ror_epi32(__m512i, __mmask16, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ror_epi32(__mmask16, __m512i, int);
extern __m512i __cdecl _mm512_mask_ror_epi64(__m512i, __mmask8, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ror_epi64(__mmask8, __m512i, int);
extern __m512i __cdecl _mm512_mask_rorv_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rorv_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_rorv_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_rorv_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_unpackhi_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_unpackhi_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_unpackhi_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_unpackhi_ps(__mmask16, __m512, __m512);
extern __m512d __cdecl _mm512_mask_unpacklo_pd(__m512d, __mmask8, __m512d, __m512d);
extern __m512d __cdecl _mm512_maskz_unpacklo_pd(__mmask8, __m512d, __m512d);
extern __m512  __cdecl _mm512_mask_unpacklo_ps(__m512, __mmask16, __m512, __m512);
extern __m512  __cdecl _mm512_maskz_unpacklo_ps(__mmask16, __m512, __m512);
extern __m512i __cdecl _mm512_mask_unpackhi_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpackhi_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpackhi_epi64(__mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_unpacklo_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_unpacklo_epi64(__mmask8, __m512i, __m512i);

extern __m512  __cdecl _mm512_mask_getexp_round_ps(__m512, __mmask16, __m512, int);
extern __m512  __cdecl _mm512_maskz_getexp_round_ps(__mmask16, __m512, int);
extern __m512d __cdecl _mm512_mask_getexp_round_pd(__m512d, __mmask8, __m512d, int);
extern __m512d __cdecl _mm512_maskz_getexp_round_pd(__mmask8, __m512d, int);

extern __m512  __cdecl _mm512_mask_getmant_round_ps(__m512, __mmask16, __m512, int, int, int);
extern __m512  __cdecl _mm512_maskz_getmant_round_ps(__mmask16, __m512, int, int, int);
extern __m512d __cdecl _mm512_mask_getmant_round_pd(__m512d, __mmask8, __m512d, int, int, int);
extern __m512d __cdecl _mm512_maskz_getmant_round_pd(__mmask8, __m512d, int, int, int);

extern __m512d __cdecl _mm512_mask_permute_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_permute_pd(__mmask8, __m512d, const int);
extern __m512  __cdecl _mm512_mask_permute_ps(__m512, __mmask16, __m512, const int);
extern __m512  __cdecl _mm512_maskz_permute_ps(__mmask16, __m512, const int);
extern __m512d __cdecl _mm512_mask_permutevar_pd(__m512d, __mmask8, __m512d, __m512i);
extern __m512d __cdecl _mm512_maskz_permutevar_pd(__mmask8, __m512d, __m512i);
extern __m512  __cdecl _mm512_mask_permutevar_ps(__m512, __mmask16, __m512, __m512i);
extern __m512  __cdecl _mm512_maskz_permutevar_ps(__mmask16, __m512, __m512i);
extern __m512i __cdecl _mm512_permutevar_epi32(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutevar_epi32(__m512i, __mmask16, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_permutex_pd(__m512d, __mmask8, __m512d, const int);
extern __m512d __cdecl _mm512_maskz_permutex_pd(__mmask8, __m512d, const int);
extern __m512i __cdecl _mm512_mask_permutex_epi64(__m512i, __mmask8, __m512i, const int);
extern __m512i __cdecl _mm512_maskz_permutex_epi64(__mmask8, __m512i, const int);
extern __m512d __cdecl _mm512_mask_permutexvar_pd(__m512d, __mmask8, __m512i, __m512d);
extern __m512d __cdecl _mm512_maskz_permutexvar_pd(__mmask8, __m512i, __m512d);
extern __m512  __cdecl _mm512_mask_permutexvar_ps(__m512, __mmask16, __m512i, __m512);
extern __m512  __cdecl _mm512_maskz_permutexvar_ps(__mmask16, __m512i, __m512);
extern __m512i __cdecl _mm512_mask_permutexvar_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi16(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi32(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi64(__mmask8, __m512i, __m512i);

extern __m512d __cdecl _mm512_mask_permutex2var_pd(__m512d, __mmask8, __m512i , __m512d);
extern __m512d __cdecl _mm512_mask2_permutex2var_pd(__m512d, __m512i , __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_permutex2var_pd(__mmask8, __m512d, __m512i , __m512d);
extern __m512  __cdecl _mm512_mask_permutex2var_ps(__m512, __mmask16, __m512i , __m512);
extern __m512  __cdecl _mm512_mask2_permutex2var_ps(__m512, __m512i , __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_permutex2var_ps(__mmask16, __m512, __m512i , __m512);
extern __m512i __cdecl _mm512_mask_permutex2var_epi16(__m512i, __mmask32, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi16(__m512i, __m512i , __mmask32, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi16(__mmask32, __m512i, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi32(__m512i, __mmask16, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi32(__m512i, __m512i , __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi32(__mmask16, __m512i, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi64(__m512i, __mmask8, __m512i , __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi64(__m512i, __m512i , __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi64(__mmask8, __m512i, __m512i , __m512i);

extern __m512d __cdecl _mm512_mask_compress_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_compress_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_compress_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_compress_ps(__mmask16, __m512);
extern __m512i __cdecl _mm512_mask_compress_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_compress_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_compress_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_compress_epi64(__mmask8, __m512i);

extern void    __cdecl _mm512_mask_compressstoreu_pd(void*, __mmask8, __m512d);
extern void    __cdecl _mm512_mask_compressstoreu_ps(void*, __mmask16, __m512);
extern void    __cdecl _mm512_mask_compressstoreu_epi32(void*, __mmask16, __m512i);
extern void    __cdecl _mm512_mask_compressstoreu_epi64(void*, __mmask8, __m512i);

extern __m512d __cdecl _mm512_mask_expand_pd(__m512d, __mmask8, __m512d);
extern __m512d __cdecl _mm512_maskz_expand_pd(__mmask8, __m512d);
extern __m512  __cdecl _mm512_mask_expand_ps(__m512, __mmask16, __m512);
extern __m512  __cdecl _mm512_maskz_expand_ps(__mmask16, __m512);
extern __m512i __cdecl _mm512_mask_expand_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_expand_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_expand_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_expand_epi64(__mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_expandloadu_pd(__m512d, __mmask8, void const*);
extern __m512d __cdecl _mm512_maskz_expandloadu_pd(__mmask8, void const*);
extern __m512  __cdecl _mm512_mask_expandloadu_ps(__m512, __mmask16, void const*);
extern __m512  __cdecl _mm512_maskz_expandloadu_ps(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_expandloadu_epi32(__m512i, __mmask16, void const*);
extern __m512i __cdecl _mm512_maskz_expandloadu_epi32(__mmask16, void const*);
extern __m512i __cdecl _mm512_mask_expandloadu_epi64(__m512i, __mmask8, void const*);
extern __m512i __cdecl _mm512_maskz_expandloadu_epi64(__mmask8, void const*);

extern __m512i __cdecl _mm512_mask_ternarylogic_epi32(__m512i, __mmask16, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ternarylogic_epi32(__mmask16, __m512i, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_mask_ternarylogic_epi64(__m512i, __mmask8, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_ternarylogic_epi64(__mmask8, __m512i, __m512i, __m512i, int);

extern __m512i __cdecl _mm512_mask_conflict_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_conflict_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_conflict_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_conflict_epi64(__mmask8, __m512i);

extern __m512i __cdecl _mm512_mask_lzcnt_epi32(__m512i, __mmask16, __m512i);
extern __m512i __cdecl _mm512_maskz_lzcnt_epi32(__mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_lzcnt_epi64(__m512i, __mmask8, __m512i);
extern __m512i __cdecl _mm512_maskz_lzcnt_epi64(__mmask8, __m512i);

extern __m512i __cdecl _mm512_mask_avg_epu8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_avg_epu8(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_avg_epu16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_avg_epu16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_sad_epu8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dbsad_epu8(__m512i, __mmask32, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_maskz_dbsad_epu8(__mmask32, __m512i, __m512i, int);

extern float   __cdecl _mm512_reduce_add_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_add_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_add_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_add_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_add_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_add_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_add_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_add_epi64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_mul_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_mul_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_mul_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_mul_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_mul_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_mul_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_mul_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_mul_epi64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_min_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_min_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_min_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_min_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_min_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_min_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_min_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_min_epi64(__mmask8, __m512i);
extern unsigned int     __cdecl _mm512_reduce_min_epu32(__m512i);
extern unsigned int     __cdecl _mm512_mask_reduce_min_epu32(__mmask16, __m512i);
extern unsigned __int64 __cdecl _mm512_reduce_min_epu64(__m512i);
extern unsigned __int64 __cdecl _mm512_mask_reduce_min_epu64(__mmask8, __m512i);

extern float   __cdecl _mm512_reduce_max_ps(__m512);
extern float   __cdecl _mm512_mask_reduce_max_ps(__mmask16, __m512);
extern double  __cdecl _mm512_reduce_max_pd(__m512d);
extern double  __cdecl _mm512_mask_reduce_max_pd(__mmask8, __m512d);
extern int     __cdecl _mm512_reduce_max_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_max_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_max_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_max_epi64(__mmask8, __m512i);
extern unsigned int     __cdecl _mm512_reduce_max_epu32(__m512i);
extern unsigned int     __cdecl _mm512_mask_reduce_max_epu32(__mmask16, __m512i);
extern unsigned __int64 __cdecl _mm512_reduce_max_epu64(__m512i);
extern unsigned __int64 __cdecl _mm512_mask_reduce_max_epu64(__mmask8, __m512i);

extern int     __cdecl _mm512_reduce_and_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_and_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_and_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_and_epi64(__mmask8, __m512i);

extern int     __cdecl _mm512_reduce_or_epi32(__m512i);
extern int     __cdecl _mm512_mask_reduce_or_epi32(__mmask16, __m512i);
extern __int64 __cdecl _mm512_reduce_or_epi64(__m512i);
extern __int64 __cdecl _mm512_mask_reduce_or_epi64(__mmask8, __m512i);

extern __m512d __cdecl _mm512_mask_reduce_round_pd(__m512d, __mmask8, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_reduce_round_pd(__mmask8, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_reduce_round_ps(__m512, __mmask16, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_reduce_round_ps(__mmask16, __m512, int, int);

extern __m512d __cdecl _mm512_mask_roundscale_round_pd(__m512d, __mmask8, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_roundscale_round_pd(__mmask8, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_roundscale_round_ps(__m512, __mmask16, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_roundscale_round_ps(__mmask16, __m512, int, int);

extern __m512d __cdecl _mm512_mask_scalef_round_pd(__m512d, __mmask8, __m512d, __m512d, int);
extern __m512d __cdecl _mm512_maskz_scalef_round_pd(__mmask8, __m512d, __m512d, int);
extern __m512  __cdecl _mm512_mask_scalef_round_ps(__m512, __mmask16, __m512, __m512, int);
extern __m512  __cdecl _mm512_maskz_scalef_round_ps(__mmask16, __m512, __m512, int);

extern __m512d __cdecl _mm512_mask_fixupimm_round_pd(__m512d, __mmask8, __m512d, __m512i, const int, const int);
extern __m512d __cdecl _mm512_maskz_fixupimm_round_pd(__mmask8, __m512d, __m512d, __m512i, const int, const int);
extern __m512  __cdecl _mm512_mask_fixupimm_round_ps(__m512, __mmask16, __m512, __m512i, const int, const int);
extern __m512  __cdecl _mm512_maskz_fixupimm_round_ps(__mmask16, __m512, __m512, __m512i, const int, const int);

extern void    __cdecl _mm512_stream_pd(void*, __m512d);
extern void    __cdecl _mm512_stream_ps(void*, __m512);
extern void    __cdecl _mm512_stream_si512(void*, __m512i);
extern __m512i __cdecl _mm512_stream_load_si512(void const*);

extern __m128d __cdecl _mm512_castpd512_pd128(__m512d);
extern __m128  __cdecl _mm512_castps512_ps128(__m512);
extern __m128i __cdecl _mm512_castsi512_si128(__m512i);
extern __m512i __cdecl _mm512_castsi128_si512(__m128i);

extern __m512  __cdecl _mm512_mask_exp2a23_round_ps(__m512, __mmask16, __m512, int);
extern __m512  __cdecl _mm512_maskz_exp2a23_round_ps(__mmask16, __m512, int);
extern __m512d __cdecl _mm512_mask_exp2a23_round_pd(__m512d, __mmask8, __m512d, int);
extern __m512d __cdecl _mm512_maskz_exp2a23_round_pd(__mmask8, __m512d, int);

extern __mmask16 __cdecl _mm512_mask_fpclass_ps_mask(__mmask16, __m512, int);
extern __mmask8  __cdecl _mm512_mask_fpclass_pd_mask(__mmask8, __m512d, int);

extern __m512d __cdecl _mm512_mask_range_round_pd(__m512d, __mmask8, __m512d, __m512d, int, int);
extern __m512d __cdecl _mm512_maskz_range_round_pd(__mmask8, __m512d, __m512d, int, int);
extern __m512  __cdecl _mm512_mask_range_round_ps(__m512, __mmask16, __m512, __m512, int, int);
extern __m512  __cdecl _mm512_maskz_range_round_ps(__mmask16, __m512, __m512, int, int);

extern __m512i __cdecl _mm512_mask_madd_epi16(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd_epi16(__mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_maddubs_epi16(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_maddubs_epi16(__mmask32, __m512i, __m512i);

extern __m512i __cdecl _mm512_mask_packs_epi16(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packs_epi16(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packs_epi32(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packs_epi32(__mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packus_epi16(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packus_epi16(__mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_packus_epi32(__m512i, __mmask32, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_packus_epi32(__mmask32, __m512i, __m512i);

extern __mmask64 __cdecl _mm512_mask_cmp_epi8_mask(__mmask64, __m512i, __m512i, const int);
extern __mmask32 __cdecl _mm512_mask_cmp_epi16_mask(__mmask32, __m512i, __m512i, const int);
extern __mmask16 __cdecl _mm512_mask_cmp_epi32_mask(__mmask16, __m512i, __m512i, const int);
extern __mmask8  __cdecl _mm512_mask_cmp_epi64_mask(__mmask8, __m512i, __m512i, const int);
extern __mmask64 __cdecl _mm512_mask_cmp_epu8_mask(__mmask64, __m512i, __m512i, const int);
extern __mmask32 __cdecl _mm512_mask_cmp_epu16_mask(__mmask32, __m512i, __m512i, const int);
extern __mmask16 __cdecl _mm512_mask_cmp_epu32_mask(__mmask16, __m512i, __m512i, const int);
extern __mmask8  __cdecl _mm512_mask_cmp_epu64_mask(__mmask8, __m512i, __m512i, const int);

extern __mmask64 __cdecl _mm512_mask_test_epi8_mask(__mmask64, __m512i, __m512i);
extern __mmask32 __cdecl _mm512_mask_test_epi16_mask(__mmask32, __m512i, __m512i);
extern __mmask64 __cdecl _mm512_mask_testn_epi8_mask(__mmask64, __m512i, __m512i);
extern __mmask32 __cdecl _mm512_mask_testn_epi16_mask(__mmask32, __m512i, __m512i);
extern __mmask16 __cdecl _mm512_mask_test_epi32_mask(__mmask16, __m512i, __m512i);
extern __mmask8  __cdecl _mm512_mask_test_epi64_mask(__mmask8, __m512i, __m512i);
extern __mmask16 __cdecl _mm512_mask_testn_epi32_mask(__mmask16, __m512i, __m512i);
extern __mmask8  __cdecl _mm512_mask_testn_epi64_mask(__mmask8, __m512i, __m512i);

extern __mmask16 __cdecl _mm512_kunpackb(__mmask16, __mmask16);
extern __mmask32 __cdecl _mm512_kunpackw(__mmask32, __mmask32);
extern __mmask64 __cdecl _mm512_kunpackd(__mmask64, __mmask64);

extern unsigned char __cdecl _mm512_testz_and_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_and_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_and_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_and_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_andn_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_andn_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_andn_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_andn_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_or_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_or_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_or_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_or_mask64(__mmask64, __mmask64);
extern unsigned char __cdecl _mm512_testz_nor_mask8(__mmask8, __mmask8);
extern unsigned char __cdecl _mm512_testz_nor_mask16(__mmask16, __mmask16);
extern unsigned char __cdecl _mm512_testz_nor_mask32(__mmask32, __mmask32);
extern unsigned char __cdecl _mm512_testz_nor_mask64(__mmask64, __mmask64);

extern __m512  __cdecl _mm512_i32gather_ps(__m512i, void const*, int);
extern __m512  __cdecl _mm512_mask_i32gather_ps(__m512, __mmask16, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_ps(void*, __m512i, __m512, int);
extern void    __cdecl _mm512_mask_i32scatter_ps(void*, __mmask16, __m512i, __m512, int);
extern __m512d __cdecl _mm512_i64gather_pd(__m512i, void const*, int);
extern __m512d __cdecl _mm512_mask_i64gather_pd(__m512d, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_pd(void*, __m512i, __m512d, int);
extern void    __cdecl _mm512_mask_i64scatter_pd(void*, __mmask8, __m512i, __m512d, int);
extern __m512d __cdecl _mm512_i32gather_pd(__m256i, void const*, int);
extern __m512d __cdecl _mm512_mask_i32gather_pd(__m512d, __mmask8, __m256i, void const*, int);
extern void    __cdecl _mm512_i32scatter_pd(void*, __m256i, __m512d, int);
extern void    __cdecl _mm512_mask_i32scatter_pd(void*, __mmask8, __m256i, __m512d, int);
extern __m512i __cdecl _mm512_i32gather_epi32(__m512i, void const*, int);
extern __m512i __cdecl _mm512_mask_i32gather_epi32(__m512i, __mmask16, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_epi32(void*, __m512i, __m512i, int);
extern void    __cdecl _mm512_mask_i32scatter_epi32(void*, __mmask16, __m512i, __m512i, int);
extern __m512i __cdecl _mm512_i32gather_epi64(__m256i, void const*, int);
extern __m512i __cdecl _mm512_mask_i32gather_epi64(__m512i, __mmask8, __m256i, void const*, int);
extern __m512i __cdecl _mm512_i64gather_epi64(__m512i, void const*, int);
extern __m512i __cdecl _mm512_mask_i64gather_epi64(__m512i, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i32scatter_epi64(void*, __m256i, __m512i, int);
extern void    __cdecl _mm512_mask_i32scatter_epi64(void*, __mmask8, __m256i, __m512i, int);
extern void    __cdecl _mm512_i64scatter_epi64(void*, __m512i, __m512i, int);
extern void    __cdecl _mm512_mask_i64scatter_epi64(void*, __mmask8, __m512i, __m512i, int);
extern __m256  __cdecl _mm512_i64gather_ps(__m512i, void const*, int);
extern __m256  __cdecl _mm512_mask_i64gather_ps(__m256, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_ps(void*, __m512i, __m256, int);
extern void    __cdecl _mm512_mask_i64scatter_ps(void*, __mmask8, __m512i, __m256, int);
extern __m256i __cdecl _mm512_i64gather_epi32(__m512i, void const*, int);
extern __m256i __cdecl _mm512_mask_i64gather_epi32(__m256i, __mmask8, __m512i, void const*, int);
extern void    __cdecl _mm512_i64scatter_epi32(void*, __m512i, __m256i, int);
extern void    __cdecl _mm512_mask_i64scatter_epi32(void*, __mmask8, __m512i, __m256i, int);

extern void __cdecl _mm512_prefetch_i32gather_pd(__m256i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32gather_ps(__m512i index, void const* mv, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32scatter_pd(void* base_addr, __m256i vindex, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i32scatter_ps(void* mv, __m512i index, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64gather_pd(__m512i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64gather_ps(__m512i vindex, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64scatter_pd(void* base_addr, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_prefetch_i64scatter_ps(void* base_addr, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32gather_pd(__m256i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32gather_ps(__m512i vindex, __mmask16 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32scatter_pd(void* base_addr, __mmask8 mask, __m256i vinde, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i32scatter_ps(void* mv, __mmask16 k, __m512i index, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64gather_pd(__m512i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64gather_ps(__m512i vindex, __mmask8 mask, void const* base_addr, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64scatter_pd(void* base_addr, __mmask8 mask, __m512i vindex, int scale, const int hint);
extern void __cdecl _mm512_mask_prefetch_i64scatter_ps(void* base_addr, __mmask8 mask, __m512i vindex, int scale, const int hint);

extern __m512d __cdecl _mm512_cvtpslo_pd(__m512);
extern __m512d __cdecl _mm512_mask_cvtpslo_pd(__m512d, __mmask8, __m512);
extern __m512d __cdecl _mm512_cvtepi32lo_pd(__m512i);
extern __m512d __cdecl _mm512_mask_cvtepi32lo_pd(__m512d, __mmask8, __m512i);
extern __m512d __cdecl _mm512_cvtepu32lo_pd(__m512i);
extern __m512d __cdecl _mm512_mask_cvtepu32lo_pd(__m512d, __mmask8, __m512i);
extern __m512d __cdecl _mm512_mask_cvtepi32_pd(__m512d, __mmask8, __m256i);
extern __m512d __cdecl _mm512_maskz_cvtepi32_pd(__mmask8, __m256i);
extern __m512d __cdecl _mm512_mask_cvtepu32_pd(__m512d, __mmask8, __m256i);
extern __m512d __cdecl _mm512_maskz_cvtepu32_pd(__mmask8, __m256i);

extern __m512  __cdecl _mm512_mask_cvt_roundepi32_ps(__m512, __mmask16, __m512i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundepi32_ps(__mmask16, __m512i, int);
extern __m512  __cdecl _mm512_mask_cvt_roundepu32_ps(__m512, __mmask16, __m512i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundepu32_ps(__mmask16, __m512i, int);
extern __m512  __cdecl _mm512_mask_cvt_roundph_ps(__m512, __mmask16, __m256i, int);
extern __m512  __cdecl _mm512_maskz_cvt_roundph_ps(__mmask16, __m256i, int);
extern __m256i __cdecl _mm512_mask_cvt_roundps_ph(__m256i, __mmask16, __m512, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundps_ph(__mmask16, __m512, int);
extern __m256  __cdecl _mm512_mask_cvt_roundepi64_ps(__m256, __mmask8, __m512i, int);
extern __m256  __cdecl _mm512_maskz_cvt_roundepi64_ps(__mmask8, __m512i, int);
extern __m256  __cdecl _mm512_mask_cvt_roundepu64_ps(__m256, __mmask8, __m512i, int);
extern __m256  __cdecl _mm512_maskz_cvt_roundepu64_ps(__mmask8, __m512i, int);

extern __m512i __cdecl _mm512_mask_cvtepi8_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepi8_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepi16_epi32(__m512i, __mmask16, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi16_epi32(__mmask16, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepi16_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m128i __cdecl _mm512_mask_cvtepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi32_epi8(__m128i, __mmask16, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi32_epi8(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi32_storeu_epi8(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi32_epi16(__m256i, __mmask16, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi32_epi16(__mmask16, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi32_storeu_epi16(void*, __mmask16, __m512i);
extern __m512i __cdecl _mm512_mask_cvtepi32_epi64(__m512i, __mmask8, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi32_epi64(__mmask8, __m256i);
extern __m128i __cdecl _mm512_mask_cvtepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi64_epi8(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi64_epi8(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtsepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtsepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m128i __cdecl _mm512_mask_cvtusepi64_epi16(__m128i, __mmask8, __m512i);
extern __m128i __cdecl _mm512_maskz_cvtusepi64_epi16(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi64_epi32(__m256i, __mmask8, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi64_epi32(__mmask8, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m512i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi32(__m512i, __mmask16, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi32(__mmask16, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu16_epi32(__m512i, __mmask16, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu16_epi32(__mmask16, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepu16_epi64(__m512i, __mmask8, __m128i);
extern __m512i __cdecl _mm512_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m512i __cdecl _mm512_mask_cvtepu32_epi64(__m512i, __mmask8, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu32_epi64(__mmask8, __m256i);

extern __m512i __cdecl _mm512_mask_cvt_roundps_epi32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epi32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epi32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epi32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epu32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epu32(__mmask16, __m512, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epu32(__m512i, __mmask16, __m512, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epu32(__mmask16, __m512, int);
extern __m256i __cdecl _mm512_mask_cvt_roundpd_epi32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundpd_epi32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvtt_roundpd_epi32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvtt_roundpd_epi32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvt_roundpd_epu32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvt_roundpd_epu32(__mmask8, __m512d, int);
extern __m256i __cdecl _mm512_mask_cvtt_roundpd_epu32(__m256i, __mmask8, __m512d, int);
extern __m256i __cdecl _mm512_maskz_cvtt_roundpd_epu32(__mmask8, __m512d, int);

extern __m512i __cdecl _mm512_mask_cvtepi8_epi16(__m512i, __mmask32, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepi8_epi16(__mmask32, __m256i);
extern __m512i __cdecl _mm512_mask_cvtepu8_epi16(__m512i, __mmask32, __m256i);
extern __m512i __cdecl _mm512_maskz_cvtepu8_epi16(__mmask32, __m256i);
extern __m256i __cdecl _mm512_mask_cvtepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtepi16_storeu_epi8(void*, __mmask32, __m512i);
extern __m256i __cdecl _mm512_mask_cvtsepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtsepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtsepi16_storeu_epi8(void*, __mmask32, __m512i);
extern __m256i __cdecl _mm512_mask_cvtusepi16_epi8(__m256i, __mmask32, __m512i);
extern __m256i __cdecl _mm512_maskz_cvtusepi16_epi8(__mmask32, __m512i);
extern void    __cdecl _mm512_mask_cvtusepi16_storeu_epi8(void*, __mmask32, __m512i);

extern __m512d __cdecl _mm512_mask_cvt_roundepi64_pd(__m512d, __mmask8, __m512i, int);
extern __m512d __cdecl _mm512_maskz_cvt_roundepi64_pd(__mmask8, __m512i, int);
extern __m512d __cdecl _mm512_mask_cvt_roundepu64_pd(__m512d, __mmask8, __m512i, int);
extern __m512d __cdecl _mm512_maskz_cvt_roundepu64_pd(__mmask8, __m512i, int);
extern __m512i __cdecl _mm512_mask_cvt_roundpd_epi64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundpd_epi64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvt_roundpd_epu64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundpd_epu64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundpd_epi64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundpd_epi64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundpd_epu64(__m512i, __mmask8, __m512d, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundpd_epu64(__mmask8, __m512d, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epi64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epi64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvt_roundps_epu64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvt_roundps_epu64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epi64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epi64(__mmask8, __m256, int);
extern __m512i __cdecl _mm512_mask_cvtt_roundps_epu64(__m512i, __mmask8, __m256, int);
extern __m512i __cdecl _mm512_maskz_cvtt_roundps_epu64(__mmask8, __m256, int);






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern __m128i   __cdecl _mm_mask_abs_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi16(__m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi16(__mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_abs_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_abs_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_abs_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_abs_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_abs_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_abs_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_abs_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_abs_epi8(__m256i, __mmask32, __m256i);
extern __m256i   __cdecl _mm256_maskz_abs_epi8(__mmask32, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_add_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_add_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_add_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_add_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_add_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_add_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_add_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_add_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_add_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_add_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_add_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_add_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_adds_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_adds_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_adds_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_adds_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_adds_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_alignr_epi32(__m128i, __m128i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi32(__m128i, __mmask8, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi32(__mmask8, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_alignr_epi32(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi32(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi32(__mmask8, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_alignr_epi64(__m128i, __m128i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi64(__m128i, __mmask8, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi64(__mmask8, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_alignr_epi64(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi64(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi64(__mmask8, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_mask_alignr_epi8(__m128i, __mmask16, __m128i, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_alignr_epi8(__mmask16, __m128i, __m128i, const int);
extern __m256i   __cdecl _mm256_mask_alignr_epi8(__m256i, __mmask32, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_alignr_epi8(__mmask32, __m256i, __m256i, const int);
extern __m128i   __cdecl _mm_mask_and_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_and_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_and_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_and_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_and_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_and_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_and_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_and_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_and_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_and_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_and_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_and_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_and_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_and_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_and_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_and_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_andnot_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_andnot_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_andnot_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_andnot_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_andnot_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_andnot_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_andnot_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_andnot_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_andnot_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_andnot_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_andnot_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_andnot_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_andnot_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_andnot_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_andnot_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_andnot_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_avg_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_avg_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_avg_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_avg_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_avg_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_avg_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_avg_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_avg_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_blend_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_blend_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_blend_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_blend_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_blend_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_blend_ps(__mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_broadcast_f32x2(__m128);
extern __m256    __cdecl _mm256_mask_broadcast_f32x2(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcast_f32x2(__mmask8, __m128);
extern __m256    __cdecl _mm256_broadcast_f32x4(__m128);
extern __m256    __cdecl _mm256_mask_broadcast_f32x4(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcast_f32x4(__mmask8, __m128);
extern __m256d   __cdecl _mm256_broadcast_f64x2(__m128d);
extern __m256d   __cdecl _mm256_mask_broadcast_f64x2(__m256d, __mmask8, __m128d);
extern __m256d   __cdecl _mm256_maskz_broadcast_f64x2(__mmask8, __m128d);
extern __m128i   __cdecl _mm_broadcast_i32x2(__m128i);
extern __m128i   __cdecl _mm_mask_broadcast_i32x2(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcast_i32x2(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i32x2(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i32x2(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i32x2(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i32x4(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i32x4(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i32x4(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_broadcast_i64x2(__m128i);
extern __m256i   __cdecl _mm256_mask_broadcast_i64x2(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcast_i64x2(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_broadcastb_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastb_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastb_epi8(__m256i, __mmask32, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastb_epi8(__mmask32, __m128i);
extern __m128i   __cdecl _mm_mask_broadcastd_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastd_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastd_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastd_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_broadcastmb_epi64(__mmask8);
extern __m256i   __cdecl _mm256_broadcastmb_epi64(__mmask8);
extern __m128i   __cdecl _mm_broadcastmw_epi32(__mmask16);
extern __m256i   __cdecl _mm256_broadcastmw_epi32(__mmask16);
extern __m128i   __cdecl _mm_mask_broadcastq_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastq_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastq_epi64(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_broadcastsd_pd(__m256d, __mmask8, __m128d);
extern __m256d   __cdecl _mm256_maskz_broadcastsd_pd(__mmask8, __m128d);
extern __m128    __cdecl _mm_mask_broadcastss_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_broadcastss_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_broadcastss_ps(__m256, __mmask8, __m128);
extern __m256    __cdecl _mm256_maskz_broadcastss_ps(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_broadcastw_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_broadcastw_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_broadcastw_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_broadcastw_epi16(__mmask16, __m128i);
extern __mmask8  __cdecl _mm_cmp_epi16_mask(__m128i, __m128i, const int);
extern __mmask8  __cdecl _mm_mask_cmp_epi16_mask(__mmask8, __m128i, __m128i, const int);
extern __mmask16 __cdecl _mm256_cmp_epi16_mask(__m256i, __m256i, const int);
extern __mmask16 __cdecl _mm256_mask_cmp_epi16_mask(__mmask16, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epi32_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epi32_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epi32_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epi32_mask(__mmask8, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_cmp_epi64_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epi64_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epi64_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epi64_mask(__mmask8, __m256i, __m256i, int);
extern __mmask16 __cdecl _mm_cmp_epi8_mask(__m128i, __m128i, const int);
extern __mmask16 __cdecl _mm_mask_cmp_epi8_mask(__mmask16, __m128i, __m128i, const int);
extern __mmask32 __cdecl _mm256_cmp_epi8_mask(__m256i, __m256i, const int);
extern __mmask32 __cdecl _mm256_mask_cmp_epi8_mask(__mmask32, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epu16_mask(__m128i, __m128i, const int);
extern __mmask8  __cdecl _mm_mask_cmp_epu16_mask(__mmask8, __m128i, __m128i, const int);
extern __mmask16 __cdecl _mm256_cmp_epu16_mask(__m256i, __m256i, const int);
extern __mmask16 __cdecl _mm256_mask_cmp_epu16_mask(__mmask16, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_epu32_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epu32_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epu32_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epu32_mask(__mmask8, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_cmp_epu64_mask(__m128i, __m128i, int);
extern __mmask8  __cdecl _mm_mask_cmp_epu64_mask(__mmask8, __m128i, __m128i, int);
extern __mmask8  __cdecl _mm256_cmp_epu64_mask(__m256i, __m256i, int);
extern __mmask8  __cdecl _mm256_mask_cmp_epu64_mask(__mmask8, __m256i, __m256i, int);
extern __mmask16 __cdecl _mm_cmp_epu8_mask(__m128i, __m128i, const int);
extern __mmask16 __cdecl _mm_mask_cmp_epu8_mask(__mmask16, __m128i, __m128i, const int);
extern __mmask32 __cdecl _mm256_cmp_epu8_mask(__m256i, __m256i, const int);
extern __mmask32 __cdecl _mm256_mask_cmp_epu8_mask(__mmask32, __m256i, __m256i, const int);
extern __mmask8  __cdecl _mm_cmp_pd_mask(__m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_mask_cmp_pd_mask(__mmask8, __m128d, __m128d, const int);
extern __mmask8  __cdecl _mm256_cmp_pd_mask(__m256d, __m256d, const int);
extern __mmask8  __cdecl _mm256_mask_cmp_pd_mask(__mmask8, __m256d, __m256d, const int);
extern __mmask8  __cdecl _mm_cmp_ps_mask(__m128, __m128, const int);
extern __mmask8  __cdecl _mm_mask_cmp_ps_mask(__mmask8, __m128, __m128, const int);
extern __mmask8  __cdecl _mm256_cmp_ps_mask(__m256, __m256, const int);
extern __mmask8  __cdecl _mm256_mask_cmp_ps_mask(__mmask8, __m256, __m256, const int);
extern __m128i   __cdecl _mm_mask_compress_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_compress_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_compress_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_compress_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_compress_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_compress_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_compress_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_compress_epi64(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_compress_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_compress_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_compress_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_compress_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_compress_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_compress_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_compress_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_compress_ps(__mmask8, __m256);
extern void      __cdecl _mm_mask_compressstoreu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_compressstoreu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_compressstoreu_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_compressstoreu_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_compressstoreu_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_compressstoreu_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_compressstoreu_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_compressstoreu_ps(void*, __mmask8, __m256);
extern __m128i   __cdecl _mm_conflict_epi32(__m128i);
extern __m128i   __cdecl _mm_mask_conflict_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_conflict_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_conflict_epi32(__m256i);
extern __m256i   __cdecl _mm256_mask_conflict_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_conflict_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_conflict_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_conflict_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_conflict_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_conflict_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_conflict_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_conflict_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvt_roundps_ph(__m128i, __mmask8, __m128, int);
extern __m128i   __cdecl _mm_maskz_cvt_roundps_ph(__mmask8, __m128, int);
extern __m128i   __cdecl _mm256_mask_cvt_roundps_ph(__m128i, __mmask8, __m256, int);
extern __m128i   __cdecl _mm256_maskz_cvt_roundps_ph(__mmask8, __m256, int);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi16_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi16_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi16_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi16_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi32_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi32_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi32_epi8(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_cvtepi32_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepi32_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepi32_pd(__m256d, __mmask8, __m128i);
extern __m256d   __cdecl _mm256_maskz_cvtepi32_pd(__mmask8, __m128i);
extern __m128    __cdecl _mm_mask_cvtepi32_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepi32_ps(__mmask8, __m128i);
extern __m256    __cdecl _mm256_mask_cvtepi32_ps(__m256, __mmask8, __m256i);
extern __m256    __cdecl _mm256_maskz_cvtepi32_ps(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtepi64_epi8(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_cvtepi64_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepi64_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepi64_pd(__m256d, __mmask8, __m256i);
extern __m256d   __cdecl _mm256_maskz_cvtepi64_pd(__mmask8, __m256i);
extern __m128    __cdecl _mm_mask_cvtepi64_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepi64_ps(__mmask8, __m128i);
extern __m128    __cdecl _mm256_mask_cvtepi64_ps(__m128, __mmask8, __m256i);
extern __m128    __cdecl _mm256_maskz_cvtepi64_ps(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi16(__mmask16, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepi8_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepi8_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepi8_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu16_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu16_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu16_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu16_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu16_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu16_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu16_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu32_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu32_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu32_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu32_epi64(__mmask8, __m128i);
extern __m128d   __cdecl _mm_mask_cvtepu32_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepu32_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepu32_pd(__m256d, __mmask8, __m128i);
extern __m256d   __cdecl _mm256_maskz_cvtepu32_pd(__mmask8, __m128i);
extern __m128d   __cdecl _mm_mask_cvtepu64_pd(__m128d, __mmask8, __m128i);
extern __m128d   __cdecl _mm_maskz_cvtepu64_pd(__mmask8, __m128i);
extern __m256d   __cdecl _mm256_mask_cvtepu64_pd(__m256d, __mmask8, __m256i);
extern __m256d   __cdecl _mm256_maskz_cvtepu64_pd(__mmask8, __m256i);
extern __m128    __cdecl _mm_mask_cvtepu64_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtepu64_ps(__mmask8, __m128i);
extern __m128    __cdecl _mm256_mask_cvtepu64_ps(__m128, __mmask8, __m256i);
extern __m128    __cdecl _mm256_maskz_cvtepu64_ps(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi16(__m256i, __mmask16, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi16(__mmask16, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi32(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtepu8_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_cvtepu8_epi64(__m256i, __mmask8, __m128i);
extern __m256i   __cdecl _mm256_maskz_cvtepu8_epi64(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtpd_epi32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epi32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvtpd_epi32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvtpd_epi32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epi64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epi64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvtpd_epi64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvtpd_epi64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epu32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epu32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvtpd_epu32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvtpd_epu32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvtpd_epu64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvtpd_epu64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvtpd_epu64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvtpd_epu64(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_cvtpd_ps(__m128, __mmask8, __m128d);
extern __m128    __cdecl _mm_maskz_cvtpd_ps(__mmask8, __m128d);
extern __m128    __cdecl _mm256_mask_cvtpd_ps(__m128, __mmask8, __m256d);
extern __m128    __cdecl _mm256_maskz_cvtpd_ps(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_cvtph_ps(__m128, __mmask8, __m128i);
extern __m128    __cdecl _mm_maskz_cvtph_ps(__mmask8, __m128i);
extern __m256    __cdecl _mm256_mask_cvtph_ps(__m256, __mmask8, __m128i);
extern __m256    __cdecl _mm256_maskz_cvtph_ps(__mmask8, __m128i);
extern __m128i   __cdecl _mm_mask_cvtps_epi32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epi32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epi32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvtps_epi32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvtps_epi64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epi64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epi64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvtps_epi64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtps_epu32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epu32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epu32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvtps_epu32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvtps_epu64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvtps_epu64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvtps_epu64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvtps_epu64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtsepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtsepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi32_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtsepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtsepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtsepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtsepi64_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtsepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvttpd_epi32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epi32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvttpd_epi32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvttpd_epi32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epi64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epi64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvttpd_epi64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvttpd_epi64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epu32(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epu32(__mmask8, __m128d);
extern __m128i   __cdecl _mm256_mask_cvttpd_epu32(__m128i, __mmask8, __m256d);
extern __m128i   __cdecl _mm256_maskz_cvttpd_epu32(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttpd_epu64(__m128i, __mmask8, __m128d);
extern __m128i   __cdecl _mm_maskz_cvttpd_epu64(__mmask8, __m128d);
extern __m256i   __cdecl _mm256_mask_cvttpd_epu64(__m256i, __mmask8, __m256d);
extern __m256i   __cdecl _mm256_maskz_cvttpd_epu64(__mmask8, __m256d);
extern __m128i   __cdecl _mm_mask_cvttps_epi32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epi32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epi32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvttps_epi32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvttps_epi64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epi64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epi64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvttps_epi64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvttps_epu32(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epu32(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epu32(__m256i, __mmask8, __m256);
extern __m256i   __cdecl _mm256_maskz_cvttps_epu32(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_cvttps_epu64(__m128i, __mmask8, __m128);
extern __m128i   __cdecl _mm_maskz_cvttps_epu64(__mmask8, __m128);
extern __m256i   __cdecl _mm256_mask_cvttps_epu64(__m256i, __mmask8, __m128);
extern __m256i   __cdecl _mm256_maskz_cvttps_epu64(__mmask8, __m128);
extern __m128i   __cdecl _mm_mask_cvtusepi16_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi16_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi16_epi8(__m128i, __mmask16, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi16_epi8(__mmask16, __m256i);
extern void      __cdecl _mm_mask_cvtusepi16_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi16_storeu_epi8(void*, __mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi32_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi32_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi32_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi32_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi32_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi32_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi32_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi32_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi32_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi32_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi32_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi32_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi16(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi16(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi16(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi32(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi32(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_cvtusepi64_epi8(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_cvtusepi64_epi8(__mmask8, __m128i);
extern __m128i   __cdecl _mm256_mask_cvtusepi64_epi8(__m128i, __mmask8, __m256i);
extern __m128i   __cdecl _mm256_maskz_cvtusepi64_epi8(__mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi16(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_cvtusepi64_storeu_epi8(void*, __mmask8, __m256i);
extern __m128i   __cdecl _mm_dbsad_epu8(__m128i, __m128i, int);
extern __m128i   __cdecl _mm_mask_dbsad_epu8(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_dbsad_epu8(__mmask8, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_dbsad_epu8(__m256i, __m256i, int);
extern __m256i   __cdecl _mm256_mask_dbsad_epu8(__m256i, __mmask16, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_dbsad_epu8(__mmask16, __m256i, __m256i, int);
extern __m128d   __cdecl _mm_mask_div_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_div_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_div_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_div_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_div_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_div_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_div_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_div_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_expand_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_expand_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_expand_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_expand_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_expand_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_expand_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_expand_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_expand_epi64(__mmask8, __m256i);
extern __m128d   __cdecl _mm_mask_expand_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_expand_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_expand_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_expand_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_expand_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_expand_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_expand_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_expand_ps(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_expandloadu_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_expandloadu_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_expandloadu_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_expandloadu_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_expandloadu_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_expandloadu_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_expandloadu_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_expandloadu_epi64(__mmask8, void const*);
extern __m128d   __cdecl _mm_mask_expandloadu_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_expandloadu_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_expandloadu_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_expandloadu_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_expandloadu_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_expandloadu_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_expandloadu_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_expandloadu_ps(__mmask8, void const*);
extern __m128    __cdecl _mm256_extractf32x4_ps(__m256, int);
extern __m128    __cdecl _mm256_mask_extractf32x4_ps(__m128, __mmask8, __m256, int);
extern __m128    __cdecl _mm256_maskz_extractf32x4_ps(__mmask8, __m256, int);
extern __m128d   __cdecl _mm256_extractf64x2_pd(__m256d, int);
extern __m128d   __cdecl _mm256_mask_extractf64x2_pd(__m128d, __mmask8, __m256d, int);
extern __m128d   __cdecl _mm256_maskz_extractf64x2_pd(__mmask8, __m256d, int);
extern __m128i   __cdecl _mm256_extracti32x4_epi32(__m256i, int);
extern __m128i   __cdecl _mm256_mask_extracti32x4_epi32(__m128i, __mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_maskz_extracti32x4_epi32(__mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_extracti64x2_epi64(__m256i, int);
extern __m128i   __cdecl _mm256_mask_extracti64x2_epi64(__m128i, __mmask8, __m256i, int);
extern __m128i   __cdecl _mm256_maskz_extracti64x2_epi64(__mmask8, __m256i, int);
extern __m128d   __cdecl _mm_fixupimm_pd(__m128d, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_mask_fixupimm_pd(__m128d, __mmask8, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_pd(__mmask8, __m128d, __m128d, __m128i, const int);
extern __m256d   __cdecl _mm256_fixupimm_pd(__m256d, __m256d, __m256i, const int);
extern __m256d   __cdecl _mm256_mask_fixupimm_pd(__m256d, __mmask8, __m256d, __m256i, const int);
extern __m256d   __cdecl _mm256_maskz_fixupimm_pd(__mmask8, __m256d, __m256d, __m256i, const int);
extern __m128    __cdecl _mm_fixupimm_ps(__m128, __m128, __m128i, const int);
extern __m128    __cdecl _mm_mask_fixupimm_ps(__m128, __mmask8, __m128, __m128i, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_ps(__mmask8, __m128, __m128, __m128i, const int);
extern __m256    __cdecl _mm256_fixupimm_ps(__m256, __m256, __m256i, const int);
extern __m256    __cdecl _mm256_mask_fixupimm_ps(__m256, __mmask8, __m256, __m256i, const int);
extern __m256    __cdecl _mm256_maskz_fixupimm_ps(__mmask8, __m256, __m256, __m256i, const int);
extern __m128d   __cdecl _mm_mask_fmadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmaddsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmaddsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmaddsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmaddsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmaddsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmaddsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmaddsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmaddsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmaddsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmaddsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmaddsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmaddsub_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmsub_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fmsubadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsubadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsubadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fmsubadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fmsubadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fmsubadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fmsubadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsubadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsubadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fmsubadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fmsubadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fmsubadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fnmadd_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmadd_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmadd_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fnmadd_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fnmadd_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fnmadd_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fnmadd_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmadd_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmadd_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fnmadd_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fnmadd_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fnmadd_ps(__mmask8, __m256, __m256, __m256);
extern __m128d   __cdecl _mm_mask_fnmsub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmsub_pd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmsub_pd(__mmask8, __m128d, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_fnmsub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_mask3_fnmsub_pd(__m256d, __m256d, __m256d, __mmask8);
extern __m256d   __cdecl _mm256_maskz_fnmsub_pd(__mmask8, __m256d, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_fnmsub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmsub_ps(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmsub_ps(__mmask8, __m128, __m128, __m128);
extern __m256    __cdecl _mm256_mask_fnmsub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_mask3_fnmsub_ps(__m256, __m256, __m256, __mmask8);
extern __m256    __cdecl _mm256_maskz_fnmsub_ps(__mmask8, __m256, __m256, __m256);
extern __mmask8  __cdecl _mm_fpclass_pd_mask(__m128d, int);
extern __mmask8  __cdecl _mm_mask_fpclass_pd_mask(__mmask8, __m128d, int);
extern __mmask8  __cdecl _mm256_fpclass_pd_mask(__m256d, int);
extern __mmask8  __cdecl _mm256_mask_fpclass_pd_mask(__mmask8, __m256d, int);
extern __mmask8  __cdecl _mm_fpclass_ps_mask(__m128, int);
extern __mmask8  __cdecl _mm_mask_fpclass_ps_mask(__mmask8, __m128, int);
extern __mmask8  __cdecl _mm256_fpclass_ps_mask(__m256, int);
extern __mmask8  __cdecl _mm256_mask_fpclass_ps_mask(__mmask8, __m256, int);
extern __m128d   __cdecl _mm_getexp_pd(__m128d);
extern __m128d   __cdecl _mm_mask_getexp_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_getexp_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_getexp_pd(__m256d);
extern __m256d   __cdecl _mm256_mask_getexp_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_getexp_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_getexp_ps(__m128);
extern __m128    __cdecl _mm_mask_getexp_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_getexp_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_getexp_ps(__m256);
extern __m256    __cdecl _mm256_mask_getexp_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_getexp_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_getmant_pd(__m128d, int, int);
extern __m128d   __cdecl _mm_mask_getmant_pd(__m128d, __mmask8, __m128d, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_pd(__mmask8, __m128d, int, int);
extern __m256d   __cdecl _mm256_getmant_pd(__m256d, int, int);
extern __m256d   __cdecl _mm256_mask_getmant_pd(__m256d, __mmask8, __m256d, int, int);
extern __m256d   __cdecl _mm256_maskz_getmant_pd(__mmask8, __m256d, int, int);
extern __m128    __cdecl _mm_getmant_ps(__m128, int, int);
extern __m128    __cdecl _mm_mask_getmant_ps(__m128, __mmask8, __m128, int, int);
extern __m128    __cdecl _mm_maskz_getmant_ps(__mmask8, __m128, int, int);
extern __m256    __cdecl _mm256_getmant_ps(__m256, int, int);
extern __m256    __cdecl _mm256_mask_getmant_ps(__m256, __mmask8, __m256, int, int);
extern __m256    __cdecl _mm256_maskz_getmant_ps(__mmask8, __m256, int, int);
extern __m128i   __cdecl _mm_mmask_i32gather_epi32(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i32gather_epi32(__m256i, __mmask8, __m256i, void const*, const int);
extern __m128i   __cdecl _mm_mmask_i32gather_epi64(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i32gather_epi64(__m256i, __mmask8, __m128i, void const*, const int);
extern __m128d   __cdecl _mm_mmask_i32gather_pd(__m128d, __mmask8, __m128i, void const*, const int);
extern __m256d   __cdecl _mm256_mmask_i32gather_pd(__m256d, __mmask8, __m128i, void const*, const int);
extern __m128    __cdecl _mm_mmask_i32gather_ps(__m128, __mmask8, __m128i, void const*, const int);
extern __m256    __cdecl _mm256_mmask_i32gather_ps(__m256, __mmask8, __m256i, void const*, const int);
extern void      __cdecl _mm_i32scatter_epi32(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i32scatter_epi32(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i32scatter_epi32(void*, __m256i, __m256i, const int);
extern void      __cdecl _mm256_mask_i32scatter_epi32(void*, __mmask8, __m256i, __m256i, const int);
extern void      __cdecl _mm_i32scatter_epi64(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i32scatter_epi64(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i32scatter_epi64(void*, __m128i, __m256i, const int);
extern void      __cdecl _mm256_mask_i32scatter_epi64(void*, __mmask8, __m128i, __m256i, const int);
extern void      __cdecl _mm_i32scatter_pd(void*, __m128i, __m128d, const int);
extern void      __cdecl _mm_mask_i32scatter_pd(void*, __mmask8, __m128i, __m128d, const int);
extern void      __cdecl _mm256_i32scatter_pd(void*, __m128i, __m256d, const int);
extern void      __cdecl _mm256_mask_i32scatter_pd(void*, __mmask8, __m128i, __m256d, const int);
extern void      __cdecl _mm_i32scatter_ps(void*, __m128i, __m128, const int);
extern void      __cdecl _mm_mask_i32scatter_ps(void*, __mmask8, __m128i, __m128, const int);
extern void      __cdecl _mm256_i32scatter_ps(void*, __m256i, __m256, const int);
extern void      __cdecl _mm256_mask_i32scatter_ps(void*, __mmask8, __m256i, __m256, const int);
extern __m128i   __cdecl _mm_mmask_i64gather_epi32(__m128i, __mmask8, __m128i, void const*, const int);
extern __m128i   __cdecl _mm256_mmask_i64gather_epi32(__m128i, __mmask8, __m256i, void const*, const int);
extern __m128i   __cdecl _mm_mmask_i64gather_epi64(__m128i, __mmask8, __m128i, void const*, const int);
extern __m256i   __cdecl _mm256_mmask_i64gather_epi64(__m256i, __mmask8, __m256i, void const*, const int);
extern __m128d   __cdecl _mm_mmask_i64gather_pd(__m128d, __mmask8, __m128i, void const*, const int);
extern __m256d   __cdecl _mm256_mmask_i64gather_pd(__m256d, __mmask8, __m256i, void const*, const int);
extern __m128    __cdecl _mm_mmask_i64gather_ps(__m128, __mmask8, __m128i, void const*, const int);
extern __m128    __cdecl _mm256_mmask_i64gather_ps(__m128, __mmask8, __m256i, void const*, const int);
extern void      __cdecl _mm_i64scatter_epi32(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i64scatter_epi32(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i64scatter_epi32(void*, __m256i, __m128i, const int);
extern void      __cdecl _mm256_mask_i64scatter_epi32(void*, __mmask8, __m256i, __m128i, const int);
extern void      __cdecl _mm_i64scatter_epi64(void*, __m128i, __m128i, const int);
extern void      __cdecl _mm_mask_i64scatter_epi64(void*, __mmask8, __m128i, __m128i, const int);
extern void      __cdecl _mm256_i64scatter_epi64(void*, __m256i, __m256i, const int);
extern void      __cdecl _mm256_mask_i64scatter_epi64(void*, __mmask8, __m256i, __m256i, const int);
extern void      __cdecl _mm_i64scatter_pd(void*, __m128i, __m128d, const int);
extern void      __cdecl _mm_mask_i64scatter_pd(void*, __mmask8, __m128i, __m128d, const int);
extern void      __cdecl _mm256_i64scatter_pd(void*, __m256i, __m256d, const int);
extern void      __cdecl _mm256_mask_i64scatter_pd(void*, __mmask8, __m256i, __m256d, const int);
extern void      __cdecl _mm_i64scatter_ps(void*, __m128i, __m128, const int);
extern void      __cdecl _mm_mask_i64scatter_ps(void*, __mmask8, __m128i, __m128, const int);
extern void      __cdecl _mm256_i64scatter_ps(void*, __m256i, __m128, const int);
extern void      __cdecl _mm256_mask_i64scatter_ps(void*, __mmask8, __m256i, __m128, const int);
extern __m256    __cdecl _mm256_insertf32x4(__m256, __m128, int);
extern __m256    __cdecl _mm256_mask_insertf32x4(__m256, __mmask8, __m256, __m128, int);
extern __m256    __cdecl _mm256_maskz_insertf32x4(__mmask8, __m256, __m128, int);
extern __m256d   __cdecl _mm256_insertf64x2(__m256d, __m128d, int);
extern __m256d   __cdecl _mm256_mask_insertf64x2(__m256d, __mmask8, __m256d, __m128d, int);
extern __m256d   __cdecl _mm256_maskz_insertf64x2(__mmask8, __m256d, __m128d, int);
extern __m256i   __cdecl _mm256_inserti32x4(__m256i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_inserti32x4(__m256i, __mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_maskz_inserti32x4(__mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_inserti64x2(__m256i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_inserti64x2(__m256i, __mmask8, __m256i, __m128i, int);
extern __m256i   __cdecl _mm256_maskz_inserti64x2(__mmask8, __m256i, __m128i, int);
extern __m128i   __cdecl _mm_mask_load_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_load_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_load_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_load_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_load_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_load_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_load_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_load_epi64(__mmask8, void const*);
extern __m128d   __cdecl _mm_mask_load_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_load_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_load_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_load_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_load_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_load_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_load_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_load_ps(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi16(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi16(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi16(__m256i, __mmask16, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi16(__mmask16, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi32(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi32(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi32(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi32(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi64(__m128i, __mmask8, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi64(__mmask8, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi64(__m256i, __mmask8, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi64(__mmask8, void const*);
extern __m128i   __cdecl _mm_mask_loadu_epi8(__m128i, __mmask16, void const*);
extern __m128i   __cdecl _mm_maskz_loadu_epi8(__mmask16, void const*);
extern __m256i   __cdecl _mm256_mask_loadu_epi8(__m256i, __mmask32, void const*);
extern __m256i   __cdecl _mm256_maskz_loadu_epi8(__mmask32, void const*);
extern __m128d   __cdecl _mm_mask_loadu_pd(__m128d, __mmask8, void const*);
extern __m128d   __cdecl _mm_maskz_loadu_pd(__mmask8, void const*);
extern __m256d   __cdecl _mm256_mask_loadu_pd(__m256d, __mmask8, void const*);
extern __m256d   __cdecl _mm256_maskz_loadu_pd(__mmask8, void const*);
extern __m128    __cdecl _mm_mask_loadu_ps(__m128, __mmask8, void const*);
extern __m128    __cdecl _mm_maskz_loadu_ps(__mmask8, void const*);
extern __m256    __cdecl _mm256_mask_loadu_ps(__m256, __mmask8, void const*);
extern __m256    __cdecl _mm256_maskz_loadu_ps(__mmask8, void const*);
extern __m128i   __cdecl _mm_lzcnt_epi32(__m128i);
extern __m128i   __cdecl _mm_mask_lzcnt_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_lzcnt_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_lzcnt_epi32(__m256i);
extern __m256i   __cdecl _mm256_mask_lzcnt_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_lzcnt_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_lzcnt_epi64(__m128i);
extern __m128i   __cdecl _mm_mask_lzcnt_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_lzcnt_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_lzcnt_epi64(__m256i);
extern __m256i   __cdecl _mm256_mask_lzcnt_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_lzcnt_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_madd_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_madd_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_madd_epi16(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_madd_epi16(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_maddubs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_maddubs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_maddubs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_maddubs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_max_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_max_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_max_epu64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_max_epu64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_max_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_max_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_max_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_max_epu8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_max_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_max_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_max_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_max_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_max_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_max_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_max_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_max_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_min_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_min_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_min_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_min_epu64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_min_epu64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_min_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_min_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_min_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_min_epu8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_min_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_min_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_min_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_min_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_min_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_min_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_min_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_min_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_mov_epi16(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi16(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi16(__m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi16(__mmask16, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi32(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi32(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi32(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi32(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi64(__m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi64(__mmask8, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi64(__m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi64(__mmask8, __m256i);
extern __m128i   __cdecl _mm_mask_mov_epi8(__m128i, __mmask16, __m128i);
extern __m128i   __cdecl _mm_maskz_mov_epi8(__mmask16, __m128i);
extern __m256i   __cdecl _mm256_mask_mov_epi8(__m256i, __mmask32, __m256i);
extern __m256i   __cdecl _mm256_maskz_mov_epi8(__mmask32, __m256i);
extern __m128d   __cdecl _mm_mask_mov_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_mov_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_mov_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_mov_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_mov_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_mov_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_mov_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_mov_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_mask_movedup_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_movedup_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_movedup_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_movedup_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_movehdup_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_movehdup_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_movehdup_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_movehdup_ps(__mmask8, __m256);
extern __m128    __cdecl _mm_mask_moveldup_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_moveldup_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_moveldup_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_moveldup_ps(__mmask8, __m256);
extern __mmask8  __cdecl _mm_movepi16_mask(__m128i);
extern __mmask16 __cdecl _mm256_movepi16_mask(__m256i);
extern __mmask8  __cdecl _mm_movepi32_mask(__m128i);
extern __mmask8  __cdecl _mm256_movepi32_mask(__m256i);
extern __mmask8  __cdecl _mm_movepi64_mask(__m128i);
extern __mmask8  __cdecl _mm256_movepi64_mask(__m256i);
extern __mmask16 __cdecl _mm_movepi8_mask(__m128i);
extern __mmask32 __cdecl _mm256_movepi8_mask(__m256i);
extern __m128i   __cdecl _mm_movm_epi16(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi16(__mmask16);
extern __m128i   __cdecl _mm_movm_epi32(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi32(__mmask8);
extern __m128i   __cdecl _mm_movm_epi64(__mmask8);
extern __m256i   __cdecl _mm256_movm_epi64(__mmask8);
extern __m128i   __cdecl _mm_movm_epi8(__mmask16);
extern __m256i   __cdecl _mm256_movm_epi8(__mmask32);
extern __m128i   __cdecl _mm_mask_mul_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mul_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mul_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mul_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mul_epu32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mul_epu32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mul_epu32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mul_epu32(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_mul_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_mul_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_mul_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_mul_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_mul_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_mul_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_mul_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_mul_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_mulhi_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhi_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhi_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhi_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mulhi_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhi_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhi_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhi_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mulhrs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mulhrs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mulhrs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mulhrs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_mullo_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_mullo_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mullo_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_mullo_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_mullo_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mullo_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_or_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_or_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_or_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_or_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_or_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_or_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_or_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_or_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_or_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_or_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_or_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_or_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_or_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_or_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_or_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_or_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_packs_epi16(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packs_epi16(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packs_epi16(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packs_epi16(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packs_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packs_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packs_epi32(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packs_epi32(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packus_epi16(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packus_epi16(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packus_epi16(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packus_epi16(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_packus_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_packus_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_packus_epi32(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_packus_epi32(__mmask16, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_permute_pd(__m128d, __mmask8, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_permute_pd(__mmask8, __m128d, const int);
extern __m256d   __cdecl _mm256_mask_permute_pd(__m256d, __mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_permute_pd(__mmask8, __m256d, const int);
extern __m128    __cdecl _mm_mask_permute_ps(__m128, __mmask8, __m128, const int);
extern __m128    __cdecl _mm_maskz_permute_ps(__mmask8, __m128, const int);
extern __m256    __cdecl _mm256_mask_permute_ps(__m256, __mmask8, __m256, const int);
extern __m256    __cdecl _mm256_maskz_permute_ps(__mmask8, __m256, const int);
extern __m128d   __cdecl _mm_mask_permutevar_pd(__m128d, __mmask8, __m128d, __m128i);
extern __m128d   __cdecl _mm_maskz_permutevar_pd(__mmask8, __m128d, __m128i);
extern __m256d   __cdecl _mm256_mask_permutevar_pd(__m256d, __mmask8, __m256d, __m256i);
extern __m256d   __cdecl _mm256_maskz_permutevar_pd(__mmask8, __m256d, __m256i);
extern __m128    __cdecl _mm_mask_permutevar_ps(__m128, __mmask8, __m128, __m128i);
extern __m128    __cdecl _mm_maskz_permutevar_ps(__mmask8, __m128, __m128i);
extern __m256    __cdecl _mm256_mask_permutevar_ps(__m256, __mmask8, __m256, __m256i);
extern __m256    __cdecl _mm256_maskz_permutevar_ps(__mmask8, __m256, __m256i);
extern __m256i   __cdecl _mm256_mask_permutex_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_permutex_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_permutex_epi64(__m256i, const int);
extern __m256d   __cdecl _mm256_mask_permutex_pd(__m256d, __mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_permutex_pd(__mmask8, __m256d, const int);
extern __m256d   __cdecl _mm256_permutex_pd(__m256d, const int);
extern __m128i   __cdecl _mm_mask_permutex2var_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi16(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi16(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi16(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi16(__m256i, __m256i, __mmask16, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi16(__mmask16, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi16(__m256i, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_permutex2var_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi32(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi32(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi32(__m256i, __m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi32(__m256i, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_permutex2var_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_mask2_permutex2var_epi64(__m128i, __m128i, __mmask8, __m128i);
extern __m128i   __cdecl _mm_maskz_permutex2var_epi64(__mmask8, __m128i, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutex2var_epi64(__m128i, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutex2var_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_mask2_permutex2var_epi64(__m256i, __m256i, __mmask8, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutex2var_epi64(__mmask8, __m256i, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutex2var_epi64(__m256i, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_permutex2var_pd(__m128d, __mmask8, __m128i, __m128d);
extern __m128d   __cdecl _mm_mask2_permutex2var_pd(__m128d, __m128i, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_permutex2var_pd(__mmask8, __m128d, __m128i, __m128d);
extern __m128d   __cdecl _mm_permutex2var_pd(__m128d, __m128i, __m128d);
extern __m256d   __cdecl _mm256_mask_permutex2var_pd(__m256d, __mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_mask2_permutex2var_pd(__m256d, __m256i, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_permutex2var_pd(__mmask8, __m256d, __m256i, __m256d);
extern __m256d   __cdecl _mm256_permutex2var_pd(__m256d, __m256i, __m256d);
extern __m128    __cdecl _mm_mask_permutex2var_ps(__m128, __mmask8, __m128i, __m128);
extern __m128    __cdecl _mm_mask2_permutex2var_ps(__m128, __m128i, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_permutex2var_ps(__mmask8, __m128, __m128i, __m128);
extern __m128    __cdecl _mm_permutex2var_ps(__m128, __m128i, __m128);
extern __m256    __cdecl _mm256_mask_permutex2var_ps(__m256, __mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_mask2_permutex2var_ps(__m256, __m256i, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_permutex2var_ps(__mmask8, __m256, __m256i, __m256);
extern __m256    __cdecl _mm256_permutex2var_ps(__m256, __m256i, __m256);
extern __m128i   __cdecl _mm_mask_permutexvar_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_permutexvar_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_permutexvar_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi16(__m256i, __m256i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi32(__m256i, __m256i);
extern __m256i   __cdecl _mm256_mask_permutexvar_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_permutexvar_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_permutexvar_epi64(__m256i, __m256i);
extern __m256d   __cdecl _mm256_mask_permutexvar_pd(__m256d, __mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_maskz_permutexvar_pd(__mmask8, __m256i, __m256d);
extern __m256d   __cdecl _mm256_permutexvar_pd(__m256i, __m256d);
extern __m256    __cdecl _mm256_mask_permutexvar_ps(__m256, __mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_maskz_permutexvar_ps(__mmask8, __m256i, __m256);
extern __m256    __cdecl _mm256_permutexvar_ps(__m256i, __m256);
extern __m128d   __cdecl _mm_mask_range_pd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_range_pd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_range_pd(__m128d, __m128d, int);
extern __m256d   __cdecl _mm256_mask_range_pd(__m256d, __mmask8, __m256d, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_range_pd(__mmask8, __m256d, __m256d, int);
extern __m256d   __cdecl _mm256_range_pd(__m256d, __m256d, int);
extern __m128    __cdecl _mm_mask_range_ps(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_range_ps(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_range_ps(__m128, __m128, int);
extern __m256    __cdecl _mm256_mask_range_ps(__m256, __mmask8, __m256, __m256, int);
extern __m256    __cdecl _mm256_maskz_range_ps(__mmask8, __m256, __m256, int);
extern __m256    __cdecl _mm256_range_ps(__m256, __m256, int);
extern __m128d   __cdecl _mm_mask_rcp14_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp14_pd(__mmask8, __m128d);
extern __m128d   __cdecl _mm_rcp14_pd(__m128d);
extern __m256d   __cdecl _mm256_mask_rcp14_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_rcp14_pd(__mmask8, __m256d);
extern __m256d   __cdecl _mm256_rcp14_pd(__m256d);
extern __m128    __cdecl _mm_mask_rcp14_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_rcp14_ps(__mmask8, __m128);
extern __m128    __cdecl _mm_rcp14_ps(__m128);
extern __m256    __cdecl _mm256_mask_rcp14_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_rcp14_ps(__mmask8, __m256);
extern __m256    __cdecl _mm256_rcp14_ps(__m256);
extern __m128d   __cdecl _mm_mask_reduce_pd(__m128d, __mmask8, __m128d, int);
extern __m128d   __cdecl _mm_maskz_reduce_pd(__mmask8, __m128d, int);
extern __m128d   __cdecl _mm_reduce_pd(__m128d, int);
extern __m256d   __cdecl _mm256_mask_reduce_pd(__m256d, __mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_reduce_pd(__mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_reduce_pd(__m256d, int);
extern __m128    __cdecl _mm_mask_reduce_ps(__m128, __mmask8, __m128, int);
extern __m128    __cdecl _mm_maskz_reduce_ps(__mmask8, __m128, int);
extern __m128    __cdecl _mm_reduce_ps(__m128, int);
extern __m256    __cdecl _mm256_mask_reduce_ps(__m256, __mmask8, __m256, int);
extern __m256    __cdecl _mm256_maskz_reduce_ps(__mmask8, __m256, int);
extern __m256    __cdecl _mm256_reduce_ps(__m256, int);
extern __m128i   __cdecl _mm_mask_rol_epi32(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_rol_epi32(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_rol_epi32(__m128i, int);
extern __m256i   __cdecl _mm256_mask_rol_epi32(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_rol_epi32(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_rol_epi32(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rol_epi64(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_rol_epi64(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_rol_epi64(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_rol_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_rol_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_rol_epi64(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rolv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rolv_epi32(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rolv_epi32(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rolv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rolv_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rolv_epi32(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_rolv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rolv_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rolv_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rolv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rolv_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rolv_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_ror_epi32(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_ror_epi32(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_ror_epi32(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_ror_epi32(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_ror_epi32(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_ror_epi32(__m256i, const int);
extern __m128i   __cdecl _mm_mask_ror_epi64(__m128i, __mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_maskz_ror_epi64(__mmask8, __m128i, const int);
extern __m128i   __cdecl _mm_ror_epi64(__m128i, const int);
extern __m256i   __cdecl _mm256_mask_ror_epi64(__m256i, __mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_ror_epi64(__mmask8, __m256i, const int);
extern __m256i   __cdecl _mm256_ror_epi64(__m256i, const int);
extern __m128i   __cdecl _mm_mask_rorv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rorv_epi32(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rorv_epi32(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rorv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rorv_epi32(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rorv_epi32(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_rorv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_rorv_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_rorv_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_rorv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_rorv_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_rorv_epi64(__m256i, __m256i);
extern __m128d   __cdecl _mm_mask_roundscale_pd(__m128d, __mmask8, __m128d, int);
extern __m128d   __cdecl _mm_maskz_roundscale_pd(__mmask8, __m128d, int);
extern __m128d   __cdecl _mm_roundscale_pd(__m128d, int);
extern __m256d   __cdecl _mm256_mask_roundscale_pd(__m256d, __mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_maskz_roundscale_pd(__mmask8, __m256d, int);
extern __m256d   __cdecl _mm256_roundscale_pd(__m256d, int);
extern __m128    __cdecl _mm_mask_roundscale_ps(__m128, __mmask8, __m128, int);
extern __m128    __cdecl _mm_maskz_roundscale_ps(__mmask8, __m128, int);
extern __m128    __cdecl _mm_roundscale_ps(__m128, int);
extern __m256    __cdecl _mm256_mask_roundscale_ps(__m256, __mmask8, __m256, int);
extern __m256    __cdecl _mm256_maskz_roundscale_ps(__mmask8, __m256, int);
extern __m256    __cdecl _mm256_roundscale_ps(__m256, int);
extern __m128d   __cdecl _mm_mask_rsqrt14_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt14_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_rsqrt14_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_rsqrt14_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_rsqrt14_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt14_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_rsqrt14_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_rsqrt14_ps(__mmask8, __m256);
extern __m128d   __cdecl _mm_mask_scalef_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_scalef_pd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_scalef_pd(__m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_scalef_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_scalef_pd(__mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_scalef_pd(__m256d, __m256d);
extern __m128    __cdecl _mm_mask_scalef_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_scalef_ps(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_scalef_ps(__m128, __m128);
extern __m256    __cdecl _mm256_mask_scalef_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_scalef_ps(__mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_scalef_ps(__m256, __m256);
extern __m128i   __cdecl _mm_mask_set1_epi16(__m128i, __mmask8, short);
extern __m128i   __cdecl _mm_maskz_set1_epi16(__mmask8, short);
extern __m256i   __cdecl _mm256_mask_set1_epi16(__m256i, __mmask16, short);
extern __m256i   __cdecl _mm256_maskz_set1_epi16(__mmask16, short);
extern __m128i   __cdecl _mm_mask_set1_epi32(__m128i, __mmask8, int);
extern __m128i   __cdecl _mm_maskz_set1_epi32(__mmask8, int);
extern __m256i   __cdecl _mm256_mask_set1_epi32(__m256i, __mmask8, int);
extern __m256i   __cdecl _mm256_maskz_set1_epi32(__mmask8, int);
extern __m128i   __cdecl _mm_mask_set1_epi64(__m128i, __mmask8, __int64);
extern __m128i   __cdecl _mm_maskz_set1_epi64(__mmask8, __int64);
extern __m256i   __cdecl _mm256_mask_set1_epi64(__m256i, __mmask8, __int64);
extern __m256i   __cdecl _mm256_maskz_set1_epi64(__mmask8, __int64);
extern __m128i   __cdecl _mm_mask_set1_epi8(__m128i, __mmask16, char);
extern __m128i   __cdecl _mm_maskz_set1_epi8(__mmask16, char);
extern __m256i   __cdecl _mm256_mask_set1_epi8(__m256i, __mmask32, char);
extern __m256i   __cdecl _mm256_maskz_set1_epi8(__mmask32, char);
extern __m128i   __cdecl _mm_mask_shuffle_epi32(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shuffle_epi32(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shuffle_epi32(__m256i, __mmask8, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shuffle_epi32(__mmask8, __m256i, int);
extern __m128i   __cdecl _mm_mask_shuffle_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_shuffle_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_shuffle_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_shuffle_epi8(__mmask32, __m256i, __m256i);
extern __m256    __cdecl _mm256_mask_shuffle_f32x4(__m256, __mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_maskz_shuffle_f32x4(__mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_shuffle_f32x4(__m256, __m256, const int);
extern __m256d   __cdecl _mm256_mask_shuffle_f64x2(__m256d, __mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_shuffle_f64x2(__mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_shuffle_f64x2(__m256d, __m256d, const int);
extern __m256i   __cdecl _mm256_mask_shuffle_i32x4(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_shuffle_i32x4(__mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_shuffle_i32x4(__m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_mask_shuffle_i64x2(__m256i, __mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_maskz_shuffle_i64x2(__mmask8, __m256i, __m256i, const int);
extern __m256i   __cdecl _mm256_shuffle_i64x2(__m256i, __m256i, const int);
extern __m128d   __cdecl _mm_mask_shuffle_pd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_shuffle_pd(__mmask8, __m128d, __m128d, const int);
extern __m256d   __cdecl _mm256_mask_shuffle_pd(__m256d, __mmask8, __m256d, __m256d, const int);
extern __m256d   __cdecl _mm256_maskz_shuffle_pd(__mmask8, __m256d, __m256d, const int);
extern __m128    __cdecl _mm_mask_shuffle_ps(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_shuffle_ps(__mmask8, __m128, __m128, const int);
extern __m256    __cdecl _mm256_mask_shuffle_ps(__m256, __mmask8, __m256, __m256, const int);
extern __m256    __cdecl _mm256_maskz_shuffle_ps(__mmask8, __m256, __m256, const int);
extern __m128i   __cdecl _mm_mask_shufflehi_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shufflehi_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shufflehi_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shufflehi_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_shufflelo_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_shufflelo_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_shufflelo_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_shufflelo_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_sll_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sll_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sll_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sll_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sll_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sll_epi64(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_slli_epi16(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi16(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi16(__m256i, __mmask16, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi16(__mmask16, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_slli_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_slli_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_slli_epi64(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_slli_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_slli_epi64(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_sllv_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_sllv_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_sllv_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sllv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sllv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sllv_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sllv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sllv_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_sqrt_pd(__m128d, __mmask8, __m128d);
extern __m128d   __cdecl _mm_maskz_sqrt_pd(__mmask8, __m128d);
extern __m256d   __cdecl _mm256_mask_sqrt_pd(__m256d, __mmask8, __m256d);
extern __m256d   __cdecl _mm256_maskz_sqrt_pd(__mmask8, __m256d);
extern __m128    __cdecl _mm_mask_sqrt_ps(__m128, __mmask8, __m128);
extern __m128    __cdecl _mm_maskz_sqrt_ps(__mmask8, __m128);
extern __m256    __cdecl _mm256_mask_sqrt_ps(__m256, __mmask8, __m256);
extern __m256    __cdecl _mm256_maskz_sqrt_ps(__mmask8, __m256);
extern __m128i   __cdecl _mm_mask_sra_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sra_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_sra_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sra_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_sra_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sra_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_sra_epi64(__mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_sra_epi64(__m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srai_epi16(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi16(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi16(__m256i, __mmask16, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi16(__mmask16, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srai_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srai_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srai_epi64(__mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_srai_epi64(__m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srai_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srai_epi64(__mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_srai_epi64(__m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srav_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srav_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srav_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srav_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srav_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srav_epi64(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srav_epi64(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srav_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srav_epi64(__mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srav_epi64(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srl_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi16(__m256i, __mmask16, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi16(__mmask16, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srl_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi32(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi32(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srl_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srl_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srl_epi64(__m256i, __mmask8, __m256i, __m128i);
extern __m256i   __cdecl _mm256_maskz_srl_epi64(__mmask8, __m256i, __m128i);
extern __m128i   __cdecl _mm_mask_srli_epi16(__m128i, __mmask8, __m128i, int);
extern __m128i   __cdecl _mm_maskz_srli_epi16(__mmask8, __m128i, int);
extern __m256i   __cdecl _mm256_mask_srli_epi16(__m256i, __mmask16, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_srli_epi16(__mmask16, __m256i, int);
extern __m128i   __cdecl _mm_mask_srli_epi32(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srli_epi32(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srli_epi32(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srli_epi32(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srli_epi64(__m128i, __mmask8, __m128i, unsigned int);
extern __m128i   __cdecl _mm_maskz_srli_epi64(__mmask8, __m128i, unsigned int);
extern __m256i   __cdecl _mm256_mask_srli_epi64(__m256i, __mmask8, __m256i, unsigned int);
extern __m256i   __cdecl _mm256_maskz_srli_epi64(__mmask8, __m256i, unsigned int);
extern __m128i   __cdecl _mm_mask_srlv_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi16(__mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_srlv_epi16(__m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi16(__mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_srlv_epi16(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srlv_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_srlv_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_srlv_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_srlv_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_srlv_epi64(__mmask8, __m256i, __m256i);
extern void      __cdecl _mm_mask_store_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_store_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_store_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_store_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_store_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_store_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_store_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_store_ps(void*, __mmask8, __m256);
extern void      __cdecl _mm_mask_storeu_epi16(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi16(void*, __mmask16, __m256i);
extern void      __cdecl _mm_mask_storeu_epi32(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi32(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_storeu_epi64(void*, __mmask8, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi64(void*, __mmask8, __m256i);
extern void      __cdecl _mm_mask_storeu_epi8(void*, __mmask16, __m128i);
extern void      __cdecl _mm256_mask_storeu_epi8(void*, __mmask32, __m256i);
extern void      __cdecl _mm_mask_storeu_pd(void*, __mmask8, __m128d);
extern void      __cdecl _mm256_mask_storeu_pd(void*, __mmask8, __m256d);
extern void      __cdecl _mm_mask_storeu_ps(void*, __mmask8, __m128);
extern void      __cdecl _mm256_mask_storeu_ps(void*, __mmask8, __m256);
extern __m128i   __cdecl _mm_mask_sub_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_sub_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_sub_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_sub_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_sub_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_sub_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sub_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_sub_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_sub_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_sub_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sub_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_sub_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_sub_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_subs_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epi8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epu16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epu16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epu16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epu16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_subs_epu8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_subs_epu8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_subs_epu8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_subs_epu8(__mmask32, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_ternarylogic_epi32(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_ternarylogic_epi32(__mmask8, __m128i, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_ternarylogic_epi32(__m128i, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_ternarylogic_epi32(__m256i, __mmask8, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_ternarylogic_epi32(__mmask8, __m256i, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_ternarylogic_epi32(__m256i, __m256i, __m256i, int);
extern __m128i   __cdecl _mm_mask_ternarylogic_epi64(__m128i, __mmask8, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_maskz_ternarylogic_epi64(__mmask8, __m128i, __m128i, __m128i, int);
extern __m128i   __cdecl _mm_ternarylogic_epi64(__m128i, __m128i, __m128i, int);
extern __m256i   __cdecl _mm256_mask_ternarylogic_epi64(__m256i, __mmask8, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_maskz_ternarylogic_epi64(__mmask8, __m256i, __m256i, __m256i, int);
extern __m256i   __cdecl _mm256_ternarylogic_epi64(__m256i, __m256i, __m256i, int);
extern __mmask8  __cdecl _mm_mask_test_epi16_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi16_mask(__m128i, __m128i);
extern __mmask16 __cdecl _mm256_mask_test_epi16_mask(__mmask16, __m256i, __m256i);
extern __mmask16 __cdecl _mm256_test_epi16_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_test_epi32_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi32_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_test_epi32_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_test_epi32_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_test_epi64_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_test_epi64_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_test_epi64_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_test_epi64_mask(__m256i, __m256i);
extern __mmask16 __cdecl _mm_mask_test_epi8_mask(__mmask16, __m128i, __m128i);
extern __mmask16 __cdecl _mm_test_epi8_mask(__m128i, __m128i);
extern __mmask32 __cdecl _mm256_mask_test_epi8_mask(__mmask32, __m256i, __m256i);
extern __mmask32 __cdecl _mm256_test_epi8_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi16_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi16_mask(__m128i, __m128i);
extern __mmask16 __cdecl _mm256_mask_testn_epi16_mask(__mmask16, __m256i, __m256i);
extern __mmask16 __cdecl _mm256_testn_epi16_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi32_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi32_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_testn_epi32_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_testn_epi32_mask(__m256i, __m256i);
extern __mmask8  __cdecl _mm_mask_testn_epi64_mask(__mmask8, __m128i, __m128i);
extern __mmask8  __cdecl _mm_testn_epi64_mask(__m128i, __m128i);
extern __mmask8  __cdecl _mm256_mask_testn_epi64_mask(__mmask8, __m256i, __m256i);
extern __mmask8  __cdecl _mm256_testn_epi64_mask(__m256i, __m256i);
extern __mmask16 __cdecl _mm_mask_testn_epi8_mask(__mmask16, __m128i, __m128i);
extern __mmask16 __cdecl _mm_testn_epi8_mask(__m128i, __m128i);
extern __mmask32 __cdecl _mm256_mask_testn_epi8_mask(__mmask32, __m256i, __m256i);
extern __mmask32 __cdecl _mm256_testn_epi8_mask(__m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpackhi_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpackhi_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpackhi_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpackhi_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_unpackhi_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_unpackhi_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_unpackhi_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_unpackhi_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_unpackhi_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_unpackhi_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_unpackhi_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_unpackhi_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_unpacklo_epi16(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi16(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi16(__m256i, __mmask16, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi16(__mmask16, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi64(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_unpacklo_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_unpacklo_epi8(__mmask16, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_unpacklo_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_unpacklo_epi8(__mmask32, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_unpacklo_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_unpacklo_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_unpacklo_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_unpacklo_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_unpacklo_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_unpacklo_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_unpacklo_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_unpacklo_ps(__mmask8, __m256, __m256);
extern __m128i   __cdecl _mm_mask_xor_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_xor_epi32(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_xor_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_xor_epi32(__mmask8, __m256i, __m256i);
extern __m128i   __cdecl _mm_mask_xor_epi64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i   __cdecl _mm_maskz_xor_epi64(__mmask8, __m128i, __m128i);
extern __m256i   __cdecl _mm256_mask_xor_epi64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i   __cdecl _mm256_maskz_xor_epi64(__mmask8, __m256i, __m256i);
extern __m128d   __cdecl _mm_mask_xor_pd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_xor_pd(__mmask8, __m128d, __m128d);
extern __m256d   __cdecl _mm256_mask_xor_pd(__m256d, __mmask8, __m256d, __m256d);
extern __m256d   __cdecl _mm256_maskz_xor_pd(__mmask8, __m256d, __m256d);
extern __m128    __cdecl _mm_mask_xor_ps(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_xor_ps(__mmask8, __m128, __m128);
extern __m256    __cdecl _mm256_mask_xor_ps(__m256, __mmask8, __m256, __m256);
extern __m256    __cdecl _mm256_maskz_xor_ps(__mmask8, __m256, __m256);





























































































































































































































































































































































































































































































































































extern __m128d   __cdecl _mm_add_round_sd(__m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_add_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_add_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128    __cdecl _mm_add_round_ss(__m128, __m128, int);
extern __m128    __cdecl _mm_mask_add_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_add_round_ss(__mmask8, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_add_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_add_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_add_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_add_ss(__mmask8, __m128, __m128);
extern __mmask8  __cdecl _mm_cmp_round_sd_mask(__m128d, __m128d, const int, const int);
extern __mmask8  __cdecl _mm_mask_cmp_round_sd_mask(__mmask8, __m128d, __m128d, const int, const int);
extern __mmask8  __cdecl _mm_cmp_round_ss_mask(__m128, __m128, const int, const int);
extern __mmask8  __cdecl _mm_mask_cmp_round_ss_mask(__mmask8, __m128, __m128, const int, const int);
extern __mmask8  __cdecl _mm_cmp_sd_mask(__m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_mask_cmp_sd_mask(__mmask8, __m128d, __m128d, const int);
extern __mmask8  __cdecl _mm_cmp_ss_mask(__m128, __m128, const int);
extern __mmask8  __cdecl _mm_mask_cmp_ss_mask(__mmask8, __m128, __m128, const int);
extern int       __cdecl _mm_comi_round_sd(__m128d, __m128d, const int, const int);
extern int       __cdecl _mm_comi_round_ss(__m128, __m128, const int, const int);
extern __m128    __cdecl _mm_cvt_roundi32_ss(__m128, int, int);
extern int       __cdecl _mm_cvt_roundsd_i32(__m128d, int);
extern int       __cdecl _mm_cvt_roundsd_si32(__m128d, int);
extern __m128    __cdecl _mm_cvt_roundsd_ss(__m128, __m128d, int);
extern __m128    __cdecl _mm_mask_cvt_roundsd_ss(__m128, __mmask8, __m128, __m128d, int);
extern __m128    __cdecl _mm_maskz_cvt_roundsd_ss(__mmask8, __m128, __m128d, int);
extern unsigned int __cdecl _mm_cvt_roundsd_u32(__m128d, int);
extern __m128    __cdecl _mm_cvt_roundsi32_ss(__m128, int, int);
extern int       __cdecl _mm_cvt_roundss_i32(__m128, int);
extern __m128d   __cdecl _mm_cvt_roundss_sd(__m128d, __m128, int);
extern __m128d   __cdecl _mm_mask_cvt_roundss_sd(__m128d, __mmask8, __m128d, __m128, int);
extern __m128d   __cdecl _mm_maskz_cvt_roundss_sd(__mmask8, __m128d, __m128, int);
extern int       __cdecl _mm_cvt_roundss_si32(__m128, int);
extern unsigned int __cdecl _mm_cvt_roundss_u32(__m128, int);
extern __m128    __cdecl _mm_cvt_roundu32_ss(__m128, unsigned int, int);
extern __m128d   __cdecl _mm_cvti32_sd(__m128d, int);
extern __m128    __cdecl _mm_cvti32_ss(__m128, int);
extern int       __cdecl _mm_cvtsd_i32(__m128d);
extern __m128    __cdecl _mm_mask_cvtsd_ss(__m128, __mmask8, __m128, __m128d);
extern __m128    __cdecl _mm_maskz_cvtsd_ss(__mmask8, __m128, __m128d);
extern unsigned int __cdecl _mm_cvtsd_u32(__m128d);
extern int       __cdecl _mm_cvtss_i32(__m128);
extern __m128d   __cdecl _mm_mask_cvtss_sd(__m128d, __mmask8, __m128d, __m128);
extern __m128d   __cdecl _mm_maskz_cvtss_sd(__mmask8, __m128d, __m128);
extern unsigned int __cdecl _mm_cvtss_u32(__m128);
extern int       __cdecl _mm_cvtt_roundsd_i32(__m128d, int);
extern int       __cdecl _mm_cvtt_roundsd_si32(__m128d, int);
extern unsigned int __cdecl _mm_cvtt_roundsd_u32(__m128d, int);
extern int       __cdecl _mm_cvtt_roundss_i32(__m128, int);
extern int       __cdecl _mm_cvtt_roundss_si32(__m128, int);
extern unsigned int __cdecl _mm_cvtt_roundss_u32(__m128, int);
extern int       __cdecl _mm_cvttsd_i32(__m128d);
extern unsigned int __cdecl _mm_cvttsd_u32(__m128d);
extern int       __cdecl _mm_cvttss_i32(__m128);
extern unsigned int __cdecl _mm_cvttss_u32(__m128);
extern __m128d   __cdecl _mm_cvtu32_sd(__m128d, unsigned int);
extern __m128    __cdecl _mm_cvtu32_ss(__m128, unsigned int);
extern __m128d   __cdecl _mm_div_round_sd(__m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_div_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_div_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128    __cdecl _mm_div_round_ss(__m128, __m128, int);
extern __m128    __cdecl _mm_mask_div_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_div_round_ss(__mmask8, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_div_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_div_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_div_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_div_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_fixupimm_round_sd(__m128d, __m128d, __m128i, const int, int);
extern __m128d   __cdecl _mm_mask_fixupimm_round_sd(__m128d, __mmask8, __m128d, __m128i, const int, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_round_sd(__mmask8, __m128d, __m128d, __m128i, const int, const int);
extern __m128    __cdecl _mm_fixupimm_round_ss(__m128, __m128, __m128i, const int, const int);
extern __m128    __cdecl _mm_mask_fixupimm_round_ss(__m128, __mmask8, __m128, __m128i, const int, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_round_ss(__mmask8, __m128, __m128, __m128i, const int, const int);
extern __m128d   __cdecl _mm_fixupimm_sd(__m128d, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_mask_fixupimm_sd(__m128d, __mmask8, __m128d, __m128i, const int);
extern __m128d   __cdecl _mm_maskz_fixupimm_sd(__mmask8, __m128d, __m128d, __m128i, const int);
extern __m128    __cdecl _mm_fixupimm_ss(__m128, __m128, __m128i, const int);
extern __m128    __cdecl _mm_mask_fixupimm_ss(__m128, __mmask8, __m128, __m128i, const int);
extern __m128    __cdecl _mm_maskz_fixupimm_ss(__mmask8, __m128, __m128, __m128i, const int);
extern __m128d   __cdecl _mm_fmadd_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fmadd_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fmadd_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fmadd_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fmadd_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fmadd_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fmadd_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fmadd_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fmadd_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmadd_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmadd_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fmadd_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmadd_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmadd_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fmsub_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fmsub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fmsub_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fmsub_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fmsub_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fmsub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fmsub_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fmsub_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fmsub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fmsub_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fmsub_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fmsub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fmsub_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fmsub_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fnmadd_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fnmadd_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fnmadd_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fnmadd_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fnmadd_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fnmadd_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fnmadd_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fnmadd_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fnmadd_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmadd_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmadd_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fnmadd_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmadd_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmadd_ss(__mmask8, __m128, __m128, __m128);
extern __m128d   __cdecl _mm_fnmsub_round_sd(__m128d, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask_fnmsub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mask3_fnmsub_round_sd(__m128d, __m128d, __m128d, __mmask8, int);
extern __m128d   __cdecl _mm_maskz_fnmsub_round_sd(__mmask8, __m128d, __m128d, __m128d, int);
extern __m128    __cdecl _mm_fnmsub_round_ss(__m128, __m128, __m128, int);
extern __m128    __cdecl _mm_mask_fnmsub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mask3_fnmsub_round_ss(__m128, __m128, __m128, __mmask8, int);
extern __m128    __cdecl _mm_maskz_fnmsub_round_ss(__mmask8, __m128, __m128, __m128, int);
extern __m128d   __cdecl _mm_mask_fnmsub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_mask3_fnmsub_sd(__m128d, __m128d, __m128d, __mmask8);
extern __m128d   __cdecl _mm_maskz_fnmsub_sd(__mmask8, __m128d, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_fnmsub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_mask3_fnmsub_ss(__m128, __m128, __m128, __mmask8);
extern __m128    __cdecl _mm_maskz_fnmsub_ss(__mmask8, __m128, __m128, __m128);
extern __mmask8  __cdecl _mm_fpclass_sd_mask(__m128d, int);
extern __mmask8  __cdecl _mm_mask_fpclass_sd_mask(__mmask8, __m128d, int);
extern __mmask8  __cdecl _mm_fpclass_ss_mask(__m128, int);
extern __mmask8  __cdecl _mm_mask_fpclass_ss_mask(__mmask8, __m128, int);
extern __m128d   __cdecl _mm_getexp_round_sd(__m128d, __m128d, const int);
extern __m128d   __cdecl _mm_mask_getexp_round_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_getexp_round_sd(__mmask8, __m128d, __m128d, const int);
extern __m128    __cdecl _mm_getexp_round_ss(__m128, __m128, const int);
extern __m128    __cdecl _mm_mask_getexp_round_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_getexp_round_ss(__mmask8, __m128, __m128, const int);
extern __m128d   __cdecl _mm_getexp_sd(__m128d, __m128d);
extern __m128d   __cdecl _mm_mask_getexp_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_getexp_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_getexp_ss(__m128, __m128);
extern __m128    __cdecl _mm_mask_getexp_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_getexp_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_getmant_round_sd(__m128d, __m128d, int, int, int);
extern __m128d   __cdecl _mm_mask_getmant_round_sd(__m128d, __mmask8, __m128d, __m128d, int, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_round_sd(__mmask8, __m128d, __m128d, int, int, int);
extern __m128    __cdecl _mm_getmant_round_ss(__m128, __m128, int, int, int);
extern __m128    __cdecl _mm_mask_getmant_round_ss(__m128, __mmask8, __m128, __m128, int, int, int);
extern __m128    __cdecl _mm_maskz_getmant_round_ss(__mmask8, __m128, __m128, int, int, int);
extern __m128d   __cdecl _mm_getmant_sd(__m128d, __m128d, int, int);
extern __m128d   __cdecl _mm_mask_getmant_sd(__m128d, __mmask8, __m128d, __m128d, int, int);
extern __m128d   __cdecl _mm_maskz_getmant_sd(__mmask8, __m128d, __m128d, int, int);
extern __m128    __cdecl _mm_getmant_ss(__m128, __m128, int, int);
extern __m128    __cdecl _mm_mask_getmant_ss(__m128, __mmask8, __m128, __m128, int, int);
extern __m128    __cdecl _mm_maskz_getmant_ss(__mmask8, __m128, __m128, int, int);
extern __m128d   __cdecl _mm_mask_load_sd(__m128d, __mmask8, const double*);
extern __m128d   __cdecl _mm_maskz_load_sd(__mmask8, const double*);
extern __m128    __cdecl _mm_mask_load_ss(__m128, __mmask8, const float*);
extern __m128    __cdecl _mm_maskz_load_ss(__mmask8, const float*);
extern __m128d   __cdecl _mm_mask_max_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_max_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_max_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_max_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_max_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_max_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_max_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_max_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_max_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_max_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_min_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_min_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_min_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_min_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_min_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_min_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_min_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_min_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_min_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_min_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_move_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_move_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_move_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_move_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_mul_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_mul_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_mul_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_mul_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_mul_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_mul_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_mul_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_mul_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_mul_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_mul_ss(__mmask8, __m128, __m128);
extern __m128d   __cdecl _mm_mask_range_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_maskz_range_round_sd(__mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_range_round_sd(__m128d, __m128d, const int, int);
extern __m128    __cdecl _mm_mask_range_round_ss(__m128, __mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_maskz_range_round_ss(__mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_range_round_ss(__m128, __m128, const int, int);
extern __m128d   __cdecl _mm_mask_range_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_range_sd(__mmask8, __m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_range_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_range_ss(__mmask8, __m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_rcp14_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp14_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rcp14_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rcp14_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rcp14_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rcp14_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_rcp28_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_rcp28_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_rcp28_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_rcp28_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_rcp28_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_rcp28_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_rcp28_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rcp28_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rcp28_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rcp28_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rcp28_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rcp28_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_reduce_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_maskz_reduce_round_sd(__mmask8, __m128d, __m128d, const int, int);
extern __m128d   __cdecl _mm_reduce_round_sd(__m128d, __m128d, const int, int);
extern __m128    __cdecl _mm_mask_reduce_round_ss(__m128, __mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_maskz_reduce_round_ss(__mmask8, __m128, __m128, const int, int);
extern __m128    __cdecl _mm_reduce_round_ss(__m128, __m128, const int, int);
extern __m128d   __cdecl _mm_mask_reduce_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_reduce_sd(__mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_reduce_sd(__m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_reduce_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_reduce_ss(__mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_reduce_ss(__m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_roundscale_round_sd(__m128d, __mmask8, __m128d, __m128d, const int, const int);
extern __m128d   __cdecl _mm_maskz_roundscale_round_sd(__mmask8, __m128d, __m128d, const int, const int);
extern __m128d   __cdecl _mm_roundscale_round_sd(__m128d, __m128d, const int, const int);
extern __m128    __cdecl _mm_mask_roundscale_round_ss(__m128, __mmask8, __m128, __m128, const int, const int);
extern __m128    __cdecl _mm_maskz_roundscale_round_ss(__mmask8, __m128, __m128, const int, const int);
extern __m128    __cdecl _mm_roundscale_round_ss(__m128, __m128, const int, const int);
extern __m128d   __cdecl _mm_mask_roundscale_sd(__m128d, __mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_maskz_roundscale_sd(__mmask8, __m128d, __m128d, const int);
extern __m128d   __cdecl _mm_roundscale_sd(__m128d, __m128d, const int);
extern __m128    __cdecl _mm_mask_roundscale_ss(__m128, __mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_maskz_roundscale_ss(__mmask8, __m128, __m128, const int);
extern __m128    __cdecl _mm_roundscale_ss(__m128, __m128, const int);
extern __m128d   __cdecl _mm_mask_rsqrt14_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt14_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rsqrt14_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rsqrt14_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt14_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rsqrt14_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_rsqrt28_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_rsqrt28_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_rsqrt28_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_rsqrt28_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_rsqrt28_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_rsqrt28_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_rsqrt28_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_rsqrt28_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_rsqrt28_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_rsqrt28_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_rsqrt28_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_rsqrt28_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_scalef_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_scalef_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_scalef_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_scalef_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_scalef_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_scalef_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_scalef_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_scalef_sd(__mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_scalef_sd(__m128d, __m128d);
extern __m128    __cdecl _mm_mask_scalef_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_scalef_ss(__mmask8, __m128, __m128);
extern __m128    __cdecl _mm_scalef_ss(__m128, __m128);
extern __m128d   __cdecl _mm_mask_sqrt_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_sqrt_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_sqrt_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_sqrt_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_sqrt_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_sqrt_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_sqrt_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sqrt_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_sqrt_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sqrt_ss(__mmask8, __m128, __m128);
extern void      __cdecl _mm_mask_store_sd(double*, __mmask8, __m128d);
extern void      __cdecl _mm_mask_store_ss(float*, __mmask8, __m128);
extern __m128d   __cdecl _mm_mask_sub_round_sd(__m128d, __mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_maskz_sub_round_sd(__mmask8, __m128d, __m128d, int);
extern __m128d   __cdecl _mm_sub_round_sd(__m128d, __m128d, int);
extern __m128    __cdecl _mm_mask_sub_round_ss(__m128, __mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_maskz_sub_round_ss(__mmask8, __m128, __m128, int);
extern __m128    __cdecl _mm_sub_round_ss(__m128, __m128, int);
extern __m128d   __cdecl _mm_mask_sub_sd(__m128d, __mmask8, __m128d, __m128d);
extern __m128d   __cdecl _mm_maskz_sub_sd(__mmask8, __m128d, __m128d);
extern __m128    __cdecl _mm_mask_sub_ss(__m128, __mmask8, __m128, __m128);
extern __m128    __cdecl _mm_maskz_sub_ss(__mmask8, __m128, __m128);






extern unsigned __int64 __cdecl _mm_cvtsd_u64(__m128d);
extern unsigned __int64 __cdecl _mm_cvtss_u64(__m128);
extern unsigned __int64 __cdecl _mm_cvttsd_u64(__m128d);
extern unsigned __int64 __cdecl _mm_cvttss_u64(__m128);
extern unsigned __int64 __cdecl _mm_cvt_roundsd_u64(__m128d, int);
extern unsigned __int64 __cdecl _mm_cvt_roundss_u64(__m128, int);
extern unsigned __int64 __cdecl _mm_cvtt_roundsd_u64(__m128d, int);
extern unsigned __int64 __cdecl _mm_cvtt_roundss_u64(__m128, int);

extern __m128d   __cdecl _mm_cvti64_sd(__m128d, __int64);
extern __m128    __cdecl _mm_cvti64_ss(__m128, __int64);
extern __int64   __cdecl _mm_cvtsd_i64(__m128d);
extern __int64   __cdecl _mm_cvtss_i64(__m128);
extern __int64   __cdecl _mm_cvttsd_i64(__m128d);
extern __int64   __cdecl _mm_cvttss_i64(__m128);
extern __int64   __cdecl _mm_cvtt_roundsd_i64(__m128d, int);
extern __int64   __cdecl _mm_cvtt_roundsd_si64(__m128d, int);
extern __int64   __cdecl _mm_cvtt_roundss_i64(__m128, int);
extern __int64   __cdecl _mm_cvtt_roundss_si64(__m128, int);
extern __m128d   __cdecl _mm_cvtu64_sd(__m128d, unsigned __int64);
extern __m128    __cdecl _mm_cvtu64_ss(__m128, unsigned __int64);
extern __m128d   __cdecl _mm_cvt_roundi64_sd(__m128d, __int64, int);
extern __m128    __cdecl _mm_cvt_roundi64_ss(__m128, __int64, int);
extern __int64   __cdecl _mm_cvt_roundsd_i64(__m128d, int);
extern __int64   __cdecl _mm_cvt_roundsd_si64(__m128d, int);
extern __m128d   __cdecl _mm_cvt_roundsi64_sd(__m128d, __int64, int);
extern __m128    __cdecl _mm_cvt_roundsi64_ss(__m128, __int64, int);
extern __int64   __cdecl _mm_cvt_roundss_i64(__m128, int);
extern __int64   __cdecl _mm_cvt_roundss_si64(__m128, int);
extern __m128d   __cdecl _mm_cvt_roundu64_sd(__m128d, unsigned __int64, int);
extern __m128    __cdecl _mm_cvt_roundu64_ss(__m128, unsigned __int64, int);

#line 5368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"


extern __m512d   __cdecl _mm512_zextpd128_pd512(__m128d);
extern __m512d   __cdecl _mm512_zextpd256_pd512(__m256d);
extern __m512    __cdecl _mm512_zextps128_ps512(__m128);
extern __m512    __cdecl _mm512_zextps256_ps512(__m256);
extern __m512i   __cdecl _mm512_zextsi128_si512(__m128i);
extern __m512i   __cdecl _mm512_zextsi256_si512(__m256i);



























#line 5404 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"


extern __m128i __cdecl _mm_madd52hi_epu64(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_madd52hi_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_madd52hi_epu64(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_madd52hi_epu64(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_madd52hi_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_madd52hi_epu64(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_madd52hi_epu64(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_madd52hi_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd52hi_epu64(__mmask8, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_madd52lo_epu64(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_madd52lo_epu64(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_madd52lo_epu64(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_madd52lo_epu64(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_madd52lo_epu64(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_madd52lo_epu64(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_madd52lo_epu64(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_madd52lo_epu64(__m512i, __mmask8, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_madd52lo_epu64(__mmask8, __m512i, __m512i, __m512i);


extern __m128i __cdecl _mm_permutexvar_epi8(__m128i, __m128i);
extern __m128i __cdecl _mm_mask_permutexvar_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_permutexvar_epi8(__mmask16, __m128i, __m128i);
extern __m256i __cdecl _mm256_permutexvar_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mask_permutexvar_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_permutexvar_epi8(__mmask32, __m256i, __m256i);
extern __m512i __cdecl _mm512_permutexvar_epi8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutexvar_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_permutexvar_epi8(__mmask64, __m512i, __m512i);

extern __m128i __cdecl _mm_permutex2var_epi8(__m128i, __m128i , __m128i);
extern __m128i __cdecl _mm_mask_permutex2var_epi8(__m128i, __mmask16, __m128i , __m128i);
extern __m128i __cdecl _mm_mask2_permutex2var_epi8(__m128i, __m128i , __mmask16, __m128i);
extern __m128i __cdecl _mm_maskz_permutex2var_epi8(__mmask16, __m128i, __m128i , __m128i);
extern __m256i __cdecl _mm256_permutex2var_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_permutex2var_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask2_permutex2var_epi8(__m256i, __m256i, __mmask32, __m256i);
extern __m256i __cdecl _mm256_maskz_permutex2var_epi8(__mmask32, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_permutex2var_epi8(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_permutex2var_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask2_permutex2var_epi8(__m512i, __m512i, __mmask64, __m512i);
extern __m512i __cdecl _mm512_maskz_permutex2var_epi8(__mmask64, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_multishift_epi64_epi8(__m128i, __m128i);
extern __m128i __cdecl _mm_mask_multishift_epi64_epi8(__m128i, __mmask16, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_multishift_epi64_epi8(__mmask16, __m128i, __m128i);
extern __m256i __cdecl _mm256_multishift_epi64_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mask_multishift_epi64_epi8(__m256i, __mmask32, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_multishift_epi64_epi8(__mmask32, __m256i, __m256i);
extern __m512i __cdecl _mm512_multishift_epi64_epi8(__m512i, __m512i);
extern __m512i __cdecl _mm512_mask_multishift_epi64_epi8(__m512i, __mmask64, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_multishift_epi64_epi8(__mmask64, __m512i, __m512i);


extern __m128i __cdecl _mm_dpbusd_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpbusd_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpbusd_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpbusd_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpbusd_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpbusd_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpbusd_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpbusd_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpbusd_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpbusds_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpbusds_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpbusds_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpbusds_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpbusds_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpbusds_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpbusds_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpbusds_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpbusds_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpwssd_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpwssd_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpwssd_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpwssd_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpwssd_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpwssd_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpwssd_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpwssd_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpwssd_epi32(__mmask16, __m512i, __m512i, __m512i);

extern __m128i __cdecl _mm_dpwssds_epi32(__m128i, __m128i, __m128i);
extern __m128i __cdecl _mm_mask_dpwssds_epi32(__m128i, __mmask8, __m128i, __m128i);
extern __m128i __cdecl _mm_maskz_dpwssds_epi32(__mmask8, __m128i, __m128i, __m128i);
extern __m256i __cdecl _mm256_dpwssds_epi32(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_mask_dpwssds_epi32(__m256i, __mmask8, __m256i, __m256i);
extern __m256i __cdecl _mm256_maskz_dpwssds_epi32(__mmask8, __m256i, __m256i, __m256i);
extern __m512i __cdecl _mm512_dpwssds_epi32(__m512i, __m512i, __m512i);
extern __m512i __cdecl _mm512_mask_dpwssds_epi32(__m512i, __mmask16, __m512i, __m512i);
extern __m512i __cdecl _mm512_maskz_dpwssds_epi32(__mmask16, __m512i, __m512i, __m512i);


extern __m256i __cdecl _mm256_aesenc_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesenc_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesenclast_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesenclast_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesdec_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesdec_epi128(__m512i, __m512i);
extern __m256i __cdecl _mm256_aesdeclast_epi128(__m256i, __m256i);
extern __m512i __cdecl _mm512_aesdeclast_epi128(__m512i, __m512i);


extern __m256i __cdecl _mm256_clmulepi64_epi128(__m256i, __m256i, const int);
extern __m512i __cdecl _mm512_clmulepi64_epi128(__m512i, __m512i, const int);


}
#line 5518 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"


#line 5521 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\zmmintrin.h"
#line 2127 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"

#line 2129 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"
#line 2130 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"
#line 2131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\immintrin.h"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"












#pragma once



#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"







#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"



#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"


extern "C" { 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"


unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"


unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"

void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


}; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ammintrin.h"
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
    #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"

    

#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"

    


#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"

    


#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"


extern "C" {
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"


void * _AddressOfReturnAddress(void);
























short _InterlockedAnd16_np(short volatile * _Value, short _Mask);
__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);
char _InterlockedAnd8_np(char volatile * _Value, char _Mask);
long _InterlockedAnd_np(long volatile * _Value, long _Mask);
unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);
__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);
void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);

long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);
short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);



short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






short _InterlockedOr16_np(short volatile * _Value, short _Mask);
__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);
char _InterlockedOr8_np(char volatile * _Value, char _Mask);
long _InterlockedOr_np(long volatile * _Value, long _Mask);
short _InterlockedXor16_np(short volatile * _Value, short _Mask);
__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);
char _InterlockedXor8_np(char volatile * _Value, char _Mask);
long _InterlockedXor_np(long volatile * _Value, long _Mask);








void _ReadBarrier(void);






void * _ReturnAddress(void);

void _WriteBarrier(void);









void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __clts(void);
void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr2(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);




unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);













  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);




























































void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);



































__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);


#line 858 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
__m128i _mm_stream_load_si128(const __m128i *);
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
#line 941 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
#line 942 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\intrin.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"


__pragma(warning(push))
__pragma(warning(disable: 4996))





namespace QAlgorithmsPrivate {


template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::sort")) inline void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::sort")) inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy);

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan);
template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSortHelper(RandomAccessIterator, RandomAccessIterator, const T &);

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::lower_bound")) inline RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::upper_bound")) inline RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::binary_search")) inline RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan);
#line 77 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"

}


template <typename InputIterator, typename OutputIterator>
__declspec(deprecated("Use std::copy")) inline OutputIterator qCopy(InputIterator begin, InputIterator end, OutputIterator dest)
{
    while (begin != end)
        *dest++ = *begin++;
    return dest;
}

template <typename BiIterator1, typename BiIterator2>
__declspec(deprecated("Use std::copy_backward")) inline BiIterator2 qCopyBackward(BiIterator1 begin, BiIterator1 end, BiIterator2 dest)
{
    while (begin != end)
        *--dest = *--end;
    return dest;
}

template <typename InputIterator1, typename InputIterator2>
__declspec(deprecated("Use std::equal")) inline bool qEqual(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
{
    for (; first1 != last1; ++first1, ++first2)
        if (!(*first1 == *first2))
            return false;
    return true;
}

template <typename ForwardIterator, typename T>
__declspec(deprecated("Use std::fill")) inline void qFill(ForwardIterator first, ForwardIterator last, const T &val)
{
    for (; first != last; ++first)
        *first = val;
}

template <typename Container, typename T>
__declspec(deprecated("Use std::fill")) inline void qFill(Container &container, const T &val)
{
    qFill(container.begin(), container.end(), val);
}

template <typename InputIterator, typename T>
__declspec(deprecated("Use std::find")) inline InputIterator qFind(InputIterator first, InputIterator last, const T &val)
{
    while (first != last && !(*first == val))
        ++first;
    return first;
}

template <typename Container, typename T>
__declspec(deprecated("Use std::find")) inline typename Container::const_iterator qFind(const Container &container, const T &val)
{
    return qFind(container.constBegin(), container.constEnd(), val);
}

template <typename InputIterator, typename T, typename Size>
__declspec(deprecated("Use std::count")) inline void qCount(InputIterator first, InputIterator last, const T &value, Size &n)
{
    for (; first != last; ++first)
        if (*first == value)
            ++n;
}

template <typename Container, typename T, typename Size>
__declspec(deprecated("Use std::count")) inline void qCount(const Container &container, const T &value, Size &n)
{
    qCount(container.constBegin(), container.constEnd(), value, n);
}






template <typename T>
class __declspec(deprecated("Use std::less")) qLess
{
public:
    inline bool operator()(const T &t1, const T &t2) const
    {
        return (t1 < t2);
    }
};

template <typename T>
class __declspec(deprecated("Use std::greater")) qGreater
{
public:
    inline bool operator()(const T &t1, const T &t2) const
    {
        return (t2 < t1);
    }
};
#line 172 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"

template <typename RandomAccessIterator>
__declspec(deprecated("Use std::sort")) inline void qSort(RandomAccessIterator start, RandomAccessIterator end)
{
    if (start != end)
        QAlgorithmsPrivate::qSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
__declspec(deprecated("Use std::sort")) inline void qSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
    if (start != end)
        QAlgorithmsPrivate::qSortHelper(start, end, *start, lessThan);
}

template<typename Container>
__declspec(deprecated("Use std::sort")) inline void qSort(Container &c)
{




    if (!c.empty())
        QAlgorithmsPrivate::qSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end)
{
    if (start != end)
        QAlgorithmsPrivate::qStableSortHelper(start, end, *start);
}

template <typename RandomAccessIterator, typename LessThan>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSort(RandomAccessIterator start, RandomAccessIterator end, LessThan lessThan)
{
    if (start != end)
        QAlgorithmsPrivate::qStableSortHelper(start, end, *start, lessThan);
}

template<typename Container>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSort(Container &c)
{




    if (!c.empty())
        QAlgorithmsPrivate::qStableSortHelper(c.begin(), c.end(), *c.begin());
}

template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::lower_bound")) inline RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{
    
    
    
    RandomAccessIterator middle;
    int n = end - begin;
    int half;

    while (n > 0) {
        half = n >> 1;
        middle = begin + half;
        if (*middle < value) {
            begin = middle + 1;
            n -= half + 1;
        } else {
            n = half;
        }
    }
    return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::lower_bound")) inline RandomAccessIterator qLowerBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    return QAlgorithmsPrivate::qLowerBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
__declspec(deprecated("Use std::lower_bound")) inline typename Container::const_iterator qLowerBound(const Container &container, const T &value)
{
    return QAlgorithmsPrivate::qLowerBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::upper_bound")) inline RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{
    
    RandomAccessIterator middle;
    int n = end - begin;
    int half;

    while (n > 0) {
        half = n >> 1;
        middle = begin + half;
        if (value < *middle) {
            n = half;
        } else {
            begin = middle + 1;
            n -= half + 1;
        }
    }
    return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::upper_bound")) inline RandomAccessIterator qUpperBound(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    return QAlgorithmsPrivate::qUpperBoundHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
__declspec(deprecated("Use std::upper_bound")) inline typename Container::const_iterator qUpperBound(const Container &container, const T &value)
{
    return QAlgorithmsPrivate::qUpperBoundHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}

template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::binary_search")) inline RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value)
{
    
    RandomAccessIterator it = qLowerBound(begin, end, value);

    if (it == end || value < *it)
        return end;

    return it;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::binary_search")) inline RandomAccessIterator qBinaryFind(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    return QAlgorithmsPrivate::qBinaryFindHelper(begin, end, value, lessThan);
}

template <typename Container, typename T>
__declspec(deprecated("Use std::binary_search")) inline typename Container::const_iterator qBinaryFind(const Container &container, const T &value)
{
    return QAlgorithmsPrivate::qBinaryFindHelper(container.constBegin(), container.constEnd(), value, qLess<T>());
}
#line 315 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"

template <typename ForwardIterator>
inline void qDeleteAll(ForwardIterator begin, ForwardIterator end)
{
    while (begin != end) {
        delete *begin;
        ++begin;
    }
}

template <typename Container>
inline void qDeleteAll(const Container &c)
{
    qDeleteAll(c.begin(), c.end());
}





namespace QAlgorithmsPrivate {



template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::sort")) inline void qSortHelper(RandomAccessIterator start, RandomAccessIterator end, const T &t, LessThan lessThan)
{
top:
    int span = int(end - start);
    if (span < 2)
        return;

    --end;
    RandomAccessIterator low = start, high = end - 1;
    RandomAccessIterator pivot = start + span / 2;

    if (lessThan(*end, *start))
        qSwap(*end, *start);
    if (span == 2)
        return;

    if (lessThan(*pivot, *start))
        qSwap(*pivot, *start);
    if (lessThan(*end, *pivot))
        qSwap(*end, *pivot);
    if (span == 3)
        return;

    qSwap(*pivot, *end);

    while (low < high) {
        while (low < high && lessThan(*low, *end))
            ++low;

        while (high > low && lessThan(*end, *high))
            --high;

        if (low < high) {
            qSwap(*low, *high);
            ++low;
            --high;
        } else {
            break;
        }
    }

    if (lessThan(*low, *end))
        ++low;

    qSwap(*end, *low);
    qSortHelper(start, low, t, lessThan);

    start = low + 1;
    ++end;
    goto top;
}

template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::sort")) inline void qSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
    qSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator>
__declspec(deprecated("Use std::reverse")) inline void qReverse(RandomAccessIterator begin, RandomAccessIterator end)
{
    --end;
    while (begin < end)
        qSwap(*begin++, *end--);
}

template <typename RandomAccessIterator>
__declspec(deprecated("Use std::rotate")) inline void qRotate(RandomAccessIterator begin, RandomAccessIterator middle, RandomAccessIterator end)
{
    qReverse(begin, middle);
    qReverse(middle, end);
    qReverse(begin, end);
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::merge")) inline void qMerge(RandomAccessIterator begin, RandomAccessIterator pivot, RandomAccessIterator end, T &t, LessThan lessThan)
{
    const int len1 = pivot - begin;
    const int len2 = end - pivot;

    if (len1 == 0 || len2 == 0)
        return;

    if (len1 + len2 == 2) {
        if (lessThan(*(begin + 1), *(begin)))
            qSwap(*begin, *(begin + 1));
        return;
    }

    RandomAccessIterator firstCut;
    RandomAccessIterator secondCut;
    int len2Half;
    if (len1 > len2) {
        const int len1Half = len1 / 2;
        firstCut = begin + len1Half;
        secondCut = qLowerBound(pivot, end, *firstCut, lessThan);
        len2Half = secondCut - pivot;
    } else {
        len2Half = len2 / 2;
        secondCut = pivot + len2Half;
        firstCut = qUpperBound(begin, pivot, *secondCut, lessThan);
    }

    qRotate(firstCut, pivot, secondCut);
    const RandomAccessIterator newPivot = firstCut + len2Half;
    qMerge(begin, firstCut, newPivot, t, lessThan);
    qMerge(newPivot, secondCut, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &t, LessThan lessThan)
{
    const int span = end - begin;
    if (span < 2)
       return;

    const RandomAccessIterator middle = begin + span / 2;
    qStableSortHelper(begin, middle, t, lessThan);
    qStableSortHelper(middle, end, t, lessThan);
    qMerge(begin, middle, end, t, lessThan);
}

template <typename RandomAccessIterator, typename T>
__declspec(deprecated("Use std::stable_sort")) inline void qStableSortHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &dummy)
{
    qStableSortHelper(begin, end, dummy, qLess<T>());
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::lower_bound")) inline RandomAccessIterator qLowerBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    RandomAccessIterator middle;
    int n = int(end - begin);
    int half;

    while (n > 0) {
        half = n >> 1;
        middle = begin + half;
        if (lessThan(*middle, value)) {
            begin = middle + 1;
            n -= half + 1;
        } else {
            n = half;
        }
    }
    return begin;
}


template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::upper_bound")) inline RandomAccessIterator qUpperBoundHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    RandomAccessIterator middle;
    int n = end - begin;
    int half;

    while (n > 0) {
        half = n >> 1;
        middle = begin + half;
        if (lessThan(value, *middle)) {
            n = half;
        } else {
            begin = middle + 1;
            n -= half + 1;
        }
    }
    return begin;
}

template <typename RandomAccessIterator, typename T, typename LessThan>
__declspec(deprecated("Use std::binary_search")) inline RandomAccessIterator qBinaryFindHelper(RandomAccessIterator begin, RandomAccessIterator end, const T &value, LessThan lessThan)
{
    RandomAccessIterator it = qLowerBoundHelper(begin, end, value, lessThan);

    if (it == end || lessThan(value, *it))
        return end;

    return it;
}

#line 521 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"










#line 532 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"



























































#line 592 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"



__forceinline unsigned long qt_builtin_ctz(quint32 val)
{
    unsigned long result;
    _BitScanForward(&result, val);
    return result;
}

__forceinline unsigned long qt_builtin_clz(quint32 val)
{
    unsigned long result;
    _BitScanReverse(&result, val);
    
    
    
    result ^= sizeof(quint32) * 8 - 1;
    return result;
}



__forceinline unsigned long qt_builtin_ctzll(quint64 val)
{
    unsigned long result;
    _BitScanForward64(&result, val);
    return result;
}


__forceinline unsigned long qt_builtin_clzll(quint64 val)
{
    unsigned long result;
    _BitScanReverse64(&result, val);
    
    result ^= sizeof(quint64) * 8 - 1;
    return result;
}
#line 632 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"

__forceinline uint qt_builtin_ctzs(quint16 v) noexcept
{
    return qt_builtin_ctz(v);
}

__forceinline uint qt_builtin_clzs(quint16 v) noexcept
{
    return qt_builtin_clz(v) - 16U;
}


































#line 677 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"

#line 679 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
#line 680 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"






} 

  inline uint qPopulationCount(quint32 v) noexcept
{



    
    return
        (((v      ) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 12) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 24) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f;
#line 699 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

  inline uint qPopulationCount(quint8 v) noexcept
{



    return
        (((v      ) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f;
#line 709 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

  inline uint qPopulationCount(quint16 v) noexcept
{



    return
        (((v      ) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 12) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f;
#line 720 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

  inline uint qPopulationCount(quint64 v) noexcept
{



    return
        (((v      ) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 12) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 24) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 36) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 48) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f +
        (((v >> 60) & 0xfff)    * 0x1001001001001ui64 & 0x84210842108421ui64) % 0x1f;
#line 735 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

  inline uint qPopulationCount(long unsigned int v) noexcept
{
    return qPopulationCount(static_cast<quint64>(v));
}



#line 745 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"


constexpr inline uint qCountTrailingZeroBits(quint32 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_ctz(v) : 32U;











#line 763 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

constexpr inline uint qCountTrailingZeroBits(quint8 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_ctz(v) : 8U;








#line 778 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

constexpr inline uint qCountTrailingZeroBits(quint16 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_ctzs(v) : 16U;









#line 794 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

constexpr inline uint qCountTrailingZeroBits(quint64 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_ctzll(v) : 64;




#line 805 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

constexpr inline uint qCountTrailingZeroBits(unsigned long v) noexcept
{
    return qCountTrailingZeroBits(QIntegerForSizeof<long>::Unsigned(v));
}

constexpr inline uint qCountLeadingZeroBits(quint32 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_clz(v) : 32U;








#line 825 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

 inline uint qCountLeadingZeroBits(quint8 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_clz(v)-24U : 8U;





#line 837 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

 inline uint qCountLeadingZeroBits(quint16 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_clzs(v) : 16U;






#line 850 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

 inline uint qCountLeadingZeroBits(quint64 v) noexcept
{

    return v ? QAlgorithmsPrivate::qt_builtin_clzll(v) : 64U;








#line 865 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
}

 inline uint qCountLeadingZeroBits(unsigned long v) noexcept
{
    return qCountLeadingZeroBits(QIntegerForSizeof<long>::Unsigned(v));
}

__pragma(warning(pop))


#line 876 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qalgorithms.h"
#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"









namespace QtPrivate
{
template <typename Iterator>
using IfIsInputIterator = typename std::enable_if<
    std::is_convertible<typename std::iterator_traits<Iterator>::iterator_category, std::input_iterator_tag>::value,
    bool>::type;

template <typename Iterator>
using IfIsForwardIterator = typename std::enable_if<
    std::is_convertible<typename std::iterator_traits<Iterator>::iterator_category, std::forward_iterator_tag>::value,
    bool>::type;

template <typename Iterator>
using IfIsNotForwardIterator = typename std::enable_if<
    !std::is_convertible<typename std::iterator_traits<Iterator>::iterator_category, std::forward_iterator_tag>::value,
    bool>::type;

template <typename Container,
          typename InputIterator,
          IfIsNotForwardIterator<InputIterator> = true>
void reserveIfForwardIterator(Container *, InputIterator, InputIterator)
{
}

template <typename Container,
          typename ForwardIterator,
          IfIsForwardIterator<ForwardIterator> = true>
void reserveIfForwardIterator(Container *c, ForwardIterator f, ForwardIterator l)
{
    c->reserve(static_cast<typename Container::size_type>(std::distance(f, l)));
}


template <typename ... T>
using void_t = void;

template <typename Iterator, typename = void_t<>>
struct AssociativeIteratorHasKeyAndValue : std::false_type
{
};

template <typename Iterator>
struct AssociativeIteratorHasKeyAndValue<
        Iterator,
        void_t<decltype(std::declval<Iterator &>().key()),
               decltype(std::declval<Iterator &>().value())>
    >
    : std::true_type
{
};

template <typename Iterator, typename = void_t<>, typename = void_t<>>
struct AssociativeIteratorHasFirstAndSecond : std::false_type
{
};

template <typename Iterator>
struct AssociativeIteratorHasFirstAndSecond<
        Iterator,
        void_t<decltype(std::declval<Iterator &>()->first),
               decltype(std::declval<Iterator &>()->second)>
    >
    : std::true_type
{
};

template <typename Iterator>
using IfAssociativeIteratorHasKeyAndValue =
    typename std::enable_if<AssociativeIteratorHasKeyAndValue<Iterator>::value, bool>::type;

template <typename Iterator>
using IfAssociativeIteratorHasFirstAndSecond =
    typename std::enable_if<AssociativeIteratorHasFirstAndSecond<Iterator>::value, bool>::type;

} 



#line 133 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"














































#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"















































class QString;

struct QLatin1Char
{
public:
    constexpr inline explicit QLatin1Char(char c) noexcept : ch(c) {}
    constexpr inline char toLatin1() const noexcept { return ch; }
    constexpr inline ushort unicode() const noexcept { return ushort(uchar(ch)); }

private:
    char ch;
};

constexpr inline bool operator==(char lhs, QLatin1Char rhs) noexcept { return lhs == rhs.toLatin1(); }
constexpr inline bool operator!=(char lhs, QLatin1Char rhs) noexcept { return lhs != rhs.toLatin1(); }
constexpr inline bool operator<=(char lhs, QLatin1Char rhs) noexcept { return lhs <= rhs.toLatin1(); }
constexpr inline bool operator>=(char lhs, QLatin1Char rhs) noexcept { return lhs >= rhs.toLatin1(); }
constexpr inline bool operator< (char lhs, QLatin1Char rhs) noexcept { return lhs <  rhs.toLatin1(); }
constexpr inline bool operator> (char lhs, QLatin1Char rhs) noexcept { return lhs >  rhs.toLatin1(); }

constexpr inline bool operator==(QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() == rhs; }
constexpr inline bool operator!=(QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() != rhs; }
constexpr inline bool operator<=(QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() <= rhs; }
constexpr inline bool operator>=(QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() >= rhs; }
constexpr inline bool operator< (QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() <  rhs; }
constexpr inline bool operator> (QLatin1Char lhs, char rhs) noexcept { return lhs.toLatin1() >  rhs; }

class __declspec(dllimport) QChar {
public:
    enum SpecialCharacter {
        Null = 0x0000,
        Tabulation = 0x0009,
        LineFeed = 0x000a,
        FormFeed = 0x000c,
        CarriageReturn = 0x000d,
        Space = 0x0020,
        Nbsp = 0x00a0,
        SoftHyphen = 0x00ad,
        ReplacementCharacter = 0xfffd,
        ObjectReplacementCharacter = 0xfffc,
        ByteOrderMark = 0xfeff,
        ByteOrderSwapped = 0xfffe,
        ParagraphSeparator = 0x2029,
        LineSeparator = 0x2028,
        LastValidCodePoint = 0x10ffff
    };

    constexpr QChar() noexcept : ucs(0) {}
    constexpr QChar(ushort rc) noexcept : ucs(rc) {} 
    constexpr QChar(uchar c, uchar r) noexcept : ucs(ushort((r << 8) | c)) {}
    constexpr QChar(short rc) noexcept : ucs(ushort(rc)) {} 
    constexpr QChar(uint rc) noexcept : ucs(ushort(rc & 0xffff)) {}
    constexpr QChar(int rc) noexcept : ucs(ushort(rc & 0xffff)) {}
    constexpr QChar(SpecialCharacter s) noexcept : ucs(ushort(s)) {} 
    constexpr QChar(QLatin1Char ch) noexcept : ucs(ch.unicode()) {} 

    constexpr QChar(char16_t ch) noexcept : ucs(ushort(ch)) {} 
#line 106 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"

    static_assert(bool(sizeof(wchar_t) == sizeof(ushort)), "sizeof(wchar_t) == sizeof(ushort)");
#line 109 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"


    constexpr QChar(wchar_t ch) noexcept : ucs(ushort(ch)) {} 
#line 113 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
#line 114 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"


     constexpr explicit QChar(char c) noexcept : ucs(uchar(c)) { }

     constexpr explicit QChar(uchar c) noexcept : ucs(c) { }
#line 120 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
#line 121 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
    

    enum Category
    {
        Mark_NonSpacing,          
        Mark_SpacingCombining,    
        Mark_Enclosing,           

        Number_DecimalDigit,      
        Number_Letter,            
        Number_Other,             

        Separator_Space,          
        Separator_Line,           
        Separator_Paragraph,      

        Other_Control,            
        Other_Format,             
        Other_Surrogate,          
        Other_PrivateUse,         
        Other_NotAssigned,        

        Letter_Uppercase,         
        Letter_Lowercase,         
        Letter_Titlecase,         
        Letter_Modifier,          
        Letter_Other,             

        Punctuation_Connector,    
        Punctuation_Dash,         
        Punctuation_Open,         
        Punctuation_Close,        
        Punctuation_InitialQuote, 
        Punctuation_FinalQuote,   
        Punctuation_Other,        

        Symbol_Math,              
        Symbol_Currency,          
        Symbol_Modifier,          
        Symbol_Other              
    };

    enum Script
    {
        Script_Unknown,
        Script_Inherited,
        Script_Common,

        Script_Latin,
        Script_Greek,
        Script_Cyrillic,
        Script_Armenian,
        Script_Hebrew,
        Script_Arabic,
        Script_Syriac,
        Script_Thaana,
        Script_Devanagari,
        Script_Bengali,
        Script_Gurmukhi,
        Script_Gujarati,
        Script_Oriya,
        Script_Tamil,
        Script_Telugu,
        Script_Kannada,
        Script_Malayalam,
        Script_Sinhala,
        Script_Thai,
        Script_Lao,
        Script_Tibetan,
        Script_Myanmar,
        Script_Georgian,
        Script_Hangul,
        Script_Ethiopic,
        Script_Cherokee,
        Script_CanadianAboriginal,
        Script_Ogham,
        Script_Runic,
        Script_Khmer,
        Script_Mongolian,
        Script_Hiragana,
        Script_Katakana,
        Script_Bopomofo,
        Script_Han,
        Script_Yi,
        Script_OldItalic,
        Script_Gothic,
        Script_Deseret,
        Script_Tagalog,
        Script_Hanunoo,
        Script_Buhid,
        Script_Tagbanwa,
        Script_Coptic,

        
        Script_Limbu,
        Script_TaiLe,
        Script_LinearB,
        Script_Ugaritic,
        Script_Shavian,
        Script_Osmanya,
        Script_Cypriot,
        Script_Braille,

        
        Script_Buginese,
        Script_NewTaiLue,
        Script_Glagolitic,
        Script_Tifinagh,
        Script_SylotiNagri,
        Script_OldPersian,
        Script_Kharoshthi,

        
        Script_Balinese,
        Script_Cuneiform,
        Script_Phoenician,
        Script_PhagsPa,
        Script_Nko,

        
        Script_Sundanese,
        Script_Lepcha,
        Script_OlChiki,
        Script_Vai,
        Script_Saurashtra,
        Script_KayahLi,
        Script_Rejang,
        Script_Lycian,
        Script_Carian,
        Script_Lydian,
        Script_Cham,

        
        Script_TaiTham,
        Script_TaiViet,
        Script_Avestan,
        Script_EgyptianHieroglyphs,
        Script_Samaritan,
        Script_Lisu,
        Script_Bamum,
        Script_Javanese,
        Script_MeeteiMayek,
        Script_ImperialAramaic,
        Script_OldSouthArabian,
        Script_InscriptionalParthian,
        Script_InscriptionalPahlavi,
        Script_OldTurkic,
        Script_Kaithi,

        
        Script_Batak,
        Script_Brahmi,
        Script_Mandaic,

        
        Script_Chakma,
        Script_MeroiticCursive,
        Script_MeroiticHieroglyphs,
        Script_Miao,
        Script_Sharada,
        Script_SoraSompeng,
        Script_Takri,

        
        Script_CaucasianAlbanian,
        Script_BassaVah,
        Script_Duployan,
        Script_Elbasan,
        Script_Grantha,
        Script_PahawhHmong,
        Script_Khojki,
        Script_LinearA,
        Script_Mahajani,
        Script_Manichaean,
        Script_MendeKikakui,
        Script_Modi,
        Script_Mro,
        Script_OldNorthArabian,
        Script_Nabataean,
        Script_Palmyrene,
        Script_PauCinHau,
        Script_OldPermic,
        Script_PsalterPahlavi,
        Script_Siddham,
        Script_Khudawadi,
        Script_Tirhuta,
        Script_WarangCiti,

        
        Script_Ahom,
        Script_AnatolianHieroglyphs,
        Script_Hatran,
        Script_Multani,
        Script_OldHungarian,
        Script_SignWriting,

        
        Script_Adlam,
        Script_Bhaiksuki,
        Script_Marchen,
        Script_Newa,
        Script_Osage,
        Script_Tangut,

        
        Script_MasaramGondi,
        Script_Nushu,
        Script_Soyombo,
        Script_ZanabazarSquare,

        ScriptCount
    };

    enum Direction
    {
        DirL, DirR, DirEN, DirES, DirET, DirAN, DirCS, DirB, DirS, DirWS, DirON,
        DirLRE, DirLRO, DirAL, DirRLE, DirRLO, DirPDF, DirNSM, DirBN,
        DirLRI, DirRLI, DirFSI, DirPDI
    };

    enum Decomposition
    {
        NoDecomposition,
        Canonical,
        Font,
        NoBreak,
        Initial,
        Medial,
        Final,
        Isolated,
        Circle,
        Super,
        Sub,
        Vertical,
        Wide,
        Narrow,
        Small,
        Square,
        Compat,
        Fraction
    };

    enum JoiningType {
        Joining_None,
        Joining_Causing,
        Joining_Dual,
        Joining_Right,
        Joining_Left,
        Joining_Transparent
    };


    enum Joining
    {
        OtherJoining, Dual, Right, Center
    };
#line 378 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"

    enum CombiningClass
    {
        Combining_BelowLeftAttached       = 200,
        Combining_BelowAttached           = 202,
        Combining_BelowRightAttached      = 204,
        Combining_LeftAttached            = 208,
        Combining_RightAttached           = 210,
        Combining_AboveLeftAttached       = 212,
        Combining_AboveAttached           = 214,
        Combining_AboveRightAttached      = 216,

        Combining_BelowLeft               = 218,
        Combining_Below                   = 220,
        Combining_BelowRight              = 222,
        Combining_Left                    = 224,
        Combining_Right                   = 226,
        Combining_AboveLeft               = 228,
        Combining_Above                   = 230,
        Combining_AboveRight              = 232,

        Combining_DoubleBelow             = 233,
        Combining_DoubleAbove             = 234,
        Combining_IotaSubscript           = 240
    };

    enum UnicodeVersion {
        Unicode_Unassigned,
        Unicode_1_1,
        Unicode_2_0,
        Unicode_2_1_2,
        Unicode_3_0,
        Unicode_3_1,
        Unicode_3_2,
        Unicode_4_0,
        Unicode_4_1,
        Unicode_5_0,
        Unicode_5_1,
        Unicode_5_2,
        Unicode_6_0,
        Unicode_6_1,
        Unicode_6_2,
        Unicode_6_3,
        Unicode_7_0,
        Unicode_8_0,
        Unicode_9_0,
        Unicode_10_0
    };
    

    inline Category category() const noexcept { return QChar::category(ucs); }
    inline Direction direction() const noexcept { return QChar::direction(ucs); }
    inline JoiningType joiningType() const noexcept { return QChar::joiningType(ucs); }

    __declspec(deprecated) inline Joining joining() const noexcept
    {
        switch (QChar::joiningType(ucs)) {
        case QChar::Joining_Causing: return QChar::Center;
        case QChar::Joining_Dual: return QChar::Dual;
        case QChar::Joining_Right: return QChar::Right;
        case QChar::Joining_None:
        case QChar::Joining_Left:
        case QChar::Joining_Transparent:
        default: return QChar::OtherJoining;
        }
    }
#line 445 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
    inline unsigned char combiningClass() const noexcept { return QChar::combiningClass(ucs); }

    inline QChar mirroredChar() const noexcept { return QChar(QChar::mirroredChar(ucs)); }
    inline bool hasMirrored() const noexcept { return QChar::hasMirrored(ucs); }

    QString decomposition() const;
    inline Decomposition decompositionTag() const noexcept { return QChar::decompositionTag(ucs); }

    inline int digitValue() const noexcept { return QChar::digitValue(ucs); }
    inline QChar toLower() const noexcept { return QChar(QChar::toLower(ucs)); }
    inline QChar toUpper() const noexcept { return QChar(QChar::toUpper(ucs)); }
    inline QChar toTitleCase() const noexcept { return QChar(QChar::toTitleCase(ucs)); }
    inline QChar toCaseFolded() const noexcept { return QChar(QChar::toCaseFolded(ucs)); }

    inline Script script() const noexcept { return QChar::script(ucs); }

    inline UnicodeVersion unicodeVersion() const noexcept { return QChar::unicodeVersion(ucs); }



#line 466 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
    constexpr inline char toLatin1() const noexcept { return ucs > 0xff ? '\0' : char(ucs); }
    constexpr inline ushort unicode() const noexcept { return ucs; }
    constexpr inline ushort &unicode() noexcept { return ucs; }




#line 474 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
    static constexpr inline QChar fromLatin1(char c) noexcept { return QChar(ushort(uchar(c))); }

    constexpr inline bool isNull() const noexcept { return ucs == 0; }

    inline bool isPrint() const noexcept { return QChar::isPrint(ucs); }
    constexpr inline bool isSpace() const noexcept { return QChar::isSpace(ucs); }
    inline bool isMark() const noexcept { return QChar::isMark(ucs); }
    inline bool isPunct() const noexcept { return QChar::isPunct(ucs); }
    inline bool isSymbol() const noexcept { return QChar::isSymbol(ucs); }
    constexpr inline bool isLetter() const noexcept { return QChar::isLetter(ucs); }
    constexpr inline bool isNumber() const noexcept { return QChar::isNumber(ucs); }
    constexpr inline bool isLetterOrNumber() const noexcept { return QChar::isLetterOrNumber(ucs); }
    constexpr inline bool isDigit() const noexcept { return QChar::isDigit(ucs); }
    constexpr inline bool isLower() const noexcept { return QChar::isLower(ucs); }
    constexpr inline bool isUpper() const noexcept { return QChar::isUpper(ucs); }
    constexpr inline bool isTitleCase() const noexcept { return QChar::isTitleCase(ucs); }

    constexpr inline bool isNonCharacter() const noexcept { return QChar::isNonCharacter(ucs); }
    constexpr inline bool isHighSurrogate() const noexcept { return QChar::isHighSurrogate(ucs); }
    constexpr inline bool isLowSurrogate() const noexcept { return QChar::isLowSurrogate(ucs); }
    constexpr inline bool isSurrogate() const noexcept { return QChar::isSurrogate(ucs); }

    constexpr inline uchar cell() const noexcept { return uchar(ucs & 0xff); }
    constexpr inline uchar row() const noexcept { return uchar((ucs>>8)&0xff); }
    constexpr inline void setCell(uchar acell) noexcept { ucs = ushort((ucs & 0xff00) + acell); }
    constexpr inline void setRow(uchar arow) noexcept { ucs = ushort((ushort(arow)<<8) + (ucs&0xff)); }

    static constexpr inline bool isNonCharacter(uint ucs4) noexcept
    {
        return ucs4 >= 0xfdd0 && (ucs4 <= 0xfdef || (ucs4 & 0xfffe) == 0xfffe);
    }
    static constexpr inline bool isHighSurrogate(uint ucs4) noexcept
    {
        return ((ucs4 & 0xfffffc00) == 0xd800);
    }
    static constexpr inline bool isLowSurrogate(uint ucs4) noexcept
    {
        return ((ucs4 & 0xfffffc00) == 0xdc00);
    }
    static constexpr inline bool isSurrogate(uint ucs4) noexcept
    {
        return (ucs4 - 0xd800u < 2048u);
    }
    static constexpr inline bool requiresSurrogates(uint ucs4) noexcept
    {
        return (ucs4 >= 0x10000);
    }
    static constexpr inline uint surrogateToUcs4(ushort high, ushort low) noexcept
    {
        return (uint(high)<<10) + low - 0x35fdc00;
    }
    static constexpr inline uint surrogateToUcs4(QChar high, QChar low) noexcept
    {
        return surrogateToUcs4(high.ucs, low.ucs);
    }
    static constexpr inline ushort highSurrogate(uint ucs4) noexcept
    {
        return ushort((ucs4>>10) + 0xd7c0);
    }
    static constexpr inline ushort lowSurrogate(uint ucs4) noexcept
    {
        return ushort(ucs4%0x400 + 0xdc00);
    }

    static Category  category(uint ucs4) noexcept ;
    static Direction  direction(uint ucs4) noexcept ;
    static JoiningType  joiningType(uint ucs4) noexcept ;

    __declspec(deprecated) static Joining  joining(uint ucs4) noexcept ;
#line 544 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
    static unsigned char  combiningClass(uint ucs4) noexcept ;

    static uint  mirroredChar(uint ucs4) noexcept ;
    static bool  hasMirrored(uint ucs4) noexcept ;

    static QString  decomposition(uint ucs4);
    static Decomposition  decompositionTag(uint ucs4) noexcept ;

    static int  digitValue(uint ucs4) noexcept ;
    static uint  toLower(uint ucs4) noexcept ;
    static uint  toUpper(uint ucs4) noexcept ;
    static uint  toTitleCase(uint ucs4) noexcept ;
    static uint  toCaseFolded(uint ucs4) noexcept ;

    static Script  script(uint ucs4) noexcept ;

    static UnicodeVersion  unicodeVersion(uint ucs4) noexcept ;

    static UnicodeVersion  currentUnicodeVersion() noexcept ;

    static bool  isPrint(uint ucs4) noexcept ;
    static constexpr inline bool isSpace(uint ucs4) noexcept 
    {
        
        return ucs4 == 0x20 || (ucs4 <= 0x0d && ucs4 >= 0x09)
                || (ucs4 > 127 && (ucs4 == 0x85 || ucs4 == 0xa0 || QChar::isSpace_helper(ucs4)));
    }
    static bool  isMark(uint ucs4) noexcept ;
    static bool  isPunct(uint ucs4) noexcept ;
    static bool  isSymbol(uint ucs4) noexcept ;
    static constexpr inline bool isLetter(uint ucs4) noexcept 
    {
        return (ucs4 >= 'A' && ucs4 <= 'z' && (ucs4 >= 'a' || ucs4 <= 'Z'))
                || (ucs4 > 127 && QChar::isLetter_helper(ucs4));
    }
    static constexpr inline bool isNumber(uint ucs4) noexcept 
    { return (ucs4 <= '9' && ucs4 >= '0') || (ucs4 > 127 && QChar::isNumber_helper(ucs4)); }
    static constexpr inline bool isLetterOrNumber(uint ucs4) noexcept 
    {
        return (ucs4 >= 'A' && ucs4 <= 'z' && (ucs4 >= 'a' || ucs4 <= 'Z'))
                || (ucs4 >= '0' && ucs4 <= '9')
                || (ucs4 > 127 && QChar::isLetterOrNumber_helper(ucs4));
    }
    static constexpr inline bool isDigit(uint ucs4) noexcept 
    { return (ucs4 <= '9' && ucs4 >= '0') || (ucs4 > 127 && QChar::category(ucs4) == Number_DecimalDigit); }
    static constexpr inline bool isLower(uint ucs4) noexcept 
    { return (ucs4 <= 'z' && ucs4 >= 'a') || (ucs4 > 127 && QChar::category(ucs4) == Letter_Lowercase); }
    static constexpr inline bool isUpper(uint ucs4) noexcept 
    { return (ucs4 <= 'Z' && ucs4 >= 'A') || (ucs4 > 127 && QChar::category(ucs4) == Letter_Uppercase); }
    static constexpr inline bool isTitleCase(uint ucs4) noexcept 
    { return ucs4 > 127 && QChar::category(ucs4) == Letter_Titlecase; }

private:
    static bool  isSpace_helper(uint ucs4) noexcept ;
    static bool  isLetter_helper(uint ucs4) noexcept ;
    static bool  isNumber_helper(uint ucs4) noexcept ;
    static bool  isLetterOrNumber_helper(uint ucs4) noexcept ;






    friend constexpr bool operator==(QChar, QChar) noexcept;
    friend constexpr bool operator< (QChar, QChar) noexcept;
    ushort ucs;
};

template<> class QTypeInfo<QChar > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QChar>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QChar>(), isLarge = (sizeof(QChar)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QChar >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QChar) }; static inline const char *name() { return "QChar"; } };

constexpr inline bool operator==(QChar c1, QChar c2) noexcept { return c1.ucs == c2.ucs; }
constexpr inline bool operator< (QChar c1, QChar c2) noexcept { return c1.ucs <  c2.ucs; }

constexpr inline bool operator!=(QChar c1, QChar c2) noexcept { return !operator==(c1, c2); }
constexpr inline bool operator>=(QChar c1, QChar c2) noexcept { return !operator< (c1, c2); }
constexpr inline bool operator> (QChar c1, QChar c2) noexcept { return  operator< (c2, c1); }
constexpr inline bool operator<=(QChar c1, QChar c2) noexcept { return !operator< (c2, c1); }


constexpr inline bool operator==(QChar lhs, std::nullptr_t) noexcept { return lhs.isNull(); }
constexpr inline bool operator< (QChar,     std::nullptr_t) noexcept { return false; }
constexpr inline bool operator==(std::nullptr_t, QChar rhs) noexcept { return rhs.isNull(); }
constexpr inline bool operator< (std::nullptr_t, QChar rhs) noexcept { return !rhs.isNull(); }

constexpr inline bool operator!=(QChar lhs, std::nullptr_t) noexcept { return !operator==(lhs, nullptr); }
constexpr inline bool operator>=(QChar lhs, std::nullptr_t) noexcept { return !operator< (lhs, nullptr); }
constexpr inline bool operator> (QChar lhs, std::nullptr_t) noexcept { return  operator< (nullptr, lhs); }
constexpr inline bool operator<=(QChar lhs, std::nullptr_t) noexcept { return !operator< (nullptr, lhs); }

constexpr inline bool operator!=(std::nullptr_t, QChar rhs) noexcept { return !operator==(nullptr, rhs); }
constexpr inline bool operator>=(std::nullptr_t, QChar rhs) noexcept { return !operator< (nullptr, rhs); }
constexpr inline bool operator> (std::nullptr_t, QChar rhs) noexcept { return  operator< (rhs, nullptr); }
constexpr inline bool operator<=(std::nullptr_t, QChar rhs) noexcept { return !operator< (rhs, nullptr); }


__declspec(dllimport) QDataStream &operator<<(QDataStream &, QChar);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QChar &);
#line 642 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"



#line 646 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qchar.h"
#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"



#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringliteral.h"















































#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringliteral.h"



typedef QTypedArrayData<ushort> QStringData;






typedef char16_t qunicodechar;

static_assert(bool(sizeof(qunicodechar) == 2), "qunicodechar must typedef an integral type of size 2");
#line 63 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringliteral.h"
























#line 88 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringliteral.h"

template <int N>
struct QStaticStringData
{
    QArrayData str;
    qunicodechar data[N + 1];

    QStringData *data_ptr() const
    {
        static_cast<void>(false && (str.ref.isStatic()));
        return const_cast<QStringData *>(static_cast<const QStringData*>(&str));
    }
};

struct QStringDataPtr
{
    QStringData *ptr;
};



#line 110 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringliteral.h"
#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringalgorithms.h"














































#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringalgorithms.h"



class QByteArray;
class QLatin1String;
class QStringView;
class QChar;
template <typename T> class QVector;

namespace QtPrivate {

 __declspec(dllimport)  qsizetype qustrlen(const ushort *str) noexcept;
 __declspec(dllimport)  const ushort *qustrchr(QStringView str, ushort ch) noexcept;

 __declspec(dllimport)  int compareStrings(QStringView   lhs, QStringView   rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  int compareStrings(QStringView   lhs, QLatin1String rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  int compareStrings(QLatin1String lhs, QStringView   rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  int compareStrings(QLatin1String lhs, QLatin1String rhs, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;


 __declspec(dllimport)  bool startsWith(QStringView   haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool startsWith(QStringView   haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool startsWith(QLatin1String haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool startsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;

 __declspec(dllimport)  bool endsWith(QStringView   haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool endsWith(QStringView   haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool endsWith(QLatin1String haystack, QStringView   needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  bool endsWith(QLatin1String haystack, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;

 __declspec(dllimport)  qsizetype findString(QStringView haystack, qsizetype from, QStringView needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype findString(QStringView haystack, qsizetype from, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype findString(QLatin1String haystack, qsizetype from, QStringView needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype findString(QLatin1String haystack, qsizetype from, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;

 __declspec(dllimport)  qsizetype lastIndexOf(QStringView haystack, qsizetype from, QStringView needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype lastIndexOf(QStringView haystack, qsizetype from, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype lastIndexOf(QLatin1String haystack, qsizetype from, QStringView needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
 __declspec(dllimport)  qsizetype lastIndexOf(QLatin1String haystack, qsizetype from, QLatin1String needle, Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;

 __declspec(dllimport)  QStringView   trimmed(QStringView   s) noexcept;
 __declspec(dllimport)  QLatin1String trimmed(QLatin1String s) noexcept;

 __declspec(dllimport) QByteArray convertToLatin1(QStringView str);
 __declspec(dllimport) QByteArray convertToUtf8(QStringView str);
 __declspec(dllimport) QByteArray convertToLocal8Bit(QStringView str);
 __declspec(dllimport) QVector<uint> convertToUcs4(QStringView str);

 __declspec(dllimport)  bool isRightToLeft(QStringView string) noexcept;

 __declspec(dllimport)  bool isAscii(QLatin1String s) noexcept;
 __declspec(dllimport)  bool isAscii(QStringView   s) noexcept;
 constexpr inline            bool isLatin1(QLatin1String s) noexcept;
 __declspec(dllimport)  bool isLatin1(QStringView   s) noexcept;

} 



#line 108 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringalgorithms.h"
#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"












































#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"










class QString;
class QStringRef;

namespace QtPrivate {
template <typename Char>
struct IsCompatibleCharTypeHelper
    : std::integral_constant<bool,
                             std::is_same<Char, QChar>::value ||
                             std::is_same<Char, ushort>::value ||
                             std::is_same<Char, char16_t>::value ||
                             (std::is_same<Char, wchar_t>::value && sizeof(wchar_t) == sizeof(QChar))> {};
template <typename Char>
struct IsCompatibleCharType
    : IsCompatibleCharTypeHelper<typename std::remove_cv<typename std::remove_reference<Char>::type>::type> {};

template <typename Array>
struct IsCompatibleArrayHelper : std::false_type {};
template <typename Char, size_t N>
struct IsCompatibleArrayHelper<Char[N]>
    : IsCompatibleCharType<Char> {};
template <typename Array>
struct IsCompatibleArray
    : IsCompatibleArrayHelper<typename std::remove_cv<typename std::remove_reference<Array>::type>::type> {};

template <typename Pointer>
struct IsCompatiblePointerHelper : std::false_type {};
template <typename Char>
struct IsCompatiblePointerHelper<Char*>
    : IsCompatibleCharType<Char> {};
template <typename Pointer>
struct IsCompatiblePointer
    : IsCompatiblePointerHelper<typename std::remove_cv<typename std::remove_reference<Pointer>::type>::type> {};

template <typename T>
struct IsCompatibleStdBasicStringHelper : std::false_type {};
template <typename Char, typename...Args>
struct IsCompatibleStdBasicStringHelper<std::basic_string<Char, Args...> >
    : IsCompatibleCharType<Char> {};

template <typename T>
struct IsCompatibleStdBasicString
    : IsCompatibleStdBasicStringHelper<
        typename std::remove_cv<typename std::remove_reference<T>::type>::type
      > {};

} 

class QStringView
{
public:
    typedef char16_t storage_type;
    typedef const QChar value_type;
    typedef std::ptrdiff_t difference_type;
    typedef qsizetype size_type;
    typedef value_type &reference;
    typedef value_type &const_reference;
    typedef value_type *pointer;
    typedef value_type *const_pointer;

    typedef pointer iterator;
    typedef const_pointer const_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

private:
    template <typename Char>
    using if_compatible_char = typename std::enable_if<QtPrivate::IsCompatibleCharType<Char>::value, bool>::type;

    template <typename Array>
    using if_compatible_array = typename std::enable_if<QtPrivate::IsCompatibleArray<Array>::value, bool>::type;

    template <typename Pointer>
    using if_compatible_pointer = typename std::enable_if<QtPrivate::IsCompatiblePointer<Pointer>::value, bool>::type;

    template <typename T>
    using if_compatible_string = typename std::enable_if<QtPrivate::IsCompatibleStdBasicString<T>::value, bool>::type;

    template <typename T>
    using if_compatible_qstring_like = typename std::enable_if<std::is_same<T, QString>::value || std::is_same<T, QStringRef>::value, bool>::type;

    template <typename Char, size_t N>
    static constexpr qsizetype lengthHelperArray(const Char (&)[N]) noexcept
    {
        return qsizetype(N - 1);
    }

    template <typename Char>
    static qsizetype lengthHelperPointer(const Char *str) noexcept
    {







#line 153 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"
        return QtPrivate::qustrlen(reinterpret_cast<const ushort *>(str));
    }
    static qsizetype lengthHelperPointer(const QChar *str) noexcept
    {
        return QtPrivate::qustrlen(reinterpret_cast<const ushort *>(str));
    }

    template <typename Char>
    static const storage_type *castHelper(const Char *str) noexcept
    { return reinterpret_cast<const storage_type*>(str); }
    static constexpr const storage_type *castHelper(const storage_type *str) noexcept
    { return str; }

public:
    constexpr QStringView() noexcept
        : m_size(0), m_data(nullptr) {}
    constexpr QStringView(std::nullptr_t) noexcept
        : QStringView() {}

    template <typename Char, if_compatible_char<Char> = true>
    constexpr QStringView(const Char *str, qsizetype len)
        : m_size((static_cast<void>(false && (len >= 0)), static_cast<void>(false && (str || !len)), len)),
          m_data(castHelper(str)) {}

    template <typename Char, if_compatible_char<Char> = true>
    constexpr QStringView(const Char *f, const Char *l)
        : QStringView(f, l - f) {}









    template <typename Array, if_compatible_array<Array> = true>
    __declspec(deprecated(R"(Use u"~~~" or QStringView(u"~~~") instead of QStringViewLiteral("~~~"))"))
    constexpr QStringView(const Array &str, QtPrivate::Deprecated_t) noexcept
        : QStringView(str, lengthHelperArray(str)) {}
#line 194 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"

    template <typename Array, if_compatible_array<Array> = true>
    constexpr QStringView(const Array &str) noexcept
        : QStringView(str, lengthHelperArray(str)) {}

    template <typename Pointer, if_compatible_pointer<Pointer> = true>
    constexpr QStringView(const Pointer &str) noexcept
        : QStringView(str, str ? lengthHelperPointer(str) : 0) {}
#line 203 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"





    template <typename String, if_compatible_qstring_like<String> = true>
    QStringView(const String &str) noexcept
        : QStringView(str.isNull() ? nullptr : str.data(), qsizetype(str.size())) {}
#line 212 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"

    template <typename StdBasicString, if_compatible_string<StdBasicString> = true>
    QStringView(const StdBasicString &str) noexcept
        : QStringView(str.data(), qsizetype(str.size())) {}

     inline QString toString() const; 

     constexpr qsizetype size() const noexcept { return m_size; }
     const_pointer data() const noexcept { return reinterpret_cast<const_pointer>(m_data); }
     constexpr const storage_type *utf16() const noexcept { return m_data; }

     constexpr QChar operator[](qsizetype n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n < size())), QChar(m_data[n]); }

    
    
    

    template <typename...Args>
     inline QString arg(Args &&...args) const; 

     QByteArray toLatin1() const { return QtPrivate::convertToLatin1(*this); }
     QByteArray toUtf8() const { return QtPrivate::convertToUtf8(*this); }
     QByteArray toLocal8Bit() const { return QtPrivate::convertToLocal8Bit(*this); }
     inline QVector<uint> toUcs4() const; 

     constexpr QChar at(qsizetype n) const { return (*this)[n]; }

     constexpr QStringView mid(qsizetype pos) const
    { return static_cast<void>(false && (pos >= 0)), static_cast<void>(false && (pos <= size())), QStringView(m_data + pos, m_size - pos); }
     constexpr QStringView mid(qsizetype pos, qsizetype n) const
    { return static_cast<void>(false && (pos >= 0)), static_cast<void>(false && (n >= 0)), static_cast<void>(false && (pos + n <= size())), QStringView(m_data + pos, n); }
     constexpr QStringView left(qsizetype n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QStringView(m_data, n); }
     constexpr QStringView right(qsizetype n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QStringView(m_data + m_size - n, n); }
     constexpr QStringView chopped(qsizetype n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QStringView(m_data, m_size - n); }

    constexpr void truncate(qsizetype n)
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); m_size = n; }
    constexpr void chop(qsizetype n)
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); m_size -= n; }

     QStringView trimmed() const noexcept { return QtPrivate::trimmed(*this); }

     int compare(QStringView other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::compareStrings(*this, other, cs); }

     bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::startsWith(*this, s, cs); }
     inline bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
     bool startsWith(QChar c) const noexcept
    { return !empty() && front() == c; }
     bool startsWith(QChar c, Qt::CaseSensitivity cs) const noexcept
    { return QtPrivate::startsWith(*this, QStringView(&c, 1), cs); }

     bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::endsWith(*this, s, cs); }
     inline bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
     bool endsWith(QChar c) const noexcept
    { return !empty() && back() == c; }
     bool endsWith(QChar c, Qt::CaseSensitivity cs) const noexcept
    { return QtPrivate::endsWith(*this, QStringView(&c, 1), cs); }

     qsizetype indexOf(QChar c, qsizetype from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::findString(*this, from, QStringView(&c, 1), cs); }
     qsizetype indexOf(QStringView s, qsizetype from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::findString(*this, from, s, cs); }
     inline qsizetype indexOf(QLatin1String s, qsizetype from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

     bool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return indexOf(QStringView(&c, 1), 0, cs) != qsizetype(-1); }
     bool contains(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return indexOf(s, 0, cs) != qsizetype(-1); }
     inline bool contains(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

     qsizetype lastIndexOf(QChar c, qsizetype from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::lastIndexOf(*this, from, QStringView(&c, 1), cs); }
     qsizetype lastIndexOf(QStringView s, qsizetype from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::lastIndexOf(*this, from, s, cs); }
     inline qsizetype lastIndexOf(QLatin1String s, qsizetype from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

     bool isRightToLeft() const noexcept
    { return QtPrivate::isRightToLeft(*this); }

     inline int toWCharArray(wchar_t *array) const; 

    
    
    
     const_iterator begin()   const noexcept { return data(); }
     const_iterator end()     const noexcept { return data() + size(); }
     const_iterator cbegin()  const noexcept { return begin(); }
     const_iterator cend()    const noexcept { return end(); }
     const_reverse_iterator rbegin()  const noexcept { return const_reverse_iterator(end()); }
     const_reverse_iterator rend()    const noexcept { return const_reverse_iterator(begin()); }
     const_reverse_iterator crbegin() const noexcept { return rbegin(); }
     const_reverse_iterator crend()   const noexcept { return rend(); }

     constexpr bool empty() const noexcept { return size() == 0; }
     constexpr QChar front() const { return static_cast<void>(false && (!empty())), QChar(m_data[0]); }
     constexpr QChar back()  const { return static_cast<void>(false && (!empty())), QChar(m_data[m_size - 1]); }

    
    
    
     constexpr bool isNull() const noexcept { return !m_data; }
     constexpr bool isEmpty() const noexcept { return empty(); }
     constexpr int length() const 
    { return static_cast<void>(false && (int(size()) == size())), int(size()); }
     constexpr QChar first() const { return front(); }
     constexpr QChar last()  const { return back(); }
private:
    qsizetype m_size;
    const storage_type *m_data;
};
template<> class QTypeInfo<QStringView > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QStringView>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QStringView>(), isLarge = (sizeof(QStringView)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QStringView >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStringView) }; static inline const char *name() { return "QStringView"; } };

template <typename QStringLike, typename std::enable_if<
    std::is_same<QStringLike, QString>::value || std::is_same<QStringLike, QStringRef>::value,
    bool>::type = true>
inline QStringView qToStringViewIgnoringNull(const QStringLike &s) noexcept
{ return QStringView(s.data(), s.size()); }



#line 340 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringview.h"
#line 56 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"













#line 70 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"



class QCharRef;
class QRegExp;
class QRegularExpression;
class QRegularExpressionMatch;
class QString;
class QStringList;
class QTextCodec;
class QStringRef;
template <typename T> class QVector;

namespace QtPrivate {
template <bool...B> class BoolList;
}

class QLatin1String
{
public:
    constexpr inline QLatin1String() noexcept : m_size(0), m_data(nullptr) {}
    constexpr inline explicit QLatin1String(const char *s) noexcept : m_size(s ? int(strlen(s)) : 0), m_data(s) {}
    constexpr explicit QLatin1String(const char *f, const char *l)
        : QLatin1String(f, int(l - f)) {}
    constexpr inline explicit QLatin1String(const char *s, int sz) noexcept : m_size(sz), m_data(s) {}
    inline explicit QLatin1String(const QByteArray &s) noexcept : m_size(int(qstrnlen(s.constData(), s.size()))), m_data(s.constData()) {}

    constexpr const char *latin1() const noexcept { return m_data; }
    constexpr int size() const noexcept { return m_size; }
    constexpr const char *data() const noexcept { return m_data; }

    constexpr bool isNull() const noexcept { return !data(); }
    constexpr bool isEmpty() const noexcept { return !size(); }

    template <typename...Args>
     inline QString arg(Args &&...args) const;

    constexpr QLatin1Char at(int i) const
    { return static_cast<void>(false && (i >= 0)), static_cast<void>(false && (i < size())), QLatin1Char(m_data[i]); }
    constexpr QLatin1Char operator[](int i) const { return at(i); }

     constexpr QLatin1Char front() const { return at(0); }
     constexpr QLatin1Char back() const { return at(size() - 1); }

     bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::startsWith(*this, s, cs); }
     bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::startsWith(*this, s, cs); }
     constexpr bool startsWith(QChar c) const noexcept
    { return !isEmpty() && front() == c; }
     inline bool startsWith(QChar c, Qt::CaseSensitivity cs) const noexcept
    { return QtPrivate::startsWith(*this, QStringView(&c, 1), cs); }

     bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::endsWith(*this, s, cs); }
     bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::endsWith(*this, s, cs); }
     constexpr bool endsWith(QChar c) const noexcept
    { return !isEmpty() && back() == c; }
     inline bool endsWith(QChar c, Qt::CaseSensitivity cs) const noexcept
    { return QtPrivate::endsWith(*this, QStringView(&c, 1), cs); }

     int indexOf(QStringView s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::findString(*this, from, s, cs)); } 
     int indexOf(QLatin1String s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::findString(*this, from, s, cs)); } 
     inline int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::findString(*this, from, QStringView(&c, 1), cs)); } 

     bool contains(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return indexOf(s, 0, cs) != -1; }
     bool contains(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return indexOf(s, 0, cs) != -1; }
     inline bool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return indexOf(QStringView(&c, 1), 0, cs) != -1; }

     int lastIndexOf(QStringView s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::lastIndexOf(*this, from, s, cs)); } 
     int lastIndexOf(QLatin1String s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::lastIndexOf(*this, from, s, cs)); } 
     inline int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::lastIndexOf(*this, from, QStringView(&c, 1), cs)); } 

    using value_type = const char;
    using reference = value_type&;
    using const_reference = reference;
    using iterator = value_type*;
    using const_iterator = iterator;
    using difference_type = int; 
    using size_type = int;       

    constexpr const_iterator begin() const noexcept { return data(); }
    constexpr const_iterator cbegin() const noexcept { return data(); }
    constexpr const_iterator end() const noexcept { return data() + size(); }
    constexpr const_iterator cend() const noexcept { return data() + size(); }

    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = reverse_iterator;

    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }

    constexpr QLatin1String mid(int pos) const
    { return static_cast<void>(false && (pos >= 0)), static_cast<void>(false && (pos <= size())), QLatin1String(m_data + pos, m_size - pos); }
    constexpr QLatin1String mid(int pos, int n) const
    { return static_cast<void>(false && (pos >= 0)), static_cast<void>(false && (n >= 0)), static_cast<void>(false && (pos + n <= size())), QLatin1String(m_data + pos, n); }
    constexpr QLatin1String left(int n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QLatin1String(m_data, n); }
    constexpr QLatin1String right(int n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QLatin1String(m_data + m_size - n, n); }
     constexpr QLatin1String chopped(int n) const
    { return static_cast<void>(false && (n >= 0)), static_cast<void>(false && (n <= size())), QLatin1String(m_data, m_size - n); }

    constexpr void chop(int n)
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); m_size -= n; }
    constexpr void truncate(int n)
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); m_size = n; }

     QLatin1String trimmed() const noexcept { return QtPrivate::trimmed(*this); }

    inline bool operator==(const QString &s) const noexcept;
    inline bool operator!=(const QString &s) const noexcept;
    inline bool operator>(const QString &s) const noexcept;
    inline bool operator<(const QString &s) const noexcept;
    inline bool operator>=(const QString &s) const noexcept;
    inline bool operator<=(const QString &s) const noexcept;


    inline  bool operator==(const char *s) const;
    inline  bool operator!=(const char *s) const;
    inline  bool operator<(const char *s) const;
    inline  bool operator>(const char *s) const;
    inline  bool operator<=(const char *s) const;
    inline  bool operator>=(const char *s) const;

    inline  bool operator==(const QByteArray &s) const;
    inline  bool operator!=(const QByteArray &s) const;
    inline  bool operator<(const QByteArray &s) const;
    inline  bool operator>(const QByteArray &s) const;
    inline  bool operator<=(const QByteArray &s) const;
    inline  bool operator>=(const QByteArray &s) const;
#line 214 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

private:
    int m_size;
    const char *m_data;
};
template<> class QTypeInfo<QLatin1String > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QLatin1String>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QLatin1String>(), isLarge = (sizeof(QLatin1String)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QLatin1String >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLatin1String) }; static inline const char *name() { return "QLatin1String"; } };



__declspec(deprecated("Use QLatin1String"))
typedef QLatin1String QLatin1Literal;
#line 226 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"




constexpr bool QtPrivate::isLatin1(QLatin1String) noexcept
{ return true; }




bool QStringView::startsWith(QLatin1String s, Qt::CaseSensitivity cs) const noexcept
{ return QtPrivate::startsWith(*this, s, cs); }
bool QStringView::endsWith(QLatin1String s, Qt::CaseSensitivity cs) const noexcept
{ return QtPrivate::endsWith(*this, s, cs); }
qsizetype QStringView::indexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs) const noexcept
{ return QtPrivate::findString(*this, from, s, cs); }
bool QStringView::contains(QLatin1String s, Qt::CaseSensitivity cs) const noexcept
{ return indexOf(s, 0, cs) != qsizetype(-1); }
qsizetype QStringView::lastIndexOf(QLatin1String s, qsizetype from, Qt::CaseSensitivity cs) const noexcept
{ return QtPrivate::lastIndexOf(*this, from, s, cs); }

class __declspec(dllimport) QString
{
public:
    typedef QStringData Data;

    inline QString() noexcept;
    explicit QString(const QChar *unicode, int size = -1);
    QString(QChar c);
    QString(int size, QChar c);
    inline QString(QLatin1String latin1);
    inline QString(const QString &) noexcept;
    inline ~QString();
    QString &operator=(QChar c);
    QString &operator=(const QString &) noexcept;
    QString &operator=(QLatin1String latin1);
    inline QString(QString && other) noexcept : d(other.d) { other.d = Data::sharedNull(); }
    inline QString &operator=(QString &&other) noexcept
    { qSwap(d, other.d); return *this; }
    inline void swap(QString &other) noexcept { qSwap(d, other.d); }
    inline int size() const { return d->size; }
    inline int count() const { return d->size; }
    inline int length() const;
    inline bool isEmpty() const;
    void resize(int size);
    void resize(int size, QChar fillChar);

    QString &fill(QChar c, int size = -1);
    void truncate(int pos);
    void chop(int n);

    int capacity() const;
    inline void reserve(int size);
    inline void squeeze();

    inline const QChar *unicode() const;
    inline QChar *data();
    inline const QChar *data() const;
    inline const QChar *constData() const;

    inline void detach();
    inline bool isDetached() const;
    inline bool isSharedWith(const QString &other) const { return d == other.d; }
    void clear();

    inline const QChar at(int i) const;
    const QChar operator[](int i) const;
     QCharRef operator[](int i);
    const QChar operator[](uint i) const;
     QCharRef operator[](uint i);

     inline QChar front() const { return at(0); }
     inline QCharRef front();
     inline QChar back() const { return at(size() - 1); }
     inline QCharRef back();

     QString arg(qlonglong a, int fieldwidth=0, int base=10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(qulonglong a, int fieldwidth=0, int base=10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(long a, int fieldwidth=0, int base=10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(ulong a, int fieldwidth=0, int base=10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(int a, int fieldWidth = 0, int base = 10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(uint a, int fieldWidth = 0, int base = 10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(short a, int fieldWidth = 0, int base = 10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(ushort a, int fieldWidth = 0, int base = 10,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(double a, int fieldWidth = 0, char fmt = 'g', int prec = -1,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(char a, int fieldWidth = 0,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(QChar a, int fieldWidth = 0,
                QChar fillChar = QLatin1Char(' ')) const;

     QString arg(const QString &a, int fieldWidth = 0,
                QChar fillChar = QLatin1Char(' ')) const;
#line 328 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QString arg(QStringView a, int fieldWidth = 0,
                QChar fillChar = QLatin1Char(' ')) const;
     QString arg(QLatin1String a, int fieldWidth = 0,
                QChar fillChar = QLatin1Char(' ')) const;

     QString arg(const QString &a1, const QString &a2) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4, const QString &a5) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4, const QString &a5, const QString &a6) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4, const QString &a5, const QString &a6,
                const QString &a7) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4, const QString &a5, const QString &a6,
                const QString &a7, const QString &a8) const;
     QString arg(const QString &a1, const QString &a2, const QString &a3,
                const QString &a4, const QString &a5, const QString &a6,
                const QString &a7, const QString &a8, const QString &a9) const;
#line 351 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
private:
    template <typename T>
    struct is_convertible_to_view_or_qstring_helper
        : std::integral_constant<bool,
            std::is_convertible<T, QString>::value ||
            std::is_convertible<T, QStringView>::value ||
            std::is_convertible<T, QLatin1String>::value> {};
    template <typename T>
    struct is_convertible_to_view_or_qstring
        : is_convertible_to_view_or_qstring_helper<typename std::decay<T>::type> {};
public:
    template <typename...Args>
    



    typename std::enable_if<
        sizeof...(Args) >= 2 && std::is_same<
            QtPrivate::BoolList<is_convertible_to_view_or_qstring<Args>::value..., true>,
            QtPrivate::BoolList<true, is_convertible_to_view_or_qstring<Args>::value...>
        >::value,
        QString
    >::type
#line 375 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    arg(Args &&...args) const
    { return qToStringViewIgnoringNull(*this).arg(std::forward<Args>(args)...); }


    __declspec(deprecated("Use vasprintf(), arg() or QTextStream instead"))
    QString &vsprintf(const char *format, va_list ap) ;
    __declspec(deprecated("Use asprintf(), arg() or QTextStream instead"))
    QString &sprintf(const char *format, ...) ;
#line 384 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    static QString vasprintf(const char *format, va_list ap) ;
    static QString asprintf(const char *format, ...) ;

    int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int indexOf(QLatin1String s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    int indexOf(const QString &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int indexOf(const QStringRef &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 393 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     int indexOf(QStringView s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::findString(*this, from, s, cs)); } 
    int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(QLatin1String s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    int lastIndexOf(const QString &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(const QStringRef &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 401 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

     int lastIndexOf(QStringView s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::lastIndexOf(*this, from, s, cs)); } 

    inline bool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    inline bool contains(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 410 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    inline bool contains(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
    int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;


    int indexOf(const QRegExp &, int from = 0) const;
    int lastIndexOf(const QRegExp &, int from = -1) const;
    inline bool contains(const QRegExp &rx) const { return indexOf(rx) != -1; }
    int count(const QRegExp &) const;

    int indexOf(QRegExp &, int from = 0) const;
    int lastIndexOf(QRegExp &, int from = -1) const;
    inline bool contains(QRegExp &rx) const { return indexOf(rx) != -1; }
#line 426 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"


    int indexOf(const QRegularExpression &re, int from = 0) const;
    int indexOf(const QRegularExpression &re, int from, QRegularExpressionMatch *rmatch) const; 
    int lastIndexOf(const QRegularExpression &re, int from = -1) const;
    int lastIndexOf(const QRegularExpression &re, int from, QRegularExpressionMatch *rmatch) const; 
    bool contains(const QRegularExpression &re) const;
    bool contains(const QRegularExpression &re, QRegularExpressionMatch *rmatch) const; 
    int count(const QRegularExpression &re) const;
#line 436 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    enum SectionFlag {
        SectionDefault             = 0x00,
        SectionSkipEmpty           = 0x01,
        SectionIncludeLeadingSep   = 0x02,
        SectionIncludeTrailingSep  = 0x04,
        SectionCaseInsensitiveSeps = 0x08
    };
    typedef QFlags<SectionFlag> SectionFlags;

    QString section(QChar sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;
    QString section(const QString &in_sep, int start, int end = -1, SectionFlags flags = SectionDefault) const;

    QString section(const QRegExp &reg, int start, int end = -1, SectionFlags flags = SectionDefault) const;
#line 451 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    QString section(const QRegularExpression &re, int start, int end = -1, SectionFlags flags = SectionDefault) const;
#line 454 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QString left(int n) const;
     QString right(int n) const;
     QString mid(int position, int n = -1) const;
     QString chopped(int n) const
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); return left(size() - n); }


     QStringRef leftRef(int n) const;
     QStringRef rightRef(int n) const;
     QStringRef midRef(int position, int n = -1) const;


    bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 469 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::startsWith(*this, s, cs); }
    bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;


    bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 478 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::endsWith(*this, s, cs); }
    bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    bool isUpper() const;
    bool isLower() const;

     QString leftJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const;
     QString rightJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const;








#line 497 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QString toLower() const &
    { return toLower_helper(*this); }
     QString toLower() &&
    { return toLower_helper(*this); }
     QString toUpper() const &
    { return toUpper_helper(*this); }
     QString toUpper() &&
    { return toUpper_helper(*this); }
     QString toCaseFolded() const &
    { return toCaseFolded_helper(*this); }
     QString toCaseFolded() &&
    { return toCaseFolded_helper(*this); }
     QString trimmed() const &
    { return trimmed_helper(*this); }
     QString trimmed() &&
    { return trimmed_helper(*this); }
     QString simplified() const &
    { return simplified_helper(*this); }
     QString simplified() &&
    { return simplified_helper(*this); }









#line 527 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QString toHtmlEscaped() const;

    QString &insert(int i, QChar c);
    QString &insert(int i, const QChar *uc, int len);
    inline QString &insert(int i, const QString &s) { return insert(i, s.constData(), s.length()); }
    inline QString &insert(int i, const QStringRef &s);
    QString &insert(int i, QLatin1String s);
    QString &append(QChar c);
    QString &append(const QChar *uc, int len);
    QString &append(const QString &s);
    QString &append(const QStringRef &s);
    QString &append(QLatin1String s);
    inline QString &prepend(QChar c) { return insert(0, c); }
    inline QString &prepend(const QChar *uc, int len) { return insert(0, uc, len); }
    inline QString &prepend(const QString &s) { return insert(0, s); }
    inline QString &prepend(const QStringRef &s) { return insert(0, s); }
    inline QString &prepend(QLatin1String s) { return insert(0, s); }

    inline QString &operator+=(QChar c) {
        if (d->ref.isShared() || uint(d->size) + 2u > d->alloc)
            reallocData(uint(d->size) + 2u, true);
        d->data()[d->size++] = c.unicode();
        d->data()[d->size] = '\0';
        return *this;
    }

    inline QString &operator+=(QChar::SpecialCharacter c) { return append(QChar(c)); }
    inline QString &operator+=(const QString &s) { return append(s); }
    inline QString &operator+=(const QStringRef &s) { return append(s); }
    inline QString &operator+=(QLatin1String s) { return append(s); }

    QString &remove(int i, int len);
    QString &remove(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &remove(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &remove(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(int i, int len, QChar after);
    QString &replace(int i, int len, const QChar *s, int slen);
    QString &replace(int i, int len, const QString &after);
    QString &replace(QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(const QChar *before, int blen, const QChar *after, int alen, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(QLatin1String before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(const QString &before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(const QString &before, const QString &after,
                     Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(QChar c, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QString &replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

    QString &replace(const QRegExp &rx, const QString &after);
    inline QString &remove(const QRegExp &rx)
    { return replace(rx, QString()); }
#line 579 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    QString &replace(const QRegularExpression &re, const QString  &after);
    inline QString &remove(const QRegularExpression &re)
    { return replace(re, QString()); }
#line 584 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    enum SplitBehavior { KeepEmptyParts, SkipEmptyParts };

     QStringList split(const QString &sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     QVector<QStringRef> splitRef(const QString &sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     QStringList split(QChar sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     QVector<QStringRef> splitRef(QChar sep, SplitBehavior behavior = KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     QStringList split(const QRegExp &sep, SplitBehavior behavior = KeepEmptyParts) const;
     QVector<QStringRef> splitRef(const QRegExp &sep, SplitBehavior behavior = KeepEmptyParts) const;
#line 599 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

     QStringList split(const QRegularExpression &sep, SplitBehavior behavior = KeepEmptyParts) const;
     QVector<QStringRef> splitRef(const QRegularExpression &sep, SplitBehavior behavior = KeepEmptyParts) const;
#line 603 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

private:
    static constexpr SplitBehavior _sb(Qt::SplitBehavior sb) noexcept
    { return sb & Qt::SkipEmptyParts ? SkipEmptyParts : KeepEmptyParts; }
public:

     inline QStringList split(const QString &sep, Qt::SplitBehavior behavior,
                                               Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     inline QVector<QStringRef> splitRef(const QString &sep, Qt::SplitBehavior behavior,
                                                          Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     inline QStringList split(QChar sep, Qt::SplitBehavior behavior,
                                               Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     inline QVector<QStringRef> splitRef(QChar sep, Qt::SplitBehavior behavior,
                                                          Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     inline QStringList split(const QRegExp &sep, Qt::SplitBehavior behavior) const;
     inline QVector<QStringRef> splitRef(const QRegExp &sep, Qt::SplitBehavior behavior) const;
#line 621 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

     inline QStringList split(const QRegularExpression &sep, Qt::SplitBehavior behavior) const;
     inline QVector<QStringRef> splitRef(const QRegularExpression &sep, Qt::SplitBehavior behavior) const;
#line 625 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"


    enum NormalizationForm {
        NormalizationForm_D,
        NormalizationForm_C,
        NormalizationForm_KD,
        NormalizationForm_KC
    };
     QString normalized(NormalizationForm mode, QChar::UnicodeVersion version = QChar::Unicode_Unassigned) const;

     QString repeated(int times) const;

    const ushort *utf16() const;


     QByteArray toLatin1() const &
    { return toLatin1_helper(*this); }
     QByteArray toLatin1() &&
    { return toLatin1_helper_inplace(*this); }
     QByteArray toUtf8() const &
    { return toUtf8_helper(*this); }
     QByteArray toUtf8() &&
    { return toUtf8_helper(*this); }
     QByteArray toLocal8Bit() const &
    { return toLocal8Bit_helper(isNull() ? nullptr : constData(), size()); }
     QByteArray toLocal8Bit() &&
    { return toLocal8Bit_helper(isNull() ? nullptr : constData(), size()); }




#line 657 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QVector<uint> toUcs4() const;

    
    static inline QString fromLatin1(const char *str, int size = -1)
    {
        QStringDataPtr dataPtr = { fromLatin1_helper(str, (str && size == -1) ? int(strlen(str)) : size) };
        return QString(dataPtr);
    }
    static inline QString fromUtf8(const char *str, int size = -1)
    {
        return fromUtf8_helper(str, (str && size == -1) ? int(strlen(str)) : size);
    }
    static inline QString fromLocal8Bit(const char *str, int size = -1)
    {
        return fromLocal8Bit_helper(str, (str && size == -1) ? int(strlen(str)) : size);
    }
    static inline QString fromLatin1(const QByteArray &str)
    { return str.isNull() ? QString() : fromLatin1(str.data(), qstrnlen(str.constData(), str.size())); }
    static inline QString fromUtf8(const QByteArray &str)
    { return str.isNull() ? QString() : fromUtf8(str.data(), qstrnlen(str.constData(), str.size())); }
    static inline QString fromLocal8Bit(const QByteArray &str)
    { return str.isNull() ? QString() : fromLocal8Bit(str.data(), qstrnlen(str.constData(), str.size())); }
    static QString fromUtf16(const ushort *, int size = -1);
    static QString fromUcs4(const uint *, int size = -1);
    static QString fromRawData(const QChar *, int size);


    static QString fromUtf16(const char16_t *str, int size = -1)
    { return fromUtf16(reinterpret_cast<const ushort *>(str), size); }
    static QString fromUcs4(const char32_t *str, int size = -1)
    { return fromUcs4(reinterpret_cast<const uint *>(str), size); }
#line 689 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"








#line 698 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    inline int toWCharArray(wchar_t *array) const;
     static inline QString fromWCharArray(const wchar_t *string, int size = -1);

    QString &setRawData(const QChar *unicode, int size);
    QString &setUnicode(const QChar *unicode, int size);
    inline QString &setUtf16(const ushort *utf16, int size);


    int compare(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
    inline int compare(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
#line 710 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    int compare(QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
    inline int compare(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

    static inline int compare(const QString &s1, const QString &s2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept
    { return s1.compare(s2, cs); }

    static inline int compare(const QString &s1, QLatin1String s2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept
    { return s1.compare(s2, cs); }
    static inline int compare(QLatin1String s1, const QString &s2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept
    { return -s2.compare(s1, cs); }

    static int compare(const QString &s1, const QStringRef &s2,
                       Qt::CaseSensitivity = Qt::CaseSensitive) noexcept;

    int localeAwareCompare(const QString& s) const;
    static int localeAwareCompare(const QString& s1, const QString& s2)
    { return s1.localeAwareCompare(s2); }

    int localeAwareCompare(const QStringRef &s) const;
    static int localeAwareCompare(const QString& s1, const QStringRef& s2);

    
    short  toShort(bool *ok=nullptr, int base=10) const;
    ushort toUShort(bool *ok=nullptr, int base=10) const;
    int toInt(bool *ok=nullptr, int base=10) const;
    uint toUInt(bool *ok=nullptr, int base=10) const;
    long toLong(bool *ok=nullptr, int base=10) const;
    ulong toULong(bool *ok=nullptr, int base=10) const;
    qlonglong toLongLong(bool *ok=nullptr, int base=10) const;
    qulonglong toULongLong(bool *ok=nullptr, int base=10) const;
    float toFloat(bool *ok=nullptr) const;
    double toDouble(bool *ok=nullptr) const;

    QString &setNum(short, int base=10);
    QString &setNum(ushort, int base=10);
    QString &setNum(int, int base=10);
    QString &setNum(uint, int base=10);
    QString &setNum(long, int base=10);
    QString &setNum(ulong, int base=10);
    QString &setNum(qlonglong, int base=10);
    QString &setNum(qulonglong, int base=10);
    QString &setNum(float, char f='g', int prec=6);
    QString &setNum(double, char f='g', int prec=6);

    static QString number(int, int base=10);
    static QString number(uint, int base=10);
    static QString number(long, int base=10);
    static QString number(ulong, int base=10);
    static QString number(qlonglong, int base=10);
    static QString number(qulonglong, int base=10);
    static QString number(double, char f='g', int prec=6);

    friend __declspec(dllimport) bool operator==(const QString &s1, const QString &s2) noexcept;
    friend __declspec(dllimport) bool operator<(const QString &s1, const QString &s2) noexcept;
    friend inline bool operator>(const QString &s1, const QString &s2) noexcept { return s2 < s1; }
    friend inline bool operator!=(const QString &s1, const QString &s2) noexcept { return !(s1 == s2); }
    friend inline bool operator<=(const QString &s1, const QString &s2) noexcept { return !(s1 > s2); }
    friend inline bool operator>=(const QString &s1, const QString &s2) noexcept { return !(s1 < s2); }

    bool operator==(QLatin1String s) const noexcept;
    bool operator<(QLatin1String s) const noexcept;
    bool operator>(QLatin1String s) const noexcept;
    inline bool operator!=(QLatin1String s) const noexcept { return !operator==(s); }
    inline bool operator<=(QLatin1String s) const noexcept { return !operator>(s); }
    inline bool operator>=(QLatin1String s) const noexcept { return !operator<(s); }

    












#line 793 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    inline  QString(const char *ch)
        : d(fromAscii_helper(ch, ch ? int(strlen(ch)) : -1))
    {}
    inline  QString(const QByteArray &a)
        : d(fromAscii_helper(a.constData(), qstrnlen(a.constData(), a.size())))
    {}
    inline  QString &operator=(const char *ch)
    { return (*this = fromUtf8(ch)); }
    inline  QString &operator=(const QByteArray &a)
    { return (*this = fromUtf8(a)); }
    inline  QString &operator=(char c)
    { return (*this = QChar::fromLatin1(c)); }

    
    inline  QString &prepend(const char *s)
    { return prepend(QString::fromUtf8(s)); }
    inline  QString &prepend(const QByteArray &s)
    { return prepend(QString::fromUtf8(s)); }
    inline  QString &append(const char *s)
    { return append(QString::fromUtf8(s)); }
    inline  QString &append(const QByteArray &s)
    { return append(QString::fromUtf8(s)); }
    inline  QString &insert(int i, const char *s)
    { return insert(i, QString::fromUtf8(s)); }
    inline  QString &insert(int i, const QByteArray &s)
    { return insert(i, QString::fromUtf8(s)); }
    inline  QString &operator+=(const char *s)
    { return append(QString::fromUtf8(s)); }
    inline  QString &operator+=(const QByteArray &s)
    { return append(QString::fromUtf8(s)); }
    inline  QString &operator+=(char c)
    { return append(QChar::fromLatin1(c)); }

    inline  bool operator==(const char *s) const;
    inline  bool operator!=(const char *s) const;
    inline  bool operator<(const char *s) const;
    inline  bool operator<=(const char *s) const;
    inline  bool operator>(const char *s) const;
    inline  bool operator>=(const char *s) const;

    inline  bool operator==(const QByteArray &s) const;
    inline  bool operator!=(const QByteArray &s) const;
    inline  bool operator<(const QByteArray &s) const;
    inline  bool operator>(const QByteArray &s) const;
    inline  bool operator<=(const QByteArray &s) const;
    inline  bool operator>=(const QByteArray &s) const;

    friend inline  bool operator==(const char *s1, const QString &s2);
    friend inline  bool operator!=(const char *s1, const QString &s2);
    friend inline  bool operator<(const char *s1, const QString &s2);
    friend inline  bool operator>(const char *s1, const QString &s2);
    friend inline  bool operator<=(const char *s1, const QString &s2);
    friend inline  bool operator>=(const char *s1, const QString &s2);

    friend inline  bool operator==(const char *s1, const QStringRef &s2);
    friend inline  bool operator!=(const char *s1, const QStringRef &s2);
    friend inline  bool operator<(const char *s1, const QStringRef &s2);
    friend inline  bool operator>(const char *s1, const QStringRef &s2);
    friend inline  bool operator<=(const char *s1, const QStringRef &s2);
    friend inline  bool operator>=(const char *s1, const QStringRef &s2);
#line 855 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    typedef QChar *iterator;
    typedef const QChar *const_iterator;
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    inline iterator begin();
    inline const_iterator begin() const;
    inline const_iterator cbegin() const;
    inline const_iterator constBegin() const;
    inline iterator end();
    inline const_iterator end() const;
    inline const_iterator cend() const;
    inline const_iterator constEnd() const;
    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const { return const_reverse_iterator(begin()); }

    
    typedef int size_type;
    typedef qptrdiff difference_type;
    typedef const QChar & const_reference;
    typedef QChar & reference;
    typedef QChar *pointer;
    typedef const QChar *const_pointer;
    typedef QChar value_type;
    inline void push_back(QChar c) { append(c); }
    inline void push_back(const QString &s) { append(s); }
    inline void push_front(QChar c) { prepend(c); }
    inline void push_front(const QString &s) { prepend(s); }
    void shrink_to_fit() { squeeze(); }

    static inline QString fromStdString(const std::string &s);
    inline std::string toStdString() const;
    static inline QString fromStdWString(const std::wstring &s);
    inline std::wstring toStdWString() const;


    static inline QString fromStdU16String(const std::u16string &s);
    inline std::u16string toStdU16String() const;
    static inline QString fromStdU32String(const std::u32string &s);
    inline std::u32string toStdU32String() const;
#line 902 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"






#line 909 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    

    struct Null { };
    __declspec(deprecated("use QString()"))
    static const Null null;
    inline QString(const Null &): d(Data::sharedNull()) {}
    inline QString &operator=(const Null &) { *this = QString(); return *this; }
#line 917 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    inline bool isNull() const { return d == Data::sharedNull(); }


    bool isSimpleText() const;
    bool isRightToLeft() const;

    QString(int size, Qt::Initialization);
    constexpr inline QString(QStringDataPtr dd) : d(dd.ptr) {}

private:







#line 935 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    Data *d;

    friend inline bool operator==(QChar, const QString &) noexcept;
    friend inline bool operator< (QChar, const QString &) noexcept;
    friend inline bool operator> (QChar, const QString &) noexcept;
    friend inline bool operator==(QChar, const QStringRef &) noexcept;
    friend inline bool operator< (QChar, const QStringRef &) noexcept;
    friend inline bool operator> (QChar, const QStringRef &) noexcept;
    friend inline bool operator==(QChar, QLatin1String) noexcept;
    friend inline bool operator< (QChar, QLatin1String) noexcept;
    friend inline bool operator> (QChar, QLatin1String) noexcept;

    void reallocData(uint alloc, bool grow = false);

    void expand(int i);
    QString multiArg(int numArgs, const QString **args) const;
#line 953 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    static int compare_helper(const QChar *data1, int length1,
                              const QChar *data2, int length2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
    static int compare_helper(const QChar *data1, int length1,
                              const char *data2, int length2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive);
    static int compare_helper(const QChar *data1, int length1,
                              QLatin1String s2,
                              Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;
    static int localeAwareCompare_helper(const QChar *data1, int length1,
                                         const QChar *data2, int length2);
    static QString toLower_helper(const QString &str);
    static QString toLower_helper(QString &str);
    static QString toUpper_helper(const QString &str);
    static QString toUpper_helper(QString &str);
    static QString toCaseFolded_helper(const QString &str);
    static QString toCaseFolded_helper(QString &str);
    static QString trimmed_helper(const QString &str);
    static QString trimmed_helper(QString &str);
    static QString simplified_helper(const QString &str);
    static QString simplified_helper(QString &str);
    static Data *fromLatin1_helper(const char *str, int size = -1);
    static Data *fromAscii_helper(const char *str, int size = -1);
    static QString fromUtf8_helper(const char *str, int size);
    static QString fromLocal8Bit_helper(const char *, int size);
    static QByteArray toLatin1_helper(const QString &);
    static QByteArray toLatin1_helper_inplace(QString &);
    static QByteArray toUtf8_helper(const QString &);
    static QByteArray toLocal8Bit_helper(const QChar *data, int size);
    static int toUcs4_helper(const ushort *uc, int length, uint *out);
    static qlonglong toIntegral_helper(const QChar *data, int len, bool *ok, int base);
    static qulonglong toIntegral_helper(const QChar *data, uint len, bool *ok, int base);
    void replace_helper(uint *indices, int nIndices, int blen, const QChar *after, int alen);
    friend class QCharRef;
    friend class QTextCodec;
    friend class QStringRef;
    friend class QStringView;
    friend class QByteArray;
    friend class QCollator;
    friend struct QAbstractConcatenable;

    template <typename T> static
    T toIntegral_helper(const QChar *data, int len, bool *ok, int base)
    {
        using Int64 = typename std::conditional<std::is_unsigned<T>::value, qulonglong, qlonglong>::type;
        using Int32 = typename std::conditional<std::is_unsigned<T>::value, uint, int>::type;

        
        Int64 val = toIntegral_helper(data, Int32(len), ok, base);
        if (T(val) != val) {
            if (ok)
                *ok = false;
            val = 0;
        }
        return T(val);
    }

public:
    typedef Data * DataPtr;
    inline DataPtr &data_ptr() { return d; }
};




QString QStringView::toString() const
{ return static_cast<void>(false && (size() == length())), QString(data(), length()); }




inline QString::QString(QLatin1String aLatin1) : d(fromLatin1_helper(aLatin1.latin1(), aLatin1.size()))
{ }
inline int QString::length() const
{ return d->size; }
inline const QChar QString::at(int i) const
{ static_cast<void>(false && (uint(i) < uint(size()))); return QChar(d->data()[i]); }
inline const QChar QString::operator[](int i) const
{ static_cast<void>(false && (uint(i) < uint(size()))); return QChar(d->data()[i]); }
inline const QChar QString::operator[](uint i) const
{ static_cast<void>(false && (i < uint(size()))); return QChar(d->data()[i]); }
inline bool QString::isEmpty() const
{ return d->size == 0; }
inline const QChar *QString::unicode() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline const QChar *QString::data() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QChar *QString::data()
{ detach(); return reinterpret_cast<QChar*>(d->data()); }
inline const QChar *QString::constData() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline void QString::detach()
{ if (d->ref.isShared() || (d->offset != sizeof(QStringData))) reallocData(uint(d->size) + 1u); }
inline bool QString::isDetached() const
{ return !d->ref.isShared(); }
inline void QString::clear()
{ if (!isNull()) *this = QString(); }
inline QString::QString(const QString &other) noexcept : d(other.d)
{ static_cast<void>(false && (&other != this)); d->ref.ref(); }
inline int QString::capacity() const
{ return d->alloc ? d->alloc - 1 : 0; }
inline QString &QString::setNum(short n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ushort n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(int n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(uint n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(long n, int base)
{ return setNum(qlonglong(n), base); }
inline QString &QString::setNum(ulong n, int base)
{ return setNum(qulonglong(n), base); }
inline QString &QString::setNum(float n, char f, int prec)
{ return setNum(double(n),f,prec); }
inline QString QString::arg(int a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(uint a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(long a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ulong a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(short a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qlonglong(a), fieldWidth, base, fillChar); }
inline QString QString::arg(ushort a, int fieldWidth, int base, QChar fillChar) const
{ return arg(qulonglong(a), fieldWidth, base, fillChar); }

inline QString QString::arg(const QString &a1, const QString &a2) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4, const QString &a5) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4, a5); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4, const QString &a5, const QString &a6) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4, a5, a6); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4, const QString &a5, const QString &a6,
                            const QString &a7) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4, a5, a6, a7); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4, const QString &a5, const QString &a6,
                            const QString &a7, const QString &a8) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4, a5, a6, a7, a8); }
inline QString QString::arg(const QString &a1, const QString &a2, const QString &a3,
                            const QString &a4, const QString &a5, const QString &a6,
                            const QString &a7, const QString &a8, const QString &a9) const
{ return qToStringViewIgnoringNull(*this).arg(a1, a2, a3, a4, a5, a6, a7, a8, a9); }
#line 1107 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

inline QString QString::section(QChar asep, int astart, int aend, SectionFlags aflags) const
{ return section(QString(asep), astart, aend, aflags); }

__pragma(warning(push))
__pragma(warning(disable: 4127))   
   

inline int QString::toWCharArray(wchar_t *array) const
{
    return qToStringViewIgnoringNull(*this).toWCharArray(array);
}

int QStringView::toWCharArray(wchar_t *array) const
{
    if (sizeof(wchar_t) == sizeof(QChar)) {
        if (auto src = data())
            memcpy(array, src, sizeof(QChar) * size());
        return int(size());     
    } else {
        return QString::toUcs4_helper(reinterpret_cast<const ushort *>(data()), int(size()),
                                      reinterpret_cast<uint *>(array));
    }
}

__pragma(warning(pop))

inline QString QString::fromWCharArray(const wchar_t *string, int size)
{
    return sizeof(wchar_t) == sizeof(QChar) ? fromUtf16(reinterpret_cast<const ushort *>(string), size)
                                            : fromUcs4(reinterpret_cast<const uint *>(string), size);
}

class

__declspec(dllimport)
#line 1144 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
QCharRef { 
    QString &s;
    int i;
    inline QCharRef(QString &str, int idx)
        : s(str),i(idx) {}
    friend class QString;
public:

    

    
    inline operator QChar() const
    {
        using namespace QtPrivate::DeprecatedRefClassBehavior;
        if ((i < s.d->size))
            return QChar(s.d->data()[i]);



        return QChar();
    }
    inline QCharRef &operator=(QChar c)
    {
        using namespace QtPrivate::DeprecatedRefClassBehavior;
        if ((i >= s.d->size)) {



            s.resize(i + 1, QLatin1Char(' '));
        } else {




            s.detach();
        }
        s.d->data()[i] = c.unicode();
        return *this;
    }

    

    inline  QCharRef &operator=(char c)
    { return operator=(QChar::fromLatin1(c)); }
    inline  QCharRef &operator=(uchar c)
    { return operator=(QChar::fromLatin1(c)); }
#line 1191 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    inline QCharRef &operator=(const QCharRef &c) { return operator=(QChar(c)); }
    inline QCharRef &operator=(ushort rc) { return operator=(QChar(rc)); }
    inline QCharRef &operator=(short rc) { return operator=(QChar(rc)); }
    inline QCharRef &operator=(uint rc) { return operator=(QChar(rc)); }
    inline QCharRef &operator=(int rc) { return operator=(QChar(rc)); }

    
    inline bool isNull() const { return QChar(*this).isNull(); }
    inline bool isPrint() const { return QChar(*this).isPrint(); }
    inline bool isPunct() const { return QChar(*this).isPunct(); }
    inline bool isSpace() const { return QChar(*this).isSpace(); }
    inline bool isMark() const { return QChar(*this).isMark(); }
    inline bool isLetter() const { return QChar(*this).isLetter(); }
    inline bool isNumber() const { return QChar(*this).isNumber(); }
    inline bool isLetterOrNumber() { return QChar(*this).isLetterOrNumber(); }
    inline bool isDigit() const { return QChar(*this).isDigit(); }
    inline bool isLower() const { return QChar(*this).isLower(); }
    inline bool isUpper() const { return QChar(*this).isUpper(); }
    inline bool isTitleCase() const { return QChar(*this).isTitleCase(); }

    inline int digitValue() const { return QChar(*this).digitValue(); }
    QChar toLower() const { return QChar(*this).toLower(); }
    QChar toUpper() const { return QChar(*this).toUpper(); }
    QChar toTitleCase () const { return QChar(*this).toTitleCase(); }

    QChar::Category category() const { return QChar(*this).category(); }
    QChar::Direction direction() const { return QChar(*this).direction(); }
    QChar::JoiningType joiningType() const { return QChar(*this).joiningType(); }

    __declspec(deprecated) QChar::Joining joining() const
    {
        switch (QChar(*this).joiningType()) {
        case QChar::Joining_Causing: return QChar::Center;
        case QChar::Joining_Dual: return QChar::Dual;
        case QChar::Joining_Right: return QChar::Right;
        case QChar::Joining_None:
        case QChar::Joining_Left:
        case QChar::Joining_Transparent:
        default: return QChar::OtherJoining;
        }
    }
#line 1233 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    bool hasMirrored() const { return QChar(*this).hasMirrored(); }
    QChar mirroredChar() const { return QChar(*this).mirroredChar(); }
    QString decomposition() const { return QChar(*this).decomposition(); }
    QChar::Decomposition decompositionTag() const { return QChar(*this).decompositionTag(); }
    uchar combiningClass() const { return QChar(*this).combiningClass(); }

    inline QChar::Script script() const { return QChar(*this).script(); }

    QChar::UnicodeVersion unicodeVersion() const { return QChar(*this).unicodeVersion(); }

    inline uchar cell() const { return QChar(*this).cell(); }
    inline uchar row() const { return QChar(*this).row(); }
    inline void setCell(uchar cell);
    inline void setRow(uchar row);



#line 1251 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    char toLatin1() const { return QChar(*this).toLatin1(); }
    ushort unicode() const { return QChar(*this).unicode(); }
    ushort& unicode() { return s.data()[i].unicode(); }

};
template<> class QTypeInfo<QCharRef > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QCharRef>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QCharRef>(), isLarge = (sizeof(QCharRef)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QCharRef >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QCharRef) }; static inline const char *name() { return "QCharRef"; } };

inline void QCharRef::setRow(uchar arow) { QChar(*this).setRow(arow); }
inline void QCharRef::setCell(uchar acell) { QChar(*this).setCell(acell); }


inline QString::QString() noexcept : d(Data::sharedNull()) {}
inline QString::~QString() { if (!d->ref.deref()) Data::deallocate(d); }

inline void QString::reserve(int asize)
{
    if (d->ref.isShared() || uint(asize) >= d->alloc)
        reallocData(qMax(asize, d->size) + 1u);

    if (!d->capacityReserved) {
        
        d->capacityReserved = true;
    }
}

inline void QString::squeeze()
{
    if (d->ref.isShared() || uint(d->size) + 1u < d->alloc)
        reallocData(uint(d->size) + 1u);

    if (d->capacityReserved) {
        
        
        d->capacityReserved = false;
    }
}

inline QString &QString::setUtf16(const ushort *autf16, int asize)
{ return setUnicode(reinterpret_cast<const QChar *>(autf16), asize); }
inline QCharRef QString::operator[](int i)
{ static_cast<void>(false && (i >= 0)); detach(); return QCharRef(*this, i); }
inline QCharRef QString::operator[](uint i)
{  detach(); return QCharRef(*this, i); }
inline QCharRef QString::front() { return operator[](0); }
inline QCharRef QString::back() { return operator[](size() - 1); }
inline QString::iterator QString::begin()
{ detach(); return reinterpret_cast<QChar*>(d->data()); }
inline QString::const_iterator QString::begin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::const_iterator QString::cbegin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::const_iterator QString::constBegin() const
{ return reinterpret_cast<const QChar*>(d->data()); }
inline QString::iterator QString::end()
{ detach(); return reinterpret_cast<QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::end() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::cend() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }
inline QString::const_iterator QString::constEnd() const
{ return reinterpret_cast<const QChar*>(d->data() + d->size); }

inline bool QString::contains(const QString &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QString::contains(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
#line 1318 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
inline bool QString::contains(QLatin1String s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QString::contains(QChar c, Qt::CaseSensitivity cs) const
{ return indexOf(c, 0, cs) != -1; }
inline bool QString::contains(QStringView s, Qt::CaseSensitivity cs) const noexcept
{ return indexOf(s, 0, cs) != -1; }


inline bool operator==(QString::Null, QString::Null) { return true; }
__declspec(deprecated("use QString::isNull()"))
inline bool operator==(QString::Null, const QString &s) { return s.isNull(); }
__declspec(deprecated("use QString::isNull()"))
inline bool operator==(const QString &s, QString::Null) { return s.isNull(); }
inline bool operator!=(QString::Null, QString::Null) { return false; }
__declspec(deprecated("use !QString::isNull()"))
inline bool operator!=(QString::Null, const QString &s) { return !s.isNull(); }
__declspec(deprecated("use !QString::isNull()"))
inline bool operator!=(const QString &s, QString::Null) { return !s.isNull(); }
#line 1337 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

inline bool operator==(QLatin1String s1, QLatin1String s2) noexcept
{ return s1.size() == s2.size() && (!s1.size() || !memcmp(s1.latin1(), s2.latin1(), s1.size())); }
inline bool operator!=(QLatin1String s1, QLatin1String s2) noexcept
{ return !operator==(s1, s2); }
inline bool operator<(QLatin1String s1, QLatin1String s2) noexcept
{
    const int len = qMin(s1.size(), s2.size());
    const int r = len ? memcmp(s1.latin1(), s2.latin1(), len) : 0;
    return r < 0 || (r == 0 && s1.size() < s2.size());
}
inline bool operator>(QLatin1String s1, QLatin1String s2) noexcept
{ return operator<(s2, s1); }
inline bool operator<=(QLatin1String s1, QLatin1String s2) noexcept
{ return !operator>(s1, s2); }
inline bool operator>=(QLatin1String s1, QLatin1String s2) noexcept
{ return !operator<(s1, s2); }

inline bool QLatin1String::operator==(const QString &s) const noexcept
{ return s == *this; }
inline bool QLatin1String::operator!=(const QString &s) const noexcept
{ return s != *this; }
inline bool QLatin1String::operator>(const QString &s) const noexcept
{ return s < *this; }
inline bool QLatin1String::operator<(const QString &s) const noexcept
{ return s > *this; }
inline bool QLatin1String::operator>=(const QString &s) const noexcept
{ return s <= *this; }
inline bool QLatin1String::operator<=(const QString &s) const noexcept
{ return s >= *this; }


inline bool QString::operator==(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) == 0; }
inline bool QString::operator!=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) != 0; }
inline bool QString::operator<(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) < 0; }
inline bool QString::operator>(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) > 0; }
inline bool QString::operator<=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) <= 0; }
inline bool QString::operator>=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) >= 0; }

inline  bool operator==(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) == 0; }
inline  bool operator!=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) != 0; }
inline  bool operator<(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) > 0; }
inline  bool operator>(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) < 0; }
inline  bool operator<=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) >= 0; }
inline  bool operator>=(const char *s1, const QString &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) <= 0; }

inline  bool operator==(const char *s1, QLatin1String s2)
{ return QString::fromUtf8(s1) == s2; }
inline  bool operator!=(const char *s1, QLatin1String s2)
{ return QString::fromUtf8(s1) != s2; }
inline  bool operator<(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) < s2); }
inline  bool operator>(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) > s2); }
inline  bool operator<=(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) <= s2); }
inline  bool operator>=(const char *s1, QLatin1String s2)
{ return (QString::fromUtf8(s1) >= s2); }

inline  bool QLatin1String::operator==(const char *s) const
{ return QString::fromUtf8(s) == *this; }
inline  bool QLatin1String::operator!=(const char *s) const
{ return QString::fromUtf8(s) != *this; }
inline  bool QLatin1String::operator<(const char *s) const
{ return QString::fromUtf8(s) > *this; }
inline  bool QLatin1String::operator>(const char *s) const
{ return QString::fromUtf8(s) < *this; }
inline  bool QLatin1String::operator<=(const char *s) const
{ return QString::fromUtf8(s) >= *this; }
inline  bool QLatin1String::operator>=(const char *s) const
{ return QString::fromUtf8(s) <= *this; }

inline  bool QLatin1String::operator==(const QByteArray &s) const
{ return QString::fromUtf8(s) == *this; }
inline  bool QLatin1String::operator!=(const QByteArray &s) const
{ return QString::fromUtf8(s) != *this; }
inline  bool QLatin1String::operator<(const QByteArray &s) const
{ return QString::fromUtf8(s) > *this; }
inline  bool QLatin1String::operator>(const QByteArray &s) const
{ return QString::fromUtf8(s) < *this; }
inline  bool QLatin1String::operator<=(const QByteArray &s) const
{ return QString::fromUtf8(s) >= *this; }
inline  bool QLatin1String::operator>=(const QByteArray &s) const
{ return QString::fromUtf8(s) <= *this; }

inline  bool QString::operator==(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) == 0; }
inline  bool QString::operator!=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), qstrnlen(s.constData(), s.size())) != 0; }
inline  bool QString::operator<(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), s.size()) < 0; }
inline  bool QString::operator>(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), s.size()) > 0; }
inline  bool QString::operator<=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), s.size()) <= 0; }
inline  bool QString::operator>=(const QByteArray &s) const
{ return QString::compare_helper(constData(), size(), s.constData(), s.size()) >= 0; }

inline bool QByteArray::operator==(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) == 0; }
inline bool QByteArray::operator!=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), qstrnlen(constData(), size())) != 0; }
inline bool QByteArray::operator<(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), size()) > 0; }
inline bool QByteArray::operator>(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), size()) < 0; }
inline bool QByteArray::operator<=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), size()) >= 0; }
inline bool QByteArray::operator>=(const QString &s) const
{ return QString::compare_helper(s.constData(), s.size(), constData(), size()) <= 0; }
#line 1460 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"


inline QByteArray &QByteArray::append(const QString &s)
{ return append(s.toUtf8()); }
inline QByteArray &QByteArray::insert(int i, const QString &s)
{ return insert(i, s.toUtf8()); }
inline QByteArray &QByteArray::replace(char c, const QString &after)
{ return replace(c, after.toUtf8()); }
inline QByteArray &QByteArray::replace(const QString &before, const char *after)
{ return replace(before.toUtf8(), after); }
inline QByteArray &QByteArray::replace(const QString &before, const QByteArray &after)
{ return replace(before.toUtf8(), after); }
inline QByteArray &QByteArray::operator+=(const QString &s)
{ return operator+=(s.toUtf8()); }
inline int QByteArray::indexOf(const QString &s, int from) const
{ return indexOf(s.toUtf8(), from); }
inline int QByteArray::lastIndexOf(const QString &s, int from) const
{ return lastIndexOf(s.toUtf8(), from); }
#line 1479 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"


inline const QString operator+(const QString &s1, const QString &s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(const QString &s1, QChar s2)
{ QString t(s1); t += s2; return t; }
inline const QString operator+(QChar s1, const QString &s2)
{ QString t(s1); t += s2; return t; }

inline  const QString operator+(const QString &s1, const char *s2)
{ QString t(s1); t += QString::fromUtf8(s2); return t; }
inline  const QString operator+(const char *s1, const QString &s2)
{ QString t = QString::fromUtf8(s1); t += s2; return t; }
inline  const QString operator+(char c, const QString &s)
{ QString t = s; t.prepend(QChar::fromLatin1(c)); return t; }
inline  const QString operator+(const QString &s, char c)
{ QString t = s; t += QChar::fromLatin1(c); return t; }
inline  const QString operator+(const QByteArray &ba, const QString &s)
{ QString t = QString::fromUtf8(ba); t += s; return t; }
inline  const QString operator+(const QString &s, const QByteArray &ba)
{ QString t(s); t += QString::fromUtf8(ba); return t; }
#line 1501 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
#line 1502 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

inline std::string QString::toStdString() const
{ return toUtf8().toStdString(); }

inline QString QString::fromStdString(const std::string &s)
{ return fromUtf8(s.data(), int(s.size())); }

inline std::wstring QString::toStdWString() const
{
    std::wstring str;
    str.resize(length());

    str.resize(toWCharArray(str.data()));



#line 1519 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    return str;
}

inline QString QString::fromStdWString(const std::wstring &s)
{ return fromWCharArray(s.data(), int(s.size())); }


inline QString QString::fromStdU16String(const std::u16string &s)
{ return fromUtf16(s.data(), int(s.size())); }

inline std::u16string QString::toStdU16String() const
{ return std::u16string(reinterpret_cast<const char16_t*>(utf16()), length()); }

inline QString QString::fromStdU32String(const std::u32string &s)
{ return fromUcs4(s.data(), int(s.size())); }

inline std::u32string QString::toStdU32String() const
{
    std::u32string u32str(length(), char32_t(0));
    int len = toUcs4_helper(d->data(), length(), reinterpret_cast<uint*>(&u32str[0]));
    u32str.resize(len);
    return u32str;
}
#line 1543 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"


__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QString &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QString &);
#line 1548 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

template<> class QTypeInfo<QString > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QString>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QString>(), isLarge = (sizeof(QString)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QString >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QString) }; static inline const char *name() { return "QString"; } }; inline void swap(QString &value1, QString &value2) noexcept(noexcept(value1.swap(value2))) { value1.swap(value2); }
constexpr inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QString::SectionFlags::enum_type f2) noexcept { return QFlags<QString::SectionFlags::enum_type>(f1) | f2; } constexpr inline QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type f1, QFlags<QString::SectionFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QString::SectionFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }


class __declspec(dllimport) QStringRef {
    const QString *m_string;
    int m_position;
    int m_size;
public:
    typedef QString::size_type size_type;
    typedef QString::value_type value_type;
    typedef const QChar *const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef QString::const_pointer const_pointer;
    typedef QString::const_reference const_reference;

    
    inline QStringRef() : m_string(nullptr), m_position(0), m_size(0) {}
    inline QStringRef(const QString *string, int position, int size);
    inline QStringRef(const QString *string);


    
    QStringRef(const QStringRef &other) noexcept
        :m_string(other.m_string), m_position(other.m_position), m_size(other.m_size)
        {}
    QStringRef(QStringRef &&other) noexcept : m_string(other.m_string), m_position(other.m_position), m_size(other.m_size) {}
    QStringRef &operator=(QStringRef &&other) noexcept { return *this = other; }
    QStringRef &operator=(const QStringRef &other) noexcept
    {
        m_string = other.m_string; m_position = other.m_position;
        m_size = other.m_size; return *this;
    }
    inline ~QStringRef(){}
#line 1584 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    inline const QString *string() const { return m_string; }
    inline int position() const { return m_position; }
    inline int size() const { return m_size; }
    inline int count() const { return m_size; }
    inline int length() const { return m_size; }


    int indexOf(const QString &str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int indexOf(const QStringRef &str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 1595 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     int indexOf(QStringView s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::findString(*this, from, s, cs)); } 
    int indexOf(QChar ch, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int indexOf(QLatin1String str, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    int lastIndexOf(const QStringRef &str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(const QString &str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 1603 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    int lastIndexOf(QChar ch, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int lastIndexOf(QLatin1String str, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int lastIndexOf(QStringView s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return int(QtPrivate::lastIndexOf(*this, from, s, cs)); } 


    inline bool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(const QStringRef &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 1612 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    inline bool contains(QChar ch, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(QLatin1String str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(QStringView str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

    int count(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    int count(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     QVector<QStringRef> split(const QString &sep, QString::SplitBehavior behavior = QString::KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     QVector<QStringRef> split(QChar sep, QString::SplitBehavior behavior = QString::KeepEmptyParts,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     inline QVector<QStringRef> split(const QString &sep, Qt::SplitBehavior behavior,
                                                       Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     inline QVector<QStringRef> split(QChar sep, Qt::SplitBehavior behavior,
                                                       Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

     QStringRef left(int n) const;
     QStringRef right(int n) const;
     QStringRef mid(int pos, int n = -1) const;
     QStringRef chopped(int n) const
    { static_cast<void>(false && (n >= 0)); static_cast<void>(false && (n <= size())); return left(size() - n); }

    void truncate(int pos) noexcept { m_size = qBound(0, pos, m_size); }
    void chop(int n) noexcept
    {
        if (n >= m_size)
            m_size = 0;
        else if (n > 0)
            m_size -= n;
    }

    bool isRightToLeft() const;

     bool startsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::startsWith(*this, s, cs); }
    bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool startsWith(const QStringRef &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 1655 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

     bool endsWith(QStringView s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept
    { return QtPrivate::endsWith(*this, s, cs); }
    bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    bool endsWith(const QStringRef &c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 1664 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    inline QStringRef &operator=(const QString *string);

    inline const QChar *unicode() const
    {
        if (!m_string)
            return reinterpret_cast<const QChar *>(QString::Data::sharedNull()->data());
        return m_string->unicode() + m_position;
    }
    inline const QChar *data() const { return unicode(); }
    inline const QChar *constData() const {  return unicode(); }

    inline const_iterator begin() const { return unicode(); }
    inline const_iterator cbegin() const { return unicode(); }
    inline const_iterator constBegin() const { return unicode(); }
    inline const_iterator end() const { return unicode() + size(); }
    inline const_iterator cend() const { return unicode() + size(); }
    inline const_iterator constEnd() const { return unicode() + size(); }
    inline const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
    inline const_reverse_iterator crbegin() const { return rbegin(); }
    inline const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
    inline const_reverse_iterator crend() const { return rend(); }




#line 1691 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
     QByteArray toLatin1() const;
     QByteArray toUtf8() const;
     QByteArray toLocal8Bit() const;
     QVector<uint> toUcs4() const;

    inline void clear() { m_string = nullptr; m_position = m_size = 0; }
    QString toString() const;
    inline bool isEmpty() const { return m_size == 0; }
    inline bool isNull() const { return m_string == nullptr || m_string->isNull(); }

    QStringRef appendTo(QString *string) const;

    inline const QChar at(int i) const
        { static_cast<void>(false && (uint(i) < uint(size()))); return m_string->at(i + m_position); }
    QChar operator[](int i) const { return at(i); }
     QChar front() const { return at(0); }
     QChar back() const { return at(size() - 1); }


    
    inline  bool operator==(const char *s) const;
    inline  bool operator!=(const char *s) const;
    inline  bool operator<(const char *s) const;
    inline  bool operator<=(const char *s) const;
    inline  bool operator>(const char *s) const;
    inline  bool operator>=(const char *s) const;
#line 1718 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

    int compare(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
    int compare(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;
    int compare(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const noexcept;

    int compare(const QByteArray &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const
    { return QString::compare_helper(unicode(), size(), s.data(), qstrnlen(s.data(), s.size()), cs); }
#line 1726 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
    static int compare(const QStringRef &s1, const QString &s2,
                       Qt::CaseSensitivity = Qt::CaseSensitive) noexcept;
    static int compare(const QStringRef &s1, const QStringRef &s2,
                       Qt::CaseSensitivity = Qt::CaseSensitive) noexcept;
    static int compare(const QStringRef &s1, QLatin1String s2,
                       Qt::CaseSensitivity cs = Qt::CaseSensitive) noexcept;

    int localeAwareCompare(const QString &s) const;
    int localeAwareCompare(const QStringRef &s) const;
    static int localeAwareCompare(const QStringRef &s1, const QString &s2);
    static int localeAwareCompare(const QStringRef &s1, const QStringRef &s2);

     QStringRef trimmed() const;
    short  toShort(bool *ok = nullptr, int base = 10) const;
    ushort toUShort(bool *ok = nullptr, int base = 10) const;
    int toInt(bool *ok = nullptr, int base = 10) const;
    uint toUInt(bool *ok = nullptr, int base = 10) const;
    long toLong(bool *ok = nullptr, int base = 10) const;
    ulong toULong(bool *ok = nullptr, int base = 10) const;
    qlonglong toLongLong(bool *ok = nullptr, int base = 10) const;
    qulonglong toULongLong(bool *ok = nullptr, int base = 10) const;
    float toFloat(bool *ok = nullptr) const;
    double toDouble(bool *ok = nullptr) const;
};
template<> class QTypeInfo<QStringRef > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QStringRef>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QStringRef>(), isLarge = (sizeof(QStringRef)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QStringRef >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStringRef) }; static inline const char *name() { return "QStringRef"; } };

inline QStringRef &QStringRef::operator=(const QString *aString)
{ m_string = aString; m_position = 0; m_size = aString?aString->size():0; return *this; }

inline QStringRef::QStringRef(const QString *aString, int aPosition, int aSize)
        :m_string(aString), m_position(aPosition), m_size(aSize){}

inline QStringRef::QStringRef(const QString *aString)
    :m_string(aString), m_position(0), m_size(aString?aString->size() : 0){}


__declspec(dllimport) bool operator==(const QStringRef &s1, const QStringRef &s2) noexcept;
inline bool operator!=(const QStringRef &s1, const QStringRef &s2) noexcept
{ return !(s1 == s2); }
__declspec(dllimport) bool operator<(const QStringRef &s1, const QStringRef &s2) noexcept;
inline bool operator>(const QStringRef &s1, const QStringRef &s2) noexcept
{ return s2 < s1; }
inline bool operator<=(const QStringRef &s1, const QStringRef &s2) noexcept
{ return !(s1 > s2); }
inline bool operator>=(const QStringRef &s1, const QStringRef &s2) noexcept
{ return !(s1 < s2); }


__declspec(dllimport) bool operator==(const QString &lhs, const QStringRef &rhs) noexcept;
inline bool operator!=(const QString &lhs, const QStringRef &rhs) noexcept { return lhs.compare(rhs) != 0; }
inline bool operator< (const QString &lhs, const QStringRef &rhs) noexcept { return lhs.compare(rhs) <  0; }
inline bool operator> (const QString &lhs, const QStringRef &rhs) noexcept { return lhs.compare(rhs) >  0; }
inline bool operator<=(const QString &lhs, const QStringRef &rhs) noexcept { return lhs.compare(rhs) <= 0; }
inline bool operator>=(const QString &lhs, const QStringRef &rhs) noexcept { return lhs.compare(rhs) >= 0; }

inline bool operator==(const QStringRef &lhs, const QString &rhs) noexcept { return rhs == lhs; }
inline bool operator!=(const QStringRef &lhs, const QString &rhs) noexcept { return rhs != lhs; }
inline bool operator< (const QStringRef &lhs, const QString &rhs) noexcept { return rhs >  lhs; }
inline bool operator> (const QStringRef &lhs, const QString &rhs) noexcept { return rhs <  lhs; }
inline bool operator<=(const QStringRef &lhs, const QString &rhs) noexcept { return rhs >= lhs; }
inline bool operator>=(const QStringRef &lhs, const QString &rhs) noexcept { return rhs <= lhs; }


inline int QString::compare(const QStringRef &s, Qt::CaseSensitivity cs) const noexcept
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
#line 1792 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
inline int QString::compare(QStringView s, Qt::CaseSensitivity cs) const noexcept
{ return -s.compare(*this, cs); }
inline int QString::compare(const QString &s1, const QStringRef &s2, Qt::CaseSensitivity cs) noexcept
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QString &s, Qt::CaseSensitivity cs) const noexcept
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
inline int QStringRef::compare(const QStringRef &s, Qt::CaseSensitivity cs) const noexcept
{ return QString::compare_helper(constData(), length(), s.constData(), s.length(), cs); }
inline int QStringRef::compare(QLatin1String s, Qt::CaseSensitivity cs) const noexcept
{ return QString::compare_helper(constData(), length(), s, cs); }
inline int QStringRef::compare(const QStringRef &s1, const QString &s2, Qt::CaseSensitivity cs) noexcept
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QStringRef &s1, const QStringRef &s2, Qt::CaseSensitivity cs) noexcept
{ return QString::compare_helper(s1.constData(), s1.length(), s2.constData(), s2.length(), cs); }
inline int QStringRef::compare(const QStringRef &s1, QLatin1String s2, Qt::CaseSensitivity cs) noexcept
{ return QString::compare_helper(s1.constData(), s1.length(), s2, cs); }


__declspec(dllimport) bool operator==(QLatin1String lhs, const QStringRef &rhs) noexcept;
inline bool operator!=(QLatin1String lhs, const QStringRef &rhs) noexcept { return rhs.compare(lhs) != 0; }
inline bool operator< (QLatin1String lhs, const QStringRef &rhs) noexcept { return rhs.compare(lhs) >  0; }
inline bool operator> (QLatin1String lhs, const QStringRef &rhs) noexcept { return rhs.compare(lhs) <  0; }
inline bool operator<=(QLatin1String lhs, const QStringRef &rhs) noexcept { return rhs.compare(lhs) >= 0; }
inline bool operator>=(QLatin1String lhs, const QStringRef &rhs) noexcept { return rhs.compare(lhs) <= 0; }

inline bool operator==(const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs == lhs; }
inline bool operator!=(const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs != lhs; }
inline bool operator< (const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs >  lhs; }
inline bool operator> (const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs <  lhs; }
inline bool operator<=(const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs >= lhs; }
inline bool operator>=(const QStringRef &lhs, QLatin1String rhs) noexcept { return rhs <= lhs; }


inline bool operator==(QChar lhs, const QString &rhs) noexcept
{ return rhs.size() == 1 && lhs == rhs.front(); }
inline bool operator< (QChar lhs, const QString &rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs.data(), rhs.size()) <  0; }
inline bool operator> (QChar lhs, const QString &rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs.data(), rhs.size()) >  0; }

inline bool operator!=(QChar lhs, const QString &rhs) noexcept { return !(lhs == rhs); }
inline bool operator<=(QChar lhs, const QString &rhs) noexcept { return !(lhs >  rhs); }
inline bool operator>=(QChar lhs, const QString &rhs) noexcept { return !(lhs <  rhs); }

inline bool operator==(const QString &lhs, QChar rhs) noexcept { return   rhs == lhs; }
inline bool operator!=(const QString &lhs, QChar rhs) noexcept { return !(rhs == lhs); }
inline bool operator< (const QString &lhs, QChar rhs) noexcept { return   rhs >  lhs; }
inline bool operator> (const QString &lhs, QChar rhs) noexcept { return   rhs <  lhs; }
inline bool operator<=(const QString &lhs, QChar rhs) noexcept { return !(rhs <  lhs); }
inline bool operator>=(const QString &lhs, QChar rhs) noexcept { return !(rhs >  lhs); }


inline bool operator==(QChar lhs, const QStringRef &rhs) noexcept
{ return rhs.size() == 1 && lhs == rhs.front(); }
inline bool operator< (QChar lhs, const QStringRef &rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs.data(), rhs.size()) <  0; }
inline bool operator> (QChar lhs, const QStringRef &rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs.data(), rhs.size()) >  0; }

inline bool operator!=(QChar lhs, const QStringRef &rhs) noexcept { return !(lhs == rhs); }
inline bool operator<=(QChar lhs, const QStringRef &rhs) noexcept { return !(lhs >  rhs); }
inline bool operator>=(QChar lhs, const QStringRef &rhs) noexcept { return !(lhs <  rhs); }

inline bool operator==(const QStringRef &lhs, QChar rhs) noexcept { return   rhs == lhs; }
inline bool operator!=(const QStringRef &lhs, QChar rhs) noexcept { return !(rhs == lhs); }
inline bool operator< (const QStringRef &lhs, QChar rhs) noexcept { return   rhs >  lhs; }
inline bool operator> (const QStringRef &lhs, QChar rhs) noexcept { return   rhs <  lhs; }
inline bool operator<=(const QStringRef &lhs, QChar rhs) noexcept { return !(rhs <  lhs); }
inline bool operator>=(const QStringRef &lhs, QChar rhs) noexcept { return !(rhs >  lhs); }


inline bool operator==(QChar lhs, QLatin1String rhs) noexcept
{ return rhs.size() == 1 && lhs == rhs.front(); }
inline bool operator< (QChar lhs, QLatin1String rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs) <  0; }
inline bool operator> (QChar lhs, QLatin1String rhs) noexcept
{ return QString::compare_helper(&lhs, 1, rhs) >  0; }

inline bool operator!=(QChar lhs, QLatin1String rhs) noexcept { return !(lhs == rhs); }
inline bool operator<=(QChar lhs, QLatin1String rhs) noexcept { return !(lhs >  rhs); }
inline bool operator>=(QChar lhs, QLatin1String rhs) noexcept { return !(lhs <  rhs); }

inline bool operator==(QLatin1String lhs, QChar rhs) noexcept { return   rhs == lhs; }
inline bool operator!=(QLatin1String lhs, QChar rhs) noexcept { return !(rhs == lhs); }
inline bool operator< (QLatin1String lhs, QChar rhs) noexcept { return   rhs >  lhs; }
inline bool operator> (QLatin1String lhs, QChar rhs) noexcept { return   rhs <  lhs; }
inline bool operator<=(QLatin1String lhs, QChar rhs) noexcept { return !(rhs <  lhs); }
inline bool operator>=(QLatin1String lhs, QChar rhs) noexcept { return !(rhs >  lhs); }


inline bool operator==(QStringView lhs, QStringView rhs) noexcept { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
inline bool operator!=(QStringView lhs, QStringView rhs) noexcept { return !(lhs == rhs); }
inline bool operator< (QStringView lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <  0; }
inline bool operator<=(QStringView lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
inline bool operator> (QStringView lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >  0; }
inline bool operator>=(QStringView lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >= 0; }


inline bool operator==(QStringView lhs, QChar rhs) noexcept { return lhs == QStringView(&rhs, 1); }
inline bool operator!=(QStringView lhs, QChar rhs) noexcept { return lhs != QStringView(&rhs, 1); }
inline bool operator< (QStringView lhs, QChar rhs) noexcept { return lhs <  QStringView(&rhs, 1); }
inline bool operator<=(QStringView lhs, QChar rhs) noexcept { return lhs <= QStringView(&rhs, 1); }
inline bool operator> (QStringView lhs, QChar rhs) noexcept { return lhs >  QStringView(&rhs, 1); }
inline bool operator>=(QStringView lhs, QChar rhs) noexcept { return lhs >= QStringView(&rhs, 1); }

inline bool operator==(QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) == rhs; }
inline bool operator!=(QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) != rhs; }
inline bool operator< (QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) <  rhs; }
inline bool operator<=(QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) <= rhs; }
inline bool operator> (QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) >  rhs; }
inline bool operator>=(QChar lhs, QStringView rhs) noexcept { return QStringView(&lhs, 1) >= rhs; }


inline bool operator==(QStringView lhs, QLatin1String rhs) noexcept { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
inline bool operator!=(QStringView lhs, QLatin1String rhs) noexcept { return !(lhs == rhs); }
inline bool operator< (QStringView lhs, QLatin1String rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <  0; }
inline bool operator<=(QStringView lhs, QLatin1String rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
inline bool operator> (QStringView lhs, QLatin1String rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >  0; }
inline bool operator>=(QStringView lhs, QLatin1String rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >= 0; }

inline bool operator==(QLatin1String lhs, QStringView rhs) noexcept { return lhs.size() == rhs.size() && QtPrivate::compareStrings(lhs, rhs) == 0; }
inline bool operator!=(QLatin1String lhs, QStringView rhs) noexcept { return !(lhs == rhs); }
inline bool operator< (QLatin1String lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <  0; }
inline bool operator<=(QLatin1String lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) <= 0; }
inline bool operator> (QLatin1String lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >  0; }
inline bool operator>=(QLatin1String lhs, QStringView rhs) noexcept { return QtPrivate::compareStrings(lhs, rhs) >= 0; }



inline  bool operator==(const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) == 0; }
inline  bool operator!=(const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) != 0; }
inline  bool operator< (const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) <  0; }
inline  bool operator> (const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) >  0; }
inline  bool operator<=(const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) <= 0; }
inline  bool operator>=(const QStringRef &lhs, const QByteArray &rhs) { return lhs.compare(rhs) >= 0; }

inline  bool operator==(const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) == 0; }
inline  bool operator!=(const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) != 0; }
inline  bool operator< (const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) >  0; }
inline  bool operator> (const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) <  0; }
inline  bool operator<=(const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) >= 0; }
inline  bool operator>=(const QByteArray &lhs, const QStringRef &rhs) { return rhs.compare(lhs) <= 0; }


inline  bool QStringRef::operator==(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) == 0; }
inline  bool QStringRef::operator!=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) != 0; }
inline  bool QStringRef::operator<(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) < 0; }
inline  bool QStringRef::operator<=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) <= 0; }
inline  bool QStringRef::operator>(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) > 0; }
inline  bool QStringRef::operator>=(const char *s) const
{ return QString::compare_helper(constData(), size(), s, -1) >= 0; }

inline  bool operator==(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) == 0; }
inline  bool operator!=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) != 0; }
inline  bool operator<(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) > 0; }
inline  bool operator<=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) >= 0; }
inline  bool operator>(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) < 0; }
inline  bool operator>=(const char *s1, const QStringRef &s2)
{ return QString::compare_helper(s2.constData(), s2.size(), s1, -1) <= 0; }
#line 1962 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

inline int QString::localeAwareCompare(const QStringRef &s) const
{ return localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QString::localeAwareCompare(const QString& s1, const QStringRef& s2)
{ return localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }
inline int QStringRef::localeAwareCompare(const QString &s) const
{ return QString::localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s) const
{ return QString::localeAwareCompare_helper(constData(), length(), s.constData(), s.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s1, const QString &s2)
{ return QString::localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }
inline int QStringRef::localeAwareCompare(const QStringRef &s1, const QStringRef &s2)
{ return QString::localeAwareCompare_helper(s1.constData(), s1.length(), s2.constData(), s2.length()); }


inline bool QStringRef::contains(const QString &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QStringRef::contains(const QStringRef &s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
#line 1982 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
inline bool QStringRef::contains(QLatin1String s, Qt::CaseSensitivity cs) const
{ return indexOf(s, 0, cs) != -1; }
inline bool QStringRef::contains(QChar c, Qt::CaseSensitivity cs) const
{ return indexOf(c, 0, cs) != -1; }
inline bool QStringRef::contains(QStringView s, Qt::CaseSensitivity cs) const noexcept
{ return indexOf(s, 0, cs) != -1; }

inline QString &QString::insert(int i, const QStringRef &s)
{ return insert(i, s.constData(), s.length()); }


inline QString operator+(const QString &s1, const QStringRef &s2)
{ QString t; t.reserve(s1.size() + s2.size()); t += s1; t += s2; return t; }
inline QString operator+(const QStringRef &s1, const QString &s2)
{ QString t; t.reserve(s1.size() + s2.size()); t += s1; t += s2; return t; }
inline QString operator+(const QStringRef &s1, QLatin1String s2)
{ QString t; t.reserve(s1.size() + s2.size()); t += s1; t += s2; return t; }
inline QString operator+(QLatin1String s1, const QStringRef &s2)
{ QString t; t.reserve(s1.size() + s2.size()); t += s1; t += s2; return t; }
inline QString operator+(const QStringRef &s1, const QStringRef &s2)
{ QString t; t.reserve(s1.size() + s2.size()); t += s1; t += s2; return t; }
inline QString operator+(const QStringRef &s1, QChar s2)
{ QString t; t.reserve(s1.size() + 1); t += s1; t += s2; return t; }
inline QString operator+(QChar s1, const QStringRef &s2)
{ QString t; t.reserve(1 + s2.size()); t += s1; t += s2; return t; }
#line 2008 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

namespace Qt {




#line 2015 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
}

namespace QtPrivate {

inline const QString &asString(const QString &s)    { return s; }
inline QString &&asString(QString &&s)              { return std::move(s); }
}





namespace QtPrivate {

struct ArgBase {
    enum Tag : uchar { L1, U8, U16 } tag;
};

struct QStringViewArg : ArgBase {
    QStringView string;
    QStringViewArg() = default;
    constexpr explicit QStringViewArg(QStringView v) noexcept : ArgBase{U16}, string{v} {}
};

struct QLatin1StringArg : ArgBase {
    QLatin1String string;
    QLatin1StringArg() = default;
    constexpr explicit QLatin1StringArg(QLatin1String v) noexcept : ArgBase{L1}, string{v} {}
};

 __declspec(dllimport) QString argToQString(QStringView pattern, size_t n, const ArgBase **args);
 __declspec(dllimport) QString argToQString(QLatin1String pattern, size_t n, const ArgBase **args);

template <typename StringView, typename...Args>
 __forceinline QString argToQStringDispatch(StringView pattern, const Args &...args)
{
    const ArgBase *argBases[] = {&args...,  nullptr};
    return QtPrivate::argToQString(pattern, sizeof...(Args), argBases);
}

                 inline QStringViewArg   qStringLikeToArg(const QString &s) noexcept { return QStringViewArg{qToStringViewIgnoringNull(s)}; }
constexpr inline QStringViewArg   qStringLikeToArg(QStringView s) noexcept { return QStringViewArg{s}; }
                 inline QStringViewArg   qStringLikeToArg(const QChar &c) noexcept { return QStringViewArg{QStringView{&c, 1}}; }
constexpr inline QLatin1StringArg qStringLikeToArg(QLatin1String s) noexcept { return QLatin1StringArg{s}; }

} 

template <typename...Args>
__forceinline
QString QStringView::arg(Args &&...args) const
{
    return QtPrivate::argToQStringDispatch(*this, QtPrivate::qStringLikeToArg(args)...);
}

template <typename...Args>
__forceinline
QString QLatin1String::arg(Args &&...args) const
{
    return QtPrivate::argToQStringDispatch(*this, QtPrivate::qStringLikeToArg(args)...);
}





#line 2081 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"

#line 2083 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstring.h"
#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpair.h"















































template <class T1, class T2>
struct QPair
{
    typedef T1 first_type;
    typedef T2 second_type;

    constexpr QPair()
        noexcept((std::is_nothrow_default_constructible<T1>::value &&
                              std::is_nothrow_default_constructible<T2>::value))
        : first(), second() {}
    constexpr QPair(const T1 &t1, const T2 &t2)
        noexcept((std::is_nothrow_copy_constructible<T1>::value &&
                              std::is_nothrow_copy_constructible<T2>::value))
        : first(t1), second(t2) {}
    

    template <typename TT1, typename TT2>
    constexpr QPair(const QPair<TT1, TT2> &p)
        noexcept((std::is_nothrow_constructible<T1, TT1&>::value &&
                              std::is_nothrow_constructible<T2, TT2&>::value))
        : first(p.first), second(p.second) {}
    template <typename TT1, typename TT2>
    constexpr QPair &operator=(const QPair<TT1, TT2> &p)
        noexcept((std::is_nothrow_assignable<T1, TT1&>::value &&
                              std::is_nothrow_assignable<T2, TT2&>::value))
    { first = p.first; second = p.second; return *this; }
    template <typename TT1, typename TT2>
    constexpr QPair(QPair<TT1, TT2> &&p)
        noexcept((std::is_nothrow_constructible<T1, TT1>::value &&
                              std::is_nothrow_constructible<T2, TT2>::value))
        
        : first(static_cast<TT1 &&>(p.first)), second(static_cast<TT2 &&>(p.second)) {}
    template <typename TT1, typename TT2>
    constexpr QPair &operator=(QPair<TT1, TT2> &&p)
        noexcept((std::is_nothrow_assignable<T1, TT1>::value &&
                              std::is_nothrow_assignable<T2, TT2>::value))
    { first = std::move(p.first); second = std::move(p.second); return *this; }

    constexpr void swap(QPair &other)
        noexcept(noexcept(qSwap(other.first, other.first)) && noexcept(qSwap(other.second, other.second)))
    {
        
        qSwap(first, other.first);
        qSwap(second, other.second);
    }

    T1 first;
    T2 second;
};


template<class T1, class T2>
QPair(T1, T2) -> QPair<T1, T2>;
#line 102 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpair.h"

template <typename T1, typename T2>
void swap(QPair<T1, T2> &lhs, QPair<T1, T2> &rhs) noexcept(noexcept(lhs.swap(rhs)))
{ lhs.swap(rhs); }



template<class T1, class T2>
class QTypeInfo<QPair<T1, T2> > : public QTypeInfoMerger<QPair<T1, T2>, T1, T2> {}; 

template <class T1, class T2>
constexpr inline bool operator==(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(p1.first == p2.first && p1.second == p2.second))
{ return p1.first == p2.first && p1.second == p2.second; }

template <class T1, class T2>
constexpr inline bool operator!=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(!(p1 == p2)))
{ return !(p1 == p2); }

template <class T1, class T2>
constexpr inline bool operator<(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(p1.first < p2.first || (!(p2.first < p1.first) && p1.second < p2.second)))
{
    return p1.first < p2.first || (!(p2.first < p1.first) && p1.second < p2.second);
}

template <class T1, class T2>
constexpr inline bool operator>(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(p2 < p1))
{
    return p2 < p1;
}

template <class T1, class T2>
constexpr inline bool operator<=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(!(p2 < p1)))
{
    return !(p2 < p1);
}

template <class T1, class T2>
constexpr inline bool operator>=(const QPair<T1, T2> &p1, const QPair<T1, T2> &p2)
    noexcept(noexcept(!(p1 < p2)))
{
    return !(p1 < p2);
}

template <class T1, class T2>
constexpr inline QPair<T1, T2> qMakePair(const T1 &x, const T2 &y)
    noexcept(noexcept(QPair<T1, T2>(x, y)))
{
    return QPair<T1, T2>(x, y);
}



#line 160 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qpair.h"
#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {
		
template<class _InIt,
	class _Ty,
	class _Fn>
	[[nodiscard]] inline _Ty accumulate(const _InIt _First, const _InIt _Last, _Ty _Val, _Fn _Reduce_op)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		_Val = _Reduce_op(_Val, *_UFirst);
		}

	return (_Val);
	}

template<class _InIt,
	class _Ty>
	[[nodiscard]] inline _Ty accumulate(const _InIt _First, const _InIt _Last, _Ty _Val)
	{	
	return (::std:: accumulate(_First, _Last, _Val, plus<>()));
	}


		
 
template<class _InIt,
	class _Ty,
	class _BinOp>
	using _Plus_on_arithmetic_ranges_reduction_t = bool_constant<conjunction_v<
		is_arithmetic<_Ty>,
		is_arithmetic<remove_pointer_t<_InIt>>,
		is_same<plus<>, _BinOp>>>;

#pragma float_control(precise, off, push)
template<class _InIt,
	class _Ty,
	class _BinOp> inline
	_Ty _Reduce_unchecked1(_InIt _First, const _InIt _Last, _Ty _Val, _BinOp, true_type)
	{	
#pragma loop(ivdep)
	for (; _First != _Last; ++_First)
		{
		_Val += *_First;
		}

	return (_Val);
	}
#pragma float_control(pop)

 




#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _Ty,
	class _BinOp> inline
	_Ty _Reduce_unchecked1(_InIt _First, const _InIt _Last, _Ty _Val, _BinOp _Reduce_op, false_type)
	{	
	for (; _First != _Last; ++_First)
		{
		_Val = _Reduce_op(::std:: move(_Val), *_First); 
		}

	return (_Val);
	}

template<class _InIt,
	class _Ty,
	class _BinOp> inline
	_Ty _Reduce_unchecked(const _InIt _First, const _InIt _Last, _Ty _Val, _BinOp _Reduce_op)
	{	
	return (_Reduce_unchecked1(_First, _Last, ::std:: move(_Val), _Reduce_op,
		_Plus_on_arithmetic_ranges_reduction_t<_InIt, _Ty, _BinOp>{}));
	}

template<class _InIt,
	class _Ty,
	class _BinOp>
	[[nodiscard]] inline _Ty reduce(const _InIt _First, const _InIt _Last, _Ty _Val, _BinOp _Reduce_op)
	{	
	_Adl_verify_range(_First, _Last);
	return (_Reduce_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
		::std:: move(_Val), _Pass_fn(_Reduce_op)));
	}

template<class _InIt,
	class _Ty>
	[[nodiscard]] inline _Ty reduce(const _InIt _First, const _InIt _Last, _Ty _Val)
	{	
	_Adl_verify_range(_First, _Last);
	return (_Reduce_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
		::std:: move(_Val), plus<>{}));
	}

template<class _InIt>
	[[nodiscard]] inline _Iter_value_t<_InIt> reduce(const _InIt _First, const _InIt _Last)
	{	
	_Adl_verify_range(_First, _Last);
	return (_Reduce_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
		_Iter_value_t<_InIt>{}, plus<>{}));
	}

template<class _ExPo,
	class _FwdIt,
	class _Ty,
	class _BinOp,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Ty reduce(_ExPo&& _Exec, _FwdIt _First, _FwdIt _Last, _Ty _Val, _BinOp _Reduce_op) noexcept;

template<class _ExPo,
	class _FwdIt,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Ty reduce(_ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last, _Ty _Val) noexcept
	{	
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: reduce(::std:: forward<_ExPo>(_Exec), _First, _Last, ::std:: move(_Val), plus<>{}));
	}

template<class _ExPo,
	class _FwdIt,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Iter_value_t<_FwdIt> reduce(_ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last) noexcept
	{	
	static_assert(_Is_fwd_iter_v<_FwdIt>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: reduce(::std:: forward<_ExPo>(_Exec), _First, _Last, _Iter_value_t<_FwdIt>{}, plus<>{}));
	}
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2>
	[[nodiscard]] inline _Ty inner_product(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val, _BinOp1 _Reduce_op, _BinOp2 _Transform_op)
	{	
	_Adl_verify_range(_First1, _Last1);
	auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	for (; _UFirst1 != _ULast1; ++_UFirst1, (void)++_UFirst2)
		{
		_Val = _Reduce_op(_Val, _Transform_op(*_UFirst1, *_UFirst2)); 
		}

	return (_Val);
	}

 













#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt1,
	class _InIt2,
	class _Ty>
	[[nodiscard]] inline _Ty inner_product(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Ty _Val)
	{	
	return (::std:: inner_product(_First1, _Last1, _First2, ::std:: move(_Val), plus<>(), multiplies<>()));
	}

 









#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"


		
 
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2>
	using _Default_ops_transform_reduce_t = bool_constant<conjunction_v<
		is_arithmetic<_Ty>,
		is_arithmetic<remove_pointer_t<_InIt1>>,
		is_arithmetic<remove_pointer_t<_InIt2>>,
		is_same<plus<>, _BinOp1>,
		is_same<multiplies<>, _BinOp2>>>;

#pragma float_control(precise, off, push)
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2> inline
	_Ty _Transform_reduce_unchecked1(_InIt1 _First1, const _InIt1 _Last1, _InIt2 _First2, _Ty _Val,
		_BinOp1, _BinOp2, true_type)
	{	
#pragma loop(ivdep)
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		_Val += *_First1 * *_First2;
		}

	return (_Val);
	}
#pragma float_control(pop)
 






#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2> inline
	_Ty _Transform_reduce_unchecked1(_InIt1 _First1, const _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val,
		_BinOp1 _Reduce_op, _BinOp2 _Transform_op, false_type)
	{	
#pragma loop(ivdep)
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		{
		_Val = _Reduce_op(::std:: move(_Val), _Transform_op(*_First1, *_First2)); 
		}

	return (_Val);
	}

template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2> inline
	_Ty _Transform_reduce_unchecked(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Ty _Val,
		_BinOp1 _Reduce_op, _BinOp2 _Transform_op)
	{	
	return (_Transform_reduce_unchecked1(_First1, _Last1, _First2, ::std:: move(_Val), _Reduce_op, _Transform_op,
		_Default_ops_transform_reduce_t<_InIt1, _InIt2, _Ty, _BinOp1, _BinOp2>{}));
	}

template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2>
	[[nodiscard]] inline _Ty transform_reduce(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Ty _Val,
		_BinOp1 _Reduce_op, _BinOp2 _Transform_op)
	{	
	_Adl_verify_range(_First1, _Last1);
	const auto _UFirst1 = _Get_unwrapped(_First1);
	const auto _ULast1 = _Get_unwrapped(_Last1);
	const auto _UFirst2 = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
	return (_Transform_reduce_unchecked(_UFirst1, _ULast1, _UFirst2, ::std:: move(_Val),
		_Pass_fn(_Reduce_op), _Pass_fn(_Transform_op)));
	}

  













#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt1,
	class _InIt2,
	class _Ty>
	[[nodiscard]] inline _Ty transform_reduce(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Ty _Val)
	{	
	return (::std:: transform_reduce(_First1, _Last1, _First2, ::std:: move(_Val), plus<>{}, multiplies<>{}));
	}

  








#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp>
	[[nodiscard]] inline _Ty transform_reduce(const _InIt _First, const _InIt _Last, _Ty _Val,
		_BinOp _Reduce_op, _UnaryOp _Transform_op)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst)
		{
		_Val = _Reduce_op(::std:: move(_Val), _Transform_op(*_UFirst)); 
		}

	return (_Val);
	}

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	class _BinOp1,
	class _BinOp2,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Ty transform_reduce(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _Ty _Val,
		_BinOp1 _Reduce_op, _BinOp2 _Transform_op) noexcept; 

  
















#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Ty transform_reduce(_ExPo&& _Exec, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2,
		_Ty _Val) noexcept 
	{	
	static_assert(_Is_fwd_iter_v<_FwdIt1>, "Parallel algorithms require forward iterators or stronger.");
	static_assert(_Is_fwd_iter_v<_FwdIt2>, "Parallel algorithms require forward iterators or stronger.");
	return (::std:: transform_reduce(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, ::std:: move(_Val),
		plus<>{}, multiplies<>{}));
	}

  













#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp,
	_Enable_if_execution_policy_t<_ExPo> = 0>
	[[nodiscard]] inline _Ty transform_reduce(_ExPo&& _Exec, const _FwdIt _First1, const _FwdIt _Last1, _Ty _Val,
		_BinOp _Reduce_op, _UnaryOp _Transform_op) noexcept; 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _BinOp> inline
	_OutIt partial_sum(const _InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Reduce_op)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	if (_UFirst != _ULast)
		{
		_Iter_value_t<_InIt> _Val(*_UFirst);
		for (;;)
			{
			*_UDest = _Val;
			++_UDest;
			++_UFirst;
			if (_UFirst == _ULast)
				{
				break;
				}

			_Val = _Reduce_op(_Val, *_UFirst);
			}
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 









#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt> inline
	_OutIt partial_sum(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	return (::std:: partial_sum(_First, _Last, _Dest, plus<>()));
	}

 







#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"


		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp> inline
	_OutIt _Exclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest, _Ty _Val, _BinOp _Reduce_op)
	{	
	if (_First != _Last)
		{
		for (;;)
			{
			_Ty _Tmp(_Reduce_op(_Val, *_First)); 
			*_Dest = _Val;
			++_Dest;
			++_First;
			if (_First == _Last)
				{
				break;
				}

			_Val = ::std:: move(_Tmp); 
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp> inline
	_OutIt exclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest, _Ty _Val, _BinOp _Reduce_op)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Exclusive_scan_unchecked(_UFirst, _ULast, _UDest, ::std:: move(_Val), _Pass_fn(_Reduce_op)));
	return (_Dest);
	}

 











#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt exclusive_scan(const _InIt _First, const _InIt _Last, const _OutIt _Dest, _Ty _Val)
	{	
	return (::std:: exclusive_scan(_First, _Last, _Dest, ::std:: move(_Val), plus<>{}));
	}

 








#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	class _BinOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 exclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _FwdIt2 _Dest,
		_Ty _Val, _BinOp _Reduce_op) noexcept;

 













#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 exclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, const _FwdIt2 _Dest,
		_Ty _Val) noexcept
	{	
	return (::std:: exclusive_scan(::std:: forward<_ExPo>(_Exec), _First, _Last, _Dest, ::std:: move(_Val), plus<>{}));
	}

 











#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _BinOp,
	class _Ty> inline
	_OutIt _Inclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Reduce_op, _Ty _Val)
	{	
	for (; _First != _Last; ++_First)
		{
		_Val = _Reduce_op(::std:: move(_Val), *_First); 
		*_Dest = _Val;
		++_Dest;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp> inline
	_OutIt inclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Reduce_op, _Ty _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Inclusive_scan_unchecked(_UFirst, _ULast, _UDest, _Pass_fn(_Reduce_op), ::std:: move(_Val)));
	return (_Dest);
	}

 











#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt,
	class _BinOp>
	_OutIt _Inclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Reduce_op)
	{	
	if (_First != _Last)
		{
		_Iter_value_t<_InIt> _Val = *_First; 
		for (;;)
			{
			*_Dest = _Val;
			++_Dest;
			++_First;
			if (_First == _Last)
				{
				break;
				}

			_Val = _Reduce_op(::std:: move(_Val), *_First); 
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _BinOp> inline
	_OutIt inclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Reduce_op)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Inclusive_scan_unchecked(_UFirst, _ULast, _UDest, _Pass_fn(_Reduce_op)));
	return (_Dest);
	}

 










#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt> inline
	_OutIt inclusive_scan(const _InIt _First, const _InIt _Last, const _OutIt _Dest)
	{	
	return (::std:: inclusive_scan(_First, _Last, _Dest, plus<>{}));
	}

 







#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _BinOp,
	class _Ty,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 inclusive_scan(_ExPo&& _Exec,
		_FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest, _BinOp _Reduce_op, _Ty _Val) noexcept;

 















#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _BinOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 inclusive_scan(_ExPo&& _Exec,
		_FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest, _BinOp _Reduce_op) noexcept;

 














#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 inclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, const _FwdIt2 _Dest) noexcept
	{	
	return (::std:: inclusive_scan(::std:: forward<_ExPo>(_Exec), _First, _Last, _Dest, plus<>()));
	}

 










#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt _Transform_exclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest, _Ty _Val,
		_BinOp _Reduce_op, _UnaryOp _Transform_op)
	{	
	if (_First != _Last)
		{
		for (;;)
			{
			_Ty _Tmp(_Reduce_op(_Val, _Transform_op(*_First))); 
			*_Dest = _Val;
			++_Dest;
			++_First;
			if (_First == _Last)
				{
				break;
				}

			_Val = ::std:: move(_Tmp); 
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt transform_exclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest, _Ty _Val,
		_BinOp _Reduce_op, _UnaryOp _Transform_op)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Transform_exclusive_scan_unchecked(_UFirst, _ULast, _UDest, ::std:: move(_Val),
			_Pass_fn(_Reduce_op), _Pass_fn(_Transform_op)));
	return (_Dest);
	}

 












#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _OutIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_OutIt transform_exclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _OutIt _Dest, _Ty _Val,
		_BinOp _Reduce_op, _UnaryOp _Transform_op) noexcept;

 















#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt _Transform_inclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op, _Ty _Val)
	{	
	for (; _First != _Last; ++_First)
		{
		_Val = _Reduce_op(::std:: move(_Val), _Transform_op(*_First)); 
		*_Dest = _Val;
		++_Dest;
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Ty,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt transform_inclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op, _Ty _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Transform_inclusive_scan_unchecked(_UFirst, _ULast, _UDest,
		_Pass_fn(_Reduce_op), _Pass_fn(_Transform_op), ::std:: move(_Val)));
	return (_Dest);
	}

 












#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt _Transform_inclusive_scan_unchecked(_InIt _First, const _InIt _Last, _OutIt _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op)
	{	
	if (_First != _Last)
		{
		auto _Val = _Transform_op(*_First); 
		for (;;)
			{
			*_Dest = _Val;
			++_Dest;
			++_First;
			if (_First == _Last)
				{
				break;
				}

			_Val = _Reduce_op(::std:: move(_Val), _Transform_op(*_First)); 
			}
		}

	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _BinOp,
	class _UnaryOp> inline
	_OutIt transform_inclusive_scan(const _InIt _First, const _InIt _Last, _OutIt _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op)
	{	
	_Adl_verify_range(_First, _Last);
	const auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	_Seek_wrapped(_Dest,
		_Transform_inclusive_scan_unchecked(_UFirst, _ULast, _UDest, _Pass_fn(_Reduce_op), _Pass_fn(_Transform_op)));
	return (_Dest);
	}

 











#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _Ty,
	class _BinOp,
	class _UnaryOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 transform_inclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _FwdIt2 _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op, _Ty _Val) noexcept;

 















#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _BinOp,
	class _UnaryOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 transform_inclusive_scan(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _FwdIt2 _Dest,
		_BinOp _Reduce_op, _UnaryOp _Transform_op) noexcept;

 














#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _BinOp> inline
	_OutIt adjacent_difference(const _InIt _First, const _InIt _Last, _OutIt _Dest, _BinOp _Func)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
	if (_UFirst != _ULast)
		{
		_Iter_value_t<_InIt> _Val = *_UFirst;
		*_UDest = _Val;
		while (++_UFirst != _ULast)
			{	
			_Iter_value_t<_InIt> _Tmp = *_UFirst;
			*++_UDest = _Func(_Tmp, _Val);
			_Val = ::std:: move(_Tmp);
			}

		++_UDest;
		}

	_Seek_wrapped(_Dest, _UDest);
	return (_Dest);
	}

 









#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _InIt,
	class _OutIt> inline
	_OutIt adjacent_difference(const _InIt _First, const _InIt _Last, const _OutIt _Dest)
	{	
	return (::std:: adjacent_difference(_First, _Last, _Dest, minus<>()));
	}

 







#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"


template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	class _BinOp,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 adjacent_difference(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, _FwdIt2 _Dest,
		_BinOp _Diff_op) noexcept;

 












#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

template<class _ExPo,
	class _FwdIt1,
	class _FwdIt2,
	_Enable_if_execution_policy_t<_ExPo> = 0> inline
	_FwdIt2 adjacent_difference(_ExPo&& _Exec, const _FwdIt1 _First, const _FwdIt1 _Last, const _FwdIt2 _Dest) noexcept
	{	
	return (::std:: adjacent_difference(::std:: forward<_ExPo>(_Exec), _First, _Last, _Dest, minus<>()));
	}

 










#line 1148 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"
#line 1149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"

		
template<class _FwdIt,
	class _Ty> inline
	void iota(_FwdIt _First, _FwdIt _Last, _Ty _Val)
	{	
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	for (; _UFirst != _ULast; ++_UFirst, (void)++_Val)
		{
		*_UFirst = _Val;
		}
	}


	
template<class _Signed,
	enable_if_t<is_signed_v<_Signed>, int> = 0>
	constexpr make_unsigned_t<_Signed> _Abs_u(const _Signed _Val) noexcept
	{	
	using _Unsigned = make_unsigned_t<_Signed>;
	if (_Val < 0)
		{
		return (static_cast<_Unsigned>(0) - static_cast<_Unsigned>(_Val));
		}

	return (static_cast<_Unsigned>(_Val));
	}

template<class _Unsigned,
	enable_if_t<is_unsigned_v<_Unsigned>, int> = 0>
	constexpr _Unsigned _Abs_u(const _Unsigned _Val) noexcept
	{	
	return (_Val);
	}

	
template<class _Unsigned>
	constexpr unsigned long _Stl_bitscan_forward(_Unsigned _Mask) noexcept
	{	
		
	static_assert(is_unsigned_v<_Unsigned>, "Bitscan only works on bits");
	unsigned long _Count = 0;
	if (_Mask != 0)
		{
		while ((_Mask & 1U) == 0)
			{
			_Mask >>= 1;
			++_Count;
			}
		}

	return (_Count);
	}

	
template<class _Mt,
	class _Nt>
	[[nodiscard]] constexpr common_type_t<_Mt, _Nt> gcd(const _Mt _Mx, const _Nt _Nx) noexcept 
	{	
	static_assert(_Is_nonbool_integral<_Mt>::value && _Is_nonbool_integral<_Nt>::value,
		"GCD requires nonbool integral types");

	using _Common = common_type_t<_Mt, _Nt>;
	using _Common_unsigned = make_unsigned_t<_Common>;
	_Common_unsigned _Mx_magnitude = _Abs_u(_Mx);
	_Common_unsigned _Nx_magnitude = _Abs_u(_Nx);
	if (_Mx_magnitude == 0U)
		{
		return (static_cast<_Common>(_Nx_magnitude));
		}

	if (_Nx_magnitude == 0U)
		{
		return (static_cast<_Common>(_Mx_magnitude));
		}

	const auto _Mx_trailing_zeroes = _Stl_bitscan_forward(_Mx_magnitude);
	const auto _Common_factors_of_2 = _Min_value(_Mx_trailing_zeroes,
		_Stl_bitscan_forward(_Nx_magnitude));
	_Nx_magnitude >>= _Common_factors_of_2;
	_Mx_magnitude >>= _Mx_trailing_zeroes;
	do
		{
		_Nx_magnitude >>= _Stl_bitscan_forward(_Nx_magnitude);
		if (_Mx_magnitude > _Nx_magnitude)
			{
			_Common_unsigned _Temp = _Mx_magnitude;
			_Mx_magnitude = _Nx_magnitude;
			_Nx_magnitude = _Temp;
			}

		_Nx_magnitude -= _Mx_magnitude;
		}
	while (_Nx_magnitude != 0U);

	return (static_cast<_Common>(_Mx_magnitude << _Common_factors_of_2));
	}

	
template<class _Mt,
	class _Nt>
	[[nodiscard]] constexpr common_type_t<_Mt, _Nt> lcm(const _Mt _Mx, const _Nt _Nx) noexcept 
	{	
	static_assert(_Is_nonbool_integral<_Mt>::value && _Is_nonbool_integral<_Nt>::value,
		"LCM requires nonbool integral types");
	using _Common = common_type_t<_Mt, _Nt>;
	using _Common_unsigned = make_unsigned_t<_Common>;
	const _Common_unsigned _Mx_magnitude = _Abs_u(_Mx);
	const _Common_unsigned _Nx_magnitude = _Abs_u(_Nx);
	if (_Mx_magnitude == 0 || _Nx_magnitude == 0)
		{
		return (static_cast<_Common>(0));
		}

	return (static_cast<_Common>((_Mx_magnitude / ::std:: gcd(_Mx_magnitude, _Nx_magnitude))
		* _Nx_magnitude));
	}
#line 1269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"
#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\numeric"





#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

#pragma once









 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

#pragma once







 
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Mylist,
	class _Base = _Iterator_base0>
	class _List_unchecked_const_iterator
		: public _Base
	{	
public:
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mylist::_Nodeptr;
	using value_type = typename _Mylist::value_type;
	using difference_type = typename _Mylist::difference_type;
	using pointer = typename _Mylist::const_pointer;
	using reference = const value_type&;

	_List_unchecked_const_iterator()
		: _Ptr()
		{	
		}

	_List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Ptr(_Pnode)
		{	
		this->_Adopt(_Plist);
		}

	[[nodiscard]] reference operator*() const
		{	
		return (_Ptr->_Myval);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_List_unchecked_const_iterator& operator++()
		{	
		_Ptr = _Ptr->_Next;
		return (*this);
		}

	_List_unchecked_const_iterator operator++(int)
		{	
		_List_unchecked_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_List_unchecked_const_iterator& operator--()
		{	
		_Ptr = _Ptr->_Prev;
		return (*this);
		}

	_List_unchecked_const_iterator operator--(int)
		{	
		_List_unchecked_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] bool operator==(const _List_unchecked_const_iterator& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _List_unchecked_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	_Nodeptr _Ptr;	
	};

	
template<class _Mylist>
	class _List_unchecked_iterator
		: public _List_unchecked_const_iterator<_Mylist>
	{	
public:
	using _Mybase = _List_unchecked_const_iterator<_Mylist>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mylist::_Nodeptr;
	using value_type = typename _Mylist::value_type;
	using difference_type = typename _Mylist::difference_type;
	using pointer = typename _Mylist::pointer;
	using reference = value_type&;

	_List_unchecked_iterator()
		{	
		}

	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_List_unchecked_iterator& operator++()
		{	
		++(*(_Mybase *)this);
		return (*this);
		}

	_List_unchecked_iterator operator++(int)
		{	
		_List_unchecked_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_List_unchecked_iterator& operator--()
		{	
		--(*(_Mybase *)this);
		return (*this);
		}

	_List_unchecked_iterator operator--(int)
		{	
		_List_unchecked_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

	
template<class _Mylist>
	class _List_const_iterator
		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
	{	
public:
	using _Mybase = _List_unchecked_const_iterator<_Mylist, _Iterator_base>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mylist::_Nodeptr;
	using value_type = typename _Mylist::value_type;
	using difference_type = typename _Mylist::difference_type;
	using pointer = typename _Mylist::const_pointer;
	using reference = const value_type&;

	_List_const_iterator()
		: _Mybase()
		{	
		}

	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
 



#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		return (this->_Ptr->_Myval);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_List_const_iterator& operator++()
		{	
 



#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		this->_Ptr = this->_Ptr->_Next;
		return (*this);
		}

	_List_const_iterator operator++(int)
		{	
		_List_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_List_const_iterator& operator--()
		{	
		const auto _New_ptr = this->_Ptr->_Prev;
 



#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		this->_Ptr = _New_ptr;
		return (*this);
		}

	_List_const_iterator operator--(int)
		{	
		_List_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] bool operator==(const _List_const_iterator& _Right) const
		{	
 

#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		return (this->_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _List_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

 





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

	[[nodiscard]] _List_unchecked_const_iterator<_Mylist> _Unwrapped() const
		{
		return (_List_unchecked_const_iterator<_Mylist>(this->_Ptr, static_cast<const _Mylist *>(this->_Getcont())));
		}

	void _Seek_to(const _List_unchecked_const_iterator<_Mylist> _It)
		{
		this->_Ptr = _It._Ptr;
		}
	};

	
template<class _Mylist>
	class _List_iterator
		: public _List_const_iterator<_Mylist>
	{	
public:
	using _Mybase = _List_const_iterator<_Mylist>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mylist::_Nodeptr;
	using value_type = typename _Mylist::value_type;
	using difference_type = typename _Mylist::difference_type;
	using pointer = typename _Mylist::pointer;
	using reference = value_type&;

	_List_iterator()
		{	
		}

	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_List_iterator& operator++()
		{	
		++(*(_Mybase *)this);
		return (*this);
		}

	_List_iterator operator++(int)
		{	
		_List_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_List_iterator& operator--()
		{	
		--(*(_Mybase *)this);
		return (*this);
		}

	_List_iterator operator--(int)
		{	
		_List_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] _List_unchecked_iterator<_Mylist> _Unwrapped() const
		{
		return (_List_unchecked_iterator<_Mylist>(this->_Ptr, static_cast<const _Mylist *>(this->_Getcont())));
		}
	};

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference,
	class _Nodeptr_type>
	struct _List_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	using _Nodeptr = _Nodeptr_type;
	};

template<class _Value_type,
	class _Voidptr>
	struct _List_node
		{	
		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _List_node>;
		_Nodeptr _Next;	
		_Nodeptr _Prev;	
		_Value_type _Myval;	

		_List_node& operator=(const _List_node&) = delete;

		template<class _Alloc>
			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
			{
			using _Alnode = _Rebind_alloc_t<_Alloc, _List_node>;
			using _Alnode_traits = allocator_traits<_Alnode>;
			_Alnode _Node_alloc(_Al);
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Next));
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Prev));
			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
			}
		};

template<class _Ty>
	struct _List_simple_types
		: public _Simple_types<_Ty>
	{	
	using _Node = _List_node<_Ty, void *>;
	using _Nodeptr = _Node *;
	};

template<class _Ty,
	class _Alloc>
	struct _List_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;
	using _Node = _List_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
	using _Alnode_traits = allocator_traits<_Alnode>;
	using _Nodeptr = typename _Alnode_traits::pointer;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
		_List_simple_types<_Ty>,
		_List_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&,
			_Nodeptr>>;
	};

		
template<class _Val_types>
	class _List_val
		: public _Container_base
	{	
public:
	using _Nodeptr = typename _Val_types::_Nodeptr;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	_List_val()
		: _Myhead(),
		_Mysize(0)
		{	
		}

	_Nodeptr _Myhead;	
	size_type _Mysize;	
	};

		
template<class _Alloc_types>
	class _List_alloc
	{	
public:
	using _Alnode = typename _Alloc_types::_Alnode;
	using _Alnode_traits = typename _Alloc_types::_Alnode_traits;
	using _Alproxy = _Rebind_alloc_t<_Alnode, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Node = typename _Alloc_types::_Node;
	using _Nodeptr = typename _Alloc_types::_Nodeptr;

	using _Val_types = typename _Alloc_types::_Val_types;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = _List_iterator<_List_val<_Val_types>>;
	using const_iterator = _List_const_iterator<_List_val<_Val_types>>;
	using _Unchecked_iterator = _List_unchecked_iterator<_List_val<_Val_types>>;
	using _Unchecked_const_iterator = _List_unchecked_const_iterator<_List_val<_Val_types>>;

 
	_List_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		_Myhead() = _Buyheadnode();
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _List_alloc>>>
		_List_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		_Myhead() = _Buyheadnode();
		}

	~_List_alloc() noexcept
		{	
		_Freeheadnode(_Myhead());
		}

	void _Alloc_proxy()
		{	
		}

	void _Free_proxy()
		{	
		}

 
































































#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

	void _Copy_alloc(const _Alnode& _Al)
		{	
		const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			_Freeheadnode(_Myhead());
			}

		_Pocca(_Getal(), _Al);

		if (_Reload)
			{
			_Myhead() = _Buyheadnode();
			_Alloc_proxy();
			}
		}

	void _Move_alloc(_Alnode& _Al)
		{	
		const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			_Freeheadnode(_Myhead());
			}

		_Pocma(_Getal(), _Al);

		if (_Reload)
			{
			_Myhead() = _Buyheadnode();
			_Alloc_proxy();
			}
		}

	_Nodeptr _Buyheadnode()
		{	
		return (_Buynode0(_Nodeptr(), _Nodeptr()));
		}

	void _Freeheadnode(_Nodeptr _Pnode)
		{	
		_Node::_Freenode0(_Getal(), _Pnode);
		}

	_Nodeptr _Buynode0(_Nodeptr _Next, _Nodeptr _Prev)
		{	
		_Nodeptr _Pnode = _Getal().allocate(1);

		if (_Next == _Nodeptr())
			{	
			_Next = _Pnode;
			_Prev = _Pnode;
			}

		_Alnode& _Al = _Getal();
		try {
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Next), _Next);
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Prev), _Prev);
		} catch (...) {
		_Al.deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_List_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alnode& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alnode& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_List_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _List_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	_Nodeptr& _Myhead() noexcept
		{	
		return (_Get_data()._Myhead);
		}

	const _Nodeptr& _Myhead() const noexcept
		{	
		return (_Get_data()._Myhead);
		}

	size_type& _Mysize() noexcept
		{	
		return (_Get_data()._Mysize);
		}

	const size_type& _Mysize() const noexcept
		{	
		return (_Get_data()._Mysize);
		}

private:
	_Compressed_pair<_Alnode, _List_val<_Val_types>> _Mypair;
	};

		
template<class _Ty,
	class _Alloc>
	class _List_buy
		: public _List_alloc<_List_base_types<_Ty, _Alloc>>
	{	
public:
	using _Mybase = _List_alloc<_List_base_types<_Ty, _Alloc>>;
	using typename _Mybase::_Alnode;
	using typename _Mybase::_Alnode_traits;
	using typename _Mybase::_Nodeptr;
	using typename _Mybase::_Node;

	_List_buy()
		: _Mybase()
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _List_buy>>>
		_List_buy(_Any_alloc&& _Al)
		: _Mybase(::std:: forward<_Any_alloc>(_Al))
		{	
		}

	template<class... _Valty>
		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev, _Valty&&... _Val)
		{	
		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
		_Alnode& _Al = this->_Getal();

		try {
		_Alnode_traits::construct(_Al,
			::std:: addressof(_Pnode->_Myval),
			::std:: forward<_Valty>(_Val)...);
		} catch (...) {
		_Al.deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	void _Freenode(_Nodeptr _Pnode)
		{	
		_Alnode& _Al = this->_Getal();
		_Alnode_traits::destroy(_Al, ::std:: addressof(_Pnode->_Myval));
		_Node::_Freenode0(_Al, _Pnode);
		}
	};

		
template<class _Ty,
	class _Alloc = allocator<_Ty>>
	class list
		: public _List_buy<_Ty, _Alloc>
	{	
public:
	static_assert(!1 || is_same_v<_Ty, typename _Alloc::value_type>,
		"list<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mybase = _List_buy<_Ty, _Alloc>;
	using _Node = typename _Mybase::_Node;
	using _Nodeptr = typename _Mybase::_Nodeptr;
	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;

	using value_type = typename _Mybase::value_type;
	using allocator_type = _Alloc;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;
	using _Unchecked_iterator = typename _Mybase::_Unchecked_iterator;
	using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;

	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	list()
		: _Mybase()
		{	
		}

	explicit list(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		}

	explicit list( size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		resize(_Count);
		}

	list( size_type _Count, const _Ty& _Val)
		: _Mybase()
		{	
		_Construct_n(_Count, _Val);
		}

	list( size_type _Count, const _Ty& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_n(_Count, _Val);
		}

	list(const list& _Right)
		: _Mybase(_Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		try {
		insert(begin(), _Right.begin(), _Right.end());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	list(const list& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		try {
		insert(begin(), _Right.begin(), _Right.end());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		list(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last)
		{	
		try {
		insert(begin(), _First, _Last);
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	void _Construct_n(size_type _Count,
		const _Ty& _Val)
		{	
		try {
		_Insert_n(_Unchecked_begin(), _Count, _Val);
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	list(list&& _Right)
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Assign_rv(::std:: move(_Right), true_type());
		}

	list(list&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Assign_rv(::std:: move(_Right), typename _Alnode_traits::is_always_equal());
		}

	list& operator=(list&& _Right)
		
		
		
		noexcept(_Alnode_traits::is_always_equal::value)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			clear();
			this->_Move_alloc(_Right._Getal());
			_Assign_rv(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alnode>>{});
			}
		return (*this);
		}

	void _Assign_rv(list&& _Right, true_type) noexcept
		{	
		this->_Swap_all(_Right);
		_Swap_adl(this->_Myhead(), _Right._Myhead());
		::std:: swap(this->_Mysize(), _Right._Mysize());
		}

	void _Assign_rv(list&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			_Assign_rv(::std:: move(_Right), true_type());
		else
			_Construct(::std:: make_move_iterator(_Right.begin()),
				::std:: make_move_iterator(_Right.end()));
		}

	void push_front(_Ty&& _Val)
		{	
		_Insert(_Unchecked_begin(), ::std:: move(_Val));
		}

	void push_back(_Ty&& _Val)
		{	
		_Insert(_Unchecked_end(), ::std:: move(_Val));
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: move(_Val)));
		}

	template<class... _Valty>
		decltype(auto) emplace_front(_Valty&&... _Val)
		{	
		_Insert(_Unchecked_begin(), ::std:: forward<_Valty>(_Val)...);


		return (front());
#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		}

	template<class... _Valty>
		decltype(auto) emplace_back(_Valty&&... _Val)
		{	
		_Insert(_Unchecked_end(), ::std:: forward<_Valty>(_Val)...);


		return (back());
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
 

#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		_Insert(_Where._Unwrapped(), ::std:: forward<_Valty>(_Val)...);
		return (_Make_iter(--_Where));
		}

	template<class... _Valty>
		void _Insert(_Unchecked_const_iterator _Where, _Valty&&... _Val)
		{	
		const _Nodeptr _Rightnode = _Where._Ptr;
		const _Nodeptr _Leftnode = _Rightnode->_Prev;
		const _Nodeptr _Newnode = this->_Buynode(_Rightnode, _Leftnode, ::std:: forward<_Valty>(_Val)...);
		_Incsize(1);
		_Rightnode->_Prev = _Newnode;
		_Leftnode->_Next = _Newnode;
		}

	list(initializer_list<_Ty> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	list& operator=(initializer_list<_Ty> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(initializer_list<_Ty> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
		initializer_list<_Ty> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~list() noexcept
		{	
		_Tidy();
		}

	list& operator=(const list& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Alnode_traits::propagate_on_container_copy_assignment::value
				&& this->_Getal() != _Right._Getal())
				{	
				clear();
				}
#pragma warning(pop)

			this->_Copy_alloc(_Right._Getal());

			assign(_Right.begin(), _Right.end());
			}
		return (*this);
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		return (iterator(this->_Myhead()->_Next, ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myhead()->_Next, ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] iterator end() noexcept
		{	
		return (iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		return (const_iterator(this->_Myhead(), ::std:: addressof(this->_Get_data())));
		}

	_Unchecked_iterator _Unchecked_begin()
		{	
		return (_Unchecked_iterator(this->_Myhead()->_Next, nullptr));
		}

	_Unchecked_const_iterator _Unchecked_begin() const
		{	
		return (_Unchecked_const_iterator(this->_Myhead()->_Next, nullptr));
		}

	_Unchecked_iterator _Unchecked_end()
		{	
		return (_Unchecked_iterator(this->_Myhead(), nullptr));
		}

	_Unchecked_const_iterator _Unchecked_end() const
		{	
		return (_Unchecked_const_iterator(this->_Myhead(), nullptr));
		}

	iterator _Make_iter(const_iterator _Where) const noexcept
		{	
		return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
		}

	iterator _Make_iter(_Unchecked_const_iterator _Where) const
		{	
		return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	[[nodiscard]] const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	[[nodiscard]] reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	[[nodiscard]] const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void resize( size_type _Newsize)
		{	
		if (this->_Mysize() < _Newsize)
			{	
			size_type _Count = 0;
			try {
			for (; this->_Mysize() < _Newsize; ++_Count)
				_Insert(_Unchecked_end());
			} catch (...) {
			for (; 0 < _Count; --_Count)
				pop_back();	
			throw;
			}
			}
		else
			while (_Newsize < this->_Mysize())
				pop_back();
		}

	void resize( size_type _Newsize, const _Ty& _Val)
		{	
		if (this->_Mysize() < _Newsize)
			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
		else
			while (_Newsize < this->_Mysize())
				pop_back();
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (this->_Mysize());
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		return (_Alnode_traits::max_size(this->_Getal()));
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (this->_Mysize() == 0);
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

	[[nodiscard]] reference front()
		{	
		return (*begin());
		}

	[[nodiscard]] const_reference front() const
		{	
		return (*begin());
		}

	[[nodiscard]] reference back()
		{	
		return (*(--end()));
		}

	[[nodiscard]] const_reference back() const
		{	
		return (*(--end()));
		}

	void push_front(const _Ty& _Val)
		{	
		_Insert(_Unchecked_begin(), _Val);
		}

	void pop_front()
		{	
		erase(begin());
		}

	void push_back(const _Ty& _Val)
		{	
		_Insert(_Unchecked_end(), _Val);
		}

	void pop_back()
		{	
		erase(--end());
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last)
		{	
		iterator _Old = begin();
		try {
		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
			_Reusenode(_Old, *_First);
		for (; _First != _Last; ++_First)
			_Insert(_Unchecked_end(), *_First);
		} catch (...) {
		clear();
		throw;
		}
		erase(_Old, end());
		}

	template<class _TArg>
		void _Reusenode(iterator _Where, _TArg&& _Arg)
		{	
		_Alnode& _Al = this->_Getal();
		try {
		_Alnode_traits::destroy(_Al, ::std:: addressof(_Where._Ptr->_Myval));
		_Alnode_traits::construct(_Al,
			::std:: addressof(_Where._Ptr->_Myval),
			::std:: forward<_TArg>(_Arg));
		} catch (...) {
		_Unlinknode(_Where);
		_Node::_Freenode0(_Al, _Where._Ptr);
		throw;
		}
		}

	void assign( size_type _Count, const _Ty& _Val)
		{	
		clear();
		_Insert_n(_Unchecked_begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
 

#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		_Insert(_Where._Unwrapped(), _Val);
		return (_Make_iter(--_Where));
		}

	iterator insert(const_iterator _Where,
		 size_type _Count, const _Ty& _Val)
		{	
 

#line 1238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		iterator _Prev = _Make_iter(_Where);
		if (_Prev == begin())
			{	
			_Insert_n(_Where._Unwrapped(), _Count, _Val);
			return (begin());
			}
		else
			{	
			--_Prev;
			_Insert_n(_Where._Unwrapped(), _Count, _Val);
			return (++_Prev);
			}
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
 

#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		iterator _Prev = _Make_iter(_Where);
		if (_Prev == begin())
			{	
			_Insert_range(_Where._Unwrapped(), _First, _Last,
				_Iter_cat_t<_Iter>());
			return (begin());
			}
		else
			{	
			--_Prev;
			_Insert_range(_Where._Unwrapped(), _First, _Last,
				_Iter_cat_t<_Iter>());
			return (++_Prev);
			}
		}

	template<class _Iter>
		void _Insert_range(_Unchecked_const_iterator _Where,
			_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		size_type _Num = 0;

		try {
		for (; _First != _Last; ++_First, (void)++_Num)
			_Insert(_Where, *_First);
		} catch (...) {
		for (; 0 < _Num; --_Num)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	template<class _Iter>
		void _Insert_range(_Unchecked_const_iterator _Where,
			_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		auto _UNext = _UFirst;

		try {
		for (; _UFirst != _ULast; ++_UFirst)
			{
			_Insert(_Where, *_UFirst);
			}

		} catch (...) {
		for (; _UNext != _UFirst; ++_UNext)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	_Nodeptr _Unlinknode(const_iterator _Where)
		{	
 



#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		_Nodeptr _Pnode = _Where._Ptr;
 #line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		_Pnode->_Prev->_Next = _Pnode->_Next;
		_Pnode->_Next->_Prev = _Pnode->_Prev;

		--this->_Mysize();
		return (_Pnode);
		}

	void _Relink(const _Unchecked_const_iterator _Where, const _Nodeptr _Ptr)
		{	
		_Ptr->_Next = _Where._Ptr;
		_Ptr->_Prev = _Where._Ptr->_Prev;
		_Ptr->_Prev->_Next = _Ptr;
		_Ptr->_Next->_Prev = _Ptr;

		++this->_Mysize();
		}

	iterator erase(const_iterator _Where)
		{	
		_Nodeptr _Pnode = _Unlinknode(_Where++);
		this->_Freenode(_Pnode);
		return (_Make_iter(_Where));
		}

	void _Unchecked_erase(_Unchecked_const_iterator _Where)
		{	
		_Nodeptr _Pnode = _Where._Ptr;

		_Pnode->_Prev->_Next = _Pnode->_Next;
		_Pnode->_Next->_Prev = _Pnode->_Prev;
		this->_Freenode(_Pnode);
		--this->_Mysize();
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		if (_First == begin() && _Last == end())
			{	
			clear();
			return (end());
			}
		else
			{	
			while (_First != _Last)
				_First = erase(_First);
			return (_Make_iter(_Last));
			}
		}

	void clear() noexcept
		{	
 

#line 1385 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		_Nodeptr _Pnode = this->_Myhead()->_Next;
		this->_Myhead()->_Next = this->_Myhead();
		this->_Myhead()->_Prev = this->_Myhead();
		this->_Mysize() = 0;

		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
			{	
			_Pnext = _Pnode->_Next;
			this->_Freenode(_Pnode);
			}
		}

	void swap(list& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myhead(), _Right._Myhead());
			::std:: swap(this->_Mysize(), _Right._Mysize());
			}
		}

	void splice(const_iterator _Where, list& _Right)
		{	
		if (this != ::std:: addressof(_Right) && !_Right.empty())
			{	
			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
				_Right._Mysize());
			}
		}

	void splice(const_iterator _Where, list&& _Right)
		{	
		splice(_Where, _Right);
		}

	void splice(const_iterator _Where, list& _Right,
		const_iterator _First)
		{	
 






#line 1433 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		if (_First != _Right.end())
 #line 1435 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

			{	
			const_iterator _Last = _First;
			++_Last;
			if (this != ::std:: addressof(_Right)
				|| (_Where != _First && _Where != _Last))
				_Splice(_Where, _Right, _First, _Last, 1);
			}
		}

	void splice(const_iterator _Where, list&& _Right,
		const_iterator _First)
		{	
		splice(_Where, _Right, _First);
		}

	void splice(const_iterator _Where,
		list& _Right, const_iterator _First, const_iterator _Last)
		{	
		if (_First != _Last && (this != ::std:: addressof(_Right) || _Where != _Last))
			{	
			size_type _Count = 0;

			if (this != ::std:: addressof(_Right))
				{
				if (_First == _Right.begin() && _Last == _Right.end())
					{
					_Count = _Right._Mysize();	
					}
				else
					{	
					const_iterator _Next = _First;

					for (; _Next != _Last; ++_Next, (void)++_Count)
						{
						if (_Next == _Right.end())
							{
							_Xlength_error("list<T> bad splice");
							}
						}
					}
				}

			_Splice(_Where, _Right, _First, _Last, _Count);
			}
		}

	void splice(const_iterator _Where,
		list&& _Right, const_iterator _First, const_iterator _Last)
		{	
		splice(_Where, _Right, _First, _Last);
		}

	void remove(const _Ty& _Val)
		{	
		iterator _Val_it = end();

		for (iterator _First = begin(); _First != end(); )
			if (*_First == _Val)
				if (::std:: addressof(*_First) == ::std:: addressof(_Val))
					_Val_it = _First++;
				else
					_First = erase(_First);
			else
				++_First;

		if (_Val_it != end())
			erase(_Val_it);
		}

	template<class _Pr1>
		void remove_if(_Pr1 _Pred)
		{	
		_Remove_if(_Pred);
		}

	template<class _Pr1>
		void _Remove_if(_Pr1& _Pred)
		{	
		for (iterator _First = begin(); _First != end(); )
			if (_Pred(*_First))
				_First = erase(_First);
			else
				++_First;
		}

	void unique()
		{	
		unique(equal_to<>());
		}

	template<class _Pr2>
		void unique(_Pr2 _Pred)
		{	
		const _Nodeptr _Phead = this->_Myhead();
		_Nodeptr _Pprev = _Phead->_Next;
		_Nodeptr _Pnode = _Pprev->_Next;

		while (_Pnode != _Phead)
			{
			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
				{	
				const _Nodeptr _Perase = _Pnode;
				_Pnode = _Pnode->_Next;

 

#line 1543 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

				_Pprev->_Next = _Pnode;
				_Pnode->_Prev = _Pprev;
				this->_Freenode(_Perase);

				--this->_Mysize();
				}
			else
				{	
				_Pprev = _Pnode;
				_Pnode = _Pnode->_Next;
				}
			}
		}

	void merge(list& _Right)
		{	
		_Merge1(_Right, less<>());
		}

	void merge(list&& _Right)
		{	
		_Merge1(_Right, less<>());
		}

	template<class _Pr2>
		void merge(list& _Right, _Pr2 _Pred)
		{	
		_Merge1(_Right, _Pred);
		}

	template<class _Pr2>
		void merge(list&& _Right, _Pr2 _Pred)
		{	
		_Merge1(_Right, _Pred);
		}

	template<class _Pr2>
		void _Merge1(list& _Right, _Pr2&& _Pred)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			;
			;
			iterator _First1 = begin();
			iterator _Last1 = end();
			iterator _First2 = _Right.begin();
			iterator _Last2 = _Right.end();

			while (_First1 != _Last1 && _First2 != _Last2)
				{
				if (_Pred(*_First2, *_First1))
					{	
					iterator _Oldfirst2 = _First2;
					_Splice(_First1, _Right, _Oldfirst2, ++_First2, 1);
					}
				else
					{
					++_First1;
					}
				}

			if (_First2 != _Last2)
				{
				_Splice(_Last1, _Right, _First2, _Last2, _Right._Mysize());	
				}
			}
		}

	void sort()
		{	
		sort(less<>());
		}

	template<class _Pr2>
		void sort(_Pr2 _Pred)
		{	
		_Sort(begin(), end(), _Pred, this->_Mysize());
		}

	template<class _Pr2>
		iterator _Sort(iterator _First, iterator _Last, _Pr2& _Pred,
			size_type _Size)
		{	
			
		if (_Size < 2)
			return (_First);	

		iterator _Mid = ::std:: next(_First, static_cast<difference_type>(_Size >> 1));
		_First = _Sort(_First, _Mid, _Pred, _Size >> 1);
		_Mid = _Sort(_Mid, _Last, _Pred, _Size - (_Size >> 1));
		iterator _Newfirst = _First;

		for (bool _Initial_loop = true; ; _Initial_loop = false)
			{	
			if (_Pred(*_Mid, *_First))
				{	
				if (_Initial_loop)
					_Newfirst = _Mid;	
				splice(_First, *this, _Mid++);
				if (_Mid == _Last)
					return (_Newfirst);	
				}
			else
				{	
				++_First;
				if (_First == _Mid)
					return (_Newfirst);	
				}
			}
		}

	void reverse() noexcept
		{	
		const _Nodeptr _Phead = this->_Myhead();
		_Nodeptr _Pnode = _Phead;

		for (;;)
			{	
			const _Nodeptr _Pnext = _Pnode->_Next;
			_Pnode->_Next = _Pnode->_Prev;
			_Pnode->_Prev = _Pnext;

			if (_Pnext == _Phead)
				break;
			_Pnode = _Pnext;
			}
		}

	void _Splice(const_iterator _Where,
		list& _Right, const_iterator _First, const_iterator _Last,
		size_type _Count)
		{	
 





















































#line 1731 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
		if (this->_Getal() != _Right._Getal())
			::std:: terminate();
 #line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

		_Splice_same(_Where, _Right, _First, _Last, _Count);
		}

	void _Splice_same(const_iterator _Where,
		list& _Right, const_iterator _First, const_iterator _Last,
		size_type _Count)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Incsize(_Count);
			_Right._Mysize() -= _Count;
			}

		_First._Ptr->_Prev->_Next = _Last._Ptr;
		_Last._Ptr->_Prev->_Next = _Where._Ptr;
		_Where._Ptr->_Prev->_Next = _First._Ptr;

		_Nodeptr _Pnode = _Where._Ptr->_Prev;
		_Where._Ptr->_Prev = _Last._Ptr->_Prev;
		_Last._Ptr->_Prev = _First._Ptr->_Prev;
		_First._Ptr->_Prev = _Pnode;
		}

	void _Unchecked_splice(_Unchecked_const_iterator _Where,
		_Unchecked_const_iterator _First,
		_Unchecked_const_iterator _Last)
		{	
		_First._Ptr->_Prev->_Next = _Last._Ptr;
		_Last._Ptr->_Prev->_Next = _Where._Ptr;
		_Where._Ptr->_Prev->_Next = _First._Ptr;

		_Nodeptr _Pnode = _Where._Ptr->_Prev;
		_Where._Ptr->_Prev = _Last._Ptr->_Prev;
		_Last._Ptr->_Prev = _First._Ptr->_Prev;
		_First._Ptr->_Prev = _Pnode;
		}

	void _Tidy()
		{	
		clear();
		}

	void _Insert_n(_Unchecked_const_iterator _Where,
		size_type _Count, const _Ty& _Val)
		{	
		const size_type _Countsave = _Count;

		try {
		for (; 0 < _Count; --_Count)
			_Insert(_Where, _Val);
		} catch (...) {
		for (; _Count < _Countsave; ++_Count)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	void _Incsize(size_type _Count)
		{	
		if (max_size() - this->_Mysize() - 1 < _Count)
			_Xlength_error("list<T> too long");
		this->_Mysize() += _Count;
		}

 

















#line 1821 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
	};


template<class _Iter,
	class _Alloc = allocator<_Iter_value_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	list(_Iter, _Iter, _Alloc = _Alloc())
		-> list<_Iter_value_t<_Iter>, _Alloc>;
#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"

template<class _Ty,
	class _Alloc> inline
	void swap(list<_Ty, _Alloc>& _Left, list<_Ty, _Alloc>& _Right) noexcept 
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator==(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator<(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator>(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator<=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator>=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}


namespace pmr {
template<class _Ty>
	using list = ::std:: list<_Ty, polymorphic_allocator<_Ty>>;
} 
#line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"
#line 1904 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\list"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

#pragma once







 
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Myvec>
	class _Vector_const_iterator
		: public _Iterator_base
	{	
public:
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Myvec::value_type;
	using difference_type = typename _Myvec::difference_type;
	using pointer = typename _Myvec::const_pointer;
	using reference = const value_type&;
	using _Tptr = typename _Myvec::pointer;

	_Vector_const_iterator()
		: _Ptr()
		{	
		}

	_Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pvector);
		}

	[[nodiscard]] reference operator*() const
		{	
 




#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (*_Ptr);
		}

	[[nodiscard]] pointer operator->() const
		{	
 




#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (_Ptr);
		}

	_Vector_const_iterator& operator++()
		{	
 



#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		++_Ptr;
		return (*this);
		}

	_Vector_const_iterator operator++(int)
		{	
		_Vector_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vector_const_iterator& operator--()
		{	
 



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		--_Ptr;
		return (*this);
		}

	_Vector_const_iterator operator--(int)
		{	
		_Vector_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	void _Verify_offset(const difference_type _Off) const
		{
 
		(void)_Off;
 











#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

	_Vector_const_iterator& operator+=(const difference_type _Off)
		{	
		_Verify_offset(_Off);
		_Ptr += _Off;
		return (*this);
		}

	[[nodiscard]] _Vector_const_iterator operator+(const difference_type _Off) const
		{	
		_Vector_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vector_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _Vector_const_iterator operator-(const difference_type _Off) const
		{	
		_Vector_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr - _Right._Ptr);
		}

	[[nodiscard]] reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] bool operator==(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _Vector_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] bool operator<(const _Vector_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (_Ptr < _Right._Ptr);
		}

	[[nodiscard]] bool operator>(const _Vector_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	[[nodiscard]] bool operator<=(const _Vector_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] bool operator>=(const _Vector_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _Vector_const_iterator& _Right) const
		{	
 
		(void)_Right;
 

#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

 






#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

	[[nodiscard]] pointer _Unwrapped() const
		{
		return (_Ptr);
		}

	void _Seek_to(pointer _It)
		{
		_Ptr = _Const_cast(_It);
		}

	_Tptr _Ptr;	
	};

template<class _Myvec>
	[[nodiscard]] inline _Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
		_Vector_const_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Myvec>
	class _Vector_iterator
		: public _Vector_const_iterator<_Myvec>
	{	
public:
	using _Mybase = _Vector_const_iterator<_Myvec>;
	using iterator_category = random_access_iterator_tag;

	using value_type = typename _Myvec::value_type;
	using difference_type = typename _Myvec::difference_type;
	using pointer = typename _Myvec::pointer;
	using reference = value_type&;

	_Vector_iterator()
		{	
		}

	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
		: _Mybase(_Parg, _Pvector)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return (const_cast<reference>(_Mybase::operator*()));
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (_Const_cast(_Mybase::operator->()));
		}

	_Vector_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Vector_iterator operator++(int)
		{	
		_Vector_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vector_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Vector_iterator operator--(int)
		{	
		_Vector_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vector_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	[[nodiscard]] _Vector_iterator operator+(const difference_type _Off) const
		{	
		_Vector_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vector_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _Vector_iterator operator-(const difference_type _Off) const
		{	
		_Vector_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	[[nodiscard]] reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] pointer _Unwrapped() const
		{
		return (this->_Ptr);
		}
	};

template<class _Myvec>
	[[nodiscard]] inline _Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off,
		_Vector_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _Vec_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	};

template<class _Ty,
	class _Alloc>
	struct _Vec_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alty>,
		_Simple_types<_Ty>,
		_Vec_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&>>;
	};

		
template<class _Val_types>
	class _Vector_val
		: public _Container_base
	{	
public:
	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	_Vector_val()
		: _Myfirst(),
		_Mylast(),
		_Myend()
		{	
		}

	pointer _Myfirst;	
	pointer _Mylast;	
	pointer _Myend;	
	};

		
template<class _Alloc_types>
	class _Vector_alloc
	{	
public:
	using _Alty = typename _Alloc_types::_Alty;
	using _Alty_traits = typename _Alloc_types::_Alty_traits;
	using _Alproxy = _Rebind_alloc_t<_Alty, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Val_types = typename _Alloc_types::_Val_types;

	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;

	using iterator = _Vector_iterator<_Vector_val<_Val_types>>;
	using const_iterator = _Vector_const_iterator<_Vector_val<_Val_types>>;

 
	_Vector_alloc()
		: _Mypair(_Zero_then_variadic_args_t())
		{	
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _Vector_alloc>>>
		_Vector_alloc(_Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		}

	void _Copy_alloc(const _Alty& _Al)
		{	
		_Pocca(_Getal(), _Al);
		}

	void _Move_alloc(_Alty& _Al)
		{	
		_Pocma(_Getal(), _Al);
		}

 























































































#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Vector_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Alty& _Getal() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Alty& _Getal() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Vector_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const _Vector_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	iterator _Make_iterator(const pointer _Ptr) noexcept
		{	
		return (iterator(_Ptr, ::std:: addressof(_Mypair._Get_second())));
		}

	iterator _Make_iterator_offset(const size_type _Offset) noexcept
		{	
		auto& _My_data = _Mypair._Get_second();
		return (iterator(_My_data._Myfirst + _Offset, ::std:: addressof(_My_data)));
		}

	pointer& _Myfirst() noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	const pointer& _Myfirst() const noexcept
		{	
		return (_Get_data()._Myfirst);
		}

	pointer& _Mylast() noexcept
		{	
		return (_Get_data()._Mylast);
		}

	const pointer& _Mylast() const noexcept
		{	
		return (_Get_data()._Mylast);
		}

	pointer& _Myend() noexcept
		{	
		return (_Get_data()._Myend);
		}

	const pointer& _Myend() const noexcept
		{	
		return (_Get_data()._Myend);
		}

private:
	_Compressed_pair<_Alty, _Vector_val<_Val_types>> _Mypair;
	};

		
template<class _Ptrty> inline
	auto _Unfancy_maybe_null(_Ptrty _Ptr)
	{	
	return (_Ptr ? ::std:: addressof(*_Ptr) : nullptr);
	}

template<class _Ty> inline
	_Ty * _Unfancy_maybe_null(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

		
template<class _Ty,
	class _Alloc = allocator<_Ty>>
	class vector
		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>
	{	
private:
	using _Mybase = _Vector_alloc<_Vec_base_types<_Ty, _Alloc>>;
	using _Alty = typename _Mybase::_Alty;
	using _Alty_traits = typename _Mybase::_Alty_traits;

public:
	static_assert(!1 || is_same_v<_Ty, typename _Alloc::value_type>,
		"vector<T, Allocator>" " requires that Allocator's value_type match " "T" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using value_type = _Ty;
	using allocator_type = _Alloc;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = _Ty&;
	using const_reference = const _Ty&;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;
	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	vector() noexcept(is_nothrow_default_constructible_v<_Alty>)
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al) noexcept
		: _Mybase(_Al)
		{	
		}

	explicit vector( const size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast() = _Udefault(this->_Myfirst(), _Count);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector( const size_type _Count, const _Ty& _Val, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Val);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

private:
	template<class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);	
			}
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter>
		void _Range_construct_or_tidy(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		if (_Buy(_Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)))))
			{	
			try {
			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Adl_verify_range(_First, _Last);
		_Range_construct_or_tidy(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		}

	vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		}

	vector(const vector& _Right)
		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		if (_Buy(_Right.size()))
			{	
			try {
			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(const vector& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (_Buy(_Right.size()))
			{	
			try {
			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

private:
	void _Move_from(vector&& _Right, true_type) noexcept
		{	
		this->_Swap_all(_Right);

		this->_Myfirst() = _Right._Myfirst();
		this->_Mylast() = _Right._Mylast();
		this->_Myend() = _Right._Myend();

		_Right._Myfirst() = pointer();
		_Right._Mylast() = pointer();
		_Right._Myend() = pointer();
		}

	void _Move_from(vector&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			{
			_Move_from(::std:: move(_Right), true_type{});
			}
		else if (_Buy(_Right.size()))
			{	
			this->_Mylast() = _Umove(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());
			}
		}

public:
	vector(vector&& _Right) noexcept
		: _Mybase(::std:: move(_Right._Getal()))
		{	
		_Move_from(::std:: move(_Right), true_type{});
		}

	vector(vector&& _Right, const _Alloc& _Al)
		noexcept(_Alty_traits::is_always_equal::value) 
		: _Mybase(_Al)
		{	
		if  (_Alty_traits::is_always_equal::value)
			{
			_Move_from(::std:: move(_Right), true_type{});
			}
		else
			{
#pragma warning(push) 
#pragma warning(disable: 4297) 
			try {
			_Move_from(::std:: move(_Right), false_type{});
			} catch (...) {
			_Tidy();
			throw;
			}
#pragma warning(pop)
			}
		}

private:
	void _Move_assign_from(vector&& _Right, true_type) noexcept
		{	
		_Move_from(::std:: move(_Right), true_type{});
		}

	void _Move_assign_from(vector&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			{
			_Move_from(::std:: move(_Right), true_type{});
			return;
			}

		const pointer _First = _Right._Myfirst();
		const pointer _Last = _Right._Mylast();
		const size_type _Newsize = _Right.size();

		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Umove(_First, _Last, this->_Myfirst());
			}
		else if (_Newsize > _Oldsize)
			{
			const pointer _Mid = _First + _Oldsize;
			_Move_unchecked(_First, _Mid, this->_Myfirst());
			this->_Mylast() = _Umove(_Mid, _Last, this->_Mylast());
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Move_unchecked(_First, _Last, this->_Myfirst());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	vector& operator=(vector&& _Right)
		noexcept(_Always_equal_after_move<_Alty>)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Always_equal_after_move<_Alty>
				|| this->_Getal() == _Right._Getal())
				{	
				_Tidy();
				}
#pragma warning(pop)
			this->_Move_alloc(_Right._Getal());
			_Move_assign_from(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});
			}
		return (*this);
		}

	~vector() noexcept
		{	
		_Tidy();
		}

private:
	template<class... _Valty>
		decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val)
		{	
			
		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), ::std:: forward<_Valty>(_Val)...);
		_Orphan_range(this->_Mylast(), this->_Mylast());
		_Ty& _Result = *this->_Mylast();
		++this->_Mylast();

		return (_Result);


#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

public:
	template<class... _Valty>
		decltype(auto) emplace_back(_Valty&&... _Val)
		{	
		if (_Has_unused_capacity())
			{
			return (_Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...));
			}

		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), ::std:: forward<_Valty>(_Val)...);

		return (_Result);


#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

	void push_back(const _Ty& _Val)
		{	
		emplace_back(_Val);
		}

	void push_back(_Ty&& _Val)
		{	
		emplace_back(::std:: move(_Val));
		}

	template<class... _Valty>
		pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val)
		{	
			
		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());
		_Alty& _Al = this->_Getal();
		const size_type _Oldsize = size();

		if (_Oldsize == max_size())
			{
			_Xlength();
			}

		const size_type _Newsize = _Oldsize + 1;
		const size_type _Newcapacity = _Calculate_growth(_Newsize);

		const pointer _Newvec = _Al.allocate(_Newcapacity);
		const pointer _Constructed_last = _Newvec + _Whereoff + 1;
		pointer _Constructed_first = _Constructed_last;

		try {
		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), ::std:: forward<_Valty>(_Val)...);
		_Constructed_first = _Newvec + _Whereoff;

		if (_Whereptr == this->_Mylast())
			{	
			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
			}
		else
			{	
			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
			_Constructed_first = _Newvec;
			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);
			}
		} catch (...) {
		_Destroy(_Constructed_first, _Constructed_last);
		_Al.deallocate(_Newvec, _Newcapacity);
		throw;
		}

		_Change_array(_Newvec, _Newsize, _Newcapacity);
		return (this->_Myfirst() + _Whereoff);
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		const pointer _Whereptr = _Where._Ptr;
		const pointer _Oldlast = this->_Mylast();
 



#line 994 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		if (_Has_unused_capacity())
			{
			if (_Whereptr == _Oldlast)
				{	
				_Emplace_back_with_unused_capacity(::std:: forward<_Valty>(_Val)...);
				}
			else
				{
				_Ty _Obj(::std:: forward<_Valty>(_Val)...);	
				
				_Orphan_range(_Whereptr, _Oldlast);
				_Alty_traits::construct(this->_Getal(), _Unfancy(_Oldlast), ::std:: move(_Oldlast[-1]));
				++this->_Mylast();
				_Move_backward_unchecked(_Whereptr, _Oldlast - 1, _Oldlast);
				*_Whereptr = ::std:: move(_Obj);
				}

			return (this->_Make_iterator(_Whereptr));
			}

		return (this->_Make_iterator(_Emplace_reallocate(_Whereptr, ::std:: forward<_Valty>(_Val)...)));
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
		return (emplace(_Where, _Val));
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: move(_Val)));
		}

	iterator insert(const_iterator _Where,  const size_type _Count, const _Ty& _Val)
		{	
 



#line 1035 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

		if (_Count == 0)
			{	
			}
		else if (_Count > _Unused_capacity())
			{	
			const size_type _Oldsize = size();

			if (_Count > max_size() - _Oldsize)
				{
				_Xlength();
				}

			const size_type _Newsize = _Oldsize + _Count;
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
			pointer _Constructed_first = _Constructed_last;

			try {
			_Ufill(_Newvec + _Whereoff, _Count, _Val);
			_Constructed_first = _Newvec + _Whereoff;

			if (_One_at_back)
				{	
				_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
				}
			else
				{	
				_Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
				_Constructed_first = _Newvec;
				_Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
				}
			} catch (...) {
			_Destroy(_Constructed_first, _Constructed_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else if (_One_at_back)
			{	
			_Emplace_back_with_unused_capacity(_Val);
			}
		else
			{	
			const _Ty _Tmp = _Val;	
			const pointer _Oldlast = this->_Mylast();
			const size_type _Affected_elements = static_cast<size_type>(_Oldlast - _Where._Ptr);
			_Orphan_range(_Where._Ptr, _Oldlast);

			if (_Count > _Affected_elements)
				{	
				this->_Mylast() = _Ufill(_Oldlast, _Count - _Affected_elements, _Tmp);
				this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, this->_Mylast());
				_Fill_unchecked(_Where._Ptr, _Oldlast, _Tmp);
				}
			else
				{	
				this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
				_Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
				_Fill_unchecked(_Where._Ptr, _Where._Ptr + _Count, _Tmp);
				}
			}

		return (this->_Make_iterator_offset(_Whereoff));
		}

private:
	template<class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, input_iterator_tag)
		{	
		if (_First == _Last)
			{
			return;	
			}

		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const size_type _Oldsize = size();

		
		
		

		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);
			}

		_Orphan_range(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize);

		_Rotate_unchecked(this->_Myfirst() + _Whereoff, this->_Myfirst() + _Oldsize, this->_Mylast());
		}

	template<class _Iter>
		void _Insert_range(const_iterator _Where, _Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		const bool _One_at_back = _Count == 1 && _Where._Ptr == this->_Mylast();

		if (_Count == 0)
			{	
			}
		else if (_Count > _Unused_capacity())
			{	
			const size_type _Oldsize = size();

			if (_Count > max_size() - _Oldsize)
				{
				_Xlength();
				}

			const size_type _Newsize = _Oldsize + _Count;
			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
			pointer _Constructed_first = _Constructed_last;

			try {
			_Ucopy(_First, _Last, _Newvec + _Whereoff);
			_Constructed_first = _Newvec + _Whereoff;

			if (_One_at_back)
				{	
				_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
				}
			else
				{	
				_Umove(this->_Myfirst(), _Where._Ptr, _Newvec);
				_Constructed_first = _Newvec;
				_Umove(_Where._Ptr, this->_Mylast(), _Newvec + _Whereoff + _Count);
				}
			} catch (...) {
			_Destroy(_Constructed_first, _Constructed_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else
			{	
				
				

			const pointer _Oldlast = this->_Mylast();
			const size_type _Affected_elements = static_cast<size_type>(_Oldlast - _Where._Ptr);

			if (_Count < _Affected_elements)
				{	
				this->_Mylast() = _Umove(_Oldlast - _Count, _Oldlast, _Oldlast);
				_Move_backward_unchecked(_Where._Ptr, _Oldlast - _Count, _Oldlast);
				_Destroy(_Where._Ptr, _Where._Ptr + _Count);

				try {
				_Ucopy(_First, _Last, _Where._Ptr);
				} catch (...) {
				

					try {
					_Umove(_Where._Ptr + _Count, _Where._Ptr + 2 * _Count, _Where._Ptr);
					} catch (...) {
					
					_Orphan_range(_Where._Ptr, _Oldlast);
					_Destroy(_Where._Ptr + _Count, this->_Mylast());
					this->_Mylast() = _Where._Ptr;
					throw;
					}

					_Move_unchecked(_Where._Ptr + 2 * _Count, this->_Mylast(), _Where._Ptr + _Count);
					_Destroy(_Oldlast, this->_Mylast());
					this->_Mylast() = _Oldlast;
				throw;
				}
				}
			else
				{	
				const pointer _Relocated = _Where._Ptr + _Count;
				this->_Mylast() = _Umove(_Where._Ptr, _Oldlast, _Relocated);
				_Destroy(_Where._Ptr, _Oldlast);

				try {
				_Ucopy(_First, _Last, _Where._Ptr);
				} catch (...) {
				

					try {
					_Umove(_Relocated, this->_Mylast(), _Where._Ptr);
					} catch (...) {
					
					_Orphan_range(_Where._Ptr, _Oldlast);
					_Destroy(_Relocated, this->_Mylast());
					this->_Mylast() = _Where._Ptr;
					throw;
					}

					_Destroy(_Relocated, this->_Mylast());
					this->_Mylast() = _Oldlast;
				throw;
				}
				}

			_Orphan_range(_Where._Ptr, _Oldlast);
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
 



#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		_Adl_verify_range(_First, _Last);
		const size_type _Whereoff = static_cast<size_type>(_Where._Ptr - this->_Myfirst());
		_Insert_range(_Where, _Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		return (this->_Make_iterator_offset(_Whereoff));
		}

	iterator insert(const_iterator _Where, initializer_list<_Ty> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	void assign( const size_type _Newsize, const _Ty& _Val)
		{	
		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Ufill(this->_Myfirst(), _Newsize, _Val);
			}
		else if (_Newsize > _Oldsize)
			{
			_Fill_unchecked(this->_Myfirst(), this->_Mylast(), _Val);
			this->_Mylast() = _Ufill(this->_Mylast(), _Newsize - _Oldsize, _Val);
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Fill_unchecked(this->_Myfirst(), _Newlast, _Val);
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

private:
	template<class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		this->_Orphan_all();

		pointer _Next = this->_Myfirst();

		for (; _First != _Last && _Next != this->_Mylast(); ++_First, (void)++_Next)
			{
			*_Next = *_First;
			}

		
		
		
		

		
		_Destroy(_Next, this->_Mylast());
		this->_Mylast() = _Next;

		
		for (; _First != _Last; ++_First)
			{
			emplace_back(*_First);	
			}
		}

	template<class _Iter>
		void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		const size_type _Newsize = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));

		this->_Orphan_all();

		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			if (this->_Myfirst() != pointer())
				{	
				_Destroy(this->_Myfirst(), this->_Mylast());
				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);
				}

			_Buy(_Newcapacity);

			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
			}
		else if (_Newsize > _Oldsize)
			{
			
			const _Iter _Mid = ::std:: next(_First, static_cast<difference_type>(_Oldsize));
			_Copy_unchecked(_First, _Mid, this->_Myfirst());
			this->_Mylast() = _Ucopy(_Mid, _Last, this->_Mylast());
			}
		else
			{
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Copy_unchecked(_First, _Last, this->_Myfirst());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last)
		{	
		_Adl_verify_range(_First, _Last);
		_Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
		}

	void assign(initializer_list<_Ty> _Ilist)
		{	
		_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		}

	vector& operator=(const vector& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (_Alty_traits::propagate_on_container_copy_assignment::value
				&& this->_Getal() != _Right._Getal())
				{	
				_Tidy();
				}
#pragma warning(pop)

			this->_Copy_alloc(_Right._Getal());

			assign(_Right._Myfirst(), _Right._Mylast());
			}

		return (*this);
		}

	vector& operator=(initializer_list<_Ty> _Ilist)
		{	
		_Assign_range(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});
		return (*this);
		}

private:
	template<class _Lambda>
		void _Resize(const size_type _Newsize, _Lambda _Udefault_or_fill)
		{	
		const size_type _Oldsize = size();
		const size_type _Oldcapacity = capacity();

		if (_Newsize > _Oldcapacity)
			{	
			if (_Newsize > max_size())
				{
				_Xlength();
				}

			const size_type _Newcapacity = _Calculate_growth(_Newsize);

			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);
			const pointer _Appended_first = _Newvec + _Oldsize;
			pointer _Appended_last = _Appended_first;

			try {
			_Appended_last = _Udefault_or_fill(_Appended_first, _Newsize - _Oldsize);
			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
			} catch (...) {
			_Destroy(_Appended_first, _Appended_last);
			this->_Getal().deallocate(_Newvec, _Newcapacity);
			throw;
			}

			_Change_array(_Newvec, _Newsize, _Newcapacity);
			}
		else if (_Newsize > _Oldsize)
			{	
			const pointer _Oldlast = this->_Mylast();
			this->_Mylast() = _Udefault_or_fill(_Oldlast, _Newsize - _Oldsize);
			_Orphan_range(_Oldlast, _Oldlast);
			}
		else if (_Newsize == _Oldsize)
			{	
			}
		else
			{	
			const pointer _Newlast = this->_Myfirst() + _Newsize;
			_Orphan_range(_Newlast, this->_Mylast());
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}
		}

public:
	void resize( const size_type _Newsize)
		{	
		const auto _Lambda_default = [this](pointer _Dest, const size_type _Count)
			{
			return (_Udefault(_Dest, _Count));
			};

		_Resize(_Newsize, _Lambda_default);
		}

	void resize( const size_type _Newsize, const _Ty& _Val)
		{	
		auto _Lambda_fill = [this, &_Val](pointer _Dest, const size_type _Count)
			{
			return (_Ufill(_Dest, _Count, _Val));
			};

		_Resize(_Newsize, _Lambda_fill);
		}

private:
	void _Reallocate_exactly(const size_type _Newcapacity)
		{	
		const size_type _Size = size();

		const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

		try {
		_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
		} catch (...) {
		this->_Getal().deallocate(_Newvec, _Newcapacity);
		throw;
		}

		_Change_array(_Newvec, _Size, _Newcapacity);
		}

public:
	void reserve( const size_type _Newcapacity)
		{	
		if (_Newcapacity > capacity())
			{	
			if (_Newcapacity > max_size())
				{
				_Xlength();
				}

			_Reallocate_exactly(_Newcapacity);
			}
		}

	void shrink_to_fit()
		{	
		if (_Has_unused_capacity())
			{	
			if (empty())
				{
				_Tidy();
				}
			else
				{
				_Reallocate_exactly(size());
				}
			}
		}

	void pop_back()
		{	
 


#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
		--this->_Mylast();
		}

	iterator erase(const_iterator _Where)
		{	
 




#line 1560 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		_Move_unchecked(_Where._Ptr + 1, this->_Mylast(), _Where._Ptr);
		_Alty_traits::destroy(this->_Getal(), _Unfancy(this->_Mylast() - 1));
		--this->_Mylast();
		return (iterator(_Where._Ptr, ::std:: addressof(this->_Get_data())));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
 





#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		if (_First._Ptr != _Last._Ptr)
			{	
			_Orphan_range(_First._Ptr, this->_Mylast());
			const pointer _Newlast = _Move_unchecked(_Last._Ptr, this->_Mylast(), _First._Ptr);
			_Destroy(_Newlast, this->_Mylast());
			this->_Mylast() = _Newlast;
			}

		return (iterator(_First._Ptr, ::std:: addressof(this->_Get_data())));
		}

	void clear() noexcept
		{	
		this->_Orphan_all();
		_Destroy(this->_Myfirst(), this->_Mylast());
		this->_Mylast() = this->_Myfirst();
		}

	void swap(vector& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
			_Swap_adl(this->_Mylast(), _Right._Mylast());
			_Swap_adl(this->_Myend(), _Right._Myend());
			}
		}

	[[nodiscard]] _Ty * data() noexcept
		{	
		return (_Unfancy_maybe_null(this->_Myfirst()));
		}

	[[nodiscard]] const _Ty * data() const noexcept
		{	
		return (_Unfancy_maybe_null(this->_Myfirst()));
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		return (iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myfirst(), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] iterator end() noexcept
		{	
		return (iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		return (const_iterator(this->_Mylast(), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	[[nodiscard]] const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	[[nodiscard]] reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	[[nodiscard]] const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	pointer _Unchecked_begin() noexcept
		{	
		return (this->_Myfirst());
		}

	const_pointer _Unchecked_begin() const noexcept
		{	
		return (this->_Myfirst());
		}

	pointer _Unchecked_end() noexcept
		{	
		return (this->_Mylast());
		}

	const_pointer _Unchecked_end() const noexcept
		{	
		return (this->_Mylast());
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (this->_Myfirst() == this->_Mylast());
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),
			_Alty_traits::max_size(this->_Getal())));
		}

	[[nodiscard]] size_type capacity() const noexcept
		{	
		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));
		}

private:
	size_type _Unused_capacity() const noexcept
		{	
		return (static_cast<size_type>(this->_Myend() - this->_Mylast()));
		}

	bool _Has_unused_capacity() const noexcept
		{	
		return (this->_Myend() != this->_Mylast());
		}

public:
	[[nodiscard]] _Ty& operator[](const size_type _Pos)
		{	
 

#line 1735 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (this->_Myfirst()[_Pos]);
		}

	[[nodiscard]] const _Ty& operator[](const size_type _Pos) const
		{	
 

#line 1744 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (this->_Myfirst()[_Pos]);
		}

	[[nodiscard]] _Ty& at(const size_type _Pos)
		{	
		if (size() <= _Pos)
			{
			_Xrange();
			}

		return (this->_Myfirst()[_Pos]);
		}

	[[nodiscard]] const _Ty& at(const size_type _Pos) const
		{	
		if (size() <= _Pos)
			{
			_Xrange();
			}

		return (this->_Myfirst()[_Pos]);
		}

	[[nodiscard]] _Ty& front()
		{	
 

#line 1773 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (*this->_Myfirst());
		}

	[[nodiscard]] const _Ty& front() const
		{	
 

#line 1782 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (*this->_Myfirst());
		}

	[[nodiscard]] _Ty& back()
		{	
 

#line 1791 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (this->_Mylast()[-1]);
		}

	[[nodiscard]] const _Ty& back() const
		{	
 

#line 1800 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (this->_Mylast()[-1]);
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

private:
	pointer _Udefault(pointer _Dest, const size_type _Count)
		{	
		return (_Uninitialized_value_construct_n(_Dest, _Count, this->_Getal()));
		}

	pointer _Ufill(pointer _Dest, const size_type _Count, const _Ty& _Val)
		{	
		return (_Uninitialized_fill_n(_Dest, _Count, _Val, this->_Getal()));
		}

	template<class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest)
		{	
		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));
		}

	pointer _Umove(pointer _First, pointer _Last, pointer _Dest)
		{	
		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));
		}

	void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type)
		{	
		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());
		}

	void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, false_type)
		{	
		_Uninitialized_copy(_First, _Last, _Dest, this->_Getal());
		}

	void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest)
		{	
		_Umove_if_noexcept1(_First, _Last, _Dest,
			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
		}

	void _Destroy(pointer _First, pointer _Last)
		{	
		_Destroy_range(_First, _Last, this->_Getal());
		}

	size_type _Calculate_growth(const size_type _Newsize) const
		{	
		const size_type _Oldcapacity = capacity();

		if (_Oldcapacity > max_size() - _Oldcapacity / 2)
			{
			return (_Newsize);	
			}

		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

		if (_Geometric < _Newsize)
			{
			return (_Newsize);	
			}

		return (_Geometric);	
		}

	bool _Buy(const size_type _Newcapacity)
		{	
		this->_Myfirst() = pointer();
		this->_Mylast() = pointer();
		this->_Myend() = pointer();

		if (_Newcapacity == 0)
			{
			return (false);
			}

		if (_Newcapacity > max_size())
			{
			_Xlength();
			}

		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);
		this->_Mylast() = this->_Myfirst();
		this->_Myend() = this->_Myfirst() + _Newcapacity;

		return (true);
		}

	void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity)
		{	
		this->_Orphan_all();

		if (this->_Myfirst() != pointer())
			{	
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(), capacity());
			}

		this->_Myfirst() = _Newvec;
		this->_Mylast() = _Newvec + _Newsize;
		this->_Myend() = _Newvec + _Newcapacity;
		}

	void _Tidy()
		{	
		this->_Orphan_all();

		if (this->_Myfirst() != pointer())
			{	
			_Destroy(this->_Myfirst(), this->_Mylast());
			this->_Getal().deallocate(this->_Myfirst(), capacity());

			this->_Myfirst() = pointer();
			this->_Mylast() = pointer();
			this->_Myend() = pointer();
			}
		}

	[[noreturn]] static void _Xlength()
		{	
		_Xlength_error("vector<T> too long");
		}

	[[noreturn]] static void _Xrange()
		{	
		_Xout_of_range("invalid vector<T> subscript");
		}

 






















#line 1958 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
	void _Orphan_range(pointer, pointer) const
		{	
		}
 #line 1962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
	};


template<class _Iter,
	class _Alloc = allocator<_Iter_value_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	vector(_Iter, _Iter, _Alloc = _Alloc())
		-> vector<_Iter_value_t<_Iter>, _Alloc>;
#line 1974 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right) noexcept 
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator==(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator<(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator>(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator<=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc>
	[[nodiscard]] inline bool operator>=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
using _Vbase = unsigned int;	
constexpr int _VBITS = 8 * sizeof (_Vbase);	

template<class _Alloc0>
	struct _Wrap_alloc
	{	
	using _Alloc = _Alloc0;
	};

		
template<class _Alvbase_wrapped>
	class _Vb_iter_base
		: public _Iterator_base
	{	
public:
	using _Alvbase = typename _Alvbase_wrapped::_Alloc;
	using _Sizet = typename allocator_traits<_Alvbase>::size_type;
	using _Difft = typename allocator_traits<_Alvbase>::difference_type;
	using _Mycont = vector<bool, _Rebind_alloc_t<_Alvbase, bool>>;

	_Vb_iter_base()
		: _Myptr(nullptr), _Myoff(0)
		{	
		}

	_Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
		const _Container_base *_Mypvbool)
		: _Myptr(_Ptr), _Myoff(_Off)
		{	
		this->_Adopt(_Mypvbool);
		}

	void _Advance(_Sizet _Off)
		{	
		_Myoff += _Off;
		_Myptr += _Myoff / _VBITS;
		_Myoff %= _VBITS;
		}

	int _Valid(_Sizet _Inc) const
		{	
 







#line 2083 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		(void)_Inc;
		return (-1);
 #line 2086 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

	const _Vbase *_Myptr;
	_Sizet _Myoff;
	};

		
template<class _Alvbase_wrapped>
	class _Vb_reference
		: public _Vb_iter_base<_Alvbase_wrapped>
	{	
	using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;

	_Vb_reference() noexcept
		{	
		}

public:
	_Vb_reference(const _Mybase& _Right)
		: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
		{	
		}

	_Vb_reference& operator=(const _Vb_reference& _Right) noexcept
		{	
		return (*this = bool(_Right));
		}

	_Vb_reference& operator=(bool _Val) noexcept
		{	
		if (_Val)
			*const_cast<_Vbase *>(_Getptr()) |= _Mask();
		else
			*const_cast<_Vbase *>(_Getptr()) &= ~_Mask();
		return (*this);
		}

	void flip() noexcept
		{	
		*const_cast<_Vbase *>(_Getptr()) ^= _Mask();
		}

	operator bool() const noexcept
		{	
		return ((*_Getptr() & _Mask()) != 0);
		}

	const _Vbase *_Getptr() const
		{	
 


#line 2139 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		return (this->_Myptr);
		}

protected:
	_Vbase _Mask() const
		{	
		return (static_cast<_Vbase>(1) << this->_Myoff);
		}
	};

template<class _Alvbase_wrapped> inline
	void swap(_Vb_reference<_Alvbase_wrapped> _Left, _Vb_reference<_Alvbase_wrapped> _Right) noexcept
	{	
	bool _Val = _Left;	
	_Left = _Right;
	_Right = _Val;
	}

		
template<class _Alvbase_wrapped>
	class _Vb_const_iterator
		: public _Vb_iter_base<_Alvbase_wrapped>
	{	
private:
	using _Mybase = _Vb_iter_base<_Alvbase_wrapped>;
	using _Size_type = typename _Mybase::_Sizet;

public:
	using _Reft = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;

	using iterator_category = random_access_iterator_tag;
	using value_type = bool;
	using difference_type = typename _Mybase::_Difft;
	using pointer = const_reference *;
	using reference = const_reference;

	_Vb_const_iterator()
		{	
		}

	_Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
		: _Mybase(_Ptr, 0, _Mypvbool)
		{	
		}

	[[nodiscard]] const_reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Vb_const_iterator& operator++()
		{	
		_Inc();
		return (*this);
		}

	_Vb_const_iterator operator++(int)
		{	
		_Vb_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vb_const_iterator& operator--()
		{	
		_Dec();
		return (*this);
		}

	_Vb_const_iterator operator--(int)
		{	
		_Vb_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vb_const_iterator& operator+=(const difference_type _Off)
		{	
		if (_Off < 0 && this->_Myoff < 0 - static_cast<_Size_type>(_Off))
			{	
			this->_Myoff += _Off;
			this->_Myptr -= 1 + (static_cast<_Size_type>(-1) - this->_Myoff) / _VBITS;
			this->_Myoff %= _VBITS;
			}
		else
			{	
			this->_Myoff += _Off;
			this->_Myptr += this->_Myoff / _VBITS;
			this->_Myoff %= _VBITS;
			}
		return (*this);
		}

	[[nodiscard]] _Vb_const_iterator operator+(const difference_type _Off) const
		{	
		_Vb_const_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vb_const_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _Vb_const_iterator operator-(const difference_type _Off) const
		{	
		_Vb_const_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (static_cast<difference_type>(_VBITS * (this->_Myptr - _Right._Myptr))
			+ static_cast<difference_type>(this->_Myoff)
			- static_cast<difference_type>(_Right._Myoff));
		}

	[[nodiscard]] const_reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	[[nodiscard]] bool operator==(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr == _Right._Myptr
			&& this->_Myoff == _Right._Myoff);
		}

	[[nodiscard]] bool operator!=(const _Vb_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	[[nodiscard]] bool operator<(const _Vb_const_iterator& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr < _Right._Myptr
			|| (this->_Myptr == _Right._Myptr
				&& this->_Myoff < _Right._Myoff));
		}

	[[nodiscard]] bool operator>(const _Vb_const_iterator& _Right) const
		{	
		return (_Right < *this);
		}

	[[nodiscard]] bool operator<=(const _Vb_const_iterator& _Right) const
		{	
		return (!(_Right < *this));
		}

	[[nodiscard]] bool operator>=(const _Vb_const_iterator& _Right) const
		{	
		return (!(*this < _Right));
		}

	void _Compat(const _Vb_const_iterator& _Right) const
		{	
 
		(void)_Right;
 

#line 2306 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

 





#line 2315 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

	void _Dec()
		{	
		if (this->_Myoff != 0)
			--this->_Myoff;
		else
			{	
 



#line 2327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

			this->_Myoff = _VBITS - 1;
			--this->_Myptr;
			}
		}

	void _Inc()
		{	
		if (this->_Myoff < _VBITS - 1)
			++this->_Myoff;
		else
			{	
 



#line 2344 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

			this->_Myoff = 0;
			++this->_Myptr;
			}
		}
	};

template<class _Alvbase_wrapped>
	[[nodiscard]] _Vb_const_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_const_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_const_iterator<_Alvbase_wrapped> _Right)
		{	
		return (_Right += _Off);
		}

	
template<class _Alvbase_wrapped>
	class _Vb_iterator
		: public _Vb_const_iterator<_Alvbase_wrapped>
	{	
public:
	using _Mybase = _Vb_const_iterator<_Alvbase_wrapped>;

	using _Reft = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;

	using iterator_category = random_access_iterator_tag;
	using value_type = bool;
	using difference_type = typename _Mybase::difference_type;
	using pointer = _Reft *;
	using reference = _Reft;

	_Vb_iterator()
		{	
		}

	_Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
		: _Mybase(_Ptr, _Mypvbool)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Vb_iterator& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Vb_iterator operator++(int)
		{	
		_Vb_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Vb_iterator& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Vb_iterator operator--(int)
		{	
		_Vb_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Vb_iterator& operator+=(const difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	[[nodiscard]] _Vb_iterator operator+(const difference_type _Off) const
		{	
		_Vb_iterator _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Vb_iterator& operator-=(const difference_type _Off)
		{	
		return (*this += -_Off);
		}

	[[nodiscard]] _Vb_iterator operator-(const difference_type _Off) const
		{	
		_Vb_iterator _Tmp = *this;
		return (_Tmp -= _Off);
		}

	[[nodiscard]] difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	[[nodiscard]] reference operator[](const difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Alvbase_wrapped>
	[[nodiscard]] inline _Vb_iterator<_Alvbase_wrapped> operator+(
		typename _Vb_iterator<_Alvbase_wrapped>::difference_type _Off,
		_Vb_iterator<_Alvbase_wrapped> _Right)
		{	
		return (_Right += _Off);
		}

		
template<class _Alloc>
	class _Vb_val
		: public _Container_base
	{	
public:
	using _Alproxy = _Rebind_alloc_t<_Alloc, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Alvbase = _Rebind_alloc_t<_Alloc, _Vbase>;
	using _Alvbase_traits = allocator_traits<_Alvbase>;
	using _Vectype = vector<_Vbase, _Alvbase>;
	using _Alvbase_wrapped = _Wrap_alloc<_Alvbase>;
	using size_type = typename _Alvbase_traits::size_type;

	_Vb_val() noexcept(is_nothrow_default_constructible_v<_Vectype>)
		: _Myvec()
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Alloc& _Al) noexcept(is_nothrow_constructible_v<_Vectype, _Alvbase>)
		: _Myvec(static_cast<_Alvbase>(_Al))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(size_type _Count, const bool& _Val)
		: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al)
		: _Myvec(_Nw(_Count), static_cast<_Vbase>(_Val ? -1 : 0), static_cast<_Alvbase>(_Al))
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Vb_val& _Right)
		: _Myvec(_Right._Myvec),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
		: _Myvec(_Right._Myvec, static_cast<_Alvbase>(_Al)),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right) noexcept(is_nothrow_move_constructible_v<_Vectype>)
		: _Myvec(::std:: move(_Right._Myvec)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Vectype, _Vectype, _Alvbase>)
		: _Myvec(::std:: move(_Right._Myvec), static_cast<_Alvbase>(_Al)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	~_Vb_val() noexcept
		{	
		_Free_proxy();
		}

 
	void _Alloc_proxy()
		{	
		}

	void _Free_proxy()
		{	
		}

 
















#line 2563 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

	static size_type _Nw(size_type _Count)
		{	
		return ((_Count + _VBITS - 1) / _VBITS);
		}

	_Vectype _Myvec;	
	size_type _Mysize;	
	};

		
template<class _Alloc>
	class vector<bool, _Alloc>
		: public _Vb_val<_Alloc>
	{	
public:
	static_assert(!1 || is_same_v<bool, typename _Alloc::value_type>,
		"vector<bool, Allocator>" " requires that Allocator's value_type match " "bool" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mybase = _Vb_val<_Alloc>;
	using _Alvbase_wrapped = typename _Mybase::_Alvbase_wrapped;
	using _Alvbase = typename _Mybase::_Alvbase;
	using _Alvbase_traits = typename _Mybase::_Alvbase_traits;

	using size_type = typename _Alvbase_traits::size_type;
	using difference_type = typename _Alvbase_traits::difference_type;
	using allocator_type = _Alloc;

	using reference = _Vb_reference<_Alvbase_wrapped>;
	using const_reference = bool;
	using value_type = bool;

	using _Reft = reference;
	using iterator = _Vb_iterator<_Alvbase_wrapped>;
	using const_iterator = _Vb_const_iterator<_Alvbase_wrapped>;

	using pointer = iterator;
	using const_pointer = const_iterator;
	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	static const int _VBITS = ::std:: _VBITS;
	enum {_EEN_VBITS = _VBITS};	

	vector() noexcept(is_nothrow_default_constructible_v<_Mybase>) 
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Mybase, const _Alloc&>) 
		: _Mybase(_Al)
		{	
		}

	explicit vector( size_type _Count, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, false, _Al)
		{	
		_Trim(_Count);
		}

	vector( size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
		: _Mybase(_Count, _Val, _Al)
		{	
		_Trim(_Count);
		}

	vector(const vector& _Right)
		: _Mybase(_Right)
		{	
		}

	vector(const vector& _Right, const _Alloc& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		_BConstruct(_First, _Last);
		}

	template<class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last)
		{	
		insert(begin(), _First, _Last);
		}

	vector(vector&& _Right)
		noexcept(is_nothrow_move_constructible_v<_Mybase>) 
		: _Mybase(::std:: move(_Right))
		{	
		this->_Swap_all(_Right);
		}

	vector(vector&& _Right, const _Alloc& _Al)
		noexcept(is_nothrow_constructible_v<_Mybase, _Mybase, const _Alloc&>)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		const bool _Swap_iterators = _Alvbase_traits::is_always_equal::value
			|| this->_Myvec._Getal() == _Right._Myvec._Getal();
		if (_Swap_iterators)
			{
			this->_Swap_all(_Right);
			}
		}

	vector& operator=(vector&& _Right)
		noexcept(is_nothrow_move_assignable_v<_Mybase>) 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			clear();

			const bool _Reload = _Alvbase_traits::propagate_on_container_move_assignment::value
				&& !_Alvbase_traits::is_always_equal::value
				&& this->_Myvec._Getal() != _Right._Myvec._Getal();

			if (_Reload)
				{
				this->_Free_proxy();
				}

			this->_Myvec = ::std:: move(_Right._Myvec);

			if (_Reload)
				{
				this->_Alloc_proxy();
				}

			this->_Mysize = _Right._Mysize;
			_Right._Mysize = 0;

			const bool _Swap_iterators = _Alvbase_traits::is_always_equal::value
				|| this->_Myvec._Getal() == _Right._Myvec._Getal();
			if (_Swap_iterators)
				{
				this->_Swap_all(_Right);
				}
			}
		return (*this);
		}

	template<class... _Valty>
		decltype(auto) emplace_back(_Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		push_back(_Tmp);


		return (back());
#line 2718 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		bool _Tmp(::std:: forward<_Valty>(_Val)...);
		return (insert(_Where, _Tmp));
		}

	vector(initializer_list<bool> _Ilist,
			const _Alloc& _Al = allocator_type())
		: _Mybase(0, false, _Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	vector& operator=(initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
			initializer_list<bool> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() noexcept
		{	
		}

	vector& operator=(const vector& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			this->_Orphan_all();

			const bool _Reload = _Alvbase_traits::propagate_on_container_copy_assignment::value
				&& this->_Myvec._Getal() != _Right._Myvec._Getal();

			if (_Reload)
				{
				this->_Free_proxy();
				}

			this->_Myvec = _Right._Myvec;

			if (_Reload)
				{
				this->_Alloc_proxy();
				}

			this->_Mysize = _Right._Mysize;
			}

		return (*this);
		}

	void reserve( size_type _Count)
		{	
		this->_Myvec.reserve(this->_Nw(_Count));
		}

	[[nodiscard]] size_type capacity() const noexcept
		{	
		return (this->_Myvec.capacity() * _VBITS);
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		return (iterator(this->_Myvec.data(), this));
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		return (const_iterator(this->_Myvec.data(), this));
		}

	[[nodiscard]] iterator end() noexcept
		{	
		return (begin() + static_cast<difference_type>(this->_Mysize));
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		return (begin() + static_cast<difference_type>(this->_Mysize));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	void shrink_to_fit()
		{	
		if (this->_Myvec.capacity() != this->_Myvec.size())
			{	
			this->_Orphan_all();
			this->_Myvec.shrink_to_fit();
			}
		}

	iterator _Make_iter(const_iterator _Where)
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += _Where - begin();
		return (_Tmp);
		}

	[[nodiscard]] reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	[[nodiscard]] const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	[[nodiscard]] reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	[[nodiscard]] const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	void resize( size_type _Newsize, bool _Val = false)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + static_cast<difference_type>(_Newsize), end());
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (this->_Mysize);
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		constexpr size_type _Diff_max = static_cast<size_type>((numeric_limits<difference_type>::max)());
		const size_type _Ints_max = this->_Myvec.max_size();
		if (_Ints_max > _Diff_max / _VBITS)
			{	
			return (_Diff_max);
			}

		
		return (_Ints_max * _VBITS);
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (size() == 0);
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Myvec.get_allocator()));
		}

	[[nodiscard]] const_reference at(size_type _Off) const
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	[[nodiscard]] reference at(size_type _Off)
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	[[nodiscard]] const_reference operator[](size_type _Off) const
		{	
		const_iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	[[nodiscard]] reference operator[](size_type _Off)
		{	
		iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	[[nodiscard]] reference front()
		{	
		return (*begin());
		}

	[[nodiscard]] const_reference front() const
		{	
		return (*begin());
		}

	[[nodiscard]] reference back()
		{	
		return (*(end() - 1));
		}

	[[nodiscard]] const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const bool& _Val)
		{	
		insert(end(), _Val);
		}

	void pop_back()
		{	
		erase(end() - 1);
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		void assign(_Iter _First, _Iter _Last)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign( size_type _Count, const bool& _Val)
		{	
		erase(begin(), end());
		_Insert_n(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const bool& _Val)
		{	
		return (_Insert_n(_Where, static_cast<size_type>(1), _Val));
		}

	iterator insert(const_iterator _Where,  size_type _Count,
		const bool& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter,
		class = enable_if_t<_Is_iterator_v<_Iter>>>
		iterator insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		difference_type _Off = _Where - begin();
		_Insert(_Where, _First, _Last, _Iter_cat_t<_Iter>());
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
				input_iterator_tag)
		{	
		difference_type _Off = _Where - begin();

		for (; _First != _Last; ++_First, (void)++_Off)
			insert(begin() + _Off, *_First);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		_Adl_verify_range(_First, _Last);
		size_type _Count = _Convert_size<size_type>(static_cast<size_t>(::std:: distance(_First, _Last)));
		size_type _Off = _Insert_x(_Where, _Count);
		_Copy_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
			begin() + static_cast<difference_type>(_Off));
		}

	iterator erase(const_iterator _Where_arg)
		{	
		iterator _Where = _Make_iter(_Where_arg);
		difference_type _Off = _Where - begin();

 




#line 3031 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
		::std:: copy(_Where + 1, end(), _Where);
 #line 3033 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		_Trim(this->_Mysize - 1);
		return (begin() + _Off);
		}

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);
		difference_type _Off = _First - begin();

		if (_First != _Last)
			{	
 






#line 3055 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
			iterator _Next = ::std:: copy(_Last, end(), _First);
			_Trim(static_cast<size_type>(_Next - begin()));
 #line 3058 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
			}
		return (begin() + _Off);
		}

	void clear() noexcept
		{	
		erase(begin(), end());
		}

	void flip() noexcept
		{	
		for (auto& _Elem : this->_Myvec)
			{
			_Elem = ~_Elem;
			}

		_Trim(this->_Mysize);
		}

	void swap(vector& _Right) noexcept 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			this->_Swap_all(_Right);
			this->_Myvec.swap(_Right._Myvec);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}
		}

	static void swap(reference _Left, reference _Right) noexcept
		{	
		bool _Val = _Left;	
		_Left = _Right;
		_Right = _Val;
		}

	friend hash<vector<bool, _Alloc>>;

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const bool& _Val)
		{	
		size_type _Off = _Insert_x(_Where, _Count);
		const auto _Result = begin() + static_cast<difference_type>(_Off);
		::std:: fill(_Result, _Result + static_cast<difference_type>(_Count), _Val);
		return (_Result);
		}

	size_type _Insert_x(const_iterator _Where, size_type _Count)
		{	
		difference_type _Off = _Where - begin();

 


#line 3113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

		if (_Count != 0)
			{
			if (max_size() - size() < _Count)
				{
				_Xlen();	
				}

			
			this->_Myvec.resize(this->_Nw(size() + _Count), 0);
			if (empty())
				{
				this->_Mysize += _Count;
				}
			else
				{	
				iterator _Oldend = end();
				this->_Mysize += _Count;
				::std:: copy_backward(begin() + _Off, _Oldend, end());
				}



#line 3137 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
			}

		return (static_cast<size_type>(_Off));
		}

 





















#line 3165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
	void _Orphan_range(size_type, size_type) const
		{	
		}
 #line 3169 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"

	void _Trim(size_type _Size)
		{	
		if (max_size() < _Size)
			_Xlen();	
		const size_type _Words = this->_Nw(_Size);

		if (_Words < this->_Myvec.size())
			this->_Myvec.erase(this->_Myvec.begin() + static_cast<difference_type>(_Words),
				this->_Myvec.end());
		this->_Mysize = _Size;
		_Size %= _VBITS;
		if (0 < _Size)
			this->_Myvec[_Words - 1] &= (static_cast<_Vbase>(1) << _Size) - 1;
		}

	[[noreturn]] void _Xlen() const
		{	
		_Xlength_error("vector<bool> too long");
		}

	[[noreturn]] void _Xran() const
		{	
		_Xout_of_range("invalid vector<bool> subscript");
		}
	};

template<class _Alloc>
	[[nodiscard]] inline bool operator==(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& _Left._Myvec == _Right._Myvec);
	}

template<class _Alloc>
	[[nodiscard]] inline bool operator!=(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
template<class _Alloc>
	struct hash<vector<bool, _Alloc>>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef vector<bool, _Alloc> argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(const vector<bool, _Alloc>& _Keyval) const noexcept
		{	
		return (_Hash_array_representation(_Keyval._Myvec.data(), _Keyval._Myvec.size()));
		}
	};


namespace pmr {
template<class _Ty>
	using vector = ::std:: vector<_Ty, polymorphic_allocator<_Ty>>;
} 
#line 3230 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3237 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"
#line 3238 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\vector"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"


 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"


#pragma once







#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {

		
template<class _Iterator,
	class _NodeType>
	struct _Insert_return_type
	{
	_Iterator position;
	bool inserted;
	_NodeType node;
	};

		
template<class _Derived_type,
	class _KeyTy,
	class _ValueTy>
	struct _Node_handle_map_base
	{	
	using key_type = _KeyTy;
	using mapped_type = _ValueTy;

	key_type& key() const noexcept 
		{
		return (_Datum().first);
		}
	mapped_type& mapped() const noexcept 
		{
		return (_Datum().second);
		}
private:
	using _Pair_type = pair<key_type, mapped_type>;
	_Pair_type& _Datum() const
		{
		const auto& _Self = static_cast<const _Derived_type&>(*this);
		auto& _Data = _Self._Getptr()->_Myval;
		
		
		return (reinterpret_cast<_Pair_type&>(_Data));
		}
	};

template<class _Derived_type,
	class _ValueTy>
	struct _Node_handle_set_base
	{	
	using value_type = _ValueTy;

	value_type& value() const noexcept 
		{
		const auto& _Self = static_cast<const _Derived_type&>(*this);
		return (_Self._Getptr()->_Myval);
		}
	};

template<class _Node,
	class _Alloc,
	template <class...> class _Base,
	class... _Types>
	class _Node_handle
		: public _Base<_Node_handle<_Node, _Alloc, _Base, _Types...>, _Types...>
	{	
public:
	using allocator_type = _Alloc;
private:
	using _Alty_traits = allocator_traits<_Alloc>;
	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
	using _Alnode_traits = allocator_traits<_Alnode>;
	using _Nodeptr = typename _Alnode_traits::pointer;

	_Nodeptr _Ptr{};
	aligned_union_t<0, _Alloc> _Alloc_storage;	

	void _Clear() noexcept
		{	
		if (_Ptr)
			{
			_Alloc& _Al = _Getal();
			_Alnode _Node_alloc{_Al};
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Myval));
			_Node::_Freenode0(_Al, _Ptr);
			_Destroy_in_place(_Al);
			_Ptr = nullptr;
			}
		}

	_Node_handle(const _Nodeptr _My_ptr, const _Alloc& _My_alloc) noexcept
		: _Ptr{_My_ptr}
		{	
			
			
		_Construct_in_place(_Getal(), _My_alloc);
		}

public:
	constexpr _Node_handle() noexcept
		: _Alloc_storage{}
		{	
		}

	~_Node_handle() noexcept
		{	
		_Clear();
		}

	_Node_handle(_Node_handle&& _That) noexcept
		: _Ptr{_That._Ptr}
		{	
		if (_Ptr)
			{
			_That._Ptr = nullptr;
			_Alloc& _That_al = _That._Getal();
			_Construct_in_place(_Getal(), ::std:: move(_That_al));
			_Destroy_in_place(_That_al);
			}
		}

	_Node_handle& operator=(_Node_handle&& _That) noexcept 
		{	
		if (!_Ptr)
			{
			if (_That._Ptr)
				{
				_Alloc& _That_al = _That._Getal();
				_Construct_in_place(_Getal(), ::std:: move(_That_al));
				_Destroy_in_place(_That_al);
				_Ptr = ::std:: exchange(_That._Ptr, nullptr);
				}

			return (*this);
			}

		if (!_That._Ptr || this == ::std:: addressof(_That))
			{
			_Clear();
			return (*this);
			}

		_Alloc& _Al = _Getal();
		_Alnode _Node_alloc{_Al};
		_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Myval));
		_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);

		_Alloc& _That_al = _That._Getal();

		_Pocma(_Al, _That_al);





#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"
		_Destroy_in_place(_That_al);

		_Ptr = ::std:: exchange(_That._Ptr, nullptr);
		return (*this);
		}

	_Nodeptr _Getptr() const noexcept
		{
		return (_Ptr);
		}

	_Alloc& _Getal() noexcept
		{	
		return (reinterpret_cast<_Alloc&>(_Alloc_storage));
		}
	const _Alloc& _Getal() const noexcept
		{	
		return (reinterpret_cast<const _Alloc&>(_Alloc_storage));
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept 
		{	
		return (_Getal());
		}

	explicit operator bool() const noexcept
		{	
		return (_Ptr != nullptr);
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (_Ptr == nullptr);
		}

	_Nodeptr _Release() noexcept
		{	
			
		_Destroy_in_place(_Getal());
		return (::std:: exchange(_Ptr, nullptr));
		}

	void swap(_Node_handle& _That) noexcept 
		{	
		if (_Ptr)
			{
			if (_That._Ptr)
				{

				_Pocs(_Getal(), _That._Getal());










#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"
				}
			else
				{
				_Alloc& _Al = _Getal();
				_Construct_in_place(_That._Getal(), ::std:: move(_Al));
				_Destroy_in_place(_Al);
				}
			}
		else
			{
			if (!_That._Ptr)
				{
				return;
				}

			_Alloc& _That_al = _That._Getal();
			_Construct_in_place(_Getal(), ::std:: move(_That_al));
			_Destroy_in_place(_That_al);
			}
		_Swap_adl(_Ptr, _That._Ptr);
		}
	friend void swap(_Node_handle& _Left, _Node_handle& _Right) noexcept 
		{
		_Left.swap(_Right);
		}

	static _Node_handle _Make(const _Nodeptr _Ptr, const allocator_type& _Al)
		{	
			
			
		return (_Node_handle{_Ptr, _Al});
		}
	};

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xnode_handle.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace stdext {
using ::std:: basic_string;
using ::std:: less;
using ::std:: size_t;

		
template<class _Kty> inline
	size_t hash_value(const _Kty& _Keyval)
	{	
	return ((size_t)_Keyval ^ (size_t)0xdeadbeef);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	size_t hash_value(const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: _Hash_array_representation(_Str.c_str(), _Str.size()));
	}

inline size_t hash_value(  const char *_Str)
	{	
	return (::std:: _Hash_array_representation(_Str, :: strlen(_Str)));
	}

inline size_t hash_value(  const wchar_t *_Str)
	{	
	return (::std:: _Hash_array_representation(_Str, :: wcslen(_Str)));
	}

		
template<class _Kty,
	class _Pr = less<_Kty>>
	class hash_compare
	{	
public:
	enum
		{	
		bucket_size = 1		
		};

	hash_compare(_Pr _Pred = _Pr())
		: comp(_Pred)
		{	
		}

	size_t operator()(const _Kty& _Keyval) const
		{	
		long _Quot = (long)(hash_value(_Keyval) & 2147483647L);
		ldiv_t _Qrem = :: ldiv(_Quot, 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647L;
		return ((size_t)_Qrem.rem);
		}

	bool operator()(const _Kty& _Keyval1, const _Kty& _Keyval2) const
		{	
		return (comp(_Keyval1, _Keyval2));
		}

	_Pr comp;	
	};
}	
namespace std {
using stdext::hash_compare;
using stdext::hash_value;
}

namespace std {
		
template<class _Kty,
	class _Hasher,
	class _Keyeq>
	class _Uhash_compare
	{	
public:
	enum
		{	
		bucket_size = 1	
		};

	_Uhash_compare(_Hasher _Hasharg = _Hasher(), _Keyeq _Keyeqarg = _Keyeq())
		: _Mypair(_One_then_variadic_args_t(), _Hasharg,
			_One_then_variadic_args_t(), _Keyeqarg, 0.0f)
		{	
		}

	size_t operator()(const _Kty& _Keyval) const
		{	
		return ((size_t)_Gethash()(_Keyval));
		}

	bool operator()(const _Kty& _Keyval1, const _Kty& _Keyval2) const
		{	
		return (!_Getkeyeq()(_Keyval1, _Keyval2));
		}

	const _Hasher& _Gethash() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Keyeq& _Getkeyeq() const noexcept
		{	
		return (_Mypair._Get_second()._Get_first());
		}

	float& _Get_max_bucket_size() noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

	const float& _Get_max_bucket_size() const noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

	void swap(_Uhash_compare& _Rhs) noexcept(_Is_nothrow_swappable<_Hasher>::value && _Is_nothrow_swappable<_Keyeq>::value)
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
		{
		_Swap_adl(_Mypair._Get_first(), _Rhs._Mypair._Get_first());
		auto& _Lsecond = _Mypair._Get_second();
		auto& _Rsecond = _Rhs._Mypair._Get_second();
		_Swap_adl(_Lsecond._Get_first(), _Rsecond._Get_first());
		::std:: swap(_Lsecond._Get_second(), _Rsecond._Get_second());
		}

	_Compressed_pair<_Hasher, _Compressed_pair<_Keyeq, float>> _Mypair;
	};

		
template<class _Traits>
	class _Hash
	{	
public:
	using key_type = typename _Traits::key_type;
	using key_compare = typename _Traits::key_compare;
	using value_compare = typename _Traits::value_compare;
	enum
		{	
		_Bucket_size = key_compare::bucket_size,
		_Min_buckets = 8,	
		_Multi = _Traits::_Multi};
	using _Mylist = list<typename _Traits::value_type, typename _Traits::allocator_type>;
	using _Alnode = typename _Mylist::_Alnode;
	using _Alnode_traits = typename _Mylist::_Alnode_traits;

	using value_type = typename _Mylist::value_type;
	using allocator_type = typename _Mylist::allocator_type;
	using size_type = typename _Mylist::size_type;
	using difference_type = typename _Mylist::difference_type;
	using pointer = typename _Mylist::pointer;
	using const_pointer = typename _Mylist::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = conditional_t<is_same_v<key_type, value_type>,
		typename _Mylist::const_iterator,
		typename _Mylist::iterator>;
	using const_iterator = typename _Mylist::const_iterator;

	using _Unchecked_iterator = conditional_t<is_same_v<key_type, value_type>,
		typename _Mylist::_Unchecked_const_iterator,
		typename _Mylist::_Unchecked_iterator>;
	using _Unchecked_const_iterator = typename _Mylist::_Unchecked_const_iterator;

	using _Aliter = _Rebind_alloc_t<_Alnode, _Unchecked_iterator>;
	using _Myvec = vector<_Unchecked_iterator, _Aliter>;

	using _Pairib = pair<iterator, bool>;
	using _Pairii = pair<iterator, iterator>;
	using _Paircc = pair<const_iterator, const_iterator>;

	_Hash(const key_compare& _Parg,
		const allocator_type& _Al)
		: _Traitsobj(_Parg),
			_List(_Al),
			_Vec(static_cast<_Aliter>(_Al))
		{	
		_Max_bucket_size() = _Bucket_size;
		_Init();
		}

	template<class _Any_alloc>
		_Hash(const _Hash& _Right, const _Any_alloc& _Al)
		: _Traitsobj(_Right._Traitsobj),
			_List(allocator_type(_Al)),
			_Vec(static_cast<_Aliter>(_Al))
		{	
		_Copy(_Right);
		}

	_Hash(_Hash&& _Right)
		: _Traitsobj(_Right._Traitsobj),
			_List(::std:: move(_Right._List)),
			_Vec(::std:: move(_Right._Vec)),
			_Mask(_Right._Mask),
			_Maxidx(_Right._Maxidx)
		{	
		_Right.clear();
		}

	template<class _Iter>
		void _Move_nodes(_Iter _First, _Iter _Last, true_type)
		{	
		for ( ; _First != _Last; ++_First)
			{
			_List.push_back(::std:: move(*_First));
			}
		}

	template<class _Iter>
		void _Move_nodes(_Iter _First, _Iter _Last, false_type)
		{	
		for ( ; _First != _Last; ++_First)
			{
			_List.emplace_back(::std:: move(const_cast<key_type&>(_First->first)), ::std:: move(_First->second));
			}
		}

	template<class _Other>
		void _Move_assign_list(_Other& _Right, true_type)
		{	
		_List = ::std:: move(_Right._List);
		}

	template<class _Other>
		void _Move_assign_list(_Other& _Right, false_type)
		{	
		_List.clear();

		if (_List._Getal() == _Right._List._Getal())
			{
			_List._Assign_rv(::std:: move(_Right._List), true_type());
			}
		else
			{
			_Move_nodes(_Right._List.begin(), _Right._List.end(), is_same<key_type, value_type>());

			_Init(bucket_count());
			_Reinsert();
			}
		}

	_Hash(_Hash&& _Right, const allocator_type& _Al)
		: _Traitsobj(_Right._Traitsobj),
			_List(_Al),
			_Vec(::std:: move(_Right._Vec), static_cast<_Aliter>(_Al)),
			_Mask(_Right._Mask),
			_Maxidx(_Right._Maxidx)
		{	
		_Move_assign_list(_Right, false_type());

		_Right.clear();
		}

	_Hash& operator=(_Hash&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{
			_Traitsobj = _Right._Traitsobj;
			_Vec = ::std:: move(_Right._Vec);
			_Mask = _Right._Mask;
			_Maxidx = _Right._Maxidx;

			_Move_assign_list(_Right, typename _Alnode_traits::propagate_on_container_move_assignment());

			_Right.clear();
			}

		return (*this);
		}

	template<class... _Valty>
		_Pairib emplace(_Valty&&... _Val)
		{	
		_List.emplace_front(::std:: forward<_Valty>(_Val)...);
		return (_Insert(_List.front(), _Unchecked_begin()));
		}

	template<class... _Valty>
		iterator emplace_hint(const_iterator, _Valty&&... _Val)
		{	
		_List.emplace_front(::std:: forward<_Valty>(_Val)...);
		return (_Insert(_List.front(), _Unchecked_begin()).first);
		}

	_Hash& operator=(const _Hash& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{
			_Mylist _List2(_Right._List.get_allocator());
			_List = _List2;	
			_Myvec _Vec2(_Right._Vec.get_allocator());
			_Vec = _Vec2;	
			_Copy(_Right);
			}

		return (*this);
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		return (_List.begin());
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		return (_List.begin());
		}

	[[nodiscard]] iterator end() noexcept
		{	
		return (_List.end());
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		return (_List.end());
		}

	_Unchecked_iterator _Unchecked_begin()
		{	
		return (_List._Unchecked_begin());
		}

	_Unchecked_const_iterator _Unchecked_begin() const
		{	
		return (_List._Unchecked_begin());
		}

	_Unchecked_iterator _Unchecked_end()
		{	
		return (_List._Unchecked_end());
		}

	_Unchecked_const_iterator _Unchecked_end() const
		{	
		return (_List._Unchecked_end());
		}

	iterator _Make_iter(_Unchecked_const_iterator _Where) const
		{	
		return (_List._Make_iter(_Where));
		}

	iterator _Make_iter(const_iterator _Where) const
		{	
		return (_List._Make_iter(_Where));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (_List.size());
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		return (_List.max_size());
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (_List.empty());
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(_List.get_allocator()));
		}

	[[nodiscard]] key_compare key_comp() const
		{	
		return (_Traitsobj);
		}

	[[nodiscard]] value_compare value_comp() const
		{	
		return (value_compare(key_comp()));
		}

	using local_iterator = iterator;
	using const_local_iterator = const_iterator;

	[[nodiscard]] size_type bucket_count() const noexcept
		{	
		return (_Maxidx);
		}

	[[nodiscard]] size_type max_bucket_count() const noexcept
		{	
		return (_Vec.max_size() / 2);
		}

	[[nodiscard]] size_type bucket(const key_type& _Keyval) const
		{	
		return (_Hashval(_Keyval));
		}

	[[nodiscard]] size_type bucket_size(size_type _Bucket) const
		{	
		size_type _Ans = 0;
		if (_Bucket < _Maxidx)
			for (_Unchecked_const_iterator _Plist = _Begin(_Bucket);
				_Plist != _End(_Bucket); ++_Plist)
				++_Ans;
		return (_Ans);
		}

	[[nodiscard]] local_iterator begin(size_type _Bucket)
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_Begin(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] const_local_iterator begin(size_type _Bucket) const
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_Begin(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] local_iterator end(size_type _Bucket)
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_End(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] const_local_iterator end(size_type _Bucket) const
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_End(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] const_local_iterator cbegin(size_type _Bucket) const
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_Begin(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] const_local_iterator cend(size_type _Bucket) const
		{	
		if (_Bucket < bucket_count())
			return (_Make_iter(_End(_Bucket)));
		else
			return (end());
		}

	[[nodiscard]] float load_factor() const noexcept
		{	
		return ((float)size() / (float)bucket_count());
		}

	[[nodiscard]] float max_load_factor() const noexcept
		{	
		return (_Max_bucket_size());
		}

	void max_load_factor(float _Newmax)
		{	
		if (_Newmax != _Newmax	
			|| _Newmax < 0)
			_Xout_of_range("invalid hash load factor");

		_Max_bucket_size() = _Newmax;
		}

	void rehash(size_type _Buckets)
		{	
		size_type _Maxsize = _Vec.max_size() / 4;
		size_type _Newsize = _Min_buckets;

		while (_Newsize < _Buckets && _Newsize < _Maxsize)
			{
			_Newsize *= 2;	
			}

		if (_Newsize < _Buckets)
			{
			_Xout_of_range("invalid hash bucket count");
			}

		while (!(size() / max_load_factor() < _Newsize) && _Newsize < _Maxsize)
			{	
			_Newsize *= 2;
			}

		_Init(_Newsize);
		_Reinsert();
		}

	void reserve(size_type _Maxcount)
		{	
		rehash((size_type)((float)(_Maxcount / max_load_factor() + 0.5F)));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(const value_type& _Val)
		{	
		return (_Insert(_Val, _Not_a_node_tag()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(const value_type& _Val)
		{	
		return (_Insert(_Val, _Not_a_node_tag()).first);
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(value_type&& _Val)
		{	
		return (_Insert(::std:: move(_Val), _Not_a_node_tag()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(value_type&& _Val)
		{	
		return (_Insert(::std:: move(_Val), _Not_a_node_tag()).first);
		}

	iterator insert(const_iterator,
		const value_type& _Val)
		{	
		return (_Insert(_Val, _Not_a_node_tag()).first);
		}

	iterator insert(const_iterator, value_type&& _Val)
		{	
		return (_Insert(::std:: move(_Val), _Not_a_node_tag()).first);
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last)
		{	
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst)
			{
			emplace(*_UFirst);
			}
		}

	void insert(initializer_list<value_type> _Ilist)
		{	
		insert(_Ilist.begin(), _Ilist.end());
		}

	template<class _Iter = iterator,
		class = enable_if_t<!is_same_v<_Iter, const_iterator>>>
		iterator erase(iterator _Plist)
		{	
		return (erase(const_iterator{_Plist}));
		}

	iterator erase(const_iterator _Plist)
		{	
		size_type _Bucket = _Hashval(_Traits::_Kfn(*_Plist));

		_Erase_bucket(_Make_iter(_Plist), _Bucket);
		return (_List.erase(_Plist));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		if (_First == begin() && _Last == end())
			{	
			clear();
			return (begin());
			}

		
		while (_First != _Last)
			{
			erase(_First++);
			}

		return (_Make_iter(_First));
		}

	size_type erase(const key_type& _Keyval)
		{	
		_Pairii _Where = equal_range(_Keyval);
		const auto _Num = static_cast<size_type>(::std:: distance(_Where.first, _Where.second));
		erase(_Where.first, _Where.second);
		return (_Num);
		}

	void clear() noexcept
		{	
		_List.clear();
		_Init();
		}

	[[nodiscard]] iterator find(const key_type& _Keyval)
		{	
		return (lower_bound(_Keyval));
		}

	[[nodiscard]] const_iterator find(const key_type& _Keyval) const
		{	
		return (lower_bound(_Keyval));
		}

	[[nodiscard]] size_type count(const key_type& _Keyval) const
		{	
		_Paircc _Ans = equal_range(_Keyval);
		return (static_cast<size_type>(::std:: distance(_Ans.first, _Ans.second)));
		}

	[[nodiscard]] iterator lower_bound(const key_type& _Keyval)
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_iterator _Where = _Begin(_Bucket);
			_Where != _End(_Bucket); ++_Where)
			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))
				return (_Traitsobj(_Keyval,
					_Traits::_Kfn(*_Where)) ? end() : _Make_iter(_Where));
		return (end());
		}

	[[nodiscard]] const_iterator lower_bound(const key_type& _Keyval) const
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_const_iterator _Where = _Begin(_Bucket);
			_Where != _End(_Bucket); ++_Where)
			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))
				return (_Traitsobj(_Keyval,
					_Traits::_Kfn(*_Where)) ? end() : _Make_iter(_Where));
		return (end());
		}

	[[nodiscard]] iterator upper_bound(const key_type& _Keyval)
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_iterator _Where = _End(_Bucket);
			_Where != _Begin(_Bucket); )
			if (!_Traitsobj(_Keyval, _Traits::_Kfn(*--_Where)))
				return (_Traitsobj(_Traits::_Kfn(*_Where),
					_Keyval) ? end() : _Make_iter(++_Where));
		return (end());
		}

	[[nodiscard]] const_iterator upper_bound(const key_type& _Keyval) const
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_const_iterator _Where = _End(_Bucket);
			_Where != _Begin(_Bucket); )
			if (!_Traitsobj(_Keyval, _Traits::_Kfn(*--_Where)))
				return (_Traitsobj(_Traits::_Kfn(*_Where),
					_Keyval) ? end() : _Make_iter(++_Where));
		return (end());
		}

	[[nodiscard]] _Pairii equal_range(const key_type& _Keyval)
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_iterator _Where = _Begin(_Bucket);
			_Where != _End(_Bucket); ++_Where)
			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))
				{	
				_Unchecked_iterator _First = _Where;
				for (; _Where != _End(_Bucket); ++_Where)
					if (_Traitsobj(_Keyval, _Traits::_Kfn(*_Where)))
						break;
				if (_First == _Where)
					break;
				return (_Pairii(_Make_iter(_First),
					_Make_iter(_Where)));
				}
		return (_Pairii(end(), end()));
		}

	[[nodiscard]] _Paircc equal_range(const key_type& _Keyval) const
		{	
		size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_const_iterator _Where = _Begin(_Bucket);
			_Where != _End(_Bucket); ++_Where)
			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))
				{	
				_Unchecked_const_iterator _First = _Where;
				for (; _Where != _End(_Bucket); ++_Where)
					if (_Traitsobj(_Keyval, _Traits::_Kfn(*_Where)))
						break;
				if (_First == _Where)
					break;
				return (_Paircc(_Make_iter(_First),
					_Make_iter(_Where)));
				}
		return (_Paircc(end(), end()));
		}

	void swap(_Hash& _Right)
		noexcept(noexcept(_Traitsobj.swap(_Right._Traitsobj))) 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Traitsobj.swap(_Right._Traitsobj);
			_List.swap(_Right._List);
			_Vec.swap(_Right._Vec);
			_Swap_adl(_Mask, _Right._Mask);
			_Swap_adl(_Maxidx, _Right._Maxidx);
			}
		}

protected:
	template<class _Valty>
		_Unchecked_iterator _Buy_if_not_node(_Valty&&, _Unchecked_iterator _Plist)
		{	
		return (_Plist);
		}

	template<class _Valty>
		_Unchecked_iterator _Buy_if_not_node(_Valty&& _Val, _Not_a_node_tag)
		{	
		_List.push_front(::std:: forward<_Valty>(_Val));
		return (_Unchecked_begin());
		}

	void _Destroy_if_node(_Unchecked_iterator _Plist)
		{	
		_List.erase(_Make_iter(_Plist));
		}

	void _Destroy_if_node(_Not_a_node_tag)
		{	
		}

 
public:
	using node_type = typename _Traits::node_type;

	node_type extract(const const_iterator _Where)
		{	
		return (node_type::_Make(_Extract(_Where), _List._Getal()));
		}

	node_type extract(const key_type& _Keyval)
		{	
		const auto _Ptr = _Extract(_Keyval);
		if (!_Ptr)
			{
			return (node_type{});
			}

		return (node_type::_Make(_Ptr, _List._Getal()));
		}

	auto insert(node_type&& _Handle)
		{	
  
		return _Insert_helper(bool_constant<_Multi>{}, ::std:: move(_Handle));
  










#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
		}

	iterator insert(const_iterator, node_type&& _Handle)
		{	
		return (_Insert_node(::std:: move(_Handle)).first);
		}

	template<class>
		friend class _Hash;

	template<class _Other_traits>
		void merge(_Hash<_Other_traits>& _That)
		{	
		static_assert(is_same_v<typename _Mylist::_Nodeptr,
			typename _Hash<_Other_traits>::_Mylist::_Nodeptr>,
			"merge() requires an argument with a compatible node type.");

		static_assert(is_same_v<allocator_type, typename _Hash<_Other_traits>::allocator_type>,
			"merge() requires an argument with the same allocator type.");

  
		if (_Check_self(::std:: addressof(_That)))
			{
			return;
			}
  







#line 845 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"



#line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

		_Node_merge_wrapper<_Other_traits> _Wrapper{_That, {}};
		auto _First = _That.begin();
		const auto _Last = _That.end();
		while (_First != _Last)
			{
			_Wrapper._Where = _First;
			++_First;
			_Insert(_Wrapper._Where._Ptr->_Myval, ::std:: addressof(_Wrapper));
			}
		}

protected:
	_Unchecked_iterator _Buy_if_not_node(_Any_tag, node_type * const _Node_handle)
		{	
		const auto _Ptr = _Node_handle->_Release();
		_List._Relink(_List._Unchecked_begin(), _Ptr);
		return (_List._Unchecked_begin());
		}

	void _Destroy_if_node(node_type *)
		{	
		}

	typename _Mylist::_Nodeptr _Extract(const const_iterator _Where)
		{	
		const size_type _Bucket = _Hashval(_Traits::_Kfn(*_Where));
		_Erase_bucket(_Make_iter(_Where), _Bucket);
		return (_List._Unlinknode(_Where));
		}

	typename _Mylist::_Nodeptr _Extract(const key_type& _Keyval)
		{	
		const size_type _Bucket = _Hashval(_Keyval);
		for (_Unchecked_iterator _Where = _Begin(_Bucket); _Where != _End(_Bucket); ++_Where)
			{
			if (!_Traitsobj(_Traits::_Kfn(*_Where), _Keyval))
				{
				if (_Traitsobj(_Keyval, _Traits::_Kfn(*_Where)))
					{
					break;
					}

				const auto _Iter = _Make_iter(_Where);
				_Erase_bucket(_Iter, _Bucket);
				return (_List._Unlinknode(_Iter));
				}
			}

		return (nullptr);
		}

	_Pairib _Insert_node(node_type&& _Handle)
		{	
		if (_Handle.empty())
			{
			return (_Pairib{end(), false});
			}

  

#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

		return (_Insert(_Handle._Getptr()->_Myval, ::std:: addressof(_Handle)));
		}

	template<class _Other_traits>
		struct _Node_merge_wrapper
		{
		_Hash<_Other_traits>& _That;
		typename _Hash<_Other_traits>::iterator _Where;
		};

	template<class _Other_traits>
		_Unchecked_iterator _Buy_if_not_node(
			_Any_tag, _Node_merge_wrapper<_Other_traits> * const _Wrapper)
		{	
		auto& _That = _Wrapper->_That;
		const auto _Where = _Wrapper->_Where;
		const size_type _Bucket = _That._Hashval(_Other_traits::_Kfn(*_Where));
		_That._Erase_bucket(_Where, _Bucket);
		_List._Splice(_List.begin(), _That._List, _Where, ::std:: next(_Where), 1);
		return (_List._Unchecked_begin());
		}

	template<class _Other_traits>
		void _Destroy_if_node(_Node_merge_wrapper<_Other_traits> *)
		{	
		}

  
private:
	auto _Insert_helper(true_type, node_type&& _Handle)
		{	
		const auto _Result = _Insert_node(::std:: move(_Handle));
		return (_Result.first);
		}

	auto _Insert_helper(false_type, node_type&& _Handle)
		{	
		const auto _Result = _Insert_node(::std:: move(_Handle));
		return (_Insert_return_type<iterator, node_type>{
			_Result.first, _Result.second, ::std:: move(_Handle)});
		}

	bool _Check_self(const _Hash * const _That) const
		{	
		return (this == _That);
		}
	bool _Check_self(const void *) const
		{	
		return (false);
		}
  #line 963 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
 #line 964 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

protected:
	template<class _Valty,
		class _Nodety>
		_Pairib _Insert(_Valty&& _Val, _Nodety _Pnode)
		{	
		size_type _Bucket;
		_Unchecked_iterator _Where;

		try {
		_Bucket = _Hashval(_Traits::_Kfn(_Val));
		_Where = _End(_Bucket);
		while (_Where != _Begin(_Bucket))
			{
#pragma warning(push)
#pragma warning(disable: 4127)	
			if (!_Traitsobj(_Traits::_Kfn(_Val), _Traits::_Kfn(*--_Where)))
				{	
				if (_Multi
					|| (!_Traits::_Standard
						&& _Traitsobj(_Traits::_Kfn(*_Where),
							_Traits::_Kfn(_Val))))
					{	
					++_Where;
					break;
					}

				
				_Destroy_if_node(_Pnode);
				return (_Pairib(_Make_iter(_Where), false));
				}
#pragma warning(pop)
			}
		} catch (...) {
		_Destroy_if_node(_Pnode);
		throw;
		}

		_Unchecked_iterator _Plist =
			_Buy_if_not_node(::std:: forward<_Valty>(_Val), _Pnode);
		_Unchecked_iterator _Next = _Plist;

		if (_Where != ++_Next)	
			_List._Unchecked_splice(_Where, _Plist, _Next);

		_Insert_bucket(_Plist, _Where, _Bucket);

		try {
		_Check_size();
		} catch (...) {
		erase(_Make_iter(_Plist));
		throw;
		}

		return (_Pairib(_Make_iter(_Plist), true));
		}

	_Unchecked_iterator& _Vec_lo(size_type _Bucket)
		{	
		return (_Vec[2 * _Bucket]);
		}

	_Unchecked_const_iterator& _Vec_lo(size_type _Bucket) const
		{	
		return ((_Unchecked_const_iterator&)_Vec[2 * _Bucket]);
		}

	_Unchecked_iterator& _Vec_hi(size_type _Bucket)
		{	
		return (_Vec[2 * _Bucket + 1]);
		}

	_Unchecked_const_iterator& _Vec_hi(size_type _Bucket) const
		{	
		return ((_Unchecked_const_iterator&)_Vec[2 * _Bucket + 1]);
		}

	_Unchecked_iterator _Begin(size_type _Bucket)
		{	
		return (_Vec_lo(_Bucket));
		}

	_Unchecked_const_iterator _Begin(size_type _Bucket) const
		{	
		return (_Vec_lo(_Bucket));
		}

	_Unchecked_iterator _End(size_type _Bucket)
		{	
		if (_Vec_lo(_Bucket) == _Unchecked_end())
			return (_Unchecked_end());
		else
			{	
			_Unchecked_iterator _Ans = _Vec_hi(_Bucket);
			return (++_Ans);
			}
		}
	_Unchecked_const_iterator _End(size_type _Bucket) const
		{	
		if (_Vec_lo(_Bucket) == _Unchecked_end())
			return (_Unchecked_end());
		else
			{	
			_Unchecked_const_iterator _Ans = _Vec_hi(_Bucket);
			return (++_Ans);
			}
		}

	void _Erase_bucket(iterator _Plist_arg, size_type _Bucket)
		{	
		_Unchecked_iterator _Plist = _Plist_arg._Unwrapped();
		if (_Vec_hi(_Bucket) == _Plist)
			{
			if (_Vec_lo(_Bucket) == _Plist)
				{	
				_Vec_lo(_Bucket) = _Unchecked_end();
				_Vec_hi(_Bucket) = _Unchecked_end();
				}
			else
				{
				_Vec_hi(_Bucket) = --_Plist;	
				}
			}
		else if (_Vec_lo(_Bucket) == _Plist)
			{
			_Vec_lo(_Bucket) = ++_Plist;	
			}
		}

	void _Insert_bucket(_Unchecked_iterator _Plist,
		_Unchecked_iterator _Where, size_type _Bucket)
		{	
		if (_Vec_lo(_Bucket) == _Unchecked_end())
			{	
			_Vec_lo(_Bucket) = _Plist;
			_Vec_hi(_Bucket) = _Plist;
			}
		else if (_Vec_lo(_Bucket) == _Where)
			_Vec_lo(_Bucket) = _Plist;	
		else if (++_Vec_hi(_Bucket) != _Plist)	
			--_Vec_hi(_Bucket);	
		}

	void _Copy(const _Hash& _Right)
		{	
		_Mask = _Right._Mask;
		_Maxidx = _Right._Maxidx;
		_List.clear();

		try {
		_Traitsobj = _Right._Traitsobj;
		_Vec.assign(_Right._Vec.size(), _Unchecked_end());
		insert(_Right.begin(), _Right.end());
		} catch (...) {
		clear();	
		throw;
		}
		}

	size_type _Hashval(const key_type& _Keyval) const
		{	
		return (_Traitsobj(_Keyval) & _Mask);
		}

	void _Init(size_type _Buckets = _Min_buckets)
		{	
		_Vec.reserve(2 * _Buckets);	
		_Vec.assign(2 * _Buckets, _Unchecked_end());
		_Mask = _Buckets - 1;
		_Maxidx = _Buckets;
		}

	void _Check_size()
		{	
		if (max_load_factor() < load_factor())

			{	
			size_type _Newsize = bucket_count();

			if (_Newsize < 512)
				_Newsize *= 8;	
			else if (_Newsize < _Vec.max_size() / 2)
				_Newsize *= 2;	
			_Init(_Newsize);
			_Reinsert();
			}
		}

	void _Reinsert()
		{	
		_Unchecked_iterator _Last = _Unchecked_end();
		if (_Unchecked_begin() != _Last)
			for (--_Last; ; )
				{	
				_Unchecked_iterator _First = _Unchecked_begin();
				bool _Done = _First == _Last;
				_Insert(*_First, _First);
				if (_Done)
					break;
				}
		}

	float& _Max_bucket_size() noexcept
		{	
		return (_Traitsobj._Get_max_bucket_size());
		}

	const float& _Max_bucket_size() const noexcept
		{	
		return (_Traitsobj._Get_max_bucket_size());
		}

	_Traits _Traitsobj;	
	_Mylist _List;	
	_Myvec _Vec;	
	size_type _Mask;	
	size_type _Maxidx;	
	};


		
template<class _Hasher>
	using _Is_hasher = negation<disjunction<is_integral<_Hasher>, _Is_allocator<_Hasher>>>;
#line 1188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"

template<class _Traits> inline
	bool _Hash_equal_elements(
		const _Hash<_Traits>& _Left,
		const _Hash<_Traits>& _Right,
		false_type)
	{	
	using _Iter = typename _Hash<_Traits>::const_iterator;
	for (_Iter _Next1 = _Left.begin(); _Next1 != _Left.end(); ++_Next1)
		{	
		_Iter _Next2 = _Right.find(_Traits::_Kfn(*_Next1));
		if (_Next2 == _Right.end()
			|| !(_Traits::_Nonkfn(*_Next1) == _Traits::_Nonkfn(*_Next2)))
			return (false);
		}
	return (true);
	}

template<class _Traits> inline
	bool _Hash_equal_elements(
		const _Hash<_Traits>& _Left,
		const _Hash<_Traits>& _Right,
		true_type)
	{	
	using _Iter = typename _Hash<_Traits>::const_iterator;
	using _Iter_pair = pair<_Iter, _Iter>;

	for (_Iter _Next1 = _Left.begin(); _Next1 != _Left.end(); )
		{	
		_Iter_pair _Lrange = _Left.equal_range(_Traits::_Kfn(*_Next1));
		_Iter_pair _Rrange = _Right.equal_range(_Traits::_Kfn(*_Next1));

		if (!::std:: is_permutation(_Lrange.first, _Lrange.second,
			_Rrange.first, _Rrange.second))
			return (false);
		_Next1 = _Lrange.second;	
		}
	return (true);
	}

template<class _Traits> inline
	bool _Hash_equal(
		const _Hash<_Traits>& _Left,
		const _Hash<_Traits>& _Right)
	{	
	return (_Left.size() == _Right.size() && _Hash_equal_elements(
		_Left, _Right, bool_constant<_Traits::_Multi>{}));
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"
#line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xhash"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"


 
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Kty,	
	class _Ty,	
	class _Tr,	
	class _Alloc,	
	bool _Mfl>	
	class _Umap_traits
		: public _Tr
	{	
public:
	using key_type = _Kty;
	using value_type = pair<const _Kty, _Ty>;
	using key_compare = _Tr;
	using allocator_type = _Alloc;

	using node_type = _Node_handle<
		_List_node<value_type, typename allocator_traits<_Alloc>::void_pointer>,
		_Alloc, _Node_handle_map_base, _Kty, _Ty>;
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

	enum
		{	
		_Multi = _Mfl};

	static constexpr bool _Standard = true;

	_Umap_traits(const _Tr& _Traits = _Tr())
		: _Tr(_Traits)
		{	
		}

	class value_compare
		{	
	public:
		using first_argument_type = value_type;
		using second_argument_type = value_type;
		using result_type = bool;

		bool operator()(const value_type& _Left,
			const value_type& _Right) const
			{	
			return (_Keycompobj(_Left.first, _Right.first));
			}

		value_compare(const key_compare& _Keycomparg)
			: _Keycompobj(_Keycomparg)
			{	
			}

		key_compare _Keycompobj;
		};

	template<class _Ty1,
		class _Ty2>
		static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
		{	
		return (_Val.first);
		}

	template<class _Ty1,
		class _Ty2>
		static const _Ty2& _Nonkfn(const pair<_Ty1, _Ty2>& _Val)
		{	
		return (_Val.second);
		}
	};

		
template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class unordered_map
		: public _Hash<_Umap_traits<_Kty, _Ty,
			_Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, false>>
	{	
public:
	static_assert(!1 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
		"unordered_map<Key, Value, Hasher, Eq, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mytraits = _Uhash_compare<_Kty, _Hasher, _Keyeq>;
	using _Mybase = _Hash<_Umap_traits<_Kty, _Ty, _Mytraits, _Alloc, false>>;
	using hasher = _Hasher;
	using key_type = _Kty;
	using mapped_type = _Ty;
	using key_equal = _Keyeq;
	using key_compare = _Mytraits;	

	using value_type = typename _Mybase::value_type;
	using allocator_type = typename _Mybase::allocator_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;

	using local_iterator = typename _Mybase::iterator;
	using const_local_iterator = typename _Mybase::const_iterator;

	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;
	using _Pairib = typename _Mybase::_Pairib;


	using insert_return_type = _Insert_return_type<iterator, typename _Mybase::node_type>;
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

	unordered_map()
		: _Mybase(key_compare(), allocator_type())
		{	
		}

	explicit unordered_map(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	unordered_map(const unordered_map& _Right)
		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._List._Getal()))
		{	
		}

	unordered_map(const unordered_map& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit unordered_map(size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_map(size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_map(size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_map(size_type _Buckets, const hasher& _Hasharg,
		const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_map(size_type _Buckets, const hasher& _Hasharg,
		const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_map(size_type _Buckets, const hasher& _Hasharg,
		const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last)
		: _Mybase(key_compare(), allocator_type())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_map(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	unordered_map& operator=(const unordered_map& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	unordered_map(unordered_map&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	unordered_map(unordered_map&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	unordered_map& operator=(unordered_map&& _Right)
		noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Hasher> && is_nothrow_move_assignable_v<_Keyeq>)
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	mapped_type& operator[](key_type&& _Keyval)
		{	
		return (try_emplace(::std:: move(_Keyval)).first->second);
		}

	void swap(unordered_map& _Right)
		noexcept(noexcept(_Mybase::swap(_Right))) 
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		_Pairib insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	template<class _Keyty,
		class... _Mappedty>
		_Pairib _Try_emplace(_Keyty&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		iterator _Where = _Mybase::find(_Keyval);
		if (_Where == _Mybase::end())
			return (_Mybase::emplace(
				piecewise_construct,
				::std:: forward_as_tuple(::std:: forward<_Keyty>(_Keyval)),
				::std:: forward_as_tuple(::std:: forward<_Mappedty>(_Mapval)...)));
		else
			return (_Pairib(_Where, false));
		}

	template<class... _Mappedty>
		_Pairib try_emplace(const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class... _Mappedty>
		_Pairib try_emplace(key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class _Keyty,
		class _Mappedty>
		_Pairib _Insert_or_assign(_Keyty&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		iterator _Where = _Mybase::find(_Keyval);
		if (_Where == _Mybase::end())
			return (_Mybase::emplace(
				::std:: forward<_Keyty>(_Keyval),
				::std:: forward<_Mappedty>(_Mapval)));
		else
			{	
			_Where->second = ::std:: forward<_Mappedty>(_Mapval);
			return (_Pairib(_Where, false));
			}
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	unordered_map(initializer_list<value_type> _Ilist)
		: _Mybase(key_compare(), allocator_type())
		{	
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_map& operator=(initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}

	[[nodiscard]] hasher hash_function() const
		{	
		return (_Mybase::_Traitsobj._Gethash());
		}

	[[nodiscard]] key_equal key_eq() const
		{	
		return (_Mybase::_Traitsobj._Getkeyeq());
		}

	mapped_type& operator[](const key_type& _Keyval)
		{	
		return (try_emplace(_Keyval).first->second);
		}

	[[nodiscard]] mapped_type& at(const key_type& _Keyval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end())
			_Xout_of_range("invalid unordered_map<K, T> key");
		return (_Where->second);
		}

	[[nodiscard]] const mapped_type& at(const key_type& _Keyval) const
		{	
		const_iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end())
			_Xout_of_range("invalid unordered_map<K, T> key");
		return (_Where->second);
		}

	using _Mybase::_Unchecked_begin;
	using _Mybase::_Unchecked_end;
	};


template<class _Iter,
	class _Hasher = hash<_Guide_key_t<_Iter>>,
	class _Keyeq = equal_to<_Guide_key_t<_Iter>>,
	class _Alloc = allocator<_Guide_pair_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_hasher<_Hasher>,
		negation<_Is_allocator<_Keyeq>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(_Iter, _Iter,
		_Guide_size_type_t<_Alloc> = 0, _Hasher = _Hasher(), _Keyeq = _Keyeq(), _Alloc = _Alloc())
		-> unordered_map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Hasher, _Keyeq, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>,
	enable_if_t<conjunction_v<
		_Is_hasher<_Hasher>,
		negation<_Is_allocator<_Keyeq>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(initializer_list<pair<const _Kty, _Ty>>,
		_Guide_size_type_t<_Alloc> = 0, _Hasher = _Hasher(), _Keyeq = _Keyeq(), _Alloc = _Alloc())
		-> unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(_Iter, _Iter, _Alloc)
		-> unordered_map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>,
			hash<_Guide_key_t<_Iter>>, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(_Iter, _Iter, _Guide_size_type_t<_Alloc>, _Alloc)
		-> unordered_map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>,
			hash<_Guide_key_t<_Iter>>, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Iter,
	class _Hasher,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_hasher<_Hasher>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(_Iter, _Iter, _Guide_size_type_t<_Alloc>, _Hasher, _Alloc)
		-> unordered_map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Hasher, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	unordered_map(initializer_list<pair<const _Kty, _Ty>>, _Alloc)
		-> unordered_map<_Kty, _Ty, hash<_Kty>, equal_to<_Kty>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	unordered_map(initializer_list<pair<const _Kty, _Ty>>, _Guide_size_type_t<_Alloc>, _Alloc)
		-> unordered_map<_Kty, _Ty, hash<_Kty>, equal_to<_Kty>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_hasher<_Hasher>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_map(initializer_list<pair<const _Kty, _Ty>>, _Guide_size_type_t<_Alloc>, _Hasher, _Alloc)
		-> unordered_map<_Kty, _Ty, _Hasher, equal_to<_Kty>, _Alloc>;
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	void swap(unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	[[nodiscard]] inline bool operator==(
		const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
	{	
	return (_Hash_equal(_Left, _Right));
	}

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(
		const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class unordered_multimap
		: public _Hash<_Umap_traits<_Kty, _Ty,
			_Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, true>>
	{	
public:
	static_assert(!1 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
		"unordered_multimap<Key, Value, Hasher, Eq, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

	using _Mytraits = _Uhash_compare<_Kty, _Hasher, _Keyeq>;
	using _Mybase = _Hash<_Umap_traits<_Kty, _Ty, _Mytraits, _Alloc, true>>;
	using hasher = _Hasher;
	using key_type = _Kty;
	using mapped_type = _Ty;
	using key_equal = _Keyeq;
	using key_compare = _Mytraits;	

	using value_type = typename _Mybase::value_type;
	using allocator_type = typename _Mybase::allocator_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;

	using local_iterator = typename _Mybase::iterator;
	using const_local_iterator = typename _Mybase::const_iterator;

	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;

	unordered_multimap()
		: _Mybase(key_compare(), allocator_type())
		{	
		}

	explicit unordered_multimap(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	unordered_multimap(const unordered_multimap& _Right)
		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._List._Getal()))
		{	
		}

	unordered_multimap(const unordered_multimap& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit unordered_multimap(size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_multimap(size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_multimap(size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_multimap(size_type _Buckets, const hasher& _Hasharg,
		const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_multimap(size_type _Buckets, const hasher& _Hasharg,
		const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		}

	unordered_multimap(size_type _Buckets, const hasher& _Hasharg,
		const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last)
		: _Mybase(key_compare(), allocator_type())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	template<class _Iter>
		unordered_multimap(_Iter _First, _Iter _Last,
			size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_First, _Last);
		}

	unordered_multimap& operator=(const unordered_multimap& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	unordered_multimap(unordered_multimap&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	unordered_multimap(unordered_multimap&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	unordered_multimap& operator=(unordered_multimap&& _Right)
		noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Hasher> && is_nothrow_move_assignable_v<_Keyeq>)
#line 825 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class... _Valty>
		iterator emplace(_Valty&&... _Val)
		{	
		return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
		}

	void swap(unordered_multimap& _Right)
		noexcept(noexcept(_Mybase::swap(_Right))) 
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	unordered_multimap(initializer_list<value_type> _Ilist)
		: _Mybase(key_compare(), allocator_type())
		{	
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets)
		: _Mybase(key_compare(), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg)
		: _Mybase(key_compare(_Hasharg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg,
			const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap(initializer_list<value_type> _Ilist,
		size_type _Buckets, const hasher& _Hasharg,
			const _Keyeq& _Keyeqarg, const allocator_type& _Al)
		: _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
		{	
		_Mybase::rehash(_Buckets);
		insert(_Ilist);
		}

	unordered_multimap& operator=(initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}

	[[nodiscard]] hasher hash_function() const
		{	
		return (_Mybase::_Traitsobj._Gethash());
		}

	[[nodiscard]] key_equal key_eq() const
		{	
		return (_Mybase::_Traitsobj._Getkeyeq());
		}

	using _Mybase::_Unchecked_begin;
	using _Mybase::_Unchecked_end;
	};


template<class _Iter,
	class _Hasher = hash<_Guide_key_t<_Iter>>,
	class _Keyeq = equal_to<_Guide_key_t<_Iter>>,
	class _Alloc = allocator<_Guide_pair_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_hasher<_Hasher>,
		negation<_Is_allocator<_Keyeq>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(_Iter, _Iter,
		_Guide_size_type_t<_Alloc> = 0, _Hasher = _Hasher(), _Keyeq = _Keyeq(), _Alloc = _Alloc())
		-> unordered_multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Hasher, _Keyeq, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>,
	enable_if_t<conjunction_v<
		_Is_hasher<_Hasher>,
		negation<_Is_allocator<_Keyeq>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(initializer_list<pair<const _Kty, _Ty>>,
		_Guide_size_type_t<_Alloc> = 0, _Hasher = _Hasher(), _Keyeq = _Keyeq(), _Alloc = _Alloc())
		-> unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(_Iter, _Iter, _Alloc)
		-> unordered_multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>,
			hash<_Guide_key_t<_Iter>>, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(_Iter, _Iter, _Guide_size_type_t<_Alloc>, _Alloc)
		-> unordered_multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>,
			hash<_Guide_key_t<_Iter>>, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Iter,
	class _Hasher,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_hasher<_Hasher>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(_Iter, _Iter, _Guide_size_type_t<_Alloc>, _Hasher, _Alloc)
		-> unordered_multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Hasher, equal_to<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	unordered_multimap(initializer_list<pair<const _Kty, _Ty>>, _Alloc)
		-> unordered_multimap<_Kty, _Ty, hash<_Kty>, equal_to<_Kty>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	unordered_multimap(initializer_list<pair<const _Kty, _Ty>>, _Guide_size_type_t<_Alloc>, _Alloc)
		-> unordered_multimap<_Kty, _Ty, hash<_Kty>, equal_to<_Kty>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_hasher<_Hasher>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	unordered_multimap(initializer_list<pair<const _Kty, _Ty>>, _Guide_size_type_t<_Alloc>, _Hasher, _Alloc)
		-> unordered_multimap<_Kty, _Ty, _Hasher, equal_to<_Kty>, _Alloc>;
#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	void swap(unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	[[nodiscard]] inline bool operator==(
		const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
	{	
	return (_Hash_equal(_Left, _Right));
	}

template<class _Kty,
	class _Ty,
	class _Hasher,
	class _Keyeq,
	class _Alloc>
	[[nodiscard]] inline bool operator!=(
		const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
		const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}






#line 1070 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"


namespace pmr {
template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>>
	using unordered_map = ::std:: unordered_map<_Kty, _Ty, _Hasher, _Keyeq,
		polymorphic_allocator<pair<const _Kty, _Ty>>>;

template<class _Kty,
	class _Ty,
	class _Hasher = hash<_Kty>,
	class _Keyeq = equal_to<_Kty>>
	using unordered_multimap = ::std:: unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq,
		polymorphic_allocator<pair<const _Kty, _Ty>>>;
} 
#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"
#line 1095 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\unordered_map"





#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		


		


		


		
template<class _Ty = void>
	struct divides
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left / _Right);
		}
	};

		
template<class _Ty = void>
	struct modulus
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left % _Right);
		}
	};

		
template<class _Ty = void>
	struct negate
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left) const
		{	
		return (-_Left);
		}
	};

		


		


		


		


		


		


		
template<class _Ty = void>
	struct logical_and
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left && _Right);
		}
	};

		
template<class _Ty = void>
	struct logical_or
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left || _Right);
		}
	};

		
template<class _Ty = void>
	struct logical_not
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left) const
		{	
		return (!_Left);
		}
	};

		
template<class _Ty = void>
	struct bit_and
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left & _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_or
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left | _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_xor
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty first_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty second_argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left ^ _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_not
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left) const
		{	
		return (~_Left);
		}
	};

		


		


		


		
template<>
	struct divides<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct modulus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct negate<void>
	{	
	typedef int is_transparent;

	template<class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
		-> decltype(-::std:: forward<_Ty>(_Left))
		{	
		return (-::std:: forward<_Ty>(_Left));
		}
	};

		


		


		


		


		


		


		
template<>
	struct logical_and<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct logical_or<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct logical_not<void>
	{	
	typedef int is_transparent;

	template<class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
		-> decltype(!::std:: forward<_Ty>(_Left))
		{	
		return (!::std:: forward<_Ty>(_Left));
		}
	};

		
template<>
	struct bit_and<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_or<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_xor<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_not<void>
	{	
	typedef int is_transparent;

	template<class _Ty>
		constexpr auto operator()(_Ty&& _Left) const
		-> decltype(~::std:: forward<_Ty>(_Left))
		{	
		return (~::std:: forward<_Ty>(_Left));
		}
	};

#pragma warning(push)
#pragma warning(disable: 4996)	
		
template<class _Fn>
	class [[deprecated("warning STL4008: " "std::not1(), std::not2(), std::unary_negate, and std::binary_negate are deprecated in C++17. " "They are superseded by std::not_fn(). " "You can define _SILENCE_CXX17_NEGATORS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] unary_negate
	{	
public:
	typedef typename _Fn::argument_type argument_type;
	typedef bool result_type;

	constexpr explicit unary_negate(const _Fn& _Func)
		: _Functor(_Func)
		{	
		}

	constexpr bool operator()(const argument_type& _Left) const
		{	
		return (!_Functor(_Left));
		}

private:
	_Fn _Functor;	
	};

		
template<class _Fn>
	[[nodiscard]] [[deprecated("warning STL4008: " "std::not1(), std::not2(), std::unary_negate, and std::binary_negate are deprecated in C++17. " "They are superseded by std::not_fn(). " "You can define _SILENCE_CXX17_NEGATORS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] constexpr unary_negate<_Fn> not1(const _Fn& _Func)
	{	
	return (unary_negate<_Fn>(_Func));
	}

		
template<class _Fn>
	class [[deprecated("warning STL4008: " "std::not1(), std::not2(), std::unary_negate, and std::binary_negate are deprecated in C++17. " "They are superseded by std::not_fn(). " "You can define _SILENCE_CXX17_NEGATORS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] binary_negate
	{	
public:
	typedef typename _Fn::first_argument_type first_argument_type;
	typedef typename _Fn::second_argument_type second_argument_type;
	typedef bool result_type;

	constexpr explicit binary_negate(const _Fn& _Func)
		: _Functor(_Func)
		{	
		}

	constexpr bool operator()(const first_argument_type& _Left,
		const second_argument_type& _Right) const
		{	
		return (!_Functor(_Left, _Right));
		}

private:
	_Fn _Functor;	
	};

		
template<class _Fn>
	[[nodiscard]] [[deprecated("warning STL4008: " "std::not1(), std::not2(), std::unary_negate, and std::binary_negate are deprecated in C++17. " "They are superseded by std::not_fn(). " "You can define _SILENCE_CXX17_NEGATORS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] constexpr binary_negate<_Fn> not2(const _Fn& _Func)
	{	
	return (binary_negate<_Fn>(_Func));
	}
#pragma warning(pop)

 


































































































































































































































































































































































































#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	
template<class _Memptr>
	class _Mem_fn
		: public _Weak_types<_Memptr>::type
	{	
private:
	_Memptr _Pm;

public:
	explicit _Mem_fn(_Memptr _Val) noexcept
		: _Pm(_Val)
		{	
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		noexcept(noexcept(::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...)))	
		-> decltype(::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(_Pm, ::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Rx,
	class _Ty>
	[[nodiscard]] inline _Mem_fn<_Rx _Ty::*> mem_fn(_Rx _Ty::* _Pm) noexcept
	{	
	return (_Mem_fn<_Rx _Ty::*>(_Pm));
	}


	
template<class _Ty,
	bool = is_empty_v<_Ty> && !is_final_v<_Ty>>
	class _Ebco_base
		: private _Ty
	{	
private:
	using _Mybase = _Ty;	

protected:
	template<class _Other,
		enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Other>>, _Ebco_base>, int> = 0>
		explicit _Ebco_base(_Other&& _Val) noexcept(is_nothrow_constructible_v<_Ty, _Other>)
		: _Ty(::std:: forward<_Other>(_Val))
		{
		}

	_Ty& _Get_val() noexcept
		{
		return (*this);
		}

	const _Ty& _Get_val() const noexcept
		{
		return (*this);
		}
	};

template<class _Ty>
	class _Ebco_base<_Ty, false>
	{	
private:
	_Ty _Myval;

protected:
	template<class _Other,
		enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Other>>, _Ebco_base>, int> = 0>
		explicit _Ebco_base(_Other&& _Val) noexcept(is_nothrow_constructible_v<_Ty, _Other>)
		: _Myval(::std:: forward<_Other>(_Val))
		{
		}

	_Ty& _Get_val() noexcept
		{
		return (_Myval);
		}

	const _Ty& _Get_val() const noexcept
		{
		return (_Myval);
		}
	};

	
struct _Not_fn_tag
	{
	};

template<class _Decayed>
	class _Not_fn
		: private _Ebco_base<_Decayed>
	{	
private:
	using _Mybase = _Ebco_base<_Decayed>;

public:
	template<class _Callable,
		class _Tag,
		enable_if_t<is_same_v<_Tag, _Not_fn_tag>, int> = 0>
		explicit _Not_fn(_Callable&& _Obj, _Tag)
		noexcept(is_nothrow_constructible_v<_Decayed, _Callable>)	
		: _Mybase(::std:: forward<_Callable>(_Obj))
		{	
		}

	_Not_fn(const _Not_fn&) = default;
	_Not_fn(_Not_fn&&) = default;

	template<class... _Types>
		auto operator()(_Types&&... _Args) &

		noexcept(noexcept(!::std:: invoke(this->_Get_val(), ::std:: forward<_Types>(_Args)...)))	
#line 928 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		-> decltype(!::std:: declval<invoke_result_t<_Decayed&, _Types...>>())
		{	
		return (!::std:: invoke(this->_Get_val(), ::std:: forward<_Types>(_Args)...));
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const &

		noexcept(noexcept(!::std:: invoke(this->_Get_val(), ::std:: forward<_Types>(_Args)...)))	
#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		-> decltype(!::std:: declval<invoke_result_t<const _Decayed&, _Types...>>())
		{	
		return (!::std:: invoke(this->_Get_val(), ::std:: forward<_Types>(_Args)...));
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) &&

		noexcept(noexcept(!::std:: invoke(::std:: move(this->_Get_val()), ::std:: forward<_Types>(_Args)...)))	
#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 951 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		-> decltype(!::std:: declval<invoke_result_t<_Decayed, _Types...>>())
		{	
		return (!::std:: invoke(::std:: move(this->_Get_val()), ::std:: forward<_Types>(_Args)...));
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const &&

		noexcept(noexcept(!::std:: invoke(::std:: move(this->_Get_val()), ::std:: forward<_Types>(_Args)...)))	
#line 961 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		-> decltype(!::std:: declval<invoke_result_t<const _Decayed, _Types...>>())
		{	
		return (!::std:: invoke(::std:: move(this->_Get_val()), ::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable>
	[[nodiscard]] _Not_fn<decay_t<_Callable>> not_fn(_Callable&& _Obj)
	noexcept(is_nothrow_constructible_v<decay_t<_Callable>, _Callable>)	
	{	
	return (_Not_fn<decay_t<_Callable>>(::std:: forward<_Callable>(_Obj), _Not_fn_tag{}));
	}
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"



	
class bad_function_call
	: public exception
	{	
public:
	bad_function_call() noexcept
		{	
		}

	[[nodiscard]] virtual const char *  what() const noexcept override
		{	
		return ("bad function call");
		}
	};

[[noreturn]]  void __cdecl _Xbad_function_call();

	
template<class _Fty>
	class function;

template<class _Ty> inline
	bool _Test_callable(const _Ty& _Arg, true_type) noexcept
	{	
	return (!!_Arg);
	}

template<class _Ty> inline
	bool _Test_callable(const _Ty&, false_type) noexcept
	{	
	return (true);
	}

template<class _Ty> inline
	bool _Test_callable(const _Ty& _Arg) noexcept
	{	
	bool_constant<is_member_pointer_v<_Ty> || (is_pointer_v<_Ty>
		&& is_function_v<remove_pointer_t<_Ty>>)> _Testable;
	return (_Test_callable(_Arg, _Testable));
	}

template<class _Fty> inline
	bool _Test_callable(const function<_Fty>& _Arg) noexcept
	{	
	return (!!_Arg);
	}

#pragma warning(push)
#pragma warning(disable: 4265)	
	
template<class _Rx,
	class... _Types>
	class __declspec(novtable) _Func_base
	{	
public:
	virtual _Func_base * _Copy(void *) const = 0;
	virtual _Func_base * _Move(void *) = 0;
	virtual _Rx _Do_call(_Types&&...) = 0;
	virtual const type_info& _Target_type() const noexcept = 0;
	virtual void _Delete_this(bool) noexcept = 0;


	const void *_Target(const type_info& _Info) const noexcept
		{	
		return (_Target_type() == _Info ? _Get() : nullptr);
		}
#line 1045 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	_Func_base() = default;
	_Func_base(const _Func_base&) = delete;
	_Func_base& operator=(const _Func_base&) = delete;
	

private:
	virtual const void *_Get() const noexcept = 0;
	};
#pragma warning(pop)

	
constexpr size_t _Space_size = (_Small_object_num_ptrs - 1) * sizeof (void *);

template<class _Impl>
	struct _Is_large
		: bool_constant<_Space_size < sizeof (_Impl)
			|| !_Impl::_Nothrow_move::value>
	{	
	};

#pragma warning(push)
#pragma warning(disable: 4265)	















































































































#line 1180 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	
template<class _Callable,
	class _Rx,
	class... _Types>
	class _Func_impl_no_alloc final
		: public _Func_base<_Rx, _Types...>
	{	
public:
	typedef _Func_base<_Rx, _Types...> _Mybase;
	typedef is_nothrow_move_constructible<_Callable> _Nothrow_move;

	template<class _Other,
		class = enable_if_t<!is_same_v<_Func_impl_no_alloc, decay_t<_Other>>>>
		explicit _Func_impl_no_alloc(_Other&& _Val)
		: _Callee(::std:: forward<_Other>(_Val))
		{	
		}

	

private:
	virtual _Mybase *_Copy(void *_Where) const override
		{	
		return (_Clone(_Where, _Is_large<_Func_impl_no_alloc>()));
		}

	_Mybase *_Clone(void *, true_type) const
		{	
		return (_Global_new<_Func_impl_no_alloc>(_Callee));
		}

	_Mybase *_Clone(void *_Where, false_type) const
		{	
		return (::new (_Where) _Func_impl_no_alloc(_Callee));
		}

	virtual _Mybase *_Move(void *_Where) override
		{	
		return (::new (_Where) _Func_impl_no_alloc(::std:: move(_Callee)));
		}

	virtual _Rx _Do_call(_Types&&... _Args) override;

	virtual const type_info& _Target_type() const noexcept override
		{	

		return (typeid(_Callable));


#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		}

	virtual const void *_Get() const noexcept override
		{	
		return (::std:: addressof(_Callee));
		}

	virtual void _Delete_this(bool _Dealloc) noexcept override
		{	
		this->~_Func_impl_no_alloc();
		if (_Dealloc)
			{
			_Deallocate<alignof(_Func_impl_no_alloc)>(this, sizeof(_Func_impl_no_alloc));
			}
		}

	_Callable _Callee;
	};
#pragma warning(pop)

	
template<class _Ret,
	class... _Types>
	class _Func_class
		: public _Arg_types<_Types...>
	{	
public:
	typedef _Ret result_type;

	typedef _Func_base<_Ret, _Types...> _Ptrt;

	_Func_class() noexcept
		{	
		_Set(nullptr);
		}

	_Ret operator()(_Types... _Args) const;

	~_Func_class() noexcept
		{	
		_Tidy();
		}

protected:
	template<class _Fx,
		class _Function>
		using _Enable_if_callable_t = enable_if_t<conjunction_v<
			negation<is_same<decay_t<_Fx>, _Function>>,
			_Is_invocable_r<_Ret, _Fx, _Types...>>>;

	bool _Empty() const noexcept
		{	
		return (_Getimpl() == nullptr);
		}

	void _Reset_copy(const _Func_class& _Right)
		{	
		if (!_Right._Empty())
			{
			_Set(_Right._Getimpl()->_Copy(_Getspace()));
			}
		}

	void _Reset_move(_Func_class&& _Right)
		{	
		if (!_Right._Empty())
			{
			if (_Right._Local())
				{	
				_Set(_Right._Getimpl()->_Move(_Getspace()));
				_Right._Tidy();
				}
			else
				{	
				_Set(_Right._Getimpl());
				_Right._Set(nullptr);
				}
			}
		}

	template<class _Fx>
		void _Reset(_Fx&& _Val)
		{	
		if (!_Test_callable(_Val))
			{	
			return;	
			}

		using _Impl = _Func_impl_no_alloc<decay_t<_Fx>, _Ret, _Types...>;
		_Reset_impl<_Impl>(::std:: forward<_Fx>(_Val), _Is_large<_Impl>());
		}

	template<class _Myimpl,
		class _Fx>
		void _Reset_impl(_Fx&& _Val, true_type)
		{	
		_Set(_Global_new<_Myimpl>(::std:: forward<_Fx>(_Val)));
		}

	template<class _Myimpl,
		class _Fx>
		void _Reset_impl(_Fx&& _Val, false_type)
		{	
		_Set(::new (_Getspace()) _Myimpl(::std:: forward<_Fx>(_Val)));
		}

















































#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	void _Tidy() noexcept
		{	
		if (!_Empty())
			{	
			_Getimpl()->_Delete_this(!_Local());
			_Set(nullptr);
			}
		}

	void _Swap(_Func_class& _Right) noexcept
		{	
		if (!_Local() && !_Right._Local())
			{	
			_Ptrt *_Temp = _Getimpl();
			_Set(_Right._Getimpl());
			_Right._Set(_Temp);
			}
		else
			{	
			_Func_class _Temp;
			_Temp._Reset_move(::std:: move(*this));
			_Reset_move(::std:: move(_Right));
			_Right._Reset_move(::std:: move(_Temp));
			}
		}


	const type_info& _Target_type() const noexcept
		{	
		return (_Getimpl() ? _Getimpl()->_Target_type() : typeid(void));
		}

	const void *_Target(const type_info& _Info) const noexcept
		{	
		return (_Getimpl() ? _Getimpl()->_Target(_Info) : nullptr);
		}
#line 1424 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

private:
	bool _Local() const noexcept
		{	
		return (_Getimpl() == _Getspace());
		}

	union _Storage
		{	
		max_align_t _Dummy1;	
		char _Dummy2[_Space_size];	
		_Ptrt *_Ptrs[_Small_object_num_ptrs];	
		};

	_Storage _Mystorage;
	enum {_EEN_IMPL = _Small_object_num_ptrs - 1};	
	_Ptrt *_Getimpl() const noexcept
		{	
		return (_Mystorage._Ptrs[_Small_object_num_ptrs - 1]);
		}

	void _Set(_Ptrt *_Ptr) noexcept
		{	
		_Mystorage._Ptrs[_Small_object_num_ptrs - 1] = _Ptr;
		}

	void *_Getspace() noexcept
		{	
		return (&_Mystorage);
		}

	const void *_Getspace() const noexcept
		{	
		return (&_Mystorage);
		}
	};

	
template<class _Tx>
	struct _Get_function_impl;









template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };    template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __vectorcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };


	
template<class _Fty>
	class function
		: public _Get_function_impl<_Fty>::type
	{	
private:
	typedef typename _Get_function_impl<_Fty>::type _Mybase;

public:
	function() noexcept
		{	
		}

	function(nullptr_t) noexcept
		{	
		}

	function(const function& _Right)
		{	
		this->_Reset_copy(_Right);
		}

	template<class _Fx,
		class = typename _Mybase::template _Enable_if_callable_t<_Fx&, function>>
		function(_Fx _Func)
		{	
		this->_Reset(::std:: move(_Func));
		}

























#line 1530 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	function& operator=(const function& _Right)
		{	
		function(_Right).swap(*this);
		return (*this);
		}

	function(function&& _Right)
		{	
		this->_Reset_move(::std:: move(_Right));
		}







#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	function& operator=(function&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			this->_Tidy();
			this->_Reset_move(::std:: move(_Right));
			}
		return (*this);
		}

	template<class _Fx,
		class = typename _Mybase::template _Enable_if_callable_t<decay_t<_Fx>&, function>>
		function& operator=(_Fx&& _Func)
		{	
		function(::std:: forward<_Fx>(_Func)).swap(*this);
		return (*this);
		}








#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	function& operator=(nullptr_t) noexcept
		{	
		this->_Tidy();
		return (*this);
		}

	template<class _Fx>
		function& operator=(reference_wrapper<_Fx> _Func) noexcept
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	void swap(function& _Right) noexcept
		{	
		this->_Swap(_Right);
		}

	explicit operator bool() const noexcept
		{	
		return (!this->_Empty());
		}


	[[nodiscard]] const type_info& target_type() const noexcept
		{	
		return (this->_Target_type());
		}

	template<class _Fx>
		[[nodiscard]] _Fx * target() noexcept
		{	
		return (reinterpret_cast<_Fx *>(const_cast<void *>(this->_Target(typeid(_Fx)))));
		}

	template<class _Fx>
		[[nodiscard]] const _Fx * target() const noexcept
		{	
		return (reinterpret_cast<const _Fx *>(this->_Target(typeid(_Fx))));
		}








#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
	};









template<class _Ret, class... _Types> function(_Ret (__cdecl *)(_Types...)) -> function<_Ret (_Types...)>;    template<class _Ret, class... _Types> function(_Ret (__vectorcall *)(_Types...)) -> function<_Ret (_Types...)>;


	
template<class _Fx,
	class = void>
	struct _Deduce_signature
	{	
	};

template<class _Fx>
	struct _Deduce_signature<_Fx, void_t<decltype(&_Fx::operator())>>
		: _Is_memfunptr<decltype(&_Fx::operator())>::_Guide_type
	{	
	};

template<class _Fx>
	function(_Fx)
		-> function<typename _Deduce_signature<_Fx>::type>;
#line 1657 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

	
template<class _Fty> inline
	void swap(function<_Fty>& _Left, function<_Fty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

	
template<class _Fty>
	[[nodiscard]] inline bool operator==(const function<_Fty>& _Other, nullptr_t) noexcept
	{	
	return (!_Other);
	}

template<class _Fty>
	[[nodiscard]] inline bool operator==(nullptr_t, const function<_Fty>& _Other) noexcept
	{	
	return (!_Other);
	}

template<class _Fty>
	[[nodiscard]] inline bool operator!=(const function<_Fty>& _Other, nullptr_t) noexcept
	{	
	return (static_cast<bool>(_Other));
	}

template<class _Fty>
	[[nodiscard]] inline bool operator!=(nullptr_t, const function<_Fty>& _Other) noexcept
	{	
	return (static_cast<bool>(_Other));
	}

	
template<int _Nx>
	struct _Ph
	{	
	};

template<class _Tx>
	struct is_placeholder
		: integral_constant<int, 0>
	{	
	};

template<int _Nx>
	struct is_placeholder<_Ph<_Nx>>
		: integral_constant<int, _Nx>
	{	
	};

template<class _Tx>
	struct is_placeholder<const _Tx>
		: is_placeholder<_Tx>::type
	{	
	};

template<class _Tx>
	struct is_placeholder<volatile _Tx>
		: is_placeholder<_Tx>::type
	{	
	};

template<class _Tx>
	struct is_placeholder<const volatile _Tx>
		: is_placeholder<_Tx>::type
	{	
	};

template<class _Ty>
	inline constexpr int is_placeholder_v = is_placeholder<_Ty>::value;

	
template<class _Ret,
	class _Fx,
	class... _Types>
	class _Binder;

	
template<class _Tx>
	struct is_bind_expression
		: false_type
	{	
	};

template<class _Ret,
	class _Fx,
	class... _Types>
	struct is_bind_expression<_Binder<_Ret, _Fx, _Types...>>
		: true_type
	{	
	};

template<class _Tx>
	struct is_bind_expression<const _Tx>
		: is_bind_expression<_Tx>::type
	{	
	};

template<class _Tx>
	struct is_bind_expression<volatile _Tx>
		: is_bind_expression<_Tx>::type
	{	
	};

template<class _Tx>
	struct is_bind_expression<const volatile _Tx>
		: is_bind_expression<_Tx>::type
	{	
	};

template<class _Ty>
	inline constexpr bool is_bind_expression_v = is_bind_expression<_Ty>::value;

	
template<class _Cv_TiD,
	bool = _Is_specialization_v<remove_cv_t<_Cv_TiD>, reference_wrapper>,
	bool = is_bind_expression_v<_Cv_TiD>,
	int = is_placeholder_v<_Cv_TiD>>
	struct _Select_fixer;

template<class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, true, false, 0>
	{	
	template<class _Untuple>
		static auto _Fix(_Cv_TiD& _Tid, _Untuple&&)
		-> typename _Cv_TiD::type&
		{	
		return (_Tid.get());
		}
	};

template<class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, false, true, 0>
	{	
#pragma warning(push)
#pragma warning(disable: 4100)	
	template<class _Untuple,
		size_t... _Jx>
		static auto _Apply(_Cv_TiD& _Tid, _Untuple&& _Ut,
			index_sequence<_Jx...>)
		-> decltype(_Tid(::std:: get<_Jx>(::std:: move(_Ut))...))
		{	
		return (_Tid(::std:: get<_Jx>(::std:: move(_Ut))...));
		}
#pragma warning(pop)

	template<class _Untuple>
		static auto _Fix(_Cv_TiD& _Tid, _Untuple&& _Ut)
		-> decltype(_Apply(_Tid, ::std:: move(_Ut),
			make_index_sequence<tuple_size_v<_Untuple>>()))
		{	
		return (_Apply(_Tid, ::std:: move(_Ut),
			make_index_sequence<tuple_size_v<_Untuple>>()));
		}
	};

template<class _Cv_TiD>
	struct _Select_fixer<_Cv_TiD, false, false, 0>
	{	
	template<class _Untuple>
		static _Cv_TiD& _Fix(_Cv_TiD& _Tid, _Untuple&&)
		{	
		return (_Tid);
		}
	};

template<class _Cv_TiD,
	int _Jx>
	struct _Select_fixer<_Cv_TiD, false, false, _Jx>
	{	
	static_assert(_Jx > 0, "invalid is_placeholder value");

	template<class _Untuple>
		static auto _Fix(_Cv_TiD&, _Untuple&& _Ut)
		-> decltype(::std:: get<_Jx - 1>(::std:: move(_Ut)))
		{	
		return (::std:: get<_Jx - 1>(::std:: move(_Ut)));
		}
	};

template<class _Cv_TiD,
	class _Untuple> inline
	auto _Fix_arg(_Cv_TiD& _Tid, _Untuple&& _Ut)
	-> decltype(_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)))
	{	
	return (_Select_fixer<_Cv_TiD>::_Fix(_Tid, ::std:: move(_Ut)));
	}

#pragma warning(push)
#pragma warning(disable: 4100)	
	
template<class _Ret,
	size_t... _Ix,
	class _Cv_FD,
	class _Cv_tuple_TiD,
	class _Untuple> inline
	auto _Call_binder(_Invoker_ret<_Ret>, index_sequence<_Ix...>,
		_Cv_FD& _Obj, _Cv_tuple_TiD& _Tpl, _Untuple&& _Ut)
	-> decltype(_Invoker_ret<_Ret>::_Call(_Obj, _Fix_arg(::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...))
	{	
	return (_Invoker_ret<_Ret>::_Call(_Obj, _Fix_arg(::std:: get<_Ix>(_Tpl), ::std:: move(_Ut))...));
	}
#pragma warning(pop)

	
template<class _Ret>
	struct _Forced_result_type
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret result_type;
	};

template<class _Ret,
	class _Fx>
	struct _Binder_result_type
	{	
	typedef decay_t<_Fx> _Decayed;

	typedef typename _Weak_types<_Decayed>::type _All_weak_types;

	typedef conditional_t<is_same_v<_Ret, _Unforced>,
		_Weak_result_type<_All_weak_types>,
		_Forced_result_type<_Ret>> type;
	};

template<class _Ret,
	class _Fx,
	class... _Types>
	class _Binder
		: public _Binder_result_type<_Ret, _Fx>::type
	{	
private:
	typedef index_sequence_for<_Types...> _Seq;
	typedef decay_t<_Fx> _First;
	typedef tuple<decay_t<_Types>...> _Second;

	_Compressed_pair<_First, _Second> _Mypair;

public:
	explicit _Binder(_Fx&& _Func, _Types&&... _Args)
		: _Mypair(_One_then_variadic_args_t(),
			::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...)
		{	
		}













template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs)  -> decltype(_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); } template<class... _Unbound> auto operator()(_Unbound&&... _Unbargs) const -> decltype(_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))) { return (_Call_binder(_Invoker_ret<_Ret>(), _Seq(), _Mypair._Get_first(), _Mypair._Get_second(), ::std:: forward_as_tuple(::std:: forward<_Unbound>(_Unbargs)...))); }

	};

	
template<class _Fx,
	class... _Types>
	[[nodiscard]] inline _Binder<_Unforced, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
	{	
	return (_Binder<_Unforced, _Fx, _Types...>(::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
	}

	
template<class _Ret,
	class _Fx,
	class... _Types>
	[[nodiscard]] _Binder<_Ret, _Fx, _Types...> bind(_Fx&& _Func, _Types&&... _Args)
	{	
	return (_Binder<_Ret, _Fx, _Types...>(::std:: forward<_Fx>(_Func), ::std:: forward<_Types>(_Args)...));
	}

	
		namespace placeholders {	
inline constexpr _Ph<1> _1{};
inline constexpr _Ph<2> _2{};
inline constexpr _Ph<3> _3{};
inline constexpr _Ph<4> _4{};
inline constexpr _Ph<5> _5{};
inline constexpr _Ph<6> _6{};
inline constexpr _Ph<7> _7{};
inline constexpr _Ph<8> _8{};
inline constexpr _Ph<9> _9{};
inline constexpr _Ph<10> _10{};
inline constexpr _Ph<11> _11{};
inline constexpr _Ph<12> _12{};
inline constexpr _Ph<13> _13{};
inline constexpr _Ph<14> _14{};
inline constexpr _Ph<15> _15{};
inline constexpr _Ph<16> _16{};
inline constexpr _Ph<17> _17{};
inline constexpr _Ph<18> _18{};
inline constexpr _Ph<19> _19{};
inline constexpr _Ph<20> _20{};
		}	









#line 1968 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"


	
inline void _Add_alloc_size(size_t& _Size, const size_t _Size_added, const size_t _Alignment)
	{	
		
		
		
	const size_t _Align_masked = _Size & (_Alignment - 1u);
	_Size += _Size_added;
	if (_Align_masked != 0)
		{
		_Size += _Alignment - _Align_masked;
		}
	}

template<class _Ty> inline
	void _Add_alloc_size(size_t& _Size)
	{	
	_Add_alloc_size(_Size, sizeof(_Ty), alignof(_Ty));
	}

template<class _Ty> inline
	void _Add_alloc_size(size_t& _Size, const size_t _Count)
	{	
	if (static_cast<size_t>(-1) / sizeof(_Ty) < _Count)
		{
		_Xbad_alloc();
		}

	_Add_alloc_size(_Size, sizeof(_Ty) * _Count, alignof(_Ty));
	}

inline void * _Decode_aligned_block(void *& _Base, size_t _Size, const size_t _Alignment)
	{	
		
	auto _Space = static_cast<size_t>(-1);
	auto _Result = ::std:: align(_Alignment, _Size, _Base, _Space);
	_Base = static_cast<char *>(_Base) + _Size;
	return (_Result);
	}

template<class _Ty> inline
	_Ty * _Decode_aligned_block(void *& _Base)
	{	
	return (static_cast<_Ty *>(_Decode_aligned_block(_Base, sizeof(_Ty), alignof(_Ty))));
	}

template<class _Ty> inline
	_Ty * _Decode_aligned_block(void *& _Base, const size_t _Count)
	{	
	return (static_cast<_Ty *>(_Decode_aligned_block(_Base, sizeof(_Ty) * _Count, alignof(_Ty))));
	}

		
struct _Global_delete
	{
	void operator()(void * const _Ptr) const
		{
		::operator delete(_Ptr);
		}
	};

		
template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pred_eq> inline
	pair<_FwdItHaystack, _FwdItHaystack> _Search_pair_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
		_FwdItPat _First2, _FwdItPat _Last2, _Pred_eq& _Eq,
		forward_iterator_tag, forward_iterator_tag)
	{	
	for (; ; ++_First1)
		{	
		_FwdItHaystack _Mid1 = _First1;
		for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			{
			if (_Mid2 == _Last2)
				{
				return {_First1, _Mid1};
				}

			if (_Mid1 == _Last1)
				{
				return {_Last1, _Last1};
				}

			if (!_Eq(*_Mid1, *_Mid2))
				{
				break;
				}
			}
		}
	}

template<class _FwdItHaystack,
	class _FwdItPat,
	class _Pred_eq> inline
	pair<_FwdItHaystack, _FwdItHaystack> _Search_pair_unchecked(_FwdItHaystack _First1, _FwdItHaystack _Last1,
		_FwdItPat _First2, _FwdItPat _Last2, _Pred_eq& _Eq,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
	_Iter_diff_t<_FwdItHaystack> _Count1 = _Last1 - _First1;
	_Iter_diff_t<_FwdItPat> _Count2 = _Last2 - _First2;

	for (; _Count2 <= _Count1; ++_First1, (void)--_Count1)
		{	
		_FwdItHaystack _Mid1 = _First1;
		for (_FwdItPat _Mid2 = _First2; ; ++_Mid1, (void)++_Mid2)
			{
			if (_Mid2 == _Last2)
				{
				return {_First1, _Mid1};
				}

			if (!_Eq(*_Mid1, *_Mid2))
				{
				break;
				}
			}
		}

	return {_Last1, _Last1};
	}

template<class _FwdItPat,
	class _Pred_eq = equal_to<>>
	class default_searcher
	{	
public:
	default_searcher(_FwdItPat _First, _FwdItPat _Last, _Pred_eq _Eq = _Pred_eq())
		: _Data{_One_then_variadic_args_t{}, ::std:: move(_Eq), pair<_FwdItPat, _FwdItPat>{_First, _Last}}
		{	
		const auto& _Pat = _Data._Get_second();
		_Adl_verify_range(_Pat.first, _Pat.second);
		}

	template<class _FwdItHaystack>
		[[nodiscard]] pair<_FwdItHaystack, _FwdItHaystack> operator()(_FwdItHaystack _First, _FwdItHaystack _Last) const
		{	
		_Adl_verify_range(_First, _Last);
		const auto& _Eq = _Data._Get_first();
		const auto& _Pat = _Data._Get_second();
		_Adl_verify_range(_Pat.first, _Pat.second); 
		const auto _Result = _Search_pair_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last),
			_Get_unwrapped(_Pat.first), _Get_unwrapped(_Pat.second), _Eq,
			_Iter_cat_t<_FwdItHaystack>{}, _Iter_cat_t<_FwdItPat>{});
		_Seek_wrapped(_Last, _Result.second);
		_Seek_wrapped(_First, _Result.first);
		return {_First, _Last};
		}

private:
	_Compressed_pair<_Pred_eq, pair<_FwdItPat, _FwdItPat>> _Data;
	};


		
template<class _RanItPat,
	class _Hash_ty,
	class _Pred_eq>
	struct _Boyer_moore_hash_delta_1_table
	{	
	using _Value_t = _Iter_value_t<_RanItPat>;
	using _Diff = _Iter_diff_t<_RanItPat>;

	_Boyer_moore_hash_delta_1_table(_RanItPat _Pat_first_arg, _Unwrapped_t<_RanItPat> _UPat_first,
			const _Diff _Pat_size_arg, _Hash_ty&& _Hash_fn, _Pred_eq&& _Eq)
		: _Pat_first(_Pat_first_arg),
		_Pat_size(_Pat_size_arg),
		_Map(0, ::std:: move(_Hash_fn), ::std:: move(_Eq))
		{	
		for (_Diff _Idx = 1; _Idx <= _Pat_size; ++_Idx, (void)++_UPat_first)
			{
			_Map.insert_or_assign(*_UPat_first, _Pat_size - _Idx);
			}
		}

	_Diff _Lookup(const _Value_t& _Value) const
		{	
		const auto _Iter = _Map.find(_Value);
		if (_Iter == _Map.end())
			{
			return (_Pat_size);
			}

		return (_Iter->second);
		}

	_Pred_eq _Get_eq() const
		{	
		return (_Map.key_eq());
		}

	const _RanItPat _Pat_first;
	const _Diff _Pat_size;

private:
	unordered_map<_Value_t, _Diff, _Hash_ty, _Pred_eq> _Map;
	};


		
template<class _RanItPat,
	_Iter_diff_t<_RanItPat> _Limit>
	struct _Boyer_moore_flat_delta_1_table
	{	
	using _Value_t = _Iter_value_t<_RanItPat>;
	using _Diff = _Iter_diff_t<_RanItPat>;

	_Boyer_moore_flat_delta_1_table(_RanItPat _Pat_first_arg, _Unwrapped_t<_RanItPat> _UPat_first,
		const _Diff _Pat_size_arg, _Unused_parameter, _Unused_parameter)
		: _Pat_first(_Pat_first_arg),
		_Pat_size(_Pat_size_arg)
		{	
		::std:: fill(::std:: begin(_Table), ::std:: end(_Table), _Pat_size);
		for (_Diff _Idx = 1; _Idx <= _Pat_size; ++_Idx, (void)++_UPat_first)
			{
			_Table[_Unsigned_value(*_UPat_first)] = _Pat_size - _Idx;
			}
		}

	_Diff _Lookup(const _Value_t _Value) const
		{	
		const auto _UValue = _Unsigned_value(_Value);
		if (_UValue < ::std:: size(_Table))
			{
			return (_Table[_UValue]);
			}

		return (_Pat_size);
		}

	equal_to<> _Get_eq() const
		{	
		return {};
		}

	const _RanItPat _Pat_first;
	const _Diff _Pat_size;

private:
	_Diff _Table[_Limit];
	};


		
template<class _RanItPat,
	class _Pred_eq> inline
	void _Build_boyer_moore_delta_2_table(
		_Iter_diff_t<_RanItPat> * _Shifts,
		const _RanItPat _Pat_first, const _Iter_diff_t<_RanItPat> _Pat_size,
		_Pred_eq& _Eq)
	{	
		
	if (_Pat_size == 0)
		{
		return;
		}

	using _Diff = _Iter_diff_t<_RanItPat>;
	unique_ptr<_Diff[]> _Suffix_fn{::new _Diff[static_cast<size_t>(_Pat_size)]};
	for (_Diff _Idx = 0; _Idx < _Pat_size; ++_Idx)
		{
		_Shifts[_Idx] = 2 * _Pat_size - _Idx - 1;
		}

	_Diff _Suffix = _Pat_size;
	for (_Diff _Idx = _Pat_size; _Idx > 0; --_Idx, (void)--_Suffix)
		{
		_Suffix_fn[static_cast<size_t>(_Idx - 1)] = _Suffix;
		while (_Suffix < _Pat_size && !_Eq(_Pat_first[_Idx - 1], _Pat_first[_Suffix]))
			{
			_Shifts[_Suffix] = _Min_value(_Shifts[_Suffix], _Pat_size - _Idx);
			_Suffix = _Suffix_fn[static_cast<size_t>(_Suffix)];
			}
		}

	for (_Diff _Idx = 0; _Idx <= _Suffix; ++_Idx)
		{
		_Shifts[_Idx] = _Min_value(_Shifts[_Idx], _Pat_size + _Suffix - _Idx);
		}
	}


		
template<class _Delta1_t,
	class _RanItHaystack> inline
	pair<_RanItHaystack, _RanItHaystack> _Boyer_moore_search(
		const _Delta1_t& _Delta1, typename _Delta1_t::_Diff * _Delta2,
		_RanItHaystack _First, _RanItHaystack _Last)
	{	
	static_assert(is_same_v<typename _Delta1_t::_Value_t, _Iter_value_t<_RanItHaystack>>,
		"boyer_moore_searcher requires matching iterator value types");
	using _Diff = typename _Delta1_t::_Diff;
	_Adl_verify_range(_First, _Last);
	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _Pat_size = _Delta1._Pat_size;
	if (_Pat_size == 0)
		{
		return {_First, _First};
		}

	const auto _UPat_first = _Get_unwrapped_n(_Delta1._Pat_first, _Pat_size);
	const auto _Eq = _Delta1._Get_eq();
	_Diff _Shift = _Pat_size - 1;
	while (_Shift < _ULast - _UFirst)
		{
		_UFirst += _Shift;
		_Shift = _Delta1._Lookup(*_UFirst);
		if (_Shift == 0)
			{	
			_Diff _Idx = _Pat_size - 1;
			do
				{
				if (_Idx == 0)
					{
					_Seek_wrapped(_Last, _UFirst + _Pat_size);
					_Seek_wrapped(_First, _UFirst);
					return {_First, _Last};
					}

				--_Idx;
				--_UFirst;
				}
			while (_Eq(*_UFirst, _UPat_first[_Idx]));
			_Shift = _Max_value(_Delta1._Lookup(*_UFirst), _Delta2[_Idx]);
			}
		}

	_Seek_wrapped(_Last, _ULast);
	_Seek_wrapped(_First, _ULast);
	return {_First, _Last};
	}


		
template<class _Delta1_t,
	class _RanItHaystack> inline
	pair<_RanItHaystack, _RanItHaystack> _Boyer_moore_horspool_search(
		const _Delta1_t& _Delta1,
		_RanItHaystack _First, _RanItHaystack _Last)
	{	
	static_assert(is_same_v<typename _Delta1_t::_Value_t, _Iter_value_t<_RanItHaystack>>,
		"boyer_moore_horspool_searcher requires matching iterator value types");
	using _Diff = typename _Delta1_t::_Diff;
	_Adl_verify_range(_First, _Last);
	const auto _Pat_size = _Delta1._Pat_size;
	if (_Pat_size == 0)
		{
		return {_First, _First};
		}

	auto _UFirst = _Get_unwrapped(_First);
	const auto _ULast = _Get_unwrapped(_Last);
	const auto _UPat_first = _Get_unwrapped_n(_Delta1._Pat_first, _Pat_size);
	const auto _Eq = _Delta1._Get_eq();
	_Diff _Shift = _Pat_size - 1;
	while (_Shift < _ULast - _UFirst)
		{
		_UFirst += _Shift;
		_Shift = _Delta1._Lookup(*_UFirst);
		if (_Shift == 0)
			{	
			const auto _Candidate = _UFirst - (_Pat_size - 1);
			if (_Equal_unchecked(_UPat_first, _UPat_first + (_Pat_size - 1), _Candidate, _Pass_fn(_Eq)))
				{
				_Seek_wrapped(_Last, _Candidate + _Pat_size);
				_Seek_wrapped(_First, _Candidate);
				return {_First, _Last};
				}

			_Shift = 1;
			}
		}

	_Seek_wrapped(_Last, _ULast);
	_Seek_wrapped(_First, _ULast);
	return {_First, _Last};
	}


		
template<class _RanItPat,
	class _Hash_ty,
	class _Pred_eq,
	class _Delta1_t>
	struct _Single_delta1_type_boyer_moore_traits
	{
	using _Diff = _Iter_diff_t<_RanItPat>;

	
	
	
	
	

	template<bool _Build_delta2>
		static void * _Build_boyer_moore(_RanItPat _First, _RanItPat _Last,
			_Hash_ty _Hash_fn, _Pred_eq _Eq)
		{	
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _Pat_size_raw = _Get_unwrapped(_Last) - _UFirst;
		using _CT = common_type_t<_Iter_diff_t<_RanItPat>, size_t>;
		if (static_cast<_CT>(_Pat_size_raw) > static_cast<_CT>(0xffffffffffffffffui64))
			{
			_Xbad_alloc();
			}

		const auto _Pat_size = static_cast<size_t>(_Pat_size_raw);
		size_t _Buf_size = 0;
		_Add_alloc_size<_Atomic_counter_t>(_Buf_size);
		_Add_alloc_size<_Delta1_t>(_Buf_size);
		if (_Build_delta2)
			{
			_Add_alloc_size<_Diff>(_Buf_size, _Pat_size);
			}

		unique_ptr<void, _Global_delete> _Buf_bytes(::operator new(_Buf_size));
		void * _Buf = _Buf_bytes.get();
		*_Decode_aligned_block<_Atomic_counter_t>(_Buf) = 1;
		void * const _Delta1 = _Decode_aligned_block<_Delta1_t>(_Buf);
		if (_Build_delta2)
			{
			_Build_boyer_moore_delta_2_table(_Decode_aligned_block<_Diff>(_Buf, _Pat_size),
				_UFirst, _Pat_size_raw, _Eq);
			}

		::new (_Delta1) _Delta1_t(_First, _UFirst, _Pat_size_raw, ::std:: move(_Hash_fn), ::std:: move(_Eq));
		return (_Buf_bytes.release());
		}

	template<class _RanItHaystack>
		static pair<_RanItHaystack, _RanItHaystack> _Use_boyer_moore(void * _Data,
			_RanItHaystack _First, _RanItHaystack _Last)
		{	
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		const auto _Delta1 = _Decode_aligned_block<_Delta1_t>(_Data);
		const auto _Delta2 = _Decode_aligned_block<_Diff>(_Data, static_cast<size_t>(_Delta1->_Pat_size));
		return (_Boyer_moore_search(*_Delta1, _Delta2, _First, _Last));
		}

	template<class _RanItHaystack>
		static pair<_RanItHaystack, _RanItHaystack> _Use_boyer_moore_horspool(void * _Data,
			_RanItHaystack _First, _RanItHaystack _Last)
		{	
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		const auto _Delta1 = _Decode_aligned_block<_Delta1_t>(_Data);
		return (_Boyer_moore_horspool_search(*_Delta1, _First, _Last));
		}

	static void _Destroy(void * const _Base) noexcept
		{	
			
		void * _Data = _Base;
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		_Decode_aligned_block<_Delta1_t>(_Data)->~_Delta1_t();
		::operator delete(_Base);
		}
	};

template<class _RanItPat,
	class _Hash_ty,
	class _Pred_eq>
	using _Boyer_moore_traits_char_mode = _Single_delta1_type_boyer_moore_traits<_RanItPat, _Hash_ty, _Pred_eq,
			_Boyer_moore_flat_delta_1_table<_RanItPat, 256>>;

template<class _RanItPat>
	struct _Boyer_moore_traits_wchar_t_mode
	{
	using _Value_t = _Iter_value_t<_RanItPat>;
	using _Diff = _Iter_diff_t<_RanItPat>;
	using _Big_table_t = _Boyer_moore_flat_delta_1_table<_RanItPat, 65536>;
	using _Small_table_t = _Boyer_moore_flat_delta_1_table<_RanItPat, 256>;

	
	
	
	
	
	

	template<bool _Build_delta2>
		static void * _Build_boyer_moore(_RanItPat _First, _RanItPat _Last,
			_Unused_parameter, _Unused_parameter)
		{	
		_Adl_verify_range(_First, _Last);
		const auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		const auto _Pat_size_raw = _ULast - _UFirst;
		using _CT = common_type_t<_Iter_diff_t<_RanItPat>, size_t>;
		if (static_cast<_CT>(_Pat_size_raw) > static_cast<_CT>(0xffffffffffffffffui64))
			{
			_Xbad_alloc();
			}

		const auto _Pat_size = static_cast<size_t>(_Pat_size_raw);
		size_t _Buf_size = 0;
		_Add_alloc_size<_Atomic_counter_t>(_Buf_size);
		bool _Use_large_table = false;

		for (auto _Temp = _UFirst; _Temp != _ULast; ++_Temp)
			{
			if (_Unsigned_value(*_Temp) > 255)
				{
				_Use_large_table = true;
				break;
				}
			}

		_Add_alloc_size<bool>(_Buf_size);
		if (_Use_large_table)
			{
			_Add_alloc_size<_Big_table_t>(_Buf_size);
			}
		else
			{
			_Add_alloc_size<_Small_table_t>(_Buf_size);
			}

		if (_Build_delta2)
			{
			_Add_alloc_size<_Diff>(_Buf_size, _Pat_size);
			}

		unique_ptr<void, _Global_delete> _Buf_bytes(::operator new(_Buf_size));
		void * _Buf = _Buf_bytes.get();
		*_Decode_aligned_block<_Atomic_counter_t>(_Buf) = 1;
		*_Decode_aligned_block<bool>(_Buf) = _Use_large_table;
		if (_Use_large_table)
			{
			using _Delta1_t = _Big_table_t;
			::new (static_cast<void *>(_Decode_aligned_block<_Delta1_t>(_Buf)))
				_Delta1_t(_First, _UFirst, _Pat_size_raw, {}, {});
			}
		else
			{
			using _Delta1_t = _Small_table_t;
			::new (static_cast<void *>(_Decode_aligned_block<_Delta1_t>(_Buf)))
				_Delta1_t(_First, _UFirst, _Pat_size_raw, {}, {});
			}

		if (_Build_delta2)
			{
			equal_to<> _Eq;
			_Build_boyer_moore_delta_2_table(_Decode_aligned_block<_Diff>(_Buf, _Pat_size),
				_UFirst, _Pat_size_raw, _Eq);
			}

		return (_Buf_bytes.release());
		}

	template<class _RanItHaystack>
		static pair<_RanItHaystack, _RanItHaystack> _Use_boyer_moore(void * _Data,
			_RanItHaystack _First, _RanItHaystack _Last)
		{	
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		if (*_Decode_aligned_block<bool>(_Data))
			{
			const auto _Delta1 = _Decode_aligned_block<_Big_table_t>(_Data);
			const auto _Delta2 = _Decode_aligned_block<_Diff>(_Data, static_cast<size_t>(_Delta1->_Pat_size));
			return (_Boyer_moore_search(*_Delta1, _Delta2, _First, _Last));
			}
		else
			{
			const auto _Delta1 = _Decode_aligned_block<_Small_table_t>(_Data);
			const auto _Delta2 = _Decode_aligned_block<_Diff>(_Data, static_cast<size_t>(_Delta1->_Pat_size));
			return (_Boyer_moore_search(*_Delta1, _Delta2, _First, _Last));
			}
		}

	template<class _RanItHaystack>
		static pair<_RanItHaystack, _RanItHaystack> _Use_boyer_moore_horspool(void * _Data,
			_RanItHaystack _First, _RanItHaystack _Last)
		{	
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		if (*_Decode_aligned_block<bool>(_Data))
			{
			const auto _Delta1 = _Decode_aligned_block<_Big_table_t>(_Data);
			return (_Boyer_moore_horspool_search(*_Delta1, _First, _Last));
			}
		else
			{
			const auto _Delta1 = _Decode_aligned_block<_Small_table_t>(_Data);
			return (_Boyer_moore_horspool_search(*_Delta1, _First, _Last));
			}
		}

	static void _Destroy(void * const _Base) noexcept
		{	
			
		void * _Data = _Base;
		(void)_Decode_aligned_block<_Atomic_counter_t>(_Data);
		if (*_Decode_aligned_block<bool>(_Data))
			{
			const auto _Delta1 = _Decode_aligned_block<_Big_table_t>(_Data);
			_Delta1->~_Big_table_t();
			}
		else
			{
			const auto _Delta1 = _Decode_aligned_block<_Small_table_t>(_Data);
			_Delta1->~_Small_table_t();
			}
		static_assert(is_trivially_destructible_v<_Diff>, "allows Boyer-Moore and Boyer-Moore-Horspool to "
			"share cleanup functions");
		::operator delete(_Base);
		}
	};

template<class _RanItPat,
	class _Hash_ty,
	class _Pred_eq>
	using _Boyer_moore_traits_general_mode = _Single_delta1_type_boyer_moore_traits<_RanItPat, _Hash_ty, _Pred_eq,
			_Boyer_moore_hash_delta_1_table<_RanItPat, _Hash_ty, _Pred_eq>>;

template<class _RanItPat,
	class _Hash_ty,
	class _Pred_eq,
	class _Value_t = _Iter_value_t<_RanItPat>>
	using _Boyer_moore_traits = conditional_t<is_integral_v<_Value_t> && sizeof(_Value_t) <= 2
		&& (is_same_v<equal_to<>, _Pred_eq> || is_same_v<equal_to<_Value_t>, _Pred_eq>),
			conditional_t<sizeof(_Value_t) == 1, _Boyer_moore_traits_char_mode<_RanItPat, _Hash_ty, _Pred_eq>,
			_Boyer_moore_traits_wchar_t_mode<_RanItPat>>,
		_Boyer_moore_traits_general_mode<_RanItPat, _Hash_ty, _Pred_eq>>;


		
template<class _RanItPat,
	class _Hash_ty = hash<_Iter_value_t<_RanItPat>>,
	class _Pred_eq = equal_to<>>
	class boyer_moore_searcher
	{	
public:
	boyer_moore_searcher(const _RanItPat _First, const _RanItPat _Last,
			_Hash_ty _Hash_fn = _Hash_ty(), _Pred_eq _Eq = _Pred_eq())
		: _Data(_Traits::template _Build_boyer_moore<true>(_First, _Last,
			::std:: move(_Hash_fn), ::std:: move(_Eq)))
		{	
		}

	boyer_moore_searcher(const boyer_moore_searcher& _Other) noexcept 
		: _Data(_Other)
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&*static_cast<_Atomic_counter_t *>(_Data)));
		}

	~boyer_moore_searcher() noexcept
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&*static_cast<_Atomic_counter_t *>(_Data))) == 0)
			{
			_Traits::_Destroy(_Data);
			}
		}

	boyer_moore_searcher& operator=(const boyer_moore_searcher& _Other) noexcept 
		{	
		boyer_moore_searcher _Cpy(_Other);
		swap(_Data, _Other._Data);
		}

	template<class _RanItHaystack>
		[[nodiscard]] pair<_RanItHaystack, _RanItHaystack> operator()(
			const _RanItHaystack _First, const _RanItHaystack _Last) const
		{	
		return (_Traits::_Use_boyer_moore(_Data, _First, _Last));
		}
private:
	using _Traits = _Boyer_moore_traits<_RanItPat, _Hash_ty, _Pred_eq>;
	void * _Data;
	};


		
template<class _RanItPat,
	class _Hash_ty = hash<_Iter_value_t<_RanItPat>>,
	class _Pred_eq = equal_to<>>
	class boyer_moore_horspool_searcher
	{	
		
public:
	boyer_moore_horspool_searcher(const _RanItPat _First, const _RanItPat _Last,
			_Hash_ty _Hash_fn = _Hash_ty(), _Pred_eq _Eq = _Pred_eq())
		: _Data(_Traits::template _Build_boyer_moore<false>(_First, _Last,
			::std:: move(_Hash_fn), ::std:: move(_Eq)))
		{	
		}

	boyer_moore_horspool_searcher(
			const boyer_moore_horspool_searcher& _Other) noexcept 
		: _Data(_Other)
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&*static_cast<_Atomic_counter_t *>(_Data)));
		}

	~boyer_moore_horspool_searcher() noexcept
		{
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&*static_cast<_Atomic_counter_t *>(_Data))) == 0)
			{
			_Traits::_Destroy(_Data);
			}
		}

	boyer_moore_horspool_searcher& operator=(
			const boyer_moore_horspool_searcher& _Other) noexcept 
		{	
		boyer_moore_horspool_searcher _Cpy(_Other);
		swap(_Data, _Other._Data);
		}

	template<class _RanItHaystack>
		[[nodiscard]] pair<_RanItHaystack, _RanItHaystack> operator()(
			const _RanItHaystack _First, const _RanItHaystack _Last) const
		{	
		return (_Traits::_Use_boyer_moore_horspool(_Data, _First, _Last));
		}
private:
	using _Traits = _Boyer_moore_traits<_RanItPat, _Hash_ty, _Pred_eq>;
	void * _Data;
	};
#line 2689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"














#line 2704 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"


























#line 2731 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"

template<class _Callable,
	class _Rx,
	class... _Types> inline
	 _Rx _Func_impl_no_alloc<_Callable, _Rx, _Types...>::_Do_call(_Types&&... _Args) 

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		{	

#line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		return (_Invoker_ret<_Rx>::_Call(_Callee, ::std:: forward<_Types>(_Args)...));

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		}

template<class _Ret,
	class... _Types> inline
	_Ret _Func_class<_Ret, _Types...>::operator()(_Types... _Args) const

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		{	

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		if (_Empty())

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
			{

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
			_Xbad_function_call();

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
			}

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		const auto _Impl = _Getimpl();

#line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		return (_Impl->_Do_call(::std:: forward<_Types>(_Args)...));

#line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
		}

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 15732489 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"
#line 15732490 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\functional"





#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"



#line 53 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"


#pragma warning( push )
#pragma warning( disable : 4311 ) 
#pragma warning( disable : 4127 ) 
#line 59 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"



class QBitArray;
class QByteArray;
class QString;
class QStringRef;
class QLatin1String;

__declspec(dllimport) int qGlobalQHashSeed();
__declspec(dllimport) void qSetGlobalQHashSeed(int newSeed);

__declspec(dllimport)  uint qHashBits(const void *p, size_t size, uint seed = 0) noexcept;

 constexpr inline uint qHash(char key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(uchar key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(signed char key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(ushort key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(short key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(uint key, uint seed = 0) noexcept { return key ^ seed; }
 constexpr inline uint qHash(int key, uint seed = 0) noexcept { return uint(key) ^ seed; }
 constexpr inline uint qHash(ulong key, uint seed = 0) noexcept
{
    return (sizeof(ulong) > sizeof(uint))
        ? (uint(((key >> (8 * sizeof(uint) - 1)) ^ key) & (~0U)) ^ seed)
        : (uint(key & (~0U)) ^ seed);
}
 constexpr inline uint qHash(long key, uint seed = 0) noexcept { return qHash(ulong(key), seed); }
 constexpr inline uint qHash(quint64 key, uint seed = 0) noexcept
{
    return uint(((key >> (8 * sizeof(uint) - 1)) ^ key) & (~0U)) ^ seed;
}
 constexpr inline uint qHash(qint64 key, uint seed = 0) noexcept { return qHash(quint64(key), seed); }
__declspec(dllimport)  uint qHash(float key, uint seed = 0) noexcept;
__declspec(dllimport)  uint qHash(double key, uint seed = 0) noexcept;

__declspec(dllimport)  uint qHash(long double key, uint seed = 0) noexcept;
#line 97 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"
 constexpr inline uint qHash(const QChar key, uint seed = 0) noexcept { return qHash(key.unicode(), seed); }
__declspec(dllimport)  uint qHash(const QByteArray &key, uint seed = 0) noexcept;

__declspec(dllimport)  uint qHash(const QString &key, uint seed = 0) noexcept;
__declspec(dllimport)  uint qHash(const QStringRef &key, uint seed = 0) noexcept;
#line 103 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"
__declspec(dllimport)  uint qHash(QStringView key, uint seed = 0) noexcept;
__declspec(dllimport)  uint qHash(const QBitArray &key, uint seed = 0) noexcept;
__declspec(dllimport)  uint qHash(QLatin1String key, uint seed = 0) noexcept;
__declspec(dllimport)  uint qt_hash(QStringView key, uint chained = 0) noexcept;

 inline uint qHash(std::nullptr_t, uint seed = 0) noexcept
{
    return qHash(reinterpret_cast<quintptr>(nullptr), seed);
}

template <class T> inline uint qHash(const T *key, uint seed = 0) noexcept
{
    return qHash(reinterpret_cast<quintptr>(key), seed);
}
template<typename T> inline uint qHash(const T &t, uint seed)
    noexcept(noexcept(qHash(t)))
{ return qHash(t) ^ seed; }

namespace QtPrivate {

struct QHashCombine {
    typedef uint result_type;
    template <typename T>
    constexpr result_type operator()(uint seed, const T &t) const noexcept(noexcept(qHash(t)))
    
    { return seed ^ (qHash(t) + 0x9e3779b9 + (seed << 6) + (seed >> 2)) ; }
};

struct QHashCombineCommutative {
    
    
    
    
    
    typedef uint result_type;
    template <typename T>
    constexpr result_type operator()(uint seed, const T &t) const noexcept(noexcept(qHash(t)))
    { return seed + qHash(t); } 
};

} 

template <typename InputIterator>
inline uint qHashRange(InputIterator first, InputIterator last, uint seed = 0)
    noexcept(noexcept(qHash(*first))) 
{
    return std::accumulate(first, last, seed, QtPrivate::QHashCombine());
}

template <typename InputIterator>
inline uint qHashRangeCommutative(InputIterator first, InputIterator last, uint seed = 0)
    noexcept(noexcept(qHash(*first))) 
{
    return std::accumulate(first, last, seed, QtPrivate::QHashCombineCommutative());
}

template <typename T1, typename T2> inline uint qHash(const QPair<T1, T2> &key, uint seed = 0)
    noexcept(noexcept(qHash(key.first, seed)) && noexcept(qHash(key.second, seed)))
{
    uint h1 = qHash(key.first, seed);
    uint h2 = qHash(key.second, seed);
    return ((h1 << 16) | (h1 >> 16)) ^ h2 ^ seed;
}

template <typename T1, typename T2> inline uint qHash(const std::pair<T1, T2> &key, uint seed = 0)
    noexcept(noexcept(qHash(key.first, seed)) && noexcept(qHash(key.second, seed)))
{
    QtPrivate::QHashCombine hash;
    seed = hash(seed, key.first);
    seed = hash(seed, key.second);
    return seed;
}





























 namespace std { template <> struct hash< ::QString > { using argument_type = ::QString; using result_type = size_t; size_t operator()(const argument_type & s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 
 namespace std { template <> struct hash< ::QStringRef > { using argument_type = ::QStringRef; using result_type = size_t; size_t operator()(const argument_type & s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 
 namespace std { template <> struct hash< ::QStringView > { using argument_type = ::QStringView; using result_type = size_t; size_t operator()(argument_type s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 
 namespace std { template <> struct hash< ::QLatin1String > { using argument_type = ::QLatin1String; using result_type = size_t; size_t operator()(argument_type s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 
 namespace std { template <> struct hash< ::QByteArray > { using argument_type = ::QByteArray; using result_type = size_t; size_t operator()(const argument_type & s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 
 namespace std { template <> struct hash< ::QBitArray > { using argument_type = ::QBitArray; using result_type = size_t; size_t operator()(const argument_type & s) const noexcept(noexcept(::qHash(s))) { return ::qHash(s, ::qHash( std::hash<int>{}(0))); } }; } 




#pragma warning( pop )
#line 216 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"

#line 218 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhashfunctions.h"
#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"












template<class T, int Prealloc>
class QVarLengthArray
{
public:
    QVarLengthArray() : QVarLengthArray(0) {}

    inline explicit QVarLengthArray(int size);

    inline QVarLengthArray(const QVarLengthArray<T, Prealloc> &other)
        : a(Prealloc), s(0), ptr(reinterpret_cast<T *>(array))
    {
        append(other.constData(), other.size());
    }

    QVarLengthArray(std::initializer_list<T> args)
        : QVarLengthArray(args.begin(), args.end())
    {
    }

    template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator> = true>
    inline QVarLengthArray(InputIterator first, InputIterator last)
        : QVarLengthArray()
    {
        QtPrivate::reserveIfForwardIterator(this, first, last);
        std::copy(first, last, std::back_inserter(*this));
    }

    inline ~QVarLengthArray() {
        if (QTypeInfo<T>::isComplex) {
            T *i = ptr + s;
            while (i-- != ptr)
                i->~T();
        }
        if (ptr != reinterpret_cast<T *>(array))
            free(ptr);
    }
    inline QVarLengthArray<T, Prealloc> &operator=(const QVarLengthArray<T, Prealloc> &other)
    {
        if (this != &other) {
            clear();
            append(other.constData(), other.size());
        }
        return *this;
    }

    QVarLengthArray<T, Prealloc> &operator=(std::initializer_list<T> list)
    {
        resize(int(list.size())); 
        std::copy(list.begin(), list.end(),
                  stdext::make_checked_array_iterator(this->begin(), size_t(this->size())));
        return *this;
    }

    inline void removeLast() {
        static_cast<void>(false && (s > 0));
        if (QTypeInfo<T>::isComplex)
            ptr[s - 1].~T();
        --s;
    }
    inline int size() const { return s; }
    inline int count() const { return s; }
    inline int length() const { return s; }
    inline T& first() { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline const T& first() const { static_cast<void>(false && (!isEmpty())); return *begin(); }
    T& last() { static_cast<void>(false && (!isEmpty())); return *(end() - 1); }
    const T& last() const { static_cast<void>(false && (!isEmpty())); return *(end() - 1); }
    inline bool isEmpty() const { return (s == 0); }
    inline void resize(int size);
    inline void clear() { resize(0); }
    inline void squeeze();

    inline int capacity() const { return a; }
    inline void reserve(int size);

    inline int indexOf(const T &t, int from = 0) const;
    inline int lastIndexOf(const T &t, int from = -1) const;
    inline bool contains(const T &t) const;

    inline T &operator[](int idx) {
        static_cast<void>(false && (idx >= 0 && idx < s));
        return ptr[idx];
    }
    inline const T &operator[](int idx) const {
        static_cast<void>(false && (idx >= 0 && idx < s));
        return ptr[idx];
    }
    inline const T &at(int idx) const { return operator[](idx); }

    T value(int i) const;
    T value(int i, const T &defaultValue) const;

    inline void append(const T &t) {
        if (s == a) {   
            T copy(t);
            realloc(s, s<<1);
            const int idx = s++;
            if (QTypeInfo<T>::isComplex) {
                new (ptr + idx) T(std::move(copy));
            } else {
                ptr[idx] = std::move(copy);
            }
        } else {
            const int idx = s++;
            if (QTypeInfo<T>::isComplex) {
                new (ptr + idx) T(t);
            } else {
                ptr[idx] = t;
            }
        }
    }

    void append(T &&t) {
        if (s == a)
            realloc(s, s << 1);
        const int idx = s++;
        if (QTypeInfo<T>::isComplex)
            new (ptr + idx) T(std::move(t));
        else
            ptr[idx] = std::move(t);
    }

    void append(const T *buf, int size);
    inline QVarLengthArray<T, Prealloc> &operator<<(const T &t)
    { append(t); return *this; }
    inline QVarLengthArray<T, Prealloc> &operator<<(T &&t)
    { append(std::move(t)); return *this; }
    inline QVarLengthArray<T, Prealloc> &operator+=(const T &t)
    { append(t); return *this; }
    inline QVarLengthArray<T, Prealloc> &operator+=(T &&t)
    { append(std::move(t)); return *this; }

    void prepend(T &&t);
    void prepend(const T &t);
    void insert(int i, T &&t);
    void insert(int i, const T &t);
    void insert(int i, int n, const T &t);
    void replace(int i, const T &t);
    void remove(int i);
    void remove(int i, int n);


    inline T *data() { return ptr; }
    inline const T *data() const { return ptr; }
    inline const T * constData() const { return ptr; }
    typedef int size_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &reference;
    typedef const value_type &const_reference;
    typedef qptrdiff difference_type;


    typedef T* iterator;
    typedef const T* const_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    inline iterator begin() { return ptr; }
    inline const_iterator begin() const { return ptr; }
    inline const_iterator cbegin() const { return ptr; }
    inline const_iterator constBegin() const { return ptr; }
    inline iterator end() { return ptr + s; }
    inline const_iterator end() const { return ptr + s; }
    inline const_iterator cend() const { return ptr + s; }
    inline const_iterator constEnd() const { return ptr + s; }
    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const { return const_reverse_iterator(begin()); }
    iterator insert(const_iterator before, int n, const T &x);
    iterator insert(const_iterator before, T &&x);
    inline iterator insert(const_iterator before, const T &x) { return insert(before, 1, x); }
    iterator erase(const_iterator begin, const_iterator end);
    inline iterator erase(const_iterator pos) { return erase(pos, pos+1); }

    
    inline bool empty() const { return isEmpty(); }
    inline void push_back(const T &t) { append(t); }
    void push_back(T &&t) { append(std::move(t)); }
    inline void pop_back() { removeLast(); }
    inline T &front() { return first(); }
    inline const T &front() const { return first(); }
    inline T &back() { return last(); }
    inline const T &back() const { return last(); }
    void shrink_to_fit() { squeeze(); }

private:
    void realloc(int size, int alloc);

    int a;      
    int s;      
    T *ptr;     
    union {
        char array[Prealloc * sizeof(T)];
        qint64 q_for_alignment_1;
        double q_for_alignment_2;
    };

    bool isValidIterator(const const_iterator &i) const
    {
        const std::less<const T*> less = {};
        return !less(cend(), i) && !less(i, cbegin());
    }
};


template <typename InputIterator,
          typename ValueType = typename std::iterator_traits<InputIterator>::value_type,
          QtPrivate::IfIsInputIterator<InputIterator> = true>
QVarLengthArray(InputIterator, InputIterator) -> QVarLengthArray<ValueType>;
#line 274 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"

template <class T, int Prealloc>
inline QVarLengthArray<T, Prealloc>::QVarLengthArray(int asize)
    : s(asize) {
    static_assert(bool(Prealloc > 0), "QVarLengthArray Prealloc must be greater than 0.");
    static_cast<void>(false && (s >= 0));
    if (s > Prealloc) {
        ptr = reinterpret_cast<T *>(malloc(s * sizeof(T)));
        do { if (!(ptr)) qBadAlloc(); } while (false);
        a = s;
    } else {
        ptr = reinterpret_cast<T *>(array);
        a = Prealloc;
    }
    if (QTypeInfo<T>::isComplex) {
        T *i = ptr + s;
        while (i != ptr)
            new (--i) T;
    }
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::resize(int asize)
{ realloc(asize, qMax(asize, a)); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::reserve(int asize)
{ if (asize > a) realloc(s, asize); }

template <class T, int Prealloc>
inline int QVarLengthArray<T, Prealloc>::indexOf(const T &t, int from) const
{
    if (from < 0)
        from = qMax(from + s, 0);
    if (from < s) {
        T *n = ptr + from - 1;
        T *e = ptr + s;
        while (++n != e)
            if (*n == t)
                return n - ptr;
    }
    return -1;
}

template <class T, int Prealloc>
inline int QVarLengthArray<T, Prealloc>::lastIndexOf(const T &t, int from) const
{
    if (from < 0)
        from += s;
    else if (from >= s)
        from = s - 1;
    if (from >= 0) {
        T *b = ptr;
        T *n = ptr + from + 1;
        while (n != b) {
            if (*--n == t)
                return n - b;
        }
    }
    return -1;
}

template <class T, int Prealloc>
inline bool QVarLengthArray<T, Prealloc>::contains(const T &t) const
{
    T *b = ptr;
    T *i = ptr + s;
    while (i != b) {
        if (*--i == t)
            return true;
    }
    return false;
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::append(const T *abuf, int increment)
{
    static_cast<void>(false && (abuf));
    if (increment <= 0)
        return;

    const int asize = s + increment;

    if (asize >= a)
        realloc(s, qMax(s*2, asize));

    if (QTypeInfo<T>::isComplex) {
        
        while (s < asize)
            new (ptr+(s++)) T(*abuf++);
    } else {
        memcpy(static_cast<void *>(&ptr[s]), static_cast<const void *>(abuf), increment * sizeof(T));
        s = asize;
    }
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::squeeze()
{ realloc(s, s); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::realloc(int asize, int aalloc)
{
    static_cast<void>(false && (aalloc >= asize));
    T *oldPtr = ptr;
    int osize = s;

    const int copySize = qMin(asize, osize);
    do { const bool valueOfExpression = copySize >= 0; static_cast<void>(false && (valueOfExpression)); __assume(valueOfExpression); } while (false);
    if (aalloc != a) {
        if (aalloc > Prealloc) {
            T* newPtr = reinterpret_cast<T *>(malloc(aalloc * sizeof(T)));
            do { if (!(newPtr)) qBadAlloc(); } while (false); 
            
            ptr = newPtr;
            a = aalloc;
        } else {
            ptr = reinterpret_cast<T *>(array);
            a = Prealloc;
        }
        s = 0;
        if (!QTypeInfoQuery<T>::isRelocatable) {
            try {
                
                while (s < copySize) {
                    new (ptr+s) T(std::move(*(oldPtr+s)));
                    (oldPtr+s)->~T();
                    s++;
                }
            } catch (...) {
                
                int sClean = s;
                while (sClean < osize)
                    (oldPtr+(sClean++))->~T();
                if (oldPtr != reinterpret_cast<T *>(array) && oldPtr != ptr)
                    free(oldPtr);
                throw;
            }
        } else {
            memcpy(static_cast<void *>(ptr), static_cast<const void *>(oldPtr), copySize * sizeof(T));
        }
    }
    s = copySize;

    if (QTypeInfo<T>::isComplex) {
        
        while (osize > asize)
            (oldPtr+(--osize))->~T();
    }

    if (oldPtr != reinterpret_cast<T *>(array) && oldPtr != ptr)
        free(oldPtr);

    if (QTypeInfo<T>::isComplex) {
        
        while (s < asize)
            new (ptr+(s++)) T;
    } else {
        s = asize;
    }
}

template <class T, int Prealloc>
inline T QVarLengthArray<T, Prealloc>::value(int i) const
{
    if (uint(i) >= uint(size())) {
        return T();
    }
    return at(i);
}
template <class T, int Prealloc>
inline T QVarLengthArray<T, Prealloc>::value(int i, const T &defaultValue) const
{
    return (uint(i) >= uint(size())) ? defaultValue : at(i);
}

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::insert(int i, T &&t)
{ static_cast<void>(false && (i >= 0 && i <= s));
  insert(cbegin() + i, std::move(t)); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::insert(int i, const T &t)
{ static_cast<void>(false && (i >= 0 && i <= s));
  insert(begin() + i, 1, t); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::insert(int i, int n, const T &t)
{ static_cast<void>(false && (i >= 0 && i <= s));
  insert(begin() + i, n, t); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::remove(int i, int n)
{ static_cast<void>(false && (i >= 0 && n >= 0 && i + n <= s));
  erase(begin() + i, begin() + i + n); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::remove(int i)
{ static_cast<void>(false && (i >= 0 && i < s));
  erase(begin() + i, begin() + i + 1); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::prepend(T &&t)
{ insert(cbegin(), std::move(t)); }
template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::prepend(const T &t)
{ insert(begin(), 1, t); }

template <class T, int Prealloc>
inline void QVarLengthArray<T, Prealloc>::replace(int i, const T &t)
{
    static_cast<void>(false && (i >= 0 && i < s));
    const T copy(t);
    data()[i] = copy;
}

template <class T, int Prealloc>
inline typename QVarLengthArray<T, Prealloc>::iterator QVarLengthArray<T, Prealloc>::insert(const_iterator before, T &&t)
{
    static_cast<void>(false && (isValidIterator(before)));

    int offset = int(before - ptr);
    reserve(s + 1);
    if (!QTypeInfo<T>::isRelocatable) {
        T *b = ptr + offset;
        T *i = ptr + s;
        T *j = i + 1;
        
        if (i != b) {
            new (--j) T(std::move(*--i));
            while (i != b)
                *--j = std::move(*--i);
            *b = std::move(t);
        } else {
            new (b) T(std::move(t));
        }
    } else {
        T *b = ptr + offset;
        memmove(static_cast<void *>(b + 1), static_cast<const void *>(b), (s - offset) * sizeof(T));
        new (b) T(std::move(t));
    }
    s += 1;
    return ptr + offset;
}

template <class T, int Prealloc>
inline typename QVarLengthArray<T, Prealloc>::iterator QVarLengthArray<T, Prealloc>::insert(const_iterator before, size_type n, const T &t)
{
    static_cast<void>(false && (isValidIterator(before)));

    int offset = int(before - ptr);
    if (n != 0) {
        resize(s + n);
        const T copy(t);
        if (!QTypeInfoQuery<T>::isRelocatable) {
            T *b = ptr + offset;
            T *j = ptr + s;
            T *i = j - n;
            while (i != b)
                *--j = *--i;
            i = b + n;
            while (i != b)
                *--i = copy;
        } else {
            T *b = ptr + offset;
            T *i = b + n;
            memmove(static_cast<void *>(i), static_cast<const void *>(b), (s - offset - n) * sizeof(T));
            while (i != b)
                new (--i) T(copy);
        }
    }
    return ptr + offset;
}

template <class T, int Prealloc>
inline typename QVarLengthArray<T, Prealloc>::iterator QVarLengthArray<T, Prealloc>::erase(const_iterator abegin, const_iterator aend)
{
    static_cast<void>(false && (isValidIterator(abegin)));
    static_cast<void>(false && (isValidIterator(aend)));

    int f = int(abegin - ptr);
    int l = int(aend - ptr);
    int n = l - f;
    if (QTypeInfo<T>::isComplex) {
        std::copy(ptr + l, ptr + s, stdext::make_checked_array_iterator(ptr + f, size_t(s - f)));
        T *i = ptr + s;
        T *b = ptr + s - n;
        while (i != b) {
            --i;
            i->~T();
        }
    } else {
        memmove(static_cast<void *>(ptr + f), static_cast<const void *>(ptr + l), (s - l) * sizeof(T));
    }
    s -= n;
    return ptr + f;
}

template <typename T, int Prealloc1, int Prealloc2>
bool operator==(const QVarLengthArray<T, Prealloc1> &l, const QVarLengthArray<T, Prealloc2> &r)
{
    if (l.size() != r.size())
        return false;
    const T *rb = r.begin();
    const T *b  = l.begin();
    const T *e  = l.end();
    return std::equal(b, e, stdext::make_checked_array_iterator(rb, size_t(r.size())));
}

template <typename T, int Prealloc1, int Prealloc2>
bool operator!=(const QVarLengthArray<T, Prealloc1> &l, const QVarLengthArray<T, Prealloc2> &r)
{
    return !(l == r);
}

template <typename T, int Prealloc1, int Prealloc2>
bool operator<(const QVarLengthArray<T, Prealloc1> &lhs, const QVarLengthArray<T, Prealloc2> &rhs)
    noexcept(noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),
                                                               rhs.begin(), rhs.end())))
{
    return std::lexicographical_compare(lhs.begin(), lhs.end(),
                                        rhs.begin(), rhs.end());
}

template <typename T, int Prealloc1, int Prealloc2>
inline bool operator>(const QVarLengthArray<T, Prealloc1> &lhs, const QVarLengthArray<T, Prealloc2> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return rhs < lhs;
}

template <typename T, int Prealloc1, int Prealloc2>
inline bool operator<=(const QVarLengthArray<T, Prealloc1> &lhs, const QVarLengthArray<T, Prealloc2> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs > rhs);
}

template <typename T, int Prealloc1, int Prealloc2>
inline bool operator>=(const QVarLengthArray<T, Prealloc1> &lhs, const QVarLengthArray<T, Prealloc2> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs < rhs);
}

template <typename T, int Prealloc>
uint qHash(const QVarLengthArray<T, Prealloc> &key, uint seed = 0)
    noexcept(noexcept(qHashRange(key.cbegin(), key.cend(), seed)))
{
    return qHashRange(key.cbegin(), key.cend(), seed);
}



#line 624 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvarlengtharray.h"
#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"













































#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"



#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs_impl.h"
















































#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs_impl.h"


class QObject;

namespace QtPrivate {
    template <typename T> struct RemoveRef { typedef T Type; };
    template <typename T> struct RemoveRef<T&> { typedef T Type; };
    template <typename T> struct RemoveConstRef { typedef T Type; };
    template <typename T> struct RemoveConstRef<const T&> { typedef T Type; };

    





    
    template <typename...> struct List {};
    template <typename Head, typename... Tail> struct List<Head, Tail...> { typedef Head Car; typedef List<Tail...> Cdr; };
    template <typename, typename> struct List_Append;
    template <typename... L1, typename...L2> struct List_Append<List<L1...>, List<L2...>> { typedef List<L1..., L2...> Value; };
    template <typename L, int N> struct List_Left {
        typedef typename List_Append<List<typename L::Car>,typename List_Left<typename L::Cdr, N - 1>::Value>::Value Value;
    };
    template <typename L> struct List_Left<L, 0> { typedef List<> Value; };
    
    template <typename L, int N> struct List_Select { typedef typename List_Select<typename L::Cdr, N - 1>::Value Value; };
    template <typename L> struct List_Select<L,0> { typedef typename L::Car Value; };

    





    template <typename T>
    struct ApplyReturnValue {
        void *data;
        explicit ApplyReturnValue(void *data_) : data(data_) {}
    };
    template<typename T, typename U>
    void operator,(T &&value, const ApplyReturnValue<U> &container) {
        if (container.data)
            *reinterpret_cast<U *>(container.data) = std::forward<T>(value);
    }
    template<typename T>
    void operator,(T, const ApplyReturnValue<void> &) {}


    















    template<class T> using InvokeGenSeq = typename T::Type;

    template<int...> struct IndexesList { using Type = IndexesList; };

    template<int N, class S1, class S2> struct ConcatSeqImpl;

    template<int N, int... I1, int... I2>
    struct ConcatSeqImpl<N, IndexesList<I1...>, IndexesList<I2...>>
        : IndexesList<I1..., (N + I2)...>{};

    template<int N, class S1, class S2>
    using ConcatSeq = InvokeGenSeq<ConcatSeqImpl<N, S1, S2>>;

    template<int N> struct GenSeq;
    template<int N> using makeIndexSequence = InvokeGenSeq<GenSeq<N>>;

    template<int N>
    struct GenSeq : ConcatSeq<N/2, makeIndexSequence<N/2>, makeIndexSequence<N - N/2>>{};

    template<> struct GenSeq<0> : IndexesList<>{};
    template<> struct GenSeq<1> : IndexesList<0>{};

    template<int N>
    struct Indexes { using Value = makeIndexSequence<N>; };

    template<typename Func> struct FunctionPointer { enum {ArgumentCount = -1, IsPointerToMemberFunction = false}; };

    template <typename, typename, typename, typename> struct FunctorCall;
    template <int... II, typename... SignalArgs, typename R, typename Function>
    struct FunctorCall<IndexesList<II...>, List<SignalArgs...>, R, Function> {
        static void call(Function &f, void **arg) {
            f((*reinterpret_cast<typename RemoveRef<SignalArgs>::Type *>(arg[II+1]))...), ApplyReturnValue<R>(arg[0]);
        }
    };
    template <int... II, typename... SignalArgs, typename R, typename... SlotArgs, typename SlotRet, class Obj>
    struct FunctorCall<IndexesList<II...>, List<SignalArgs...>, R, SlotRet (Obj::*)(SlotArgs...)> {
        static void call(SlotRet (Obj::*f)(SlotArgs...), Obj *o, void **arg) {
            (o->*f)((*reinterpret_cast<typename RemoveRef<SignalArgs>::Type *>(arg[II+1]))...), ApplyReturnValue<R>(arg[0]);
        }
    };
    template <int... II, typename... SignalArgs, typename R, typename... SlotArgs, typename SlotRet, class Obj>
    struct FunctorCall<IndexesList<II...>, List<SignalArgs...>, R, SlotRet (Obj::*)(SlotArgs...) const> {
        static void call(SlotRet (Obj::*f)(SlotArgs...) const, Obj *o, void **arg) {
            (o->*f)((*reinterpret_cast<typename RemoveRef<SignalArgs>::Type *>(arg[II+1]))...), ApplyReturnValue<R>(arg[0]);
        }
    };

    template <int... II, typename... SignalArgs, typename R, typename... SlotArgs, typename SlotRet, class Obj>
    struct FunctorCall<IndexesList<II...>, List<SignalArgs...>, R, SlotRet (Obj::*)(SlotArgs...) noexcept> {
        static void call(SlotRet (Obj::*f)(SlotArgs...) noexcept, Obj *o, void **arg) {
            (o->*f)((*reinterpret_cast<typename RemoveRef<SignalArgs>::Type *>(arg[II+1]))...), ApplyReturnValue<R>(arg[0]);
        }
    };
    template <int... II, typename... SignalArgs, typename R, typename... SlotArgs, typename SlotRet, class Obj>
    struct FunctorCall<IndexesList<II...>, List<SignalArgs...>, R, SlotRet (Obj::*)(SlotArgs...) const noexcept> {
        static void call(SlotRet (Obj::*f)(SlotArgs...) const noexcept, Obj *o, void **arg) {
            (o->*f)((*reinterpret_cast<typename RemoveRef<SignalArgs>::Type *>(arg[II+1]))...), ApplyReturnValue<R>(arg[0]);
        }
    };
#line 175 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs_impl.h"

    template<class Obj, typename Ret, typename... Args> struct FunctionPointer<Ret (Obj::*) (Args...)>
    {
        typedef Obj Object;
        typedef List<Args...>  Arguments;
        typedef Ret ReturnType;
        typedef Ret (Obj::*Function) (Args...);
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = true};
        template <typename SignalArgs, typename R>
        static void call(Function f, Obj *o, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, o, arg);
        }
    };
    template<class Obj, typename Ret, typename... Args> struct FunctionPointer<Ret (Obj::*) (Args...) const>
    {
        typedef Obj Object;
        typedef List<Args...>  Arguments;
        typedef Ret ReturnType;
        typedef Ret (Obj::*Function) (Args...) const;
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = true};
        template <typename SignalArgs, typename R>
        static void call(Function f, Obj *o, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, o, arg);
        }
    };

    template<typename Ret, typename... Args> struct FunctionPointer<Ret (*) (Args...)>
    {
        typedef List<Args...> Arguments;
        typedef Ret ReturnType;
        typedef Ret (*Function) (Args...);
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = false};
        template <typename SignalArgs, typename R>
        static void call(Function f, void *, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, arg);
        }
    };


    template<class Obj, typename Ret, typename... Args> struct FunctionPointer<Ret (Obj::*) (Args...) noexcept>
    {
        typedef Obj Object;
        typedef List<Args...>  Arguments;
        typedef Ret ReturnType;
        typedef Ret (Obj::*Function) (Args...) noexcept;
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = true};
        template <typename SignalArgs, typename R>
        static void call(Function f, Obj *o, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, o, arg);
        }
    };
    template<class Obj, typename Ret, typename... Args> struct FunctionPointer<Ret (Obj::*) (Args...) const noexcept>
    {
        typedef Obj Object;
        typedef List<Args...>  Arguments;
        typedef Ret ReturnType;
        typedef Ret (Obj::*Function) (Args...) const noexcept;
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = true};
        template <typename SignalArgs, typename R>
        static void call(Function f, Obj *o, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, o, arg);
        }
    };

    template<typename Ret, typename... Args> struct FunctionPointer<Ret (*) (Args...) noexcept>
    {
        typedef List<Args...> Arguments;
        typedef Ret ReturnType;
        typedef Ret (*Function) (Args...) noexcept;
        enum {ArgumentCount = sizeof...(Args), IsPointerToMemberFunction = false};
        template <typename SignalArgs, typename R>
        static void call(Function f, void *, void **arg) {
            FunctorCall<typename Indexes<ArgumentCount>::Value, SignalArgs, R, Function>::call(f, arg);
        }
    };
#line 251 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs_impl.h"

    template<typename Function, int N> struct Functor
    {
        template <typename SignalArgs, typename R>
        static void call(Function &f, void *, void **arg) {
            FunctorCall<typename Indexes<N>::Value, SignalArgs, R, Function>::call(f, arg);
        }
    };

    





    template<typename E, typename Enable = void>
    struct IsEnumUnderlyingTypeSigned : std::false_type
    {
    };

    template<typename E>
    struct IsEnumUnderlyingTypeSigned<E, typename std::enable_if<std::is_enum<E>::value>::type>
            : std::integral_constant<bool, std::is_signed<typename std::underlying_type<E>::type>::value>
    {
    };

    





    template<typename From, typename To, typename Enable = void>
    struct AreArgumentsNarrowedBase : std::false_type
    {
    };

    template <typename T>
    using is_bool = std::is_same<bool, typename std::decay<T>::type>;

    template<typename From, typename To>
    struct AreArgumentsNarrowedBase<From, To, typename std::enable_if<sizeof(From) && sizeof(To)>::type>
        : std::integral_constant<bool,
              (std::is_floating_point<From>::value && std::is_integral<To>::value) ||
              (std::is_floating_point<From>::value && std::is_floating_point<To>::value && sizeof(From) > sizeof(To)) ||
              ((std::is_pointer<From>::value || std::is_member_pointer<From>::value) && QtPrivate::is_bool<To>::value) ||
              ((std::is_integral<From>::value || std::is_enum<From>::value) && std::is_floating_point<To>::value) ||
              (std::is_integral<From>::value && std::is_integral<To>::value
               && (sizeof(From) > sizeof(To)
                   || (std::is_signed<From>::value ? !std::is_signed<To>::value
                       : (std::is_signed<To>::value && sizeof(From) == sizeof(To))))) ||
              (std::is_enum<From>::value && std::is_integral<To>::value
               && (sizeof(From) > sizeof(To)
                   || (IsEnumUnderlyingTypeSigned<From>::value ? !std::is_signed<To>::value
                       : (std::is_signed<To>::value && sizeof(From) == sizeof(To)))))
              >
    {
    };

    




    template<typename A1, typename A2> struct AreArgumentsCompatible {
        static int test(const typename RemoveRef<A2>::Type&);
        static char test(...);
        static const typename RemoveRef<A1>::Type &dummy();
        enum { value = sizeof(test(dummy())) == sizeof(int) };




    };
    template<typename A1, typename A2> struct AreArgumentsCompatible<A1, A2&> { enum { value = false }; };
    template<typename A> struct AreArgumentsCompatible<A&, A&> { enum { value = true }; };
    
    template<typename A> struct AreArgumentsCompatible<void, A> { enum { value = true }; };
    template<typename A> struct AreArgumentsCompatible<A, void> { enum { value = true }; };
    template<> struct AreArgumentsCompatible<void, void> { enum { value = true }; };

    template <typename List1, typename List2> struct CheckCompatibleArguments { enum { value = false }; };
    template <> struct CheckCompatibleArguments<List<>, List<>> { enum { value = true }; };
    template <typename List1> struct CheckCompatibleArguments<List1, List<>> { enum { value = true }; };
    template <typename Arg1, typename Arg2, typename... Tail1, typename... Tail2>
    struct CheckCompatibleArguments<List<Arg1, Tail1...>, List<Arg2, Tail2...>>
    {
        enum { value = AreArgumentsCompatible<typename RemoveConstRef<Arg1>::Type, typename RemoveConstRef<Arg2>::Type>::value
                    && CheckCompatibleArguments<List<Tail1...>, List<Tail2...>>::value };
    };

    




    template <typename Functor, typename ArgList> struct ComputeFunctorArgumentCount;

    template <typename Functor, typename ArgList, bool Done> struct ComputeFunctorArgumentCountHelper
    { enum { Value = -1 }; };
    template <typename Functor, typename First, typename... ArgList>
    struct ComputeFunctorArgumentCountHelper<Functor, List<First, ArgList...>, false>
        : ComputeFunctorArgumentCount<Functor,
            typename List_Left<List<First, ArgList...>, sizeof...(ArgList)>::Value> {};

    template <typename Functor, typename... ArgList> struct ComputeFunctorArgumentCount<Functor, List<ArgList...>>
    {
        template <typename D> static D dummy();
        template <typename F> static auto test(F f) -> decltype(((f.operator()((dummy<ArgList>())...)), int()));
        static char test(...);
        enum {
            Ok = sizeof(test(dummy<Functor>())) == sizeof(int),
            Value = Ok ? int(sizeof...(ArgList)) : int(ComputeFunctorArgumentCountHelper<Functor, List<ArgList...>, Ok>::Value)
        };
    };

    
    template <typename Functor, typename ArgList> struct FunctorReturnType;
    template <typename Functor, typename ... ArgList> struct FunctorReturnType<Functor, List<ArgList...>> {
        template <typename D> static D dummy();
        typedef decltype(dummy<Functor>().operator()((dummy<ArgList>())...)) Value;
    };

    
    class QSlotObjectBase {
        QAtomicInt m_ref;
        
        
        
        typedef void (*ImplFn)(int which, QSlotObjectBase* this_, QObject *receiver, void **args, bool *ret);
        const ImplFn m_impl;
    protected:
        enum Operation {
            Destroy,
            Call,
            Compare,

            NumOperations
        };
    public:
        explicit QSlotObjectBase(ImplFn fn) : m_ref(1), m_impl(fn) {}

        inline int ref() noexcept { return m_ref.ref(); }
        inline void destroyIfLastRef() noexcept
        { if (!m_ref.deref()) m_impl(Destroy, this, nullptr, nullptr, nullptr); }

        inline bool compare(void **a) { bool ret = false; m_impl(Compare, this, nullptr, a, &ret); return ret; }
        inline void call(QObject *r, void **a)  { m_impl(Call,    this, r, a, nullptr); }
    protected:
        ~QSlotObjectBase() {}
    private:
        QSlotObjectBase(const QSlotObjectBase &) = delete; QSlotObjectBase &operator=(const QSlotObjectBase &) = delete; QSlotObjectBase(QSlotObjectBase &&) = delete; QSlotObjectBase &operator=(QSlotObjectBase &&) = delete;
    };

    
    
    template<typename Func, typename Args, typename R> class QSlotObject : public QSlotObjectBase
    {
        typedef QtPrivate::FunctionPointer<Func> FuncType;
        Func function;
        static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
        {
            switch (which) {
            case Destroy:
                delete static_cast<QSlotObject*>(this_);
                break;
            case Call:
                FuncType::template call<Args, R>(static_cast<QSlotObject*>(this_)->function, static_cast<typename FuncType::Object *>(r), a);
                break;
            case Compare:
                *ret = *reinterpret_cast<Func *>(a) == static_cast<QSlotObject*>(this_)->function;
                break;
            case NumOperations: ;
            }
        }
    public:
        explicit QSlotObject(Func f) : QSlotObjectBase(&impl), function(f) {}
    };
    
    
    
    template<typename Func, int N, typename Args, typename R> class QFunctorSlotObject : public QSlotObjectBase
    {
        typedef QtPrivate::Functor<Func, N> FuncType;
        Func function;
        static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
        {
            switch (which) {
            case Destroy:
                delete static_cast<QFunctorSlotObject*>(this_);
                break;
            case Call:
                FuncType::template call<Args, R>(static_cast<QFunctorSlotObject*>(this_)->function, r, a);
                break;
            case Compare: 
            case NumOperations:
                (void)ret;;
            }
        }
    public:
        explicit QFunctorSlotObject(Func f) : QSlotObjectBase(&impl), function(std::move(f)) {}
    };

    
    template <typename Func>
    using QSlotObjectWithNoArgs = QSlotObject<Func,
                                              QtPrivate::List<>,
                                              typename QtPrivate::FunctionPointer<Func>::ReturnType>;

    template <typename Func, typename R>
    using QFunctorSlotObjectWithNoArgs = QFunctorSlotObject<Func, 0, QtPrivate::List<>, R>;

    template <typename Func>
    using QFunctorSlotObjectWithNoArgsImplicitReturn = QFunctorSlotObjectWithNoArgs<Func, typename QtPrivate::FunctionPointer<Func>::ReturnType>;
}



#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"




class QByteArray;
struct QArrayData;
typedef QArrayData QByteArrayData;

class QString;


#line 63 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"





#line 69 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


#line 72 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


#line 75 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


#line 78 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"








#line 87 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"



#line 91 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"
#line 92 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"






#line 99 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


#line 102 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"






#line 109 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


















#line 128 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"











#line 140 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"











#line 152 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

#line 154 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"



#line 158 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

#line 160 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

#line 162 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"



#line 166 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

#line 168 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"














































#line 215 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


























#line 242 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"












#line 255 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

__declspec(dllimport) const char *qFlagLocation(const char *method);












#line 270 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"


#line 273 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"




#line 278 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"




class QObject;
class QMetaMethod;
class QMetaEnum;
class QMetaProperty;
class QMetaClassInfo;


class __declspec(dllimport) QGenericArgument
{
public:
    inline QGenericArgument(const char *aName = nullptr, const void *aData = nullptr)
        : _data(aData), _name(aName) {}
    inline void *data() const { return const_cast<void *>(_data); }
    inline const char *name() const { return _name; }

private:
    const void *_data;
    const char *_name;
};

class __declspec(dllimport) QGenericReturnArgument: public QGenericArgument
{
public:
    inline QGenericReturnArgument(const char *aName = nullptr, void *aData = nullptr)
        : QGenericArgument(aName, aData)
        {}
};

template <class T>
class QArgument: public QGenericArgument
{
public:
    inline QArgument(const char *aName, const T &aData)
        : QGenericArgument(aName, static_cast<const void *>(&aData))
        {}
};
template <class T>
class QArgument<T &>: public QGenericArgument
{
public:
    inline QArgument(const char *aName, T &aData)
        : QGenericArgument(aName, static_cast<const void *>(&aData))
        {}
};


template <typename T>
class QReturnArgument: public QGenericReturnArgument
{
public:
    inline QReturnArgument(const char *aName, T &aData)
        : QGenericReturnArgument(aName, static_cast<void *>(&aData))
        {}
};

struct __declspec(dllimport) QMetaObject
{
    class Connection;
    const char *className() const;
    const QMetaObject *superClass() const;

    bool inherits(const QMetaObject *metaObject) const noexcept;
    QObject *cast(QObject *obj) const;
    const QObject *cast(const QObject *obj) const;


    QString tr(const char *s, const char *c, int n = -1) const;
#line 350 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

    int methodOffset() const;
    int enumeratorOffset() const;
    int propertyOffset() const;
    int classInfoOffset() const;

    int constructorCount() const;
    int methodCount() const;
    int enumeratorCount() const;
    int propertyCount() const;
    int classInfoCount() const;

    int indexOfConstructor(const char *constructor) const;
    int indexOfMethod(const char *method) const;
    int indexOfSignal(const char *signal) const;
    int indexOfSlot(const char *slot) const;
    int indexOfEnumerator(const char *name) const;
    int indexOfProperty(const char *name) const;
    int indexOfClassInfo(const char *name) const;

    QMetaMethod constructor(int index) const;
    QMetaMethod method(int index) const;
    QMetaEnum enumerator(int index) const;
    QMetaProperty property(int index) const;
    QMetaClassInfo classInfo(int index) const;
    QMetaProperty userProperty() const;

    static bool checkConnectArgs(const char *signal, const char *method);
    static bool checkConnectArgs(const QMetaMethod &signal,
                                 const QMetaMethod &method);
    static QByteArray normalizedSignature(const char *method);
    static QByteArray normalizedType(const char *type);

    
    static Connection connect(const QObject *sender, int signal_index,
                        const QObject *receiver, int method_index,
                        int type = 0, int *types = nullptr);
    
    static bool disconnect(const QObject *sender, int signal_index,
                           const QObject *receiver, int method_index);
    static bool disconnectOne(const QObject *sender, int signal_index,
                              const QObject *receiver, int method_index);
    
    static void connectSlotsByName(QObject *o);

    
    static void activate(QObject *sender, int signal_index, void **argv);
    static void activate(QObject *sender, const QMetaObject *, int local_signal_index, void **argv);
    static void activate(QObject *sender, int signal_offset, int local_signal_index, void **argv);

    static bool invokeMethod(QObject *obj, const char *member,
                             Qt::ConnectionType,
                             QGenericReturnArgument ret,
                             QGenericArgument val0 = QGenericArgument(nullptr),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument());

    static inline bool invokeMethod(QObject *obj, const char *member,
                             QGenericReturnArgument ret,
                             QGenericArgument val0 = QGenericArgument(nullptr),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, Qt::AutoConnection, ret, val0, val1, val2, val3,
                val4, val5, val6, val7, val8, val9);
    }

    static inline bool invokeMethod(QObject *obj, const char *member,
                             Qt::ConnectionType type,
                             QGenericArgument val0 = QGenericArgument(nullptr),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, type, QGenericReturnArgument(), val0, val1, val2,
                                 val3, val4, val5, val6, val7, val8, val9);
    }

    static inline bool invokeMethod(QObject *obj, const char *member,
                             QGenericArgument val0 = QGenericArgument(nullptr),
                             QGenericArgument val1 = QGenericArgument(),
                             QGenericArgument val2 = QGenericArgument(),
                             QGenericArgument val3 = QGenericArgument(),
                             QGenericArgument val4 = QGenericArgument(),
                             QGenericArgument val5 = QGenericArgument(),
                             QGenericArgument val6 = QGenericArgument(),
                             QGenericArgument val7 = QGenericArgument(),
                             QGenericArgument val8 = QGenericArgument(),
                             QGenericArgument val9 = QGenericArgument())
    {
        return invokeMethod(obj, member, Qt::AutoConnection, QGenericReturnArgument(), val0,
                val1, val2, val3, val4, val5, val6, val7, val8, val9);
    }








    
    template <typename Func>
    static typename std::enable_if<QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && !std::is_convertible<Func, const char*>::value
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == 0, bool>::type
    invokeMethod(typename QtPrivate::FunctionPointer<Func>::Object *object,
                 Func function,
                 Qt::ConnectionType type = Qt::AutoConnection,
                 typename QtPrivate::FunctionPointer<Func>::ReturnType *ret = nullptr)
    {
        return invokeMethodImpl(object, new QtPrivate::QSlotObjectWithNoArgs<Func>(function), type, ret);
    }

    template <typename Func>
    static typename std::enable_if<QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && !std::is_convertible<Func, const char*>::value
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == 0, bool>::type
    invokeMethod(typename QtPrivate::FunctionPointer<Func>::Object *object,
                 Func function,
                 typename QtPrivate::FunctionPointer<Func>::ReturnType *ret)
    {
        return invokeMethodImpl(object, new QtPrivate::QSlotObjectWithNoArgs<Func>(function), Qt::AutoConnection, ret);
    }

    
    template <typename Func>
    static typename std::enable_if<!QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && !std::is_convertible<Func, const char*>::value
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == 0, bool>::type
    invokeMethod(QObject *context, Func function,
                 Qt::ConnectionType type = Qt::AutoConnection,
                 typename QtPrivate::FunctionPointer<Func>::ReturnType *ret = nullptr)
    {
        return invokeMethodImpl(context, new QtPrivate::QFunctorSlotObjectWithNoArgsImplicitReturn<Func>(function), type, ret);
    }

    template <typename Func>
    static typename std::enable_if<!QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && !std::is_convertible<Func, const char*>::value
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == 0, bool>::type
    invokeMethod(QObject *context, Func function,
                 typename QtPrivate::FunctionPointer<Func>::ReturnType *ret)
    {
        return invokeMethodImpl(context, new QtPrivate::QFunctorSlotObjectWithNoArgsImplicitReturn<Func>(function), Qt::AutoConnection, ret);
    }

    
    template <typename Func>
    static typename std::enable_if<!QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == -1
                                   && !std::is_convertible<Func, const char*>::value, bool>::type
    invokeMethod(QObject *context, Func function,
                 Qt::ConnectionType type = Qt::AutoConnection, decltype(function()) *ret = nullptr)
    {
        return invokeMethodImpl(context,
                                new QtPrivate::QFunctorSlotObjectWithNoArgs<Func, decltype(function())>(std::move(function)),
                                type,
                                ret);
    }

    template <typename Func>
    static typename std::enable_if<!QtPrivate::FunctionPointer<Func>::IsPointerToMemberFunction
                                   && QtPrivate::FunctionPointer<Func>::ArgumentCount == -1
                                   && !std::is_convertible<Func, const char*>::value, bool>::type
    invokeMethod(QObject *context, Func function, decltype(function()) *ret)
    {
        return invokeMethodImpl(context,
                                new QtPrivate::QFunctorSlotObjectWithNoArgs<Func, decltype(function())>(std::move(function)),
                                Qt::AutoConnection,
                                ret);
    }

#line 544 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

    QObject *newInstance(QGenericArgument val0 = QGenericArgument(nullptr),
                         QGenericArgument val1 = QGenericArgument(),
                         QGenericArgument val2 = QGenericArgument(),
                         QGenericArgument val3 = QGenericArgument(),
                         QGenericArgument val4 = QGenericArgument(),
                         QGenericArgument val5 = QGenericArgument(),
                         QGenericArgument val6 = QGenericArgument(),
                         QGenericArgument val7 = QGenericArgument(),
                         QGenericArgument val8 = QGenericArgument(),
                         QGenericArgument val9 = QGenericArgument()) const;

    enum Call {
        InvokeMetaMethod,
        ReadProperty,
        WriteProperty,
        ResetProperty,
        QueryPropertyDesignable,
        QueryPropertyScriptable,
        QueryPropertyStored,
        QueryPropertyEditable,
        QueryPropertyUser,
        CreateInstance,
        IndexOfMethod,
        RegisterPropertyMetaType,
        RegisterMethodArgumentMetaType
    };

    int static_metacall(Call, int, void **) const;
    static int metacall(QObject *, Call, int, void **);

    template <const QMetaObject &MO> static constexpr const QMetaObject *staticMetaObject()
    {
        return &MO;
    }

    struct SuperData {
        const QMetaObject *direct;
        SuperData() = default;
        constexpr SuperData(std::nullptr_t) : direct(nullptr) {}
        constexpr SuperData(const QMetaObject *mo) : direct(mo) {}

        constexpr const QMetaObject *operator->() const { return operator const QMetaObject *(); }










        constexpr operator const QMetaObject *() const
        { return direct; }
        template <const QMetaObject &MO> static constexpr SuperData link()
        { return SuperData(QMetaObject::staticMetaObject<MO>()); }
#line 602 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"
    };

    struct { 
        SuperData superdata;
        const QByteArrayData *stringdata;
        const uint *data;
        typedef void (*StaticMetacallFunction)(QObject *, QMetaObject::Call, int, void **);
        StaticMetacallFunction static_metacall;
        const SuperData *relatedMetaObjects;
        void *extradata; 
    } d;

private:
    static bool invokeMethodImpl(QObject *object, QtPrivate::QSlotObjectBase *slot, Qt::ConnectionType type, void *ret);
    friend class QTimer;
};

class __declspec(dllimport) QMetaObject::Connection {
    void *d_ptr; 
    explicit Connection(void *data) : d_ptr(data) {  }
    friend class QObject;
    friend class QObjectPrivate;
    friend struct QMetaObject;
    bool isConnected_helper() const;
public:
    ~Connection();
    Connection();
    Connection(const Connection &other);
    Connection &operator=(const Connection &other);



    typedef void *Connection::*RestrictedBool;
    operator RestrictedBool() const { return d_ptr && isConnected_helper() ? &Connection::d_ptr : nullptr; }
#line 637 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"

    Connection(Connection &&o) noexcept : d_ptr(o.d_ptr) { o.d_ptr = nullptr; }
    Connection &operator=(Connection &&other) noexcept
    { qSwap(d_ptr, other.d_ptr); return *this; }
};

inline const QMetaObject *QMetaObject::superClass() const
{ return d.superdata; }

namespace QtPrivate {
    
    template <typename Object> struct HasQ_OBJECT_Macro {
        template <typename T>
        static char test(int (T::*)(QMetaObject::Call, int, void **));
        static int test(int (Object::*)(QMetaObject::Call, int, void **));
        enum { Value =  sizeof(test(&Object::qt_metacall)) == sizeof(int) };
    };
}



#line 659 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobjectdefs.h"
#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
#line 52 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

#pragma once







 
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
		
template<class _Mytree,
	class _Base = _Iterator_base0>
	class _Tree_unchecked_const_iterator
		: public _Base
	{	
public:
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mytree::_Nodeptr;
	using value_type = typename _Mytree::value_type;
	using difference_type = typename _Mytree::difference_type;
	using pointer = typename _Mytree::const_pointer;
	using reference = const value_type&;

	_Tree_unchecked_const_iterator()
		: _Ptr()
		{	
		}

	_Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Ptr(_Pnode)
		{	
		this->_Adopt(_Plist);
		}

	[[nodiscard]] reference operator*() const
		{	
		return (_Ptr->_Myval);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Tree_unchecked_const_iterator& operator++()
		{	
		if (_Ptr->_Right->_Isnil)
			{	
			_Nodeptr _Pnode;
			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)
				{
				_Ptr = _Pnode;	
				}

			_Ptr = _Pnode;	
			}
		else
			{
			_Ptr = _Mytree::_Min(_Ptr->_Right);	
			}

		return (*this);
		}

	_Tree_unchecked_const_iterator operator++(int)
		{	
		_Tree_unchecked_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Tree_unchecked_const_iterator& operator--()
		{	
		if (_Ptr->_Isnil)
			{
			_Ptr = _Ptr->_Right;	
			}
		else if (_Ptr->_Left->_Isnil)
			{	
			_Nodeptr _Pnode;
			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)
				{
				_Ptr = _Pnode;	
				}

			if (!_Ptr->_Isnil)
				{	
				_Ptr = _Pnode;	
				}
			}
		else
			{
			_Ptr = _Mytree::_Max(_Ptr->_Left);	
			}

		return (*this);
		}

	_Tree_unchecked_const_iterator operator--(int)
		{	
		_Tree_unchecked_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] bool operator==(const _Tree_unchecked_const_iterator& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _Tree_unchecked_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

	_Nodeptr _Ptr;	
	};

	
template<class _Mytree>
	class _Tree_unchecked_iterator
		: public _Tree_unchecked_const_iterator<_Mytree>
	{	
public:
	using _Mybase = _Tree_unchecked_const_iterator<_Mytree>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mytree::_Nodeptr;
	using value_type = typename _Mytree::value_type;
	using difference_type = typename _Mytree::difference_type;
	using pointer = typename _Mytree::pointer;
	using reference = value_type&;

	_Tree_unchecked_iterator()
		{	
		}

	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Tree_unchecked_iterator& operator++()
		{	
		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Tree_unchecked_iterator operator++(int)
		{	
		_Tree_unchecked_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Tree_unchecked_iterator& operator--()
		{	
		--static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Tree_unchecked_iterator operator--(int)
		{	
		_Tree_unchecked_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

	
template<class _Mytree>
	class _Tree_const_iterator
		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
	{	
public:
	using _Mybase = _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mytree::_Nodeptr;
	using value_type = typename _Mytree::value_type;
	using difference_type = typename _Mytree::difference_type;
	using pointer = typename _Mytree::const_pointer;
	using reference = const value_type&;

	_Tree_const_iterator()
		: _Mybase()
		{	
		}

	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
 



#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		return (this->_Ptr->_Myval);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Tree_const_iterator& operator++()
		{	
 


#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Tree_const_iterator operator++(int)
		{	
		_Tree_const_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Tree_const_iterator& operator--()
		{	
 
		--static_cast<_Mybase&>(*this);
 




#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		return (*this);
		}

	_Tree_const_iterator operator--(int)
		{	
		_Tree_const_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] bool operator==(const _Tree_const_iterator& _Right) const
		{	
 

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		return (this->_Ptr == _Right._Ptr);
		}

	[[nodiscard]] bool operator!=(const _Tree_const_iterator& _Right) const
		{	
		return (!(*this == _Right));
		}

 





#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

	[[nodiscard]] _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const
		{
		return (_Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
		}

	void _Seek_to(const _Tree_unchecked_const_iterator<_Mytree> _It)
		{
		this->_Ptr = _It._Ptr;
		}
	};

	
template<class _Mytree>
	class _Tree_iterator
		: public _Tree_const_iterator<_Mytree>
	{	
public:
	using _Mybase = _Tree_const_iterator<_Mytree>;
	using iterator_category = bidirectional_iterator_tag;

	using _Nodeptr = typename _Mytree::_Nodeptr;
	using value_type = typename _Mytree::value_type;
	using difference_type = typename _Mytree::difference_type;

	using pointer = typename _Mytree::pointer;
	using reference = value_type&;

	_Tree_iterator()
		{	
		}

	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	[[nodiscard]] reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	[[nodiscard]] pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Tree_iterator& operator++()
		{	
		++static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Tree_iterator operator++(int)
		{	
		_Tree_iterator _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Tree_iterator& operator--()
		{	
		--static_cast<_Mybase&>(*this);
		return (*this);
		}

	_Tree_iterator operator--(int)
		{	
		_Tree_iterator _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	[[nodiscard]] _Tree_unchecked_iterator<_Mytree> _Unwrapped() const
		{
		return (_Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree *>(this->_Getcont())));
		}
	};

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference,
	class _Nodeptr_type>
	struct _Tree_iter_types
	{	
	using value_type = _Value_type;
	using size_type = _Size_type;
	using difference_type = _Difference_type;
	using pointer = _Pointer;
	using const_pointer = _Const_pointer;
	using _Nodeptr = _Nodeptr_type;
	};

template<class _Value_type,
	class _Voidptr>
	struct _Tree_node
		{	
		using _Nodeptr = _Rebind_pointer_t<_Voidptr, _Tree_node>;
		_Nodeptr _Left;	
		_Nodeptr _Parent;	
		_Nodeptr _Right;	
		char _Color;	
		char _Isnil;	
		_Value_type _Myval;	

		_Tree_node& operator=(const _Tree_node&) = delete;

		template<class _Alloc>
			static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept
			{
			using _Alnode = _Rebind_alloc_t<_Alloc, _Tree_node>;
			using _Alnode_traits = allocator_traits<_Alnode>;
			_Alnode _Node_alloc(_Al);
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Left));
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Parent));
			_Alnode_traits::destroy(_Node_alloc, ::std:: addressof(_Ptr->_Right));
			_Alnode_traits::deallocate(_Node_alloc, _Ptr, 1);
			}
		};

template<class _Ty>
	struct _Tree_simple_types
		: public _Simple_types<_Ty>
	{	
	using _Node = _Tree_node<_Ty, void *>;
	using _Nodeptr = _Node *;
	};

template<class _Ty,
	class _Alloc>
	struct _Tree_base_types
	{	
	using _Alty = _Rebind_alloc_t<_Alloc, _Ty>;
	using _Alty_traits = allocator_traits<_Alty>;
	using _Node = _Tree_node<_Ty, typename allocator_traits<_Alloc>::void_pointer>;
	using _Alnode = _Rebind_alloc_t<_Alloc, _Node>;
	using _Alnode_traits = allocator_traits<_Alnode>;
	using _Nodeptr = typename _Alnode_traits::pointer;

	using _Val_types = conditional_t<_Is_simple_alloc_v<_Alnode>,
		_Tree_simple_types<_Ty>,
		_Tree_iter_types<_Ty,
			typename _Alty_traits::size_type,
			typename _Alty_traits::difference_type,
			typename _Alty_traits::pointer,
			typename _Alty_traits::const_pointer,
			_Ty&,
			const _Ty&,
			_Nodeptr>>;
	};

		
template<class _Val_types>
	class _Tree_val
		: public _Container_base
	{	
public:
	using _Nodeptr = typename _Val_types::_Nodeptr;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using const_iterator = _Tree_const_iterator<_Tree_val>;

	_Tree_val()
		: _Myhead(),
		_Mysize(0)
		{	
		}

	enum _Redbl
		{	
		_Red, _Black};

	static _Nodeptr _Max(_Nodeptr _Pnode)
		{	
		while (!_Pnode->_Right->_Isnil)
			_Pnode = _Pnode->_Right;
		return (_Pnode);
		}

	static _Nodeptr _Min(_Nodeptr _Pnode)
		{	
		while (!_Pnode->_Left->_Isnil)
			_Pnode = _Pnode->_Left;
		return (_Pnode);
		}

	_Nodeptr& _Root() const
		{	
		return (_Myhead->_Parent);
		}

	_Nodeptr& _Lmost() const
		{	
		return (_Myhead->_Left);
		}

	_Nodeptr& _Rmost() const
		{	
		return (_Myhead->_Right);
		}

	void _Lrotate(_Nodeptr _Wherenode)
		{	
		_Nodeptr _Pnode = _Wherenode->_Right;
		_Wherenode->_Right = _Pnode->_Left;

		if (!_Pnode->_Left->_Isnil)
			{
			_Pnode->_Left->_Parent = _Wherenode;
			}

		_Pnode->_Parent = _Wherenode->_Parent;

		if (_Wherenode == _Myhead->_Parent)
			{
			_Myhead->_Parent = _Pnode;
			}
		else if (_Wherenode == _Wherenode->_Parent->_Left)
			{
			_Wherenode->_Parent->_Left = _Pnode;
			}
		else
			{
			_Wherenode->_Parent->_Right = _Pnode;
			}

		_Pnode->_Left = _Wherenode;
		_Wherenode->_Parent = _Pnode;
		}

	void _Rrotate(_Nodeptr _Wherenode)
		{	
		_Nodeptr _Pnode = _Wherenode->_Left;
		_Wherenode->_Left = _Pnode->_Right;

		if (!_Pnode->_Right->_Isnil)
			_Pnode->_Right->_Parent = _Wherenode;
		_Pnode->_Parent = _Wherenode->_Parent;

		if (_Wherenode == _Myhead->_Parent)
			{
			_Myhead->_Parent = _Pnode;
			}
		else if (_Wherenode == _Wherenode->_Parent->_Right)
			{
			_Wherenode->_Parent->_Right = _Pnode;
			}
		else
			{
			_Wherenode->_Parent->_Left = _Pnode;
			}

		_Pnode->_Right = _Wherenode;
		_Wherenode->_Parent = _Pnode;
		}

	_Nodeptr _Extract(const_iterator _Where)
		{	
 


#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		_Nodeptr _Erasednode = _Where._Ptr;	
		++_Where;	

		_Nodeptr _Fixnode;	
		_Nodeptr _Fixnodeparent;	
		_Nodeptr _Pnode = _Erasednode;

		if (_Pnode->_Left->_Isnil)
			{
			_Fixnode = _Pnode->_Right;	
			}
		else if (_Pnode->_Right->_Isnil)
			{
			_Fixnode = _Pnode->_Left;	
			}
		else
			{	
			_Pnode = _Where._Ptr;	
			_Fixnode = _Pnode->_Right;	
			}

		if (_Pnode == _Erasednode)
			{	
			_Fixnodeparent = _Erasednode->_Parent;
			if (!_Fixnode->_Isnil)
				_Fixnode->_Parent = _Fixnodeparent;	

			if (_Root() == _Erasednode)
				{
				_Root() = _Fixnode;	
				}
			else if (_Fixnodeparent->_Left == _Erasednode)
				{
				_Fixnodeparent->_Left = _Fixnode;	
				}
			else
				{
				_Fixnodeparent->_Right = _Fixnode;	
				}

			if (_Lmost() == _Erasednode)
				{
				_Lmost() = _Fixnode->_Isnil
					? _Fixnodeparent	
					: _Min(_Fixnode);	
				}

			if (_Rmost() == _Erasednode)
				{
				_Rmost() = _Fixnode->_Isnil
					? _Fixnodeparent	
					: _Max(_Fixnode);	
				}
			}
		else
			{	
			_Erasednode->_Left->_Parent = _Pnode;	
			_Pnode->_Left = _Erasednode->_Left;	

			if (_Pnode == _Erasednode->_Right)
				{
				_Fixnodeparent = _Pnode;	
				}
			else
				{	
				_Fixnodeparent = _Pnode->_Parent;	
				if (!_Fixnode->_Isnil)
					{
					_Fixnode->_Parent = _Fixnodeparent;	
					}

				_Fixnodeparent->_Left = _Fixnode;	
				_Pnode->_Right = _Erasednode->_Right;	
				_Erasednode->_Right->_Parent = _Pnode;	
				}

			if (_Root() == _Erasednode)
				{
				_Root() = _Pnode;	
				}
			else if (_Erasednode->_Parent->_Left == _Erasednode)
				{
				_Erasednode->_Parent->_Left = _Pnode;	
				}
			else
				{
				_Erasednode->_Parent->_Right = _Pnode;	
				}

			_Pnode->_Parent = _Erasednode->_Parent;	
			::std:: swap(_Pnode->_Color, _Erasednode->_Color);	
			}

		if (_Erasednode->_Color == this->_Black)
			{	
			for (; _Fixnode != _Root()
				&& _Fixnode->_Color == this->_Black;
				_Fixnodeparent = _Fixnode->_Parent)
				if (_Fixnode == _Fixnodeparent->_Left)
					{	
					_Pnode = _Fixnodeparent->_Right;
					if (_Pnode->_Color == this->_Red)
						{	
						_Pnode->_Color = this->_Black;
						_Fixnodeparent->_Color = this->_Red;
						_Lrotate(_Fixnodeparent);
						_Pnode = _Fixnodeparent->_Right;
						}

					if (_Pnode->_Isnil)
						_Fixnode = _Fixnodeparent;	
					else if (_Pnode->_Left->_Color == this->_Black
						&& _Pnode->_Right->_Color == this->_Black)
						{	
						_Pnode->_Color = this->_Red;
						_Fixnode = _Fixnodeparent;
						}
					else
						{	
						if (_Pnode->_Right->_Color == this->_Black)
							{	
							_Pnode->_Left->_Color = this->_Black;
							_Pnode->_Color = this->_Red;
							_Rrotate(_Pnode);
							_Pnode = _Fixnodeparent->_Right;
							}

						_Pnode->_Color = _Fixnodeparent->_Color;
						_Fixnodeparent->_Color = this->_Black;
						_Pnode->_Right->_Color = this->_Black;
						_Lrotate(_Fixnodeparent);
						break;	
						}
					}
				else
					{	
					_Pnode = _Fixnodeparent->_Left;
					if (_Pnode->_Color == this->_Red)
						{	
						_Pnode->_Color = this->_Black;
						_Fixnodeparent->_Color = this->_Red;
						_Rrotate(_Fixnodeparent);
						_Pnode = _Fixnodeparent->_Left;
						}

					if (_Pnode->_Isnil)
						_Fixnode = _Fixnodeparent;	
					else if (_Pnode->_Right->_Color == this->_Black
						&& _Pnode->_Left->_Color == this->_Black)
						{	
						_Pnode->_Color = this->_Red;
						_Fixnode = _Fixnodeparent;
						}
					else
						{	
						if (_Pnode->_Left->_Color == this->_Black)
							{	
							_Pnode->_Right->_Color = this->_Black;
							_Pnode->_Color = this->_Red;
							_Lrotate(_Pnode);
							_Pnode = _Fixnodeparent->_Left;
							}

						_Pnode->_Color = _Fixnodeparent->_Color;
						_Fixnodeparent->_Color = this->_Black;
						_Pnode->_Left->_Color = this->_Black;
						_Rrotate(_Fixnodeparent);
						break;	
						}
					}

			_Fixnode->_Color = this->_Black;	
			}

		if (0 < _Mysize)
			--_Mysize;

		return (_Erasednode);
		}

	_Nodeptr _Myhead;	
	size_type _Mysize;	
	};

		
template<class _Traits>
	class _Tree_comp_alloc
	{	
public:
	using allocator_type = typename _Traits::allocator_type;
	using key_compare = typename _Traits::key_compare;

	using _Alloc_types = _Tree_base_types<typename _Traits::value_type, allocator_type>;

	using _Alnode = typename _Alloc_types::_Alnode;
	using _Alnode_traits = typename _Alloc_types::_Alnode_traits;
	using _Alproxy = _Rebind_alloc_t<_Alnode, _Container_proxy>;
	using _Alproxy_traits = allocator_traits<_Alproxy>;
	using _Node = typename _Alloc_types::_Node;
	using _Nodeptr = typename _Alloc_types::_Nodeptr;
	using _Val_types = typename _Alloc_types::_Val_types;

	using value_type = typename _Val_types::value_type;
	using size_type = typename _Val_types::size_type;
	using difference_type = typename _Val_types::difference_type;
	using pointer = typename _Val_types::pointer;
	using const_pointer = typename _Val_types::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = _Tree_iterator<_Tree_val<_Val_types>>;
	using const_iterator = _Tree_const_iterator<_Tree_val<_Val_types>>;
	using _Unchecked_iterator = _Tree_unchecked_iterator<_Tree_val<_Val_types>>;
	using _Unchecked_const_iterator = _Tree_unchecked_const_iterator<_Tree_val<_Val_types>>;

	enum _Redbl
		{	
		_Red, _Black
		};

	_Tree_comp_alloc(const key_compare& _Parg)
		: _Mypair(_One_then_variadic_args_t(), _Parg,
			_Zero_then_variadic_args_t())
		{	
		_Construct();
		}

	template<class _Any_alloc,
		class = enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Any_alloc>>, _Tree_comp_alloc>>>
		_Tree_comp_alloc(const key_compare& _Parg, _Any_alloc&& _Al)
		: _Mypair(_One_then_variadic_args_t(), _Parg,
			_One_then_variadic_args_t(),
			::std:: forward<_Any_alloc>(_Al))
		{	
		_Construct();
		}

 
	void _Construct()
		{	
		_Get_data()._Myhead = _Buyheadnode();
		}

	~_Tree_comp_alloc() noexcept
		{	
		_Freeheadnode(_Get_data()._Myhead);
		}

	void _Alloc_proxy()
		{	
		}

	void _Free_proxy()
		{	
		}

 

















































#line 875 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

	void _Copy_alloc(const _Alnode& _Al)
		{	
		const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			_Freeheadnode(_Get_data()._Myhead);
			}

		_Pocca(_Getal(), _Al);

		if (_Reload)
			{
			_Get_data()._Myhead = _Buyheadnode();
			_Alloc_proxy();
			}
		}

	void _Move_alloc(_Alnode& _Al)
		{	
		const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
			&& _Getal() != _Al;

		if (_Reload)
			{
			_Free_proxy();
			_Freeheadnode(_Get_data()._Myhead);
			}

		_Pocma(_Getal(), _Al);

		if (_Reload)
			{
			_Get_data()._Myhead = _Buyheadnode();
			_Alloc_proxy();
			}
		}

	void _Orphan_all()
		{	
		_Get_data()._Orphan_all();
		}

	void _Swap_all(_Tree_comp_alloc& _Right)
		{	
		_Get_data()._Swap_all(_Right._Get_data());
		}

	_Nodeptr _Buyheadnode()
		{	
		_Alnode& _Al = _Getal();
		_Nodeptr _Pnode = _Al.allocate(1);

		try {
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Left), _Pnode);
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Parent), _Pnode);
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Right), _Pnode);
		} catch (...) {
		_Al.deallocate(_Pnode, 1);
		throw;
		}

		_Pnode->_Color = _Black;
		_Pnode->_Isnil = true;
		return (_Pnode);
		}

	void _Freeheadnode(_Nodeptr _Pnode)
		{	
		_Node::_Freenode0(_Getal(), _Pnode);
		}

	_Nodeptr _Buynode0()
		{	
		_Alnode& _Al = _Getal();
		_Nodeptr _Pnode = _Al.allocate(1);

		auto& _My_data = _Get_data();

		try {
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Left), _My_data._Myhead);
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Parent), _My_data._Myhead);
		_Alnode_traits::construct(_Al, ::std:: addressof(_Pnode->_Right), _My_data._Myhead);
		} catch (...) {
		_Al.deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	void _Freenode0(_Nodeptr _Pnode)
		{	
		_Node::_Freenode0(_Getal(), _Pnode);
		}

	template<class... _Valty>
		_Nodeptr _Buynode(_Valty&&... _Val)
		{	
		_Nodeptr _Pnode = _Buynode0();

		_Pnode->_Color = _Red;
		_Pnode->_Isnil = false;

		try {
		_Alnode_traits::construct(_Getal(),
			::std:: addressof(_Pnode->_Myval), ::std:: forward<_Valty>(_Val)...);
		} catch (...) {
		_Freenode0(_Pnode);
		throw;
		}

		return (_Pnode);
		}

	key_compare& _Getcomp() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const key_compare& _Getcomp() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	_Alnode& _Getal() noexcept
		{	
		return (_Mypair._Get_second()._Get_first());
		}

	const _Alnode& _Getal() const noexcept
		{	
		return (_Mypair._Get_second()._Get_first());
		}

	_Tree_val<_Val_types>& _Get_data() noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

	const _Tree_val<_Val_types>& _Get_data() const noexcept
		{	
		return (_Mypair._Get_second()._Get_second());
		}

private:
	_Compressed_pair<key_compare,
		_Compressed_pair<_Alnode, _Tree_val<_Val_types>>> _Mypair;
	};

		
template<class _Traits>
	class _Tree
		: public _Tree_comp_alloc<_Traits>
	{	
public:
	using _Mybase = _Tree_comp_alloc<_Traits>;

	using key_type = typename _Traits::key_type;
	using value_compare = typename _Traits::value_compare;
	enum
		{	
		_Multi = _Traits::_Multi};

	using _Node = typename _Mybase::_Node;
	using _Nodeptr = typename _Mybase::_Nodeptr;
	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;

	using key_compare = typename _Mybase::key_compare;
	using allocator_type = typename _Mybase::allocator_type;

	using value_type = typename _Mybase::value_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;

	using iterator = conditional_t<is_same_v<key_type, value_type>,
		typename _Mybase::const_iterator,
		typename _Mybase::iterator>;
	using const_iterator = typename _Mybase::const_iterator;
	using _Unchecked_iterator = conditional_t<is_same_v<key_type, value_type>,
		typename _Mybase::_Unchecked_const_iterator,
		typename _Mybase::_Unchecked_iterator>;
	using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;

	using reverse_iterator = ::std:: reverse_iterator<iterator>;
	using const_reverse_iterator = ::std:: reverse_iterator<const_iterator>;

	using _Pairib = pair<iterator, bool>;
	using _Pairii = pair<iterator, iterator>;
	using _Paircc = pair<const_iterator, const_iterator>;

	using _Mytreeval = _Tree_val<typename _Mybase::_Val_types>;

	struct _Copy_tag
		{	
		};
	struct _Move_tag
		{	
		};

	_Tree(const key_compare& _Parg)
		: _Mybase(_Parg)
		{	
		}

	_Tree(const key_compare& _Parg,
		const allocator_type& _Al)
		: _Mybase(_Parg, _Al)
		{	
		}

	template<class _Any_alloc>
		_Tree(const _Tree& _Right, _Any_alloc&& _Al)
		: _Mybase(_Right.key_comp(), ::std:: forward<_Any_alloc>(_Al))
		{	
		try {
		_Copy(_Right, _Copy_tag());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	_Tree(_Tree&& _Right)
		: _Mybase(_Right.key_comp(), ::std:: move(_Right._Getal()))
		{	
		_Assign_rv(::std:: move(_Right), true_type());
		}

	_Tree(_Tree&& _Right, const allocator_type& _Al)
		: _Mybase(_Right.key_comp(), _Al)
		{	
		_Assign_rv(::std:: move(_Right), false_type());
		}

	_Tree& operator=(_Tree&& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			clear();
			this->_Move_alloc(_Right._Getal());
			this->_Getcomp() = _Right._Getcomp();
			_Assign_rv(::std:: move(_Right), bool_constant<_Always_equal_after_move<_Alnode>>{});
			}
		return (*this);
		}

	void _Assign_rv(_Tree&& _Right, true_type)
		{	
		this->_Swap_all(_Right);
		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
		auto& _My_data = this->_Get_data();
		auto& _Right_data = _Right._Get_data();
		_Swap_adl(_My_data._Myhead, _Right_data._Myhead);
		::std:: swap(_My_data._Mysize, _Right_data._Mysize);
		}

	void _Assign_rv(_Tree&& _Right, false_type)
		{	
		if (this->_Getal() == _Right._Getal())
			{
			_Assign_rv(::std:: move(_Right), true_type());
			}
		else
			{
			_Copy(_Right, _Move_tag());
			}
		}

	template<class... _Valty>
		_Pairib emplace(_Valty&&... _Val)
		{	
		_Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
		return (_Insert_nohint(false, _Newnode->_Myval, _Newnode));
		}

	template<class... _Valty>
		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
		{	
		_Nodeptr _Newnode = this->_Buynode(::std:: forward<_Valty>(_Val)...);
		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));
		}

	~_Tree() noexcept
		{	
		_Tidy();
		}

	_Tree& operator=(const _Tree& _Right)
		{	
		if (this != ::std:: addressof(_Right))
			{	
			clear();
			this->_Copy_alloc(_Right._Getal());
			this->_Getcomp() = _Right._Getcomp();
			_Copy(_Right, _Copy_tag());
			}

		return (*this);
		}

	[[nodiscard]] iterator begin() noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (iterator(_My_data._Lmost(), ::std:: addressof(_My_data)));
		}

	[[nodiscard]] const_iterator begin() const noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (const_iterator(_My_data._Lmost(), ::std:: addressof(_My_data)));
		}

	[[nodiscard]] iterator end() noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (iterator(_My_data._Myhead, ::std:: addressof(_My_data)));
		}

	[[nodiscard]] const_iterator end() const noexcept
		{	
		auto& _My_data = this->_Get_data();
		return (const_iterator(_My_data._Myhead, ::std:: addressof(_My_data)));
		}

	_Unchecked_iterator _Unchecked_begin() noexcept
		{	
		return (_Unchecked_iterator(this->_Get_data()._Lmost(), nullptr));
		}

	_Unchecked_const_iterator _Unchecked_begin() const noexcept
		{	
		return (_Unchecked_const_iterator(this->_Get_data()._Lmost(), nullptr));
		}

	_Unchecked_iterator _Unchecked_end() noexcept
		{	
		return (_Unchecked_iterator(this->_Get_data()._Myhead, nullptr));
		}

	_Unchecked_const_iterator _Unchecked_end() const noexcept
		{	
		return (_Unchecked_const_iterator(this->_Get_data()._Myhead, nullptr));
		}

	[[nodiscard]] reverse_iterator rbegin() noexcept
		{	
		return (reverse_iterator(end()));
		}

	[[nodiscard]] const_reverse_iterator rbegin() const noexcept
		{	
		return (const_reverse_iterator(end()));
		}

	[[nodiscard]] reverse_iterator rend() noexcept
		{	
		return (reverse_iterator(begin()));
		}

	[[nodiscard]] const_reverse_iterator rend() const noexcept
		{	
		return (const_reverse_iterator(begin()));
		}

	[[nodiscard]] const_iterator cbegin() const noexcept
		{	
		return (begin());
		}

	[[nodiscard]] const_iterator cend() const noexcept
		{	
		return (end());
		}

	[[nodiscard]] const_reverse_iterator crbegin() const noexcept
		{	
		return (rbegin());
		}

	[[nodiscard]] const_reverse_iterator crend() const noexcept
		{	
		return (rend());
		}

	[[nodiscard]] size_type size() const noexcept
		{	
		return (this->_Get_data()._Mysize);
		}

	[[nodiscard]] size_type max_size() const noexcept
		{	
		return (_Alnode_traits::max_size(this->_Getal()));
		}

	[[nodiscard]] bool empty() const noexcept
		{	
		return (size() == 0);
		}

	[[nodiscard]] allocator_type get_allocator() const noexcept
		{	
		return (static_cast<allocator_type>(this->_Getal()));
		}

	[[nodiscard]] key_compare key_comp() const
		{	
		return (this->_Getcomp());
		}

	[[nodiscard]] value_compare value_comp() const
		{	
		return (value_compare(key_comp()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(const value_type& _Val)
		{	
		return (_Insert_nohint(false, _Val, _Not_a_node_tag()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(const value_type& _Val)
		{	
		return (_Insert_nohint(false, _Val, _Not_a_node_tag()).first);
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<!_Multi2, int> = 0>
		_Pairib insert(value_type&& _Val)
		{	
		return (_Insert_nohint(false, ::std:: move(_Val), _Not_a_node_tag()));
		}

	template<bool _Multi2 = _Multi,
		enable_if_t<_Multi2, int> = 0>
		iterator insert(value_type&& _Val)
		{	
		return (_Insert_nohint(false, ::std:: move(_Val), _Not_a_node_tag()).first);
		}

	iterator insert(const_iterator _Where,
		const value_type& _Val)
		{	
		return (_Insert_hint(_Where, _Val, _Not_a_node_tag()));
		}

	iterator insert(const_iterator _Where, value_type&& _Val)
		{	
		return (_Insert_hint(_Where, ::std:: move(_Val), _Not_a_node_tag()));
		}

	template<class _Iter>
		void insert(_Iter _First, _Iter _Last)
		{	
		_Adl_verify_range(_First, _Last);
		auto _UFirst = _Get_unwrapped(_First);
		const auto _ULast = _Get_unwrapped(_Last);
		for (; _UFirst != _ULast; ++_UFirst)
			{
			emplace_hint(end(), *_UFirst);
			}
		}

	void insert(initializer_list<value_type> _Ilist)
		{	
		insert(_Ilist.begin(), _Ilist.end());
		}

	template<class _Iter = iterator,
		class = enable_if_t<!is_same_v<_Iter, const_iterator>>>
		iterator erase(iterator _Where)
		{	
		return (erase(const_iterator{_Where}));
		}

	iterator erase(const_iterator _Where)
		{	
		auto& _My_data = this->_Get_data();
 


#line 1368 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		const_iterator _Successor = _Where;
		++_Successor;	
		_Nodeptr _Erasednode = _My_data._Extract(_Where);	

 

#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		_Alnode& _Al = this->_Getal();
		_Alnode_traits::destroy(_Al, ::std:: addressof(_Erasednode->_Myval));	
		_Node::_Freenode0(_Al, _Erasednode);

		return (iterator(_Successor._Ptr, ::std:: addressof(_My_data)));	
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		if (_First == begin() && _Last == end())
			{	
			clear();
			return (begin());
			}
		else
			{	
			while (_First != _Last)
				erase(_First++);
			return (iterator(_First._Ptr, ::std:: addressof(this->_Get_data())));
			}
		}

	size_type erase(const key_type& _Keyval)
		{	
		_Pairii _Where = equal_range(_Keyval);
		const auto _Num = static_cast<size_type>(::std:: distance(_Where.first, _Where.second));
		erase(_Where.first, _Where.second);
		return (_Num);
		}

	void clear() noexcept
		{	
 

#line 1412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		auto& _My_data = this->_Get_data();
		auto _Head = _My_data._Myhead;
		_Erase(_My_data._Root());
		_My_data._Root() = _Head;
		_My_data._Lmost() = _Head;
		_My_data._Rmost() = _Head;
		_My_data._Mysize = 0;
		}

	[[nodiscard]] iterator find(const key_type& _Keyval)
		{	
		iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))
#line 1428 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					? end() : _Where);
		}

	[[nodiscard]] const_iterator find(const key_type& _Keyval) const
		{	
		const_iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))
#line 1437 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					? end() : _Where);
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] iterator find(const _Other& _Keyval)
		{	
		iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					? end() : _Where);
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] const_iterator find(const _Other& _Keyval) const
		{	
		const_iterator _Where = lower_bound(_Keyval);
		return (_Where == end()
			|| this->_Getcomp()(_Keyval, this->_Key(_Where._Ptr))
#line 1461 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					? end() : _Where);
		}

	[[nodiscard]] size_type count(const key_type& _Keyval) const
		{	
		_Paircc _Ans = equal_range(_Keyval);
		return (static_cast<size_type>(::std:: distance(_Ans.first, _Ans.second)));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] size_type count(const _Other& _Keyval) const
		{	
		_Paircc _Ans = equal_range(_Keyval);
		return (static_cast<size_type>(::std:: distance(_Ans.first, _Ans.second)));
		}

	[[nodiscard]] iterator lower_bound(const key_type& _Keyval)
		{	
		return (iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator lower_bound(const key_type& _Keyval) const
		{	
		return (const_iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] iterator lower_bound(const _Other& _Keyval)
		{	
		return (iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] const_iterator lower_bound(const _Other& _Keyval) const
		{	
		return (const_iterator(_Lbound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] iterator upper_bound(const key_type& _Keyval)
		{	
		return (iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] const_iterator upper_bound(const key_type& _Keyval) const
		{	
		return (const_iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] iterator upper_bound(const _Other& _Keyval)
		{	
		return (iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] const_iterator upper_bound(const _Other& _Keyval) const
		{	
		return (const_iterator(_Ubound(_Keyval), ::std:: addressof(this->_Get_data())));
		}

	[[nodiscard]] _Pairii equal_range(const key_type& _Keyval)
		{	
		return (_Eqrange(_Keyval));
		}

	[[nodiscard]] _Paircc equal_range(const key_type& _Keyval) const
		{	
		return (_Eqrange(_Keyval));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] _Pairii equal_range(const _Other& _Keyval)
		{	
		return (_Eqrange(_Keyval));
		}

	template<class _Other,
		class _Mycomp = key_compare,
		class = typename _Mycomp::is_transparent>
		[[nodiscard]] _Paircc equal_range(const _Other& _Keyval) const
		{	
		return (_Eqrange(_Keyval));
		}

	void swap(_Tree& _Right) noexcept(_Is_nothrow_swappable<key_compare>::value) 
		{	
		if (this != ::std:: addressof(_Right))
			{	
			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
			_Pocs(this->_Getal(), _Right._Getal());
			this->_Swap_all(_Right);
			auto& _My_data = this->_Get_data();
			auto& _Right_data = _Right._Get_data();
			_Swap_adl(_My_data._Myhead, _Right_data._Myhead);
			::std:: swap(_My_data._Mysize, _Right_data._Mysize);
			}
		}

protected:
	template<class _Valty>
		_Nodeptr _Buy_if_not_node(_Nodeptr _Node, _Valty&&)
		{	
		return (_Node);
		}

	template<class _Valty>
		_Nodeptr _Buy_if_not_node(_Not_a_node_tag, _Valty&& _Val)
		{	
		return (this->_Buynode(::std:: forward<_Valty>(_Val)));
		}

	void _Destroy_if_node(_Nodeptr _Newnode)
		{	
		_Alnode& _Al = this->_Getal();
		_Alnode_traits::destroy(_Al, ::std:: addressof(_Newnode->_Myval));
		_Node::_Freenode0(_Al, _Newnode);
		}

	void _Destroy_if_node(_Not_a_node_tag)
		{	
		}

	template<class _Valty,
		class _Nodety>
		iterator _Insert_hint(const_iterator _Where,
			_Valty&& _Val, _Nodety _Newnode)
		{	
		const_iterator _Next;
		bool _Leftish = false;	
		auto& _My_data = this->_Get_data();

		try {
 

#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

#pragma warning(push)
#pragma warning(disable: 4127)	
		if (size() == 0)
			{
			return (_Insert_at(true, _My_data._Myhead,
				::std:: forward<_Valty>(_Val), _Newnode));	
			}
		else if (this->_Multi)
			{	
			if (_Where == begin())
				{	
				if (!this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val)))
#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					return (_Insert_at(true, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
				_Leftish = true;	
				}
			else if (_Where == end())
				{	
				if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_My_data._Rmost())))
#line 1630 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					return (_Insert_at(false, _My_data._Rmost(),
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (!this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val))
#line 1635 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				&& !this->_Getcomp()(this->_Kfn(_Val), this->_Key((--(_Next = _Where))._Ptr)))
#line 1638 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				{	
				if (_Next._Ptr->_Right->_Isnil)
					return (_Insert_at(false, _Next._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else if (!this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr))
#line 1648 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				&& (++(_Next = _Where) == end()
					|| !this->_Getcomp()(this->_Key(_Next._Ptr), this->_Kfn(_Val))))
#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				{	
				if (_Where._Ptr->_Right->_Isnil)
					return (_Insert_at(false, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
				else
					return (_Insert_at(true, _Next._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
				}
			else
				{
				_Leftish = true;	
				}
			}
		else
			{	
			if (_Where == begin())
				{	
				if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr)))
#line 1670 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					{
					return (_Insert_at(true, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				}
			else if (_Where == end())
				{	
				if (this->_Getcomp()(this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
#line 1679 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					{
					return (_Insert_at(false, _My_data._Rmost(),
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				}
			else if (this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Where._Ptr))
#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				&& this->_Getcomp()(this->_Key((--(_Next = _Where))._Ptr), this->_Kfn(_Val)))
#line 1689 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				{	
				if (_Next._Ptr->_Right->_Isnil)
					{
					return (_Insert_at(false, _Next._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				else
					{
					return (_Insert_at(true, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				}
			else if (this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val))
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				&& (++(_Next = _Where) == end()
					|| this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Next._Ptr))))
#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				{	
				if (_Where._Ptr->_Right->_Isnil)
					{
					return (_Insert_at(false, _Where._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				else
					{
					return (_Insert_at(true, _Next._Ptr,
						::std:: forward<_Valty>(_Val), _Newnode));
					}
				}
			}
#pragma warning(pop)
		} catch (...) {
		_Destroy_if_node(_Newnode);
		throw;
		}

		return (_Insert_nohint(_Leftish,
			::std:: forward<_Valty>(_Val), _Newnode).first);
		}

	template<class _Valty,
		class _Nodety>
		_Pairib _Insert_nohint(bool _Leftish,
			_Valty&& _Val, _Nodety _Newnode)
		{	
		auto& _My_data = this->_Get_data();
		try {
		_Nodeptr _Wherenode = _My_data._Myhead;
		_Nodeptr _Trynode = _Wherenode->_Parent;
		bool _Addleft = true;	

		while (!_Trynode->_Isnil)
			{	
			_Wherenode = _Trynode;
			if (_Leftish)
				{
				_Addleft = !this->_Getcomp()(this->_Key(_Trynode), this->_Kfn(_Val));	
#line 1748 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				}
			else
				{
				_Addleft = this->_Getcomp()(this->_Kfn(_Val), this->_Key(_Trynode));	
#line 1754 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				}

			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;
			}

#pragma warning(push)
#pragma warning(disable: 4127)	
		if (this->_Multi)
			{
			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
				::std:: forward<_Valty>(_Val), _Newnode), true));
			}
		else
			{	
			iterator _Where = iterator(_Wherenode, ::std:: addressof(_My_data));
			if (!_Addleft)
				{	
				}
			else if (_Where == begin())
				{
				return (_Pairib(_Insert_at(true, _Wherenode,
					::std:: forward<_Valty>(_Val), _Newnode), true));
				}
			else
				{
				--_Where;	
				}

			if (this->_Getcomp()(this->_Key(_Where._Ptr), this->_Kfn(_Val)))
#line 1785 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
				{
				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
					::std:: forward<_Valty>(_Val), _Newnode), true));
				}
			else
				{	
				_Destroy_if_node(_Newnode);
				return (_Pairib(_Where, false));
				}
			}
#pragma warning(pop)
		} catch (...) {
		_Destroy_if_node(_Newnode);
		throw;
		}
		}

	template<class _Valty,
		class _Nodety>
		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode, _Valty&& _Val, _Nodety _Node)
		{	
		auto& _My_data = this->_Get_data();
		if (max_size() - 1 <= _My_data._Mysize)
			{	
			_Destroy_if_node(_Node);
			_Xlength_error("map/set<T> too long");
			}

		_Nodeptr _Newnode = _Buy_if_not_node(_Node, ::std:: forward<_Valty>(_Val));

		++_My_data._Mysize;
		_Newnode->_Parent = _Wherenode;

		if (_Wherenode == _My_data._Myhead)
			{	
			_My_data._Root() = _Newnode;
			_My_data._Lmost() = _Newnode;
			_My_data._Rmost() = _Newnode;
			}
		else if (_Addleft)
			{	
			_Wherenode->_Left = _Newnode;
			if (_Wherenode == _My_data._Lmost())
				{
				_My_data._Lmost() = _Newnode;
				}
			}
		else
			{	
			_Wherenode->_Right = _Newnode;
			if (_Wherenode == _My_data._Rmost())
				{
				_My_data._Rmost() = _Newnode;
				}
			}

		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )
			{
			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)
				{	
				_Wherenode = _Pnode->_Parent->_Parent->_Right;
				if (_Wherenode->_Color == this->_Red)
					{	
					_Pnode->_Parent->_Color = this->_Black;
					_Wherenode->_Color = this->_Black;
					_Pnode->_Parent->_Parent->_Color = this->_Red;
					_Pnode = _Pnode->_Parent->_Parent;
					}
				else
					{	
					if (_Pnode == _Pnode->_Parent->_Right)
						{	
						_Pnode = _Pnode->_Parent;
						_My_data._Lrotate(_Pnode);
						}

					_Pnode->_Parent->_Color = this->_Black;	
					_Pnode->_Parent->_Parent->_Color = this->_Red;
					_My_data._Rrotate(_Pnode->_Parent->_Parent);
					}
				}
			else
				{	
				_Wherenode = _Pnode->_Parent->_Parent->_Left;
				if (_Wherenode->_Color == this->_Red)
					{	
					_Pnode->_Parent->_Color = this->_Black;
					_Wherenode->_Color = this->_Black;
					_Pnode->_Parent->_Parent->_Color = this->_Red;
					_Pnode = _Pnode->_Parent->_Parent;
					}
				else
					{	
					if (_Pnode == _Pnode->_Parent->_Left)
						{	
						_Pnode = _Pnode->_Parent;
						_My_data._Rrotate(_Pnode);
						}

					_Pnode->_Parent->_Color = this->_Black;	
					_Pnode->_Parent->_Parent->_Color = this->_Red;
					_My_data._Lrotate(_Pnode->_Parent->_Parent);
					}
				}
			}

		_My_data._Root()->_Color = this->_Black;	
		return (iterator(_Newnode, ::std:: addressof(_My_data)));
		}

	template<class _Moveit>
		void _Copy(const _Tree& _Right, _Moveit _Movefl)
		{	
		auto& _My_data = this->_Get_data();
		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);
		_My_data._Mysize = _Right.size();
		if (!_My_data._Root()->_Isnil)
			{	
			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());
			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());
			}
		else
			{	
			_My_data._Lmost() = _My_data._Myhead;
			_My_data._Rmost() = _My_data._Myhead;
			}
		}

	template<class _Ty,
		class _Is_set>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
		{	
		return (this->_Buynode(_Val));
		}

	template<class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
		{	
		return (this->_Buynode(::std:: move(_Val)));
		}

	template<class _Ty>
		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
		{	
		return (this->_Buynode(
			::std:: move(const_cast<key_type&>(_Val.first)),
			::std:: move(_Val.second)));
		}

	template<class _Moveit>
		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
			_Moveit _Movefl)
		{	
		_Nodeptr _Newroot = this->_Get_data()._Myhead;	

		if (!_Rootnode->_Isnil)
			{	
			typename is_same<key_type, value_type>::type _Is_set;
			_Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);
			_Pnode->_Parent = _Wherenode;
			_Pnode->_Color = _Rootnode->_Color;
			if (_Newroot->_Isnil)
				_Newroot = _Pnode;	

			try {
			_Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);
			_Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);
			} catch (...) {
			_Erase(_Newroot);	
			throw;
			}
			}

		return (_Newroot);	
		}

	template<class _Other>
		_Paircc _Eqrange(const _Other& _Keyval) const
		{	
		auto& _My_data = this->_Get_data();
		_Nodeptr _Pnode = _My_data._Root();
		_Nodeptr _Lonode = _My_data._Myhead;	
		_Nodeptr _Hinode = _My_data._Myhead;	

		while (!_Pnode->_Isnil)
			{
			if (this->_Getcomp()(this->_Key(_Pnode), _Keyval))
				{
				_Pnode = _Pnode->_Right;	
				}
			else
				{	
				if (_Hinode->_Isnil
						&& this->_Getcomp()(_Keyval, this->_Key(_Pnode)))
#line 1980 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
					{
					_Hinode = _Pnode;	
					}

				_Lonode = _Pnode;
				_Pnode = _Pnode->_Left;	
				}
			}

		_Pnode = _Hinode->_Isnil ? _My_data._Root() : _Hinode->_Left;	
		while (!_Pnode->_Isnil)
			{
			if (this->_Getcomp()(_Keyval, this->_Key(_Pnode)))
				{	
				_Hinode = _Pnode;
				_Pnode = _Pnode->_Left;	
				}
			else
				{
				_Pnode = _Pnode->_Right;	
				}
			}

		const_iterator _First = const_iterator(_Lonode, ::std:: addressof(_My_data));
		const_iterator _Last = const_iterator(_Hinode, ::std:: addressof(_My_data));
		return (_Paircc(_First, _Last));
		}

	template<class _Other>
		_Pairii _Eqrange(const _Other& _Keyval)
		{	
		_Paircc _Ans(static_cast<const _Tree *>(this)->_Eqrange(_Keyval));
		const auto _My_addr = ::std:: addressof(this->_Get_data());
		iterator _First = iterator(_Ans.first._Ptr, _My_addr);
		iterator _Last = iterator(_Ans.second._Ptr, _My_addr);
		return (_Pairii(_First, _Last));
		}

	void _Erase(_Nodeptr _Rootnode)
		{	
		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)
			{	
			_Erase(_Pnode->_Right);
			_Pnode = _Pnode->_Left;
			_Alnode& _Al = this->_Getal();
			_Alnode_traits::destroy(_Al, ::std:: addressof(_Rootnode->_Myval));
			_Node::_Freenode0(_Al, _Rootnode);
			}
		}

	bool _Compare(const key_type& _Left, const key_type& _Right) const
		{	
		return (this->_Getcomp()(_Left, _Right));
		}

	template<class _Ty1,
		class _Ty2>
		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
		{	
		return (this->_Getcomp()(_Left, _Right));
		}

	template<class _Other>
		_Nodeptr _Lbound(const _Other& _Keyval) const
		{	
		_Nodeptr _Wherenode = this->_Get_data()._Myhead;	
		_Nodeptr _Pnode = _Wherenode->_Parent;

		while (!_Pnode->_Isnil)
			{
			if (_Compare(this->_Key(_Pnode), _Keyval))
				{
				_Pnode = _Pnode->_Right;	
				}
			else
				{	
				_Wherenode = _Pnode;
				_Pnode = _Pnode->_Left;	
				}
			}

		return (_Wherenode);	
		}

	template<class _Other>
		_Nodeptr _Ubound(const _Other& _Keyval) const
		{	
		auto& _My_data = this->_Get_data();
		_Nodeptr _Pnode = _My_data._Root();
		_Nodeptr _Wherenode = _My_data._Myhead;	

		while (!_Pnode->_Isnil)
			{
			if (_Compare(_Keyval, this->_Key(_Pnode)))
				{	
				_Wherenode = _Pnode;
				_Pnode = _Pnode->_Left;	
				}
			else
				{
				_Pnode = _Pnode->_Right;	
				}
			}

		return (_Wherenode);	
		}

 





















#line 2110 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

	void _Tidy()
		{	
		erase(begin(), end());
		}

	const key_type& _Kfn(const value_type& _Val) const
		{	
		return (_Traits::_Kfn(_Val));
		}

	const key_type& _Key(_Nodeptr _Pnode) const
		{	
		return (this->_Kfn(_Pnode->_Myval));
		}

 
public:
	using node_type = typename _Traits::node_type;

	node_type extract(const const_iterator _Where)
		{	
		const auto _Ptr = this->_Get_data()._Extract(_Where);
  

#line 2136 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
		return (node_type::_Make(_Ptr, this->_Getal()));
		}

	node_type extract(const key_type& _Keyval)
		{	
		const const_iterator _Where = find(_Keyval);
		if (_Where == end())
			{
			return (node_type{});
			}

		return (extract(_Where));
		}

	auto insert(node_type&& _Handle)
		{	
  
		return (_Insert_node(bool_constant<_Multi>{}, ::std:: move(_Handle)));
  

























#line 2181 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
		}

	iterator insert(const const_iterator _Hint, node_type&& _Handle)
		{	
		if (_Handle.empty())
			{
			return (end());
			}

		_Check_node_allocator(_Handle);
		return (_Insert_hint(_Hint, _Handle._Getptr()->_Myval, ::std:: addressof(_Handle)));
		}

	template<class>
		friend class _Tree;

	template<class _Other_traits>
		void merge(_Tree<_Other_traits>& _That)
		{	
		static_assert(is_same_v<_Nodeptr, typename _Tree<_Other_traits>::_Nodeptr>,
			"merge() requires an argument with a compatible node type.");

		static_assert(is_same_v<allocator_type, typename _Tree<_Other_traits>::allocator_type>,
			"merge() requires an argument with the same allocator type.");

  
		if (_Check_self(::std:: addressof(_That)))
			{
			return;
			}
  







#line 2220 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"



#line 2224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"

		_Node_merge_wrapper<_Other_traits> _Wrapper{_That, {}};
		auto _First = _That.begin();
		const auto _Last = _That.end();
		while (_First != _Last)
			{
			_Wrapper._Where = _First;
			++_First;
			const auto _Result = _Insert_nohint(false, *_Wrapper._Where, ::std:: addressof(_Wrapper));
			if (_Result.second)
				{	
				_Reparent_ptr(_Wrapper._Where._Ptr, _That);
				}
			}
		}

protected:
	_Nodeptr _Buy_if_not_node(node_type * const _Node_handle, _Any_tag)
		{	
		const auto _Ptr = _Node_handle->_Release();
		const auto _Head = this->_Get_data()._Myhead;
		_Ptr->_Left = _Head;
		_Ptr->_Right = _Head;
		return (_Ptr);
		}

	void _Destroy_if_node(node_type *)
		{	
		}

	template<class _Other_traits>
		struct _Node_merge_wrapper
		{
		_Tree<_Other_traits>& _That;
		typename _Tree<_Other_traits>::iterator _Where;
		};

	template<class _Other_traits>
		auto _Buy_if_not_node(_Node_merge_wrapper<_Other_traits> * const _Wrapper, _Any_tag)
		{	
		const auto _Ptr = _Wrapper->_That._Get_data()._Extract(_Wrapper->_Where);
		const auto _Head = this->_Get_data()._Myhead;
		_Ptr->_Left = _Head;
		_Ptr->_Right = _Head;
		return (_Ptr);
		}

	template<class _Other_traits>
		void _Destroy_if_node(_Node_merge_wrapper<_Other_traits> *)
		{	
		}

	template<class _Other_traits>
		void _Reparent_ptr(const _Nodeptr _Ptr, _Tree<_Other_traits>& _Old_parent)
		{	
		(void)_Ptr; (void)_Old_parent;
  



























#line 2309 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
		}

	void _Check_node_allocator(node_type& _Handle) const
		{	
		(void)_Handle;
  

#line 2317 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
		}

  
private:
	auto _Insert_node(true_type, node_type&& _Handle)
		{	
		if (_Handle.empty())
			{
			return (end());
			}

		_Check_node_allocator(_Handle);

		const auto _Result = _Insert_nohint(
			false, _Handle._Getptr()->_Myval, ::std:: addressof(_Handle));
		return (_Result.first);
		}

	auto _Insert_node(false_type, node_type&& _Handle)
		{	
		if (_Handle.empty())
			{
			return (_Insert_return_type<iterator, node_type>{end(), false, {}});
			}

		_Check_node_allocator(_Handle);

		const auto _Result = _Insert_nohint(
			false, _Handle._Getptr()->_Myval, ::std:: addressof(_Handle));
		return _Insert_return_type<iterator, node_type>{
			_Result.first, _Result.second, ::std:: move(_Handle)};
		}

	bool _Check_self(const _Tree * const _That) const
		{	
		return (this == _That);
		}
	bool _Check_self(void *) const
		{	
		return (false);
		}
  #line 2359 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
 #line 2360 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
	};

template<class _Traits>
	[[nodiscard]] inline bool operator==(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& ::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Traits>
	[[nodiscard]] inline bool operator!=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Traits>
	[[nodiscard]] inline bool operator<(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Traits>
	[[nodiscard]] inline bool operator>(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Traits>
	[[nodiscard]] inline bool operator<=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Traits>
	[[nodiscard]] inline bool operator>=(const _Tree<_Traits>& _Left, const _Tree<_Traits>& _Right)
	{	
	return (!(_Left < _Right));
	}
}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2406 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"
#line 2407 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xtree"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"


 
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 
namespace std {
		
template<class _Kty,	
	class _Ty,	
	class _Pr,	
	class _Alloc,	
	bool _Mfl>	
	class _Tmap_traits
	{	
public:
	using key_type = _Kty;
	using value_type = pair<const _Kty, _Ty>;
	using key_compare = _Pr;
	using allocator_type = _Alloc;

	using node_type = _Node_handle<
		_Tree_node<value_type, typename allocator_traits<_Alloc>::void_pointer>,
		_Alloc, _Node_handle_map_base, _Kty, _Ty>;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

	enum
		{	
		_Multi = _Mfl};

	class value_compare
		{	
	public:
		[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef value_type first_argument_type;
		[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef value_type second_argument_type;
		[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool result_type;

		bool operator()(const value_type& _Left, const value_type& _Right) const
			{	
			return (comp(_Left.first, _Right.first));
			}

	protected:
		friend _Tree<_Tmap_traits>;

		value_compare(key_compare _Pred)
			: comp(_Pred)
			{	
			}

		key_compare comp;	
		};

	template<class _Ty1,
		class _Ty2>
		static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
		{	
		return (_Val.first);
		}
	};

		
template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class map
		: public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>
	{	
public:
	static_assert(!1 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
		"map<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mybase = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, false>>;
	using key_type = _Kty;
	using mapped_type = _Ty;
	using key_compare = _Pr;
	using value_compare = typename _Mybase::value_compare;
	using value_type = typename _Mybase::value_type;
	using allocator_type = typename _Mybase::allocator_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;
	using reverse_iterator = typename _Mybase::reverse_iterator;
	using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;
	using _Pairib = typename _Mybase::_Pairib;


	using insert_return_type = _Insert_return_type<iterator, typename _Mybase::node_type>;
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

	map()
		: _Mybase(key_compare())
		{	
		}

	explicit map(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	map(const map& _Right)
		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		}

	map(const map& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit map(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	map(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		map(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_First, _Last);
		}

	map& operator=(const map& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	map(map&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	map(map&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	map& operator=(map&& _Right)
		noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	mapped_type& operator[](key_type&& _Keyval)
		{	
		return (try_emplace(::std:: move(_Keyval)).first->second);
		}

	void swap(map& _Right) noexcept(noexcept(_Mybase::swap(_Right))) 
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		_Pairib insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	template<class _Keyty,
		class... _Mappedty>
		_Pairib _Try_emplace(_Keyty&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
			return (_Pairib(
				_Mybase::emplace_hint(_Where,
					piecewise_construct,
					::std:: forward_as_tuple(
						::std:: forward<_Keyty>(_Keyval)),
					::std:: forward_as_tuple(
						::std:: forward<_Mappedty>(_Mapval)...)),
				true));
		else
			return (_Pairib(_Where, false));
		}

	template<class... _Mappedty>
		_Pairib try_emplace(const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval, ::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, const key_type& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class... _Mappedty>
		_Pairib try_emplace(key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...));
		}

	template<class... _Mappedty>
		iterator try_emplace(const_iterator, key_type&& _Keyval,
			_Mappedty&&... _Mapval)
		{	
		return (_Try_emplace(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)...).first);
		}

	template<class _Keyty,
		class _Mappedty>
		_Pairib _Insert_or_assign(_Keyty&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
			return (_Pairib(
				_Mybase::emplace_hint(_Where,
					::std:: forward<_Keyty>(_Keyval),
					::std:: forward<_Mappedty>(_Mapval)),
				true));
		else
			{	
			_Where->second = ::std:: forward<_Mappedty>(_Mapval);
			return (_Pairib(_Where, false));
			}
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, const key_type& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(_Keyval,
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	template<class _Mappedty>
		_Pairib insert_or_assign(key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)));
		}

	template<class _Mappedty>
		iterator insert_or_assign(const_iterator, key_type&& _Keyval,
			_Mappedty&& _Mapval)
		{	
		return (_Insert_or_assign(::std:: move(_Keyval),
			::std:: forward<_Mappedty>(_Mapval)).first);
		}

	map(initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		insert(_Ilist);
		}

	map(initializer_list<value_type> _Ilist,
		const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_Ilist);
		}

	map(initializer_list<value_type> _Ilist, const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_Ilist);
		}

	map(initializer_list<value_type> _Ilist,
		const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_Ilist);
		}

	map& operator=(initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}

	mapped_type& operator[](const key_type& _Keyval)
		{	
		return (try_emplace(_Keyval).first->second);
		}

	[[nodiscard]] mapped_type& at(const key_type& _Keyval)
		{	
		iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
			_Xout_of_range("invalid map<K, T> key");
		return (_Where->second);
		}

	[[nodiscard]] const mapped_type& at(const key_type& _Keyval) const
		{	
		const_iterator _Where = _Mybase::lower_bound(_Keyval);
		if (_Where == _Mybase::end()
			|| _Mybase::_Getcomp()(_Keyval, _Mybase::_Key(_Where._Ptr)))
			_Xout_of_range("invalid map<K, T> key");
		return (_Where->second);
		}

	using _Mybase::_Unchecked_begin;
	using _Mybase::_Unchecked_end;
	};


template<class _Iter,
	class _Pr = less<_Guide_key_t<_Iter>>,
	class _Alloc = allocator<_Guide_pair_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		negation<_Is_allocator<_Pr>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	map(_Iter, _Iter, _Pr = _Pr(), _Alloc = _Alloc())
		-> map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Pr, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>,
	enable_if_t<conjunction_v<
		negation<_Is_allocator<_Pr>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	map(initializer_list<pair<const _Kty, _Ty>>, _Pr = _Pr(), _Alloc = _Alloc())
		-> map<_Kty, _Ty, _Pr, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	map(_Iter, _Iter, _Alloc)
		-> map<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, less<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	map(initializer_list<pair<const _Kty, _Ty>>, _Alloc)
		-> map<_Kty, _Ty, less<_Kty>, _Alloc>;
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

template<class _Kty,
	class _Ty,
	class _Pr,
	class _Alloc> inline
	void swap(map<_Kty, _Ty, _Pr, _Alloc>& _Left,
		map<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

		
template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>>
	class multimap
		: public _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>>
	{	
public:
	static_assert(!1 || is_same_v<pair<const _Kty, _Ty>, typename _Alloc::value_type>,
		"multimap<Key, Value, Compare, Allocator>" " requires that Allocator's value_type match " "pair<const Key, Value>" " (See N4659 26.2.1 [container.requirements.general]/16 allocator_type)" " Either fix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0" " to suppress this diagnostic.");

	using _Mybase = _Tree<_Tmap_traits<_Kty, _Ty, _Pr, _Alloc, true>>;
	using key_type = _Kty;
	using mapped_type = _Ty;
	using key_compare = _Pr;
	using value_compare = typename _Mybase::value_compare;
	using value_type = typename _Mybase::value_type;
	using allocator_type = typename _Mybase::allocator_type;
	using size_type = typename _Mybase::size_type;
	using difference_type = typename _Mybase::difference_type;
	using pointer = typename _Mybase::pointer;
	using const_pointer = typename _Mybase::const_pointer;
	using reference = value_type&;
	using const_reference = const value_type&;
	using iterator = typename _Mybase::iterator;
	using const_iterator = typename _Mybase::const_iterator;
	using reverse_iterator = typename _Mybase::reverse_iterator;
	using const_reverse_iterator = typename _Mybase::const_reverse_iterator;

	using _Alnode = typename _Mybase::_Alnode;
	using _Alnode_traits = typename _Mybase::_Alnode_traits;

	multimap()
		: _Mybase(key_compare())
		{	
		}

	explicit multimap(const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		}

	multimap(const multimap& _Right)
		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))
		{	
		}

	multimap(const multimap& _Right, const allocator_type& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	explicit multimap(const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		}

	multimap(const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last)
		: _Mybase(key_compare())
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last,
			const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last,
			const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_First, _Last);
		}

	template<class _Iter>
		multimap(_Iter _First, _Iter _Last,
			const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_First, _Last);
		}

	multimap& operator=(const multimap& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	multimap(multimap&& _Right)
		: _Mybase(::std:: move(_Right))
		{	
		}

	multimap(multimap&& _Right, const allocator_type& _Al)
		: _Mybase(::std:: move(_Right), _Al)
		{	
		}

	multimap& operator=(multimap&& _Right)
		noexcept(_Alnode_traits::is_always_equal::value && is_nothrow_move_assignable_v<_Pr>)
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class... _Valty>
		iterator emplace(_Valty&&... _Val)
		{	
		return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
		}

	void swap(multimap& _Right) noexcept(noexcept(_Mybase::swap(_Right))) 
		{	
		_Mybase::swap(_Right);
		}

	using _Mybase::insert;

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(_Valty&& _Val)
		{	
		return (this->emplace(::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty,
		class = enable_if_t<is_constructible_v<value_type, _Valty>>>
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (this->emplace_hint(_Where, ::std:: forward<_Valty>(_Val)));
		}

	multimap(initializer_list<value_type> _Ilist)
		: _Mybase(key_compare())
		{	
		insert(_Ilist);
		}

	multimap(initializer_list<value_type> _Ilist,
		const key_compare& _Pred)
		: _Mybase(_Pred)
		{	
		insert(_Ilist);
		}

	multimap(initializer_list<value_type> _Ilist,
		const allocator_type& _Al)
		: _Mybase(key_compare(), _Al)
		{	
		insert(_Ilist);
		}

	multimap(initializer_list<value_type> _Ilist,
		const key_compare& _Pred, const allocator_type& _Al)
		: _Mybase(_Pred, _Al)
		{	
		insert(_Ilist);
		}

	multimap& operator=(initializer_list<value_type> _Ilist)
		{	
		_Mybase::clear();
		insert(_Ilist);
		return (*this);
		}

	using _Mybase::_Unchecked_begin;
	using _Mybase::_Unchecked_end;
	};


template<class _Iter,
	class _Pr = less<_Guide_key_t<_Iter>>,
	class _Alloc = allocator<_Guide_pair_t<_Iter>>,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		negation<_Is_allocator<_Pr>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	multimap(_Iter, _Iter, _Pr = _Pr(), _Alloc = _Alloc())
		-> multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, _Pr, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>,
	class _Alloc = allocator<pair<const _Kty, _Ty>>,
	enable_if_t<conjunction_v<
		negation<_Is_allocator<_Pr>>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	multimap(initializer_list<pair<const _Kty, _Ty>>, _Pr = _Pr(), _Alloc = _Alloc())
		-> multimap<_Kty, _Ty, _Pr, _Alloc>;

template<class _Iter,
	class _Alloc,
	enable_if_t<conjunction_v<
		_Is_iterator<_Iter>,
		_Is_allocator<_Alloc>
	>, int> = 0>
	multimap(_Iter, _Iter, _Alloc)
		-> multimap<_Guide_key_t<_Iter>, _Guide_val_t<_Iter>, less<_Guide_key_t<_Iter>>, _Alloc>;

template<class _Kty,
	class _Ty,
	class _Alloc,
	enable_if_t<_Is_allocator<_Alloc>::value, int> = 0>
	multimap(initializer_list<pair<const _Kty, _Ty>>, _Alloc)
		-> multimap<_Kty, _Ty, less<_Kty>, _Alloc>;
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"

template<class _Kty,
	class _Ty,
	class _Pr,
	class _Alloc> inline
	void swap(multimap<_Kty, _Ty, _Pr, _Alloc>& _Left,
		multimap<_Kty, _Ty, _Pr, _Alloc>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}


namespace pmr {
template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>>
	using map = ::std:: map<_Kty, _Ty, _Pr, polymorphic_allocator<pair<const _Kty, _Ty>>>;

template<class _Kty,
	class _Ty,
	class _Pr = less<_Kty>>
	using multimap = ::std:: multimap<_Kty, _Ty, _Pr, polymorphic_allocator<pair<const _Kty, _Ty>>>;
} 
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\map"





#line 57 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"








enum class QCborSimpleType : quint8;

template <typename T>
struct QMetaTypeId2;

template <typename T>
inline constexpr int qMetaTypeId();






























#line 103 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"







#line 111 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"































































































































class QDataStream;
class QMetaTypeInterface;
struct QMetaObject;

namespace QtPrivate
{




template<typename From, typename To>
To convertImplicit(const From& from)
{
    return from;
}


struct AbstractDebugStreamFunction
{
    typedef void (*Stream)(const AbstractDebugStreamFunction *, QDebug&, const void *);
    typedef void (*Destroy)(AbstractDebugStreamFunction *);
    explicit AbstractDebugStreamFunction(Stream s = nullptr, Destroy d = nullptr)
        : stream(s), destroy(d) {}
    AbstractDebugStreamFunction(const AbstractDebugStreamFunction &) = delete; AbstractDebugStreamFunction &operator=(const AbstractDebugStreamFunction &) = delete;
    Stream stream;
    Destroy destroy;
};

template<typename T>
struct BuiltInDebugStreamFunction : public AbstractDebugStreamFunction
{
    BuiltInDebugStreamFunction()
        : AbstractDebugStreamFunction(stream, destroy) {}
    static void stream(const AbstractDebugStreamFunction *, QDebug& dbg, const void *r)
    {
        const T *rhs = static_cast<const T *>(r);
        operator<<(dbg, *rhs);
    }

    static void destroy(AbstractDebugStreamFunction *_this)
    {
        delete static_cast<BuiltInDebugStreamFunction *>(_this);
    }
};
#line 283 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

struct AbstractComparatorFunction
{
    typedef bool (*LessThan)(const AbstractComparatorFunction *, const void *, const void *);
    typedef bool (*Equals)(const AbstractComparatorFunction *, const void *, const void *);
    typedef void (*Destroy)(AbstractComparatorFunction *);
    explicit AbstractComparatorFunction(LessThan lt = nullptr, Equals e = nullptr, Destroy d = nullptr)
        : lessThan(lt), equals(e), destroy(d) {}
    AbstractComparatorFunction(const AbstractComparatorFunction &) = delete; AbstractComparatorFunction &operator=(const AbstractComparatorFunction &) = delete;
    LessThan lessThan;
    Equals equals;
    Destroy destroy;
};

template<typename T>
struct BuiltInComparatorFunction : public AbstractComparatorFunction
{
    BuiltInComparatorFunction()
        : AbstractComparatorFunction(lessThan, equals, destroy) {}
    static bool lessThan(const AbstractComparatorFunction *, const void *l, const void *r)
    {
        const T *lhs = static_cast<const T *>(l);
        const T *rhs = static_cast<const T *>(r);
        return *lhs < *rhs;
    }

    static bool equals(const AbstractComparatorFunction *, const void *l, const void *r)
    {
        const T *lhs = static_cast<const T *>(l);
        const T *rhs = static_cast<const T *>(r);
        return *lhs == *rhs;
    }

    static void destroy(AbstractComparatorFunction *_this)
    {
        delete static_cast<BuiltInComparatorFunction *>(_this);
    }
};

template<typename T>
struct BuiltInEqualsComparatorFunction : public AbstractComparatorFunction
{
    BuiltInEqualsComparatorFunction()
        : AbstractComparatorFunction(nullptr, equals, destroy) {}
    static bool equals(const AbstractComparatorFunction *, const void *l, const void *r)
    {
        const T *lhs = static_cast<const T *>(l);
        const T *rhs = static_cast<const T *>(r);
        return *lhs == *rhs;
    }

    static void destroy(AbstractComparatorFunction *_this)
    {
        delete static_cast<BuiltInEqualsComparatorFunction *>(_this);
    }
};

struct AbstractConverterFunction
{
    typedef bool (*Converter)(const AbstractConverterFunction *, const void *, void*);
    explicit AbstractConverterFunction(Converter c = nullptr)
        : convert(c) {}
    AbstractConverterFunction(const AbstractConverterFunction &) = delete; AbstractConverterFunction &operator=(const AbstractConverterFunction &) = delete;
    Converter convert;
};

template<typename From, typename To>
struct ConverterMemberFunction : public AbstractConverterFunction
{
    explicit ConverterMemberFunction(To(From::*function)() const)
        : AbstractConverterFunction(convert),
          m_function(function) {}
    ~ConverterMemberFunction();
    static bool convert(const AbstractConverterFunction *_this, const void *in, void *out)
    {
        const From *f = static_cast<const From *>(in);
        To *t = static_cast<To *>(out);
        const ConverterMemberFunction *_typedThis =
            static_cast<const ConverterMemberFunction *>(_this);
        *t = (f->*_typedThis->m_function)();
        return true;
    }

    To(From::* const m_function)() const;
};

template<typename From, typename To>
struct ConverterMemberFunctionOk : public AbstractConverterFunction
{
    explicit ConverterMemberFunctionOk(To(From::*function)(bool *) const)
        : AbstractConverterFunction(convert),
          m_function(function) {}
    ~ConverterMemberFunctionOk();
    static bool convert(const AbstractConverterFunction *_this, const void *in, void *out)
    {
        const From *f = static_cast<const From *>(in);
        To *t = static_cast<To *>(out);
        bool ok = false;
        const ConverterMemberFunctionOk *_typedThis =
            static_cast<const ConverterMemberFunctionOk *>(_this);
        *t = (f->*_typedThis->m_function)(&ok);
        if (!ok)
            *t = To();
        return ok;
    }

    To(From::* const m_function)(bool*) const;
};

template<typename From, typename To, typename UnaryFunction>
struct ConverterFunctor : public AbstractConverterFunction
{
    explicit ConverterFunctor(UnaryFunction function)
        : AbstractConverterFunction(convert),
          m_function(function) {}
    ~ConverterFunctor();
    static bool convert(const AbstractConverterFunction *_this, const void *in, void *out)
    {
        const From *f = static_cast<const From *>(in);
        To *t = static_cast<To *>(out);
        const ConverterFunctor *_typedThis =
            static_cast<const ConverterFunctor *>(_this);
        *t = _typedThis->m_function(*f);
        return true;
    }

    UnaryFunction m_function;
};

    template<typename T, bool>
    struct ValueTypeIsMetaType;
    template<typename T, bool>
    struct AssociativeValueTypeIsMetaType;
    template<typename T, bool>
    struct IsMetaTypePair;
    template<typename, typename>
    struct MetaTypeSmartPointerHelper;
}

class __declspec(dllimport) QMetaType {
    enum ExtensionFlag { NoExtensionFlags,
                         CreateEx = 0x1, DestroyEx = 0x2,
                         ConstructEx = 0x4, DestructEx = 0x8,
                         NameEx = 0x10, SizeEx = 0x20,
                         CtorEx = 0x40, DtorEx = 0x80,
                         FlagsEx = 0x100, MetaObjectEx = 0x200
                       };
public:

    
    enum Type {
        
        Void = 43, Bool = 1, Int = 2, UInt = 3, LongLong = 4, ULongLong = 5, Double = 6, Long = 32, Short = 33, Char = 34, ULong = 35, UShort = 36, UChar = 37, Float = 38, SChar = 40, Nullptr = 51, QCborSimpleType = 52, VoidStar = 31, QChar = 7, QString = 10, QStringList = 11, QByteArray = 12, QBitArray = 13, QDate = 14, QTime = 15, QDateTime = 16, QUrl = 17, QLocale = 18, QRect = 19, QRectF = 20, QSize = 21, QSizeF = 22, QLine = 23, QLineF = 24, QPoint = 25, QPointF = 26, QRegExp = 27, QEasingCurve = 29, QUuid = 30, QVariant = 41, QRegularExpression = 44, QJsonValue = 45, QJsonObject = 46, QJsonArray = 47, QJsonDocument = 48, QCborValue = 53, QCborArray = 54, QCborMap = 55, QModelIndex = 42, QPersistentModelIndex = 50, QObjectStar = 39, QVariantMap = 8, QVariantList = 9, QVariantHash = 28, QByteArrayList = 49, QFont = 64, QPixmap = 65, QBrush = 66, QColor = 67, QPalette = 68, QIcon = 69, QImage = 70, QPolygon = 71, QRegion = 72, QBitmap = 73, QCursor = 74, QKeySequence = 75, QPen = 76, QTextLength = 77, QTextFormat = 78, QMatrix = 79, QTransform = 80, QMatrix4x4 = 81, QVector2D = 82, QVector3D = 83, QVector4D = 84, QQuaternion = 85, QPolygonF = 86, QSizePolicy = 121,

        FirstCoreType = Bool,
        LastCoreType = QCborMap,
        FirstGuiType = QFont,
        LastGuiType = QPolygonF,
        FirstWidgetsType = QSizePolicy,
        LastWidgetsType = QSizePolicy,
        HighestInternalId = LastWidgetsType,

        QReal = sizeof(qreal) == sizeof(double) ? Double : Float,

        UnknownType = 0,
        User = 1024
    };

































#line 484 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

    enum TypeFlag {
        NeedsConstruction = 0x1,
        NeedsDestruction = 0x2,
        MovableType = 0x4,
        PointerToQObject = 0x8,
        IsEnumeration = 0x10,
        SharedPointerToQObject = 0x20,
        WeakPointerToQObject = 0x40,
        TrackingPointerToQObject = 0x80,
        WasDeclaredAsMetaType = 0x100,
        IsGadget = 0x200,
        PointerToGadget = 0x400
    };
    typedef QFlags<TypeFlag> TypeFlags;

    typedef void (*Deleter)(void *);
    typedef void *(*Creator)(const void *);


    typedef void (*Destructor)(void *);
    typedef void *(*Constructor)(void *, const void *); 
#line 507 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    typedef void (*TypedDestructor)(int, void *);
    typedef void *(*TypedConstructor)(int, void *, const void *);

    typedef void (*SaveOperator)(QDataStream &, const void *);
    typedef void (*LoadOperator)(QDataStream &, void *);

    static void registerStreamOperators(const char *typeName, SaveOperator saveOp,
                                        LoadOperator loadOp);
    static void registerStreamOperators(int type, SaveOperator saveOp,
                                        LoadOperator loadOp);
#line 518 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    static int registerType(const char *typeName, Deleter deleter,
                            Creator creator);
    static int registerType(const char *typeName, Deleter deleter,
                            Creator creator,
                            Destructor destructor,
                            Constructor constructor,
                            int size,
                            QMetaType::TypeFlags flags,
                            const QMetaObject *metaObject);
    static int registerType(const char *typeName,
                            TypedDestructor destructor,
                            TypedConstructor constructor,
                            int size,
                            QMetaType::TypeFlags flags,
                            const QMetaObject *metaObject);
    static bool unregisterType(int type);
    static int registerNormalizedType(const ::QByteArray &normalizedTypeName, Deleter deleter,
                            Creator creator,
                            Destructor destructor,
                            Constructor constructor,
                            int size,
                            QMetaType::TypeFlags flags,
                            const QMetaObject *metaObject);
    static int registerNormalizedType(const ::QByteArray &normalizedTypeName, Destructor destructor,
                            Constructor constructor,
                            int size,
                            QMetaType::TypeFlags flags,
                            const QMetaObject *metaObject);
    static int registerNormalizedType(const ::QByteArray &normalizedTypeName, TypedDestructor destructor,
                            TypedConstructor constructor,
                            int size,
                            QMetaType::TypeFlags flags,
                            const QMetaObject *metaObject);
    static int registerTypedef(const char *typeName, int aliasId);
    static int registerNormalizedTypedef(const ::QByteArray &normalizedTypeName, int aliasId);
    static int type(const char *typeName);

    static int type(const ::QByteArray &typeName);
    static const char *typeName(int type);
    static int sizeOf(int type);
    static TypeFlags typeFlags(int type);
    static const QMetaObject *metaObjectForType(int type);
    static bool isRegistered(int type);
    static void *create(int type, const void *copy = nullptr);



#line 566 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    static void destroy(int type, void *data);
    static void *construct(int type, void *where, const void *copy);
    static void destruct(int type, void *where);


    static bool save(QDataStream &stream, int type, const void *data);
    static bool load(QDataStream &stream, int type, void *data);
#line 574 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

    explicit QMetaType(const int type); 
    inline ~QMetaType();

    inline bool isValid() const;
    inline bool isRegistered() const;
    inline int id() const;
    inline int sizeOf() const;
    inline TypeFlags flags() const;
    inline const QMetaObject *metaObject() const;

    inline void *create(const void *copy = nullptr) const;
    inline void destroy(void *data) const;
    inline void *construct(void *where, const void *copy = nullptr) const;
    inline void destruct(void *data) const;

public:
    template<typename T>
    static bool registerComparators()
    {
        static_assert(bool((!QMetaTypeId2<T>::IsBuiltIn)), "QMetaType::registerComparators: The type must be a custom type.");
#line 596 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

        const int typeId = qMetaTypeId<T>();
        static const QtPrivate::BuiltInComparatorFunction<T> f;
        return registerComparatorFunction( &f, typeId);
    }
    template<typename T>
    static bool registerEqualsComparator()
    {
        static_assert(bool((!QMetaTypeId2<T>::IsBuiltIn)), "QMetaType::registerEqualsComparator: The type must be a custom type.");
#line 606 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
        const int typeId = qMetaTypeId<T>();
        static const QtPrivate::BuiltInEqualsComparatorFunction<T> f;
        return registerComparatorFunction( &f, typeId);
    }

    template<typename T>
    static bool hasRegisteredComparators()
    {
        return hasRegisteredComparators(qMetaTypeId<T>());
    }
    static bool hasRegisteredComparators(int typeId);



    template<typename T>
    static bool registerDebugStreamOperator()
    {
        static_assert(bool((!QMetaTypeId2<T>::IsBuiltIn)), "QMetaType::registerDebugStreamOperator: The type must be a custom type.");
#line 625 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

        const int typeId = qMetaTypeId<T>();
        static const QtPrivate::BuiltInDebugStreamFunction<T> f;
        return registerDebugStreamOperatorFunction(&f, typeId);
    }
    template<typename T>
    static bool hasRegisteredDebugStreamOperator()
    {
        return hasRegisteredDebugStreamOperator(qMetaTypeId<T>());
    }
    static bool hasRegisteredDebugStreamOperator(int typeId);
#line 637 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

    
    template<typename From, typename To>
    static bool registerConverter()
    {
        return registerConverter<From, To>(QtPrivate::convertImplicit<From, To>);
    }









    
    template<typename From, typename To>
    static bool registerConverter(To(From::*function)() const)
    {
        static_assert(bool((!QMetaTypeId2<To>::IsBuiltIn || !QMetaTypeId2<From>::IsBuiltIn)), "QMetaType::registerConverter: At least one of the types must be a custom type.");
#line 659 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

        const int fromTypeId = qMetaTypeId<From>();
        const int toTypeId = qMetaTypeId<To>();
        static const QtPrivate::ConverterMemberFunction<From, To> f(function);
        return registerConverterFunction(&f, fromTypeId, toTypeId);
    }

    
    template<typename From, typename To>
    static bool registerConverter(To(From::*function)(bool*) const)
    {
        static_assert(bool((!QMetaTypeId2<To>::IsBuiltIn || !QMetaTypeId2<From>::IsBuiltIn)), "QMetaType::registerConverter: At least one of the types must be a custom type.");
#line 672 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

        const int fromTypeId = qMetaTypeId<From>();
        const int toTypeId = qMetaTypeId<To>();
        static const QtPrivate::ConverterMemberFunctionOk<From, To> f(function);
        return registerConverterFunction(&f, fromTypeId, toTypeId);
    }

    
    template<typename From, typename To, typename UnaryFunction>
    static bool registerConverter(UnaryFunction function)
    {
        static_assert(bool((!QMetaTypeId2<To>::IsBuiltIn || !QMetaTypeId2<From>::IsBuiltIn)), "QMetaType::registerConverter: At least one of the types must be a custom type.");
#line 685 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

        const int fromTypeId = qMetaTypeId<From>();
        const int toTypeId = qMetaTypeId<To>();
        static const QtPrivate::ConverterFunctor<From, To, UnaryFunction> f(function);
        return registerConverterFunction(&f, fromTypeId, toTypeId);
    }
#line 692 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

    static bool convert(const void *from, int fromTypeId, void *to, int toTypeId);
    static bool compare(const void *lhs, const void *rhs, int typeId, int* result);
    static bool equals(const void *lhs, const void *rhs, int typeId, int* result);
    static bool debugStream(QDebug& dbg, const void *rhs, int typeId);

    template<typename From, typename To>
    static bool hasRegisteredConverterFunction()
    {
        return hasRegisteredConverterFunction(qMetaTypeId<From>(), qMetaTypeId<To>());
    }

    static bool hasRegisteredConverterFunction(int fromTypeId, int toTypeId);

private:
    static QMetaType typeInfo(const int type);
    inline QMetaType(const ExtensionFlag extensionFlags, const QMetaTypeInterface *info,
                     TypedConstructor creator,
                     TypedDestructor deleter,
                     SaveOperator saveOp,
                     LoadOperator loadOp,
                     Constructor constructor,
                     Destructor destructor,
                     uint sizeOf,
                     uint theTypeFlags,
                     int typeId,
                     const QMetaObject *metaObject);
    QMetaType(const QMetaType &other);
    QMetaType &operator =(const QMetaType &);
    inline bool isExtended(const ExtensionFlag flag) const { return m_extensionFlags & flag; }

    
    void ctor(const QMetaTypeInterface *info);
    void dtor();
    uint sizeExtended() const;
    QMetaType::TypeFlags flagsExtended() const;
    const QMetaObject *metaObjectExtended() const;
    void *createExtended(const void *copy = nullptr) const;
    void destroyExtended(void *data) const;
    void *constructExtended(void *where, const void *copy = nullptr) const;
    void destructExtended(void *data) const;

    static bool registerComparatorFunction(const QtPrivate::AbstractComparatorFunction *f, int type);

    static bool registerDebugStreamOperatorFunction(const QtPrivate::AbstractDebugStreamFunction *f, int type);
#line 738 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"












#line 751 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
public:
#line 753 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    static bool registerConverterFunction(const QtPrivate::AbstractConverterFunction *f, int from, int to);
    static void unregisterConverterFunction(int from, int to);
private:

    TypedConstructor m_typedConstructor;
    TypedDestructor m_typedDestructor;
    SaveOperator m_saveOp;
    LoadOperator m_loadOp;
    Constructor m_constructor;
    Destructor m_destructor;
    void *m_extension; 
    uint m_size;
    uint m_typeFlags;
    uint m_extensionFlags;
    int m_typeId;
    const QMetaObject *m_metaObject;
};



constexpr inline QFlags<QMetaType::TypeFlags::enum_type> operator|(QMetaType::TypeFlags::enum_type f1, QMetaType::TypeFlags::enum_type f2) noexcept { return QFlags<QMetaType::TypeFlags::enum_type>(f1) | f2; } constexpr inline QFlags<QMetaType::TypeFlags::enum_type> operator|(QMetaType::TypeFlags::enum_type f1, QFlags<QMetaType::TypeFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QMetaType::TypeFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

namespace QtPrivate {

template<typename From, typename To>
ConverterMemberFunction<From, To>::~ConverterMemberFunction()
{
    QMetaType::unregisterConverterFunction(qMetaTypeId<From>(), qMetaTypeId<To>());
}
template<typename From, typename To>
ConverterMemberFunctionOk<From, To>::~ConverterMemberFunctionOk()
{
    QMetaType::unregisterConverterFunction(qMetaTypeId<From>(), qMetaTypeId<To>());
}
template<typename From, typename To, typename UnaryFunction>
ConverterFunctor<From, To, UnaryFunction>::~ConverterFunctor()
{
    QMetaType::unregisterConverterFunction(qMetaTypeId<From>(), qMetaTypeId<To>());
}

}






namespace QtMetaTypePrivate {
template <typename T, bool Accepted = true>
struct QMetaTypeFunctionHelper {
    static void Destruct(void *t)
    {
        (void)t; 
        static_cast<T*>(t)->~T();
    }

    static void *Construct(void *where, const void *t)
    {
        if (t)
            return new (where) T(*static_cast<const T*>(t));
        return new (where) T;
    }

    static void Save(QDataStream &stream, const void *t)
    {
        stream << *static_cast<const T*>(t);
    }

    static void Load(QDataStream &stream, void *t)
    {
        stream >> *static_cast<T*>(t);
    }
#line 826 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
};

template <typename T>
struct QMetaTypeFunctionHelper<T,  false> {
    static void Destruct(void *) {}
    static void *Construct(void *, const void *) { return nullptr; }

    static void Save(QDataStream &, const void *) {}
    static void Load(QDataStream &, void *) {}
#line 836 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
};
template <>
struct QMetaTypeFunctionHelper<void,  true>
        : public QMetaTypeFunctionHelper<void,  false>
{};

struct VariantData
{
    VariantData(const int metaTypeId_,
                const void *data_,
                const uint flags_)
      : metaTypeId(metaTypeId_)
      , data(data_)
      , flags(flags_)
    {
    }
    VariantData(const VariantData &other)
        : metaTypeId(other.metaTypeId), data(other.data), flags(other.flags){}
    const int metaTypeId;
    const void *data;
    const uint flags;
private:
    
    VariantData &operator=(const VariantData &) = delete;
};

template<typename const_iterator>
struct IteratorOwnerCommon
{
    static void assign(void **ptr, const_iterator iterator)
    {
        *ptr = new const_iterator(iterator);
    }
    static void assign(void **ptr, void * const * src)
    {
        *ptr = new const_iterator(*static_cast<const_iterator*>(*src));
    }

    static void advance(void **iterator, int step)
    {
        const_iterator &it = *static_cast<const_iterator*>(*iterator);
        std::advance(it, step);
    }

    static void destroy(void **ptr)
    {
        delete static_cast<const_iterator*>(*ptr);
    }

    static bool equal(void * const *it, void * const *other)
    {
        return *static_cast<const_iterator*>(*it) == *static_cast<const_iterator*>(*other);
    }
};

template<typename const_iterator>
struct IteratorOwner : IteratorOwnerCommon<const_iterator>
{
    static const void *getData(void * const *iterator)
    {
        return &**static_cast<const_iterator*>(*iterator);
    }

    static const void *getData(const_iterator it)
    {
        return &*it;
    }
};

struct __declspec(dllimport) VectorBoolElements
{
  static const bool true_element;
  static const bool false_element;
};

template<>
struct IteratorOwner<std::vector<bool>::const_iterator> : IteratorOwnerCommon<std::vector<bool>::const_iterator>
{
public:
    static const void *getData(void * const *iterator)
    {
        return **static_cast<std::vector<bool>::const_iterator*>(*iterator) ?
            &VectorBoolElements::true_element : &VectorBoolElements::false_element;
    }

    static const void *getData(const std::vector<bool>::const_iterator& it)
    {
        return *it ? &VectorBoolElements::true_element : &VectorBoolElements::false_element;
    }
};

template<typename value_type>
struct IteratorOwner<const value_type*>
{
private:
    
    
    
    struct Dummy {};
    typedef typename std::conditional<std::is_same<value_type, void*>::value, Dummy, value_type>::type value_type_OR_Dummy;
public:
    static void assign(void **ptr, const value_type_OR_Dummy *iterator )
    {
        *ptr = const_cast<value_type*>(iterator);
    }
    static void assign(void **ptr, void * const * src)
    {
        *ptr = static_cast<value_type*>(*src);
    }

    static void advance(void **iterator, int step)
    {
        value_type *it = static_cast<value_type*>(*iterator);
        std::advance(it, step);
        *iterator = it;
    }

    static void destroy(void **)
    {
    }

    static const void *getData(void * const *iterator)
    {
        return *iterator;
    }

    static const void *getData(const value_type_OR_Dummy *it)
    {
        return it;
    }

    static bool equal(void * const *it, void * const *other)
    {
        return static_cast<value_type*>(*it) == static_cast<value_type*>(*other);
    }
};

enum IteratorCapability
{
    ForwardCapability = 1,
    BiDirectionalCapability = 2,
    RandomAccessCapability = 4
};

enum ContainerCapability
{
    ContainerIsAppendable = 1
};

template<typename Container, typename T = void>
struct ContainerCapabilitiesImpl
{
    enum {ContainerCapabilities = 0};
    using appendFunction = void(*)(const void *container, const void *newElement);
    static constexpr const appendFunction appendImpl = nullptr;
};

template<typename Container>
struct ContainerCapabilitiesImpl<Container, decltype(std::declval<Container>().push_back(std::declval<typename Container::value_type>()))>
{
    enum {ContainerCapabilities = ContainerIsAppendable};

    
    
    static void appendImpl(const void *container, const void *value)
    { static_cast<Container *>(const_cast<void *>(container))->push_back(*static_cast<const typename Container::value_type *>(value)); }
};

template<typename T, typename Category = typename std::iterator_traits<typename T::const_iterator>::iterator_category>
struct CapabilitiesImpl;

template<typename T>
struct CapabilitiesImpl<T, std::forward_iterator_tag>
{ enum { IteratorCapabilities = ForwardCapability }; };
template<typename T>
struct CapabilitiesImpl<T, std::bidirectional_iterator_tag>
{ enum { IteratorCapabilities = BiDirectionalCapability | ForwardCapability }; };
template<typename T>
struct CapabilitiesImpl<T, std::random_access_iterator_tag>
{ enum { IteratorCapabilities = RandomAccessCapability | BiDirectionalCapability | ForwardCapability }; };

template<typename T>
struct ContainerAPI : CapabilitiesImpl<T>
{
    static int size(const T *t) { return int(std::distance(t->begin(), t->end())); }
};

template<typename T>
struct ContainerAPI<QList<T> > : CapabilitiesImpl<QList<T> >
{ static int size(const QList<T> *t) { return t->size(); } };

template<typename T>
struct ContainerAPI<QVector<T> > : CapabilitiesImpl<QVector<T> >
{ static int size(const QVector<T> *t) { return t->size(); } };

template<typename T>
struct ContainerAPI<std::vector<T> > : CapabilitiesImpl<std::vector<T> >
{ static int size(const std::vector<T> *t) { return int(t->size()); } };

template<typename T>
struct ContainerAPI<std::list<T> > : CapabilitiesImpl<std::list<T> >
{ static int size(const std::list<T> *t) { return int(t->size()); } };







class QSequentialIterableImpl
{
public:
    const void * _iterable;
    void *_iterator;
    int _metaType_id;
    uint _metaType_flags;
    uint _iteratorCapabilities;
    
    
    
    
    
    typedef int(*sizeFunc)(const void *p);
    typedef const void * (*atFunc)(const void *p, int);
    typedef void (*moveIteratorFunc)(const void *p, void **);
    enum Position { ToBegin, ToEnd };
    typedef void (*moveIteratorFunc2)(const void *p, void **, Position position);
    typedef void (*advanceFunc)(void **p, int);
    typedef VariantData (*getFunc)( void * const *p, int metaTypeId, uint flags);
    typedef void (*destroyIterFunc)(void **p);
    typedef bool (*equalIterFunc)(void * const *p, void * const *other);
    typedef void (*copyIterFunc)(void **, void * const *);
    typedef void(*appendFunction)(const void *container, const void *newElement);

    IteratorCapability iteratorCapabilities() {return static_cast<IteratorCapability>(_iteratorCapabilities & 0xF);}
    uint revision() {return _iteratorCapabilities >> 4 & 0x7;}
    uint containerCapabilities() {return _iteratorCapabilities >> 7 & 0xF;}

    sizeFunc _size;
    atFunc _at;
    union {
        moveIteratorFunc _moveToBegin;
        moveIteratorFunc2 _moveTo;
    };
    union {
        moveIteratorFunc _moveToEnd;
        appendFunction _append;
    };
    advanceFunc _advance;
    getFunc _get;
    destroyIterFunc _destroyIter;
    equalIterFunc _equalIter;
    copyIterFunc _copyIter;

    template<class T>
    static int sizeImpl(const void *p)
    { return ContainerAPI<T>::size(static_cast<const T*>(p)); }

    template<class T>
    static const void* atImpl(const void *p, int idx)
    {
        typename T::const_iterator i = static_cast<const T*>(p)->begin();
        std::advance(i, idx);
        return IteratorOwner<typename T::const_iterator>::getData(i);
    }

    template<class T>
    static void moveToBeginImpl(const void *container, void **iterator)
    { IteratorOwner<typename T::const_iterator>::assign(iterator, static_cast<const T*>(container)->begin()); }

    template<class T>
    static void moveToEndImpl(const void *container, void **iterator)
    { IteratorOwner<typename T::const_iterator>::assign(iterator, static_cast<const T*>(container)->end()); }

    template<class Container>
    static void moveToImpl(const void *container, void **iterator, Position position)
    {
        if (position == ToBegin)
            moveToBeginImpl<Container>(container, iterator);
        else
            moveToEndImpl<Container>(container, iterator);
    }

    template<class T>
    static VariantData getImpl(void * const *iterator, int metaTypeId, uint flags)
    { return VariantData(metaTypeId, IteratorOwner<typename T::const_iterator>::getData(iterator), flags); }

public:
    template<class T> QSequentialIterableImpl(const T*p)
      : _iterable(p)
      , _iterator(nullptr)
      , _metaType_id(qMetaTypeId<typename T::value_type>())
      , _metaType_flags(QTypeInfo<typename T::value_type>::isPointer)
      , _iteratorCapabilities(ContainerAPI<T>::IteratorCapabilities | (1 << 4) | (ContainerCapabilitiesImpl<T>::ContainerCapabilities << (4+3)))
      , _size(sizeImpl<T>)
      , _at(atImpl<T>)
      , _moveTo(moveToImpl<T>)
      , _append(ContainerCapabilitiesImpl<T>::appendImpl)
      , _advance(IteratorOwner<typename T::const_iterator>::advance)
      , _get(getImpl<T>)
      , _destroyIter(IteratorOwner<typename T::const_iterator>::destroy)
      , _equalIter(IteratorOwner<typename T::const_iterator>::equal)
      , _copyIter(IteratorOwner<typename T::const_iterator>::assign)
    {
    }

    QSequentialIterableImpl()
      : _iterable(nullptr)
      , _iterator(nullptr)
      , _metaType_id(QMetaType::UnknownType)
      , _metaType_flags(0)
      , _iteratorCapabilities(0 | (1 << 4) ) 
      , _size(nullptr)
      , _at(nullptr)
      , _moveToBegin(nullptr)
      , _moveToEnd(nullptr)
      , _advance(nullptr)
      , _get(nullptr)
      , _destroyIter(nullptr)
      , _equalIter(nullptr)
      , _copyIter(nullptr)
    {
    }

    inline void moveToBegin() {
        if (revision() == 0)
            _moveToBegin(_iterable, &_iterator);
        else
            _moveTo(_iterable, &_iterator, ToBegin);
    }
    inline void moveToEnd() {
        if (revision() == 0)
            _moveToEnd(_iterable, &_iterator);
        else
            _moveTo(_iterable, &_iterator, ToEnd);
    }
    inline bool equal(const QSequentialIterableImpl&other) const { return _equalIter(&_iterator, &other._iterator); }
    inline QSequentialIterableImpl &advance(int i) {
      static_cast<void>(false && (i > 0 || _iteratorCapabilities & BiDirectionalCapability));
      _advance(&_iterator, i);
      return *this;
    }

    inline void append(const void *newElement) {
        if (containerCapabilities() & ContainerIsAppendable)
            _append(_iterable, newElement);
    }

    inline VariantData getCurrent() const { return _get(&_iterator, _metaType_id, _metaType_flags); }

    VariantData at(int idx) const
    { return VariantData(_metaType_id, _at(_iterable, idx), _metaType_flags); }

    int size() const { static_cast<void>(false && (_iterable)); return _size(_iterable); }

    inline void destroyIter() { _destroyIter(&_iterator); }

    void copy(const QSequentialIterableImpl &other)
    {
      *this = other;
      _copyIter(&_iterator, &other._iterator);
    }
};
} template<> class QTypeInfo<QtMetaTypePrivate:: QSequentialIterableImpl > { public: enum { isSpecialized = true, isComplex = ((((Q_MOVABLE_TYPE)) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QtMetaTypePrivate:: QSequentialIterableImpl>(), isStatic = ((((Q_MOVABLE_TYPE)) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || (((Q_MOVABLE_TYPE)) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QtMetaTypePrivate:: QSequentialIterableImpl>(), isLarge = (sizeof(QtMetaTypePrivate:: QSequentialIterableImpl)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QtMetaTypePrivate:: QSequentialIterableImpl >::value, isDummy = ((((Q_MOVABLE_TYPE)) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QtMetaTypePrivate:: QSequentialIterableImpl) }; static inline const char *name() { return "QtMetaTypePrivate:: QSequentialIterableImpl"; } }; namespace QtMetaTypePrivate {

template<typename From>
struct QSequentialIterableConvertFunctor
{
    QSequentialIterableImpl operator()(const From &f) const
    {
        return QSequentialIterableImpl(&f);
    }
};
}

namespace QtMetaTypePrivate {
template<typename T, bool = std::is_same<typename T::const_iterator::value_type, typename T::mapped_type>::value>
struct AssociativeContainerAccessor
{
    static const typename T::key_type& getKey(const typename T::const_iterator &it)
    {
        return it.key();
    }

    static const typename T::mapped_type& getValue(const typename T::const_iterator &it)
    {
        return it.value();
    }
};

template<typename T, bool = std::is_same<typename T::const_iterator::value_type, std::pair<const typename T::key_type, typename T::mapped_type> >::value>
struct StlStyleAssociativeContainerAccessor;

template<typename T>
struct StlStyleAssociativeContainerAccessor<T, true>
{
    static const typename T::key_type& getKey(const typename T::const_iterator &it)
    {
        return it->first;
    }

    static const typename T::mapped_type& getValue(const typename T::const_iterator &it)
    {
        return it->second;
    }
};

template<typename T>
struct AssociativeContainerAccessor<T, false> : public StlStyleAssociativeContainerAccessor<T>
{
};

class QAssociativeIterableImpl
{
public:
    const void *_iterable;
    void *_iterator;
    int _metaType_id_key;
    uint _metaType_flags_key;
    int _metaType_id_value;
    uint _metaType_flags_value;
    typedef int(*sizeFunc)(const void *p);
    typedef void (*findFunc)(const void *container, const void *p, void **iterator);
    typedef void (*beginFunc)(const void *p, void **);
    typedef void (*advanceFunc)(void **p, int);
    typedef VariantData (*getFunc)(void * const *p, int metaTypeId, uint flags);
    typedef void (*destroyIterFunc)(void **p);
    typedef bool (*equalIterFunc)(void * const *p, void * const *other);
    typedef void (*copyIterFunc)(void **, void * const *);

    sizeFunc _size;
    findFunc _find;
    beginFunc _begin;
    beginFunc _end;
    advanceFunc _advance;
    getFunc _getKey;
    getFunc _getValue;
    destroyIterFunc _destroyIter;
    equalIterFunc _equalIter;
    copyIterFunc _copyIter;

    template<class T>
    static int sizeImpl(const void *p)
    { return int(std::distance(static_cast<const T*>(p)->begin(),
                               static_cast<const T*>(p)->end())); }

    template<class T>
    static void findImpl(const void *container, const void *p, void **iterator)
    { IteratorOwner<typename T::const_iterator>::assign(iterator,
                                                        static_cast<const T*>(container)->find(*static_cast<const typename T::key_type*>(p))); }

    template<class T>
    static void advanceImpl(void **p, int step)
    { std::advance(*static_cast<typename T::const_iterator*>(*p), step); }

    template<class T>
    static void beginImpl(const void *container, void **iterator)
    { IteratorOwner<typename T::const_iterator>::assign(iterator, static_cast<const T*>(container)->begin()); }

    template<class T>
    static void endImpl(const void *container, void **iterator)
    { IteratorOwner<typename T::const_iterator>::assign(iterator, static_cast<const T*>(container)->end()); }

    template<class T>
    static VariantData getKeyImpl(void * const *iterator, int metaTypeId, uint flags)
    { return VariantData(metaTypeId, &AssociativeContainerAccessor<T>::getKey(*static_cast<typename T::const_iterator*>(*iterator)), flags); }

    template<class T>
    static VariantData getValueImpl(void * const *iterator, int metaTypeId, uint flags)
    { return VariantData(metaTypeId, &AssociativeContainerAccessor<T>::getValue(*static_cast<typename T::const_iterator*>(*iterator)), flags); }

public:
    template<class T> QAssociativeIterableImpl(const T*p)
      : _iterable(p)
      , _iterator(nullptr)
      , _metaType_id_key(qMetaTypeId<typename T::key_type>())
      , _metaType_flags_key(QTypeInfo<typename T::key_type>::isPointer)
      , _metaType_id_value(qMetaTypeId<typename T::mapped_type>())
      , _metaType_flags_value(QTypeInfo<typename T::mapped_type>::isPointer)
      , _size(sizeImpl<T>)
      , _find(findImpl<T>)
      , _begin(beginImpl<T>)
      , _end(endImpl<T>)
      , _advance(advanceImpl<T>)
      , _getKey(getKeyImpl<T>)
      , _getValue(getValueImpl<T>)
      , _destroyIter(IteratorOwner<typename T::const_iterator>::destroy)
      , _equalIter(IteratorOwner<typename T::const_iterator>::equal)
      , _copyIter(IteratorOwner<typename T::const_iterator>::assign)
    {
    }

    QAssociativeIterableImpl()
      : _iterable(nullptr)
      , _iterator(nullptr)
      , _metaType_id_key(QMetaType::UnknownType)
      , _metaType_flags_key(0)
      , _metaType_id_value(QMetaType::UnknownType)
      , _metaType_flags_value(0)
      , _size(nullptr)
      , _find(nullptr)
      , _begin(nullptr)
      , _end(nullptr)
      , _advance(nullptr)
      , _getKey(nullptr)
      , _getValue(nullptr)
      , _destroyIter(nullptr)
      , _equalIter(nullptr)
      , _copyIter(nullptr)
    {
    }

    inline void begin() { _begin(_iterable, &_iterator); }
    inline void end() { _end(_iterable, &_iterator); }
    inline bool equal(const QAssociativeIterableImpl&other) const { return _equalIter(&_iterator, &other._iterator); }
    inline QAssociativeIterableImpl &advance(int i) { _advance(&_iterator, i); return *this; }

    inline void destroyIter() { _destroyIter(&_iterator); }

    inline VariantData getCurrentKey() const { return _getKey(&_iterator, _metaType_id_key, _metaType_flags_key); }
    inline VariantData getCurrentValue() const { return _getValue(&_iterator, _metaType_id_value, _metaType_flags_value); }

    inline void find(const VariantData &key)
    { _find(_iterable, key.data, &_iterator); }

    int size() const { static_cast<void>(false && (_iterable)); return _size(_iterable); }

    void copy(const QAssociativeIterableImpl &other)
    {
      *this = other;
      _copyIter(&_iterator, &other._iterator);
    }
};
} template<> class QTypeInfo<QtMetaTypePrivate:: QAssociativeIterableImpl > { public: enum { isSpecialized = true, isComplex = ((((Q_MOVABLE_TYPE)) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QtMetaTypePrivate:: QAssociativeIterableImpl>(), isStatic = ((((Q_MOVABLE_TYPE)) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || (((Q_MOVABLE_TYPE)) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QtMetaTypePrivate:: QAssociativeIterableImpl>(), isLarge = (sizeof(QtMetaTypePrivate:: QAssociativeIterableImpl)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QtMetaTypePrivate:: QAssociativeIterableImpl >::value, isDummy = ((((Q_MOVABLE_TYPE)) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QtMetaTypePrivate:: QAssociativeIterableImpl) }; static inline const char *name() { return "QtMetaTypePrivate:: QAssociativeIterableImpl"; } }; namespace QtMetaTypePrivate {

template<typename From>
struct QAssociativeIterableConvertFunctor
{
    QAssociativeIterableImpl operator()(const From& f) const
    {
        return QAssociativeIterableImpl(&f);
    }
};

class QPairVariantInterfaceImpl
{
    const void *_pair;
    int _metaType_id_first;
    uint _metaType_flags_first;
    int _metaType_id_second;
    uint _metaType_flags_second;

    typedef VariantData (*getFunc)(const void * const *p, int metaTypeId, uint flags);

    getFunc _getFirst;
    getFunc _getSecond;

    template<class T>
    static VariantData getFirstImpl(const void * const *pair, int metaTypeId, uint flags)
    { return VariantData(metaTypeId, &static_cast<const T*>(*pair)->first, flags); }
    template<class T>
    static VariantData getSecondImpl(const void * const *pair, int metaTypeId, uint flags)
    { return VariantData(metaTypeId, &static_cast<const T*>(*pair)->second, flags); }

public:
    template<class T> QPairVariantInterfaceImpl(const T*p)
      : _pair(p)
      , _metaType_id_first(qMetaTypeId<typename T::first_type>())
      , _metaType_flags_first(QTypeInfo<typename T::first_type>::isPointer)
      , _metaType_id_second(qMetaTypeId<typename T::second_type>())
      , _metaType_flags_second(QTypeInfo<typename T::second_type>::isPointer)
      , _getFirst(getFirstImpl<T>)
      , _getSecond(getSecondImpl<T>)
    {
    }

    QPairVariantInterfaceImpl()
      : _pair(nullptr)
      , _metaType_id_first(QMetaType::UnknownType)
      , _metaType_flags_first(0)
      , _metaType_id_second(QMetaType::UnknownType)
      , _metaType_flags_second(0)
      , _getFirst(nullptr)
      , _getSecond(nullptr)
    {
    }

    inline VariantData first() const { return _getFirst(&_pair, _metaType_id_first, _metaType_flags_first); }
    inline VariantData second() const { return _getSecond(&_pair, _metaType_id_second, _metaType_flags_second); }
};
} template<> class QTypeInfo<QtMetaTypePrivate:: QPairVariantInterfaceImpl > { public: enum { isSpecialized = true, isComplex = ((((Q_MOVABLE_TYPE)) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QtMetaTypePrivate:: QPairVariantInterfaceImpl>(), isStatic = ((((Q_MOVABLE_TYPE)) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || (((Q_MOVABLE_TYPE)) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QtMetaTypePrivate:: QPairVariantInterfaceImpl>(), isLarge = (sizeof(QtMetaTypePrivate:: QPairVariantInterfaceImpl)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QtMetaTypePrivate:: QPairVariantInterfaceImpl >::value, isDummy = ((((Q_MOVABLE_TYPE)) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QtMetaTypePrivate:: QPairVariantInterfaceImpl) }; static inline const char *name() { return "QtMetaTypePrivate:: QPairVariantInterfaceImpl"; } }; namespace QtMetaTypePrivate {

template<typename From>
struct QPairVariantInterfaceConvertFunctor;

template<typename T, typename U>
struct QPairVariantInterfaceConvertFunctor<QPair<T, U> >
{
    QPairVariantInterfaceImpl operator()(const QPair<T, U>& f) const
    {
        return QPairVariantInterfaceImpl(&f);
    }
};

template<typename T, typename U>
struct QPairVariantInterfaceConvertFunctor<std::pair<T, U> >
{
    QPairVariantInterfaceImpl operator()(const std::pair<T, U>& f) const
    {
        return QPairVariantInterfaceImpl(&f);
    }
};

}

class QObject;
class QWidget;




template <class T> class QSharedPointer; template <class T> class QWeakPointer; template <class T> class QPointer;

namespace QtPrivate
{
    template<typename T>
    struct IsPointerToTypeDerivedFromQObject
    {
        enum { Value = false };
    };

    
    template<>
    struct IsPointerToTypeDerivedFromQObject<void*>
    {
        enum { Value = false };
    };
    template<>
    struct IsPointerToTypeDerivedFromQObject<const void*>
    {
        enum { Value = false };
    };
    template<>
    struct IsPointerToTypeDerivedFromQObject<QObject*>
    {
        enum { Value = true };
    };

    template<typename T>
    struct IsPointerToTypeDerivedFromQObject<T*>
    {
        typedef qint8 yes_type;
        typedef qint64 no_type;


        static yes_type checkType(QObject* );
#line 1493 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
        static no_type checkType(...);
        static_assert(bool(sizeof(T)), "Type argument of Q_DECLARE_METATYPE(T*) must be fully defined");
        enum { Value = sizeof(checkType(static_cast<T*>(nullptr))) == sizeof(yes_type) };
    };

    template<typename T, typename Enable = void>
    struct IsGadgetHelper { enum { IsRealGadget = false, IsGadgetOrDerivedFrom = false }; };

    template<typename T>
    struct IsGadgetHelper<T, typename T::QtGadgetHelper>
    {
        template <typename X>
        static char checkType(void (X::*)());
        static void *checkType(void (T::*)());
        enum {
            IsRealGadget = sizeof(checkType(&T::qt_check_for_QGADGET_macro)) == sizeof(void *),
            IsGadgetOrDerivedFrom = true
        };
    };

    template<typename T, typename Enable = void>
    struct IsPointerToGadgetHelper { enum { IsRealGadget = false, IsGadgetOrDerivedFrom = false }; };

    template<typename T>
    struct IsPointerToGadgetHelper<T*, typename T::QtGadgetHelper>
    {
        using BaseType = T;
        template <typename X>
        static char checkType(void (X::*)());
        static void *checkType(void (T::*)());
        enum {
            IsRealGadget = !IsPointerToTypeDerivedFromQObject<T*>::Value && sizeof(checkType(&T::qt_check_for_QGADGET_macro)) == sizeof(void *),
            IsGadgetOrDerivedFrom = !IsPointerToTypeDerivedFromQObject<T*>::Value
        };
    };


    template<typename T> char qt_getEnumMetaObject(const T&);

    template<typename T>
    struct IsQEnumHelper {
        static const T &declval();
        
        
        
        
        enum { Value = sizeof(qt_getEnumMetaObject(declval())) == sizeof(QMetaObject*) };
    };
    template<> struct IsQEnumHelper<void> { enum { Value = false }; };

    template<typename T, typename Enable = void>
    struct MetaObjectForType
    {
        static inline const QMetaObject *value() { return nullptr; }
    };
    template<>
    struct MetaObjectForType<void>
    {
        static inline const QMetaObject *value() { return nullptr; }
    };
    template<typename T>
    struct MetaObjectForType<T*, typename std::enable_if<IsPointerToTypeDerivedFromQObject<T*>::Value>::type>
    {
        static inline const QMetaObject *value() { return &T::staticMetaObject; }
    };
    template<typename T>
    struct MetaObjectForType<T, typename std::enable_if<IsGadgetHelper<T>::IsGadgetOrDerivedFrom>::type>
    {
        static inline const QMetaObject *value() { return &T::staticMetaObject; }
    };
    template<typename T>
    struct MetaObjectForType<T, typename std::enable_if<IsPointerToGadgetHelper<T>::IsGadgetOrDerivedFrom>::type>
    {
        static inline const QMetaObject *value() { return &IsPointerToGadgetHelper<T>::BaseType::staticMetaObject; }
    };
    template<typename T>
    struct MetaObjectForType<T, typename std::enable_if<IsQEnumHelper<T>::Value>::type >
    {
        static inline const QMetaObject *value() { return qt_getEnumMetaObject(T()); }
    };

    template<typename T>
    struct IsSharedPointerToTypeDerivedFromQObject
    {
        enum { Value = false };
    };

    template<typename T>
    struct IsSharedPointerToTypeDerivedFromQObject<QSharedPointer<T> > : IsPointerToTypeDerivedFromQObject<T*>
    {
    };

    template<typename T>
    struct IsWeakPointerToTypeDerivedFromQObject
    {
        enum { Value = false };
    };

    template<typename T>
    struct IsWeakPointerToTypeDerivedFromQObject<QWeakPointer<T> > : IsPointerToTypeDerivedFromQObject<T*>
    {
    };

    template<typename T>
    struct IsTrackingPointerToTypeDerivedFromQObject
    {
        enum { Value = false };
    };

    template<typename T>
    struct IsTrackingPointerToTypeDerivedFromQObject<QPointer<T> >
    {
        enum { Value = true };
    };

    template<typename T>
    struct IsSequentialContainer
    {
        enum { Value = false };
    };

    template<typename T>
    struct IsAssociativeContainer
    {
        enum { Value = false };
    };

    template<typename T, bool = QtPrivate::IsSequentialContainer<T>::Value>
    struct SequentialContainerConverterHelper
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T, bool = QMetaTypeId2<typename T::value_type>::Defined>
    struct ValueTypeIsMetaType
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T>
    struct SequentialContainerConverterHelper<T, true> : ValueTypeIsMetaType<T>
    {
    };

    template<typename T, bool = QtPrivate::IsAssociativeContainer<T>::Value>
    struct AssociativeContainerConverterHelper
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T, bool = QMetaTypeId2<typename T::mapped_type>::Defined>
    struct AssociativeValueTypeIsMetaType
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T, bool = QMetaTypeId2<typename T::key_type>::Defined>
    struct KeyAndValueTypeIsMetaType
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T>
    struct KeyAndValueTypeIsMetaType<T, true> : AssociativeValueTypeIsMetaType<T>
    {
    };

    template<typename T>
    struct AssociativeContainerConverterHelper<T, true> : KeyAndValueTypeIsMetaType<T>
    {
    };

    template<typename T, bool = QMetaTypeId2<typename T::first_type>::Defined
                                && QMetaTypeId2<typename T::second_type>::Defined>
    struct IsMetaTypePair
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };

    template<typename T>
    struct IsMetaTypePair<T, true>
    {
        inline static bool registerConverter(int id);
    };

    template<typename T>
    struct IsPair
    {
        static bool registerConverter(int)
        {
            return false;
        }
    };
    template<typename T, typename U>
    struct IsPair<QPair<T, U> > : IsMetaTypePair<QPair<T, U> > {};
    template<typename T, typename U>
    struct IsPair<std::pair<T, U> > : IsMetaTypePair<std::pair<T, U> > {};

    template<typename T>
    struct MetaTypePairHelper : IsPair<T> {};

    template<typename T, typename = void>
    struct MetaTypeSmartPointerHelper
    {
        static bool registerConverter(int) { return false; }
    };

    __declspec(dllimport) bool isBuiltinType(const QByteArray &type);
} 

template <typename T, int =
    QtPrivate::IsPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::PointerToQObject :
    QtPrivate::IsGadgetHelper<T>::IsRealGadget             ? QMetaType::IsGadget :
    QtPrivate::IsPointerToGadgetHelper<T>::IsRealGadget    ? QMetaType::PointerToGadget :
    QtPrivate::IsQEnumHelper<T>::Value                     ? QMetaType::IsEnumeration : 0>
struct QMetaTypeIdQObject
{
    enum {
        Defined = 0
    };
};

template <typename T>
struct QMetaTypeId : public QMetaTypeIdQObject<T>
{
};

template <typename T>
struct QMetaTypeId2
{
    enum { Defined = QMetaTypeId<T>::Defined, IsBuiltIn=false };
    static inline constexpr int qt_metatype_id() { return QMetaTypeId<T>::qt_metatype_id(); }
};

template <typename T>
struct QMetaTypeId2<const T&> : QMetaTypeId2<T> {};

template <typename T>
struct QMetaTypeId2<T&> { enum {Defined = false }; };

namespace QtPrivate {
    template <typename T, bool Defined = QMetaTypeId2<T>::Defined>
    struct QMetaTypeIdHelper {
        static inline constexpr int qt_metatype_id()
        { return QMetaTypeId2<T>::qt_metatype_id(); }
    };
    template <typename T> struct QMetaTypeIdHelper<T, false> {
        static inline constexpr int qt_metatype_id()
        { return -1; }
    };

    
    template <typename Result, typename... Args>
    struct IsPointerToTypeDerivedFromQObject<Result(*)(Args...)> { enum { Value = false }; };

    template<typename T>
    struct QMetaTypeTypeFlags
    {
        enum { Flags = (QTypeInfoQuery<T>::isRelocatable ? QMetaType::MovableType : 0)
                     | (QTypeInfo<T>::isComplex ? QMetaType::NeedsConstruction : 0)
                     | (QTypeInfo<T>::isComplex ? QMetaType::NeedsDestruction : 0)
                     | (IsPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::PointerToQObject : 0)
                     | (IsSharedPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::SharedPointerToQObject : 0)
                     | (IsWeakPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::WeakPointerToQObject : 0)
                     | (IsTrackingPointerToTypeDerivedFromQObject<T>::Value ? QMetaType::TrackingPointerToQObject : 0)
                     | (std::is_enum<T>::value ? QMetaType::IsEnumeration : 0)
                     | (IsGadgetHelper<T>::IsGadgetOrDerivedFrom ? QMetaType::IsGadget : 0)
                     | (IsPointerToGadgetHelper<T>::IsGadgetOrDerivedFrom ? QMetaType::PointerToGadget : 0)
             };
    };

    template<typename T, bool defined>
    struct MetaTypeDefinedHelper
    {
        enum DefinedType { Defined = defined };
    };

    template<typename SmartPointer>
    struct QSmartPointerConvertFunctor
    {
        QObject* operator()(const SmartPointer &p) const
        {
            return p.operator->();
        }
    };

    
    
    template <typename T>
    struct EnableInternalDataWrap;

    template<typename T>
    struct QSmartPointerConvertFunctor<QWeakPointer<T> >
    {
        QObject* operator()(const QWeakPointer<T> &p) const
        {
            return QtPrivate::EnableInternalDataWrap<T>::internalData(p);
        }
    };
}

template <typename T>
int qRegisterNormalizedMetaType(const ::QByteArray &normalizedTypeName

    , T * dummy = 0
    , typename QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::Defined
#line 1818 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
)
{

    static_cast<void>(false && (normalizedTypeName == QMetaObject::normalizedType(normalizedTypeName.constData())));
#line 1823 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    const int typedefOf = dummy ? -1 : QtPrivate::QMetaTypeIdHelper<T>::qt_metatype_id();
    if (typedefOf != -1)
        return QMetaType::registerNormalizedTypedef(normalizedTypeName, typedefOf);

    QMetaType::TypeFlags flags(QtPrivate::QMetaTypeTypeFlags<T>::Flags);

    if (defined)
        flags |= QMetaType::WasDeclaredAsMetaType;

    const int id = QMetaType::registerNormalizedType(normalizedTypeName,
                                   QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Destruct,
                                   QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Construct,
                                   int(sizeof(T)),
                                   flags,
                                   QtPrivate::MetaObjectForType<T>::value());

    if (id > 0) {
        QtPrivate::SequentialContainerConverterHelper<T>::registerConverter(id);
        QtPrivate::AssociativeContainerConverterHelper<T>::registerConverter(id);
        QtPrivate::MetaTypePairHelper<T>::registerConverter(id);
        QtPrivate::MetaTypeSmartPointerHelper<T>::registerConverter(id);
    }

    return id;
}

template <typename T>
int qRegisterMetaType(const char *typeName

    , T * dummy = nullptr
    , typename QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::DefinedType defined = QtPrivate::MetaTypeDefinedHelper<T, QMetaTypeId2<T>::Defined && !QMetaTypeId2<T>::IsBuiltIn>::Defined
#line 1855 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
)
{



    ::QByteArray normalizedTypeName = QMetaObject::normalizedType(typeName);
#line 1862 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
    return qRegisterNormalizedMetaType<T>(normalizedTypeName, dummy, defined);
}


template <typename T>
void qRegisterMetaTypeStreamOperators(const char *typeName

    , T *  = nullptr
#line 1871 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
)
{
    qRegisterMetaType<T>(typeName);
    QMetaType::registerStreamOperators(typeName, QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Save,
                                                 QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Load);
}
#line 1878 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"

template <typename T>
inline constexpr int qMetaTypeId()
{
    static_assert(bool(QMetaTypeId2<T>::Defined), "Type is not registered, please use the Q_DECLARE_METATYPE macro to make it known to Qt's meta-object system");
    return QMetaTypeId2<T>::qt_metatype_id();
}

template <typename T>
inline constexpr int qRegisterMetaType()
{
    return qMetaTypeId<T>();
}



template <typename T>
__declspec(deprecated) inline constexpr int qMetaTypeId(T *)
{ return qMetaTypeId<T>(); }

template <typename T>
__declspec(deprecated) inline constexpr int qRegisterMetaType(T *)
{ return qRegisterMetaType<T>(); }
#line 1902 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
#line 1903 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"


template <typename T>
struct QMetaTypeIdQObject<T*, QMetaType::PointerToQObject>
{
    enum {
        Defined = 1
    };

    static int qt_metatype_id()
    {
        static QBasicAtomicInt metatype_id = { 0 };
        if (const int id = metatype_id.loadAcquire())
            return id;
        const char * const cName = T::staticMetaObject.className();
        QByteArray typeName;
        typeName.reserve(int(strlen(cName)) + 1);
        typeName.append(cName).append('*');
        const int newId = qRegisterNormalizedMetaType<T*>(
                        typeName,
                        reinterpret_cast<T**>(quintptr(-1)));
        metatype_id.storeRelease(newId);
        return newId;
    }
};

template <typename T>
struct QMetaTypeIdQObject<T, QMetaType::IsGadget>
{
    enum {
        Defined = std::is_default_constructible<T>::value
    };

    static int qt_metatype_id()
    {
        static QBasicAtomicInt metatype_id = { 0 };
        if (const int id = metatype_id.loadAcquire())
            return id;
        const char * const cName = T::staticMetaObject.className();
        const int newId = qRegisterNormalizedMetaType<T>(
            cName,
            reinterpret_cast<T*>(quintptr(-1)));
        metatype_id.storeRelease(newId);
        return newId;
    }
};

template <typename T>
struct QMetaTypeIdQObject<T*, QMetaType::PointerToGadget>
{
    enum {
        Defined = 1
    };

    static int qt_metatype_id()
    {
        static QBasicAtomicInt metatype_id = { 0 };
        if (const int id = metatype_id.loadAcquire())
            return id;
        const char * const cName = T::staticMetaObject.className();
        QByteArray typeName;
        typeName.reserve(int(strlen(cName)) + 1);
        typeName.append(cName).append('*');
        const int newId = qRegisterNormalizedMetaType<T*>(
            typeName,
            reinterpret_cast<T**>(quintptr(-1)));
        metatype_id.storeRelease(newId);
        return newId;
    }
};

template <typename T>
struct QMetaTypeIdQObject<T, QMetaType::IsEnumeration>
{
    enum {
        Defined = 1
    };

    static int qt_metatype_id()
    {
        static QBasicAtomicInt metatype_id = { 0 };
        if (const int id = metatype_id.loadAcquire())
            return id;
        const char *eName = qt_getEnumName(T());
        const char *cName = qt_getEnumMetaObject(T())->className();
        QByteArray typeName;
        typeName.reserve(int(strlen(cName) + 2 + strlen(eName)));
        typeName.append(cName).append("::").append(eName);
        const int newId = qRegisterNormalizedMetaType<T>(
            typeName,
            reinterpret_cast<T*>(quintptr(-1)));
        metatype_id.storeRelease(newId);
        return newId;
    }
};
#line 1999 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"


template <typename T>
inline int qRegisterMetaTypeStreamOperators()
{
    int id = qMetaTypeId<T>();
    QMetaType::registerStreamOperators(id, QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Save,
                                           QtMetaTypePrivate::QMetaTypeFunctionHelper<T>::Load);
    return id;
}
#line 2010 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"































#line 2042 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"













class QChar; class QString; class QStringList; class QByteArray; class QBitArray; class QDate; class QTime; class QDateTime; class QUrl; class QLocale; class QRect; class QRectF; class QSize; class QSizeF; class QLine; class QLineF; class QPoint; class QPointF; class QRegExp; class QEasingCurve; class QUuid; class QVariant; class QRegularExpression; class QJsonValue; class QJsonObject; class QJsonArray; class QJsonDocument; class QCborValue; class QCborArray; class QCborMap; class QModelIndex; class QPersistentModelIndex;
class QFont; class QPixmap; class QBrush; class QColor; class QPalette; class QIcon; class QImage; class QPolygon; class QRegion; class QBitmap; class QCursor; class QKeySequence; class QPen; class QTextLength; class QTextFormat; class QMatrix; class QTransform; class QMatrix4x4; class QVector2D; class QVector3D; class QVector4D; class QQuaternion; class QPolygonF;
class QSizePolicy;



typedef QList<QVariant> QVariantList;
typedef QMap<QString, QVariant> QVariantMap;
typedef QHash<QString, QVariant> QVariantHash;



typedef QList<QByteArray> QByteArrayList;
#line 2069 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"











































































namespace QtPrivate {

template<typename T, bool  = false>
struct SharedPointerMetaTypeIdHelper
{
    enum {
        Defined = 0
    };
    static int qt_metatype_id()
    {
        return -1;
    }
};

}





























































 template <class T> class QList;   template <typename T> struct QMetaTypeId< QList<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("QList")) + 1 + tNameLen + 1 + 1); typeName.append("QList", int(sizeof("QList")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QList<T> >( typeName, reinterpret_cast< QList<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<QList<T> > { enum { Value = true }; }; }   template <class T> class QVector;   template <typename T> struct QMetaTypeId< QVector<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("QVector")) + 1 + tNameLen + 1 + 1); typeName.append("QVector", int(sizeof("QVector")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QVector<T> >( typeName, reinterpret_cast< QVector<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<QVector<T> > { enum { Value = true }; }; }   template <class T> class QQueue;   template <typename T> struct QMetaTypeId< QQueue<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("QQueue")) + 1 + tNameLen + 1 + 1); typeName.append("QQueue", int(sizeof("QQueue")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QQueue<T> >( typeName, reinterpret_cast< QQueue<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<QQueue<T> > { enum { Value = true }; }; }   template <class T> class QStack;   template <typename T> struct QMetaTypeId< QStack<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("QStack")) + 1 + tNameLen + 1 + 1); typeName.append("QStack", int(sizeof("QStack")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QStack<T> >( typeName, reinterpret_cast< QStack<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<QStack<T> > { enum { Value = true }; }; }   template <class T> class QSet;   template <typename T> struct QMetaTypeId< QSet<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("QSet")) + 1 + tNameLen + 1 + 1); typeName.append("QSet", int(sizeof("QSet")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QSet<T> >( typeName, reinterpret_cast< QSet<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<QSet<T> > { enum { Value = true }; }; } 





 template <typename T> struct QMetaTypeId< std::vector<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("std::vector")) + 1 + tNameLen + 1 + 1); typeName.append("std::vector", int(sizeof("std::vector")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< std::vector<T> >( typeName, reinterpret_cast< std::vector<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<std::vector<T> > { enum { Value = true }; }; } 
 template <typename T> struct QMetaTypeId< std::list<T> > { enum { Defined = QMetaTypeId2<T>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadRelaxed()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); static_cast<void>(false && (tName)); const int tNameLen = int(qstrlen(tName)); QByteArray typeName; typeName.reserve(int(sizeof("std::list")) + 1 + tNameLen + 1 + 1); typeName.append("std::list", int(sizeof("std::list")) - 1) .append('<').append(tName, tNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< std::list<T> >( typeName, reinterpret_cast< std::list<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; namespace QtPrivate { template<typename T> struct IsSequentialContainer<std::list<T> > { enum { Value = true }; }; } 






 template <class T1, class T2> class QHash;   template <class T1, class T2> class QMap;   template <class T1, class T2> struct QPair; 















 namespace QtPrivate { template<typename T, typename U> struct IsAssociativeContainer<QHash<T, U> > { enum { Value = true }; }; }   template<typename T, typename U> struct QMetaTypeId< QHash<T, U> > { enum { Defined = QMetaTypeId2<T>::Defined && QMetaTypeId2<U>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); const char *uName = QMetaType::typeName(qMetaTypeId<U>()); static_cast<void>(false && (tName)); static_cast<void>(false && (uName)); const int tNameLen = int(qstrlen(tName)); const int uNameLen = int(qstrlen(uName)); QByteArray typeName; typeName.reserve(int(sizeof("QHash")) + 1 + tNameLen + 1 + uNameLen + 1 + 1); typeName.append("QHash", int(sizeof("QHash")) - 1) .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QHash<T, U> >( typeName, reinterpret_cast< QHash<T, U> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 namespace QtPrivate { template<typename T, typename U> struct IsAssociativeContainer<QMap<T, U> > { enum { Value = true }; }; }   template<typename T, typename U> struct QMetaTypeId< QMap<T, U> > { enum { Defined = QMetaTypeId2<T>::Defined && QMetaTypeId2<U>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); const char *uName = QMetaType::typeName(qMetaTypeId<U>()); static_cast<void>(false && (tName)); static_cast<void>(false && (uName)); const int tNameLen = int(qstrlen(tName)); const int uNameLen = int(qstrlen(uName)); QByteArray typeName; typeName.reserve(int(sizeof("QMap")) + 1 + tNameLen + 1 + uNameLen + 1 + 1); typeName.append("QMap", int(sizeof("QMap")) - 1) .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QMap<T, U> >( typeName, reinterpret_cast< QMap<T, U> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 namespace QtPrivate { template<typename T, typename U> struct IsAssociativeContainer<std::map<T, U> > { enum { Value = true }; }; }   template<typename T, typename U> struct QMetaTypeId< std::map<T, U> > { enum { Defined = QMetaTypeId2<T>::Defined && QMetaTypeId2<U>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); const char *uName = QMetaType::typeName(qMetaTypeId<U>()); static_cast<void>(false && (tName)); static_cast<void>(false && (uName)); const int tNameLen = int(qstrlen(tName)); const int uNameLen = int(qstrlen(uName)); QByteArray typeName; typeName.reserve(int(sizeof("std::map")) + 1 + tNameLen + 1 + uNameLen + 1 + 1); typeName.append("std::map", int(sizeof("std::map")) - 1) .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< std::map<T, U> >( typeName, reinterpret_cast< std::map<T, U> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 

 template<typename T, typename U> struct QMetaTypeId< QPair<T, U> > { enum { Defined = QMetaTypeId2<T>::Defined && QMetaTypeId2<U>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); const char *uName = QMetaType::typeName(qMetaTypeId<U>()); static_cast<void>(false && (tName)); static_cast<void>(false && (uName)); const int tNameLen = int(qstrlen(tName)); const int uNameLen = int(qstrlen(uName)); QByteArray typeName; typeName.reserve(int(sizeof("QPair")) + 1 + tNameLen + 1 + uNameLen + 1 + 1); typeName.append("QPair", int(sizeof("QPair")) - 1) .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< QPair<T, U> >( typeName, reinterpret_cast< QPair<T, U> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template<typename T, typename U> struct QMetaTypeId< std::pair<T, U> > { enum { Defined = QMetaTypeId2<T>::Defined && QMetaTypeId2<U>::Defined }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char *tName = QMetaType::typeName(qMetaTypeId<T>()); const char *uName = QMetaType::typeName(qMetaTypeId<U>()); static_cast<void>(false && (tName)); static_cast<void>(false && (uName)); const int tNameLen = int(qstrlen(tName)); const int uNameLen = int(qstrlen(uName)); QByteArray typeName; typeName.reserve(int(sizeof("std::pair")) + 1 + tNameLen + 1 + uNameLen + 1 + 1); typeName.append("std::pair", int(sizeof("std::pair")) - 1) .append('<').append(tName, tNameLen).append(',').append(uName, uNameLen); if (typeName.endsWith('>')) typeName.append(' '); typeName.append('>'); const int newId = qRegisterNormalizedMetaType< std::pair<T, U> >( typeName, reinterpret_cast< std::pair<T, U> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 





 namespace QtPrivate { template<typename T> struct SharedPointerMetaTypeIdHelper<QSharedPointer<T>, true> { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char * const cName = T::staticMetaObject.className(); QByteArray typeName; typeName.reserve(int(sizeof("QSharedPointer") + 1 + strlen(cName) + 1)); typeName.append("QSharedPointer", int(sizeof("QSharedPointer")) - 1) .append('<').append(cName).append('>'); const int newId = qRegisterNormalizedMetaType< QSharedPointer<T> >( typeName, reinterpret_cast< QSharedPointer<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; template<typename T> struct MetaTypeSmartPointerHelper<QSharedPointer<T> , typename std::enable_if<IsPointerToTypeDerivedFromQObject<T*>::Value>::type> { static bool registerConverter(int id) { const int toId = QMetaType::QObjectStar; if (!QMetaType::hasRegisteredConverterFunction(id, toId)) { QtPrivate::QSmartPointerConvertFunctor<QSharedPointer<T> > o; static const QtPrivate::ConverterFunctor<QSharedPointer<T>, QObject*, QSmartPointerConvertFunctor<QSharedPointer<T> > > f(o); return QMetaType::registerConverterFunction(&f, id, toId); } return true; } }; } template <typename T> struct QMetaTypeId< QSharedPointer<T> > : QtPrivate::SharedPointerMetaTypeIdHelper< QSharedPointer<T>, QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value> { };  namespace QtPrivate { template<typename T> struct SharedPointerMetaTypeIdHelper<QWeakPointer<T>, true> { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char * const cName = T::staticMetaObject.className(); QByteArray typeName; typeName.reserve(int(sizeof("QWeakPointer") + 1 + strlen(cName) + 1)); typeName.append("QWeakPointer", int(sizeof("QWeakPointer")) - 1) .append('<').append(cName).append('>'); const int newId = qRegisterNormalizedMetaType< QWeakPointer<T> >( typeName, reinterpret_cast< QWeakPointer<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; template<typename T> struct MetaTypeSmartPointerHelper<QWeakPointer<T> , typename std::enable_if<IsPointerToTypeDerivedFromQObject<T*>::Value>::type> { static bool registerConverter(int id) { const int toId = QMetaType::QObjectStar; if (!QMetaType::hasRegisteredConverterFunction(id, toId)) { QtPrivate::QSmartPointerConvertFunctor<QWeakPointer<T> > o; static const QtPrivate::ConverterFunctor<QWeakPointer<T>, QObject*, QSmartPointerConvertFunctor<QWeakPointer<T> > > f(o); return QMetaType::registerConverterFunction(&f, id, toId); } return true; } }; } template <typename T> struct QMetaTypeId< QWeakPointer<T> > : QtPrivate::SharedPointerMetaTypeIdHelper< QWeakPointer<T>, QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value> { };  namespace QtPrivate { template<typename T> struct SharedPointerMetaTypeIdHelper<QPointer<T>, true> { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const char * const cName = T::staticMetaObject.className(); QByteArray typeName; typeName.reserve(int(sizeof("QPointer") + 1 + strlen(cName) + 1)); typeName.append("QPointer", int(sizeof("QPointer")) - 1) .append('<').append(cName).append('>'); const int newId = qRegisterNormalizedMetaType< QPointer<T> >( typeName, reinterpret_cast< QPointer<T> *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; template<typename T> struct MetaTypeSmartPointerHelper<QPointer<T> , typename std::enable_if<IsPointerToTypeDerivedFromQObject<T*>::Value>::type> { static bool registerConverter(int id) { const int toId = QMetaType::QObjectStar; if (!QMetaType::hasRegisteredConverterFunction(id, toId)) { QtPrivate::QSmartPointerConvertFunctor<QPointer<T> > o; static const QtPrivate::ConverterFunctor<QPointer<T>, QObject*, QSmartPointerConvertFunctor<QPointer<T> > > f(o); return QMetaType::registerConverterFunction(&f, id, toId); } return true; } }; } template <typename T> struct QMetaTypeId< QPointer<T> > : QtPrivate::SharedPointerMetaTypeIdHelper< QPointer<T>, QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value> { };





inline QMetaType::QMetaType(const ExtensionFlag extensionFlags, const QMetaTypeInterface *info,
                            TypedConstructor creator,
                            TypedDestructor deleter,
                            SaveOperator saveOp,
                            LoadOperator loadOp,
                            Constructor constructor,
                            Destructor destructor,
                            uint size,
                            uint theTypeFlags,
                            int typeId,
                            const QMetaObject *_metaObject)
    : m_typedConstructor(creator)
    , m_typedDestructor(deleter)
    , m_saveOp(saveOp)
    , m_loadOp(loadOp)
    , m_constructor(constructor)
    , m_destructor(destructor)
    , m_extension(nullptr)
    , m_size(size)
    , m_typeFlags(theTypeFlags)
    , m_extensionFlags(extensionFlags)
    , m_typeId(typeId)
    , m_metaObject(_metaObject)
{
    if ((isExtended(CtorEx) || typeId == QMetaType::Void))
        ctor(info);
}

inline QMetaType::~QMetaType()
{
    if ((isExtended(DtorEx)))
        dtor();
}

inline bool QMetaType::isValid() const
{
    return m_typeId != UnknownType;
}

inline bool QMetaType::isRegistered() const
{
    return isValid();
}

inline int QMetaType::id() const
{
    return m_typeId;
}

inline void *QMetaType::create(const void *copy) const
{
    
    return createExtended(copy);
}

inline void QMetaType::destroy(void *data) const
{
    
    destroyExtended(data);
}

inline void *QMetaType::construct(void *where, const void *copy) const
{
    if ((isExtended(ConstructEx)))
        return constructExtended(where, copy);
    return m_constructor(where, copy);
}

inline void QMetaType::destruct(void *data) const
{
    if ((isExtended(DestructEx)))
        return destructExtended(data);
    if ((!data))
        return;
    m_destructor(data);
}

inline int QMetaType::sizeOf() const
{
    if ((isExtended(SizeEx)))
        return sizeExtended();
    return m_size;
}

inline QMetaType::TypeFlags QMetaType::flags() const
{
    if ((isExtended(FlagsEx)))
        return flagsExtended();
    return QMetaType::TypeFlags(m_typeFlags);
}

inline const QMetaObject *QMetaType::metaObject() const
{
    if ((isExtended(MetaObjectEx)))
        return metaObjectExtended();
    return m_metaObject;
}




 template<> struct QMetaTypeId2<void> { enum { Defined = 1, IsBuiltIn = true, MetaType = 43 }; static inline constexpr int qt_metatype_id() { return 43; } };   template<> struct QMetaTypeId2<bool> { enum { Defined = 1, IsBuiltIn = true, MetaType = 1 }; static inline constexpr int qt_metatype_id() { return 1; } };   template<> struct QMetaTypeId2<int> { enum { Defined = 1, IsBuiltIn = true, MetaType = 2 }; static inline constexpr int qt_metatype_id() { return 2; } };   template<> struct QMetaTypeId2<uint> { enum { Defined = 1, IsBuiltIn = true, MetaType = 3 }; static inline constexpr int qt_metatype_id() { return 3; } };   template<> struct QMetaTypeId2<qlonglong> { enum { Defined = 1, IsBuiltIn = true, MetaType = 4 }; static inline constexpr int qt_metatype_id() { return 4; } };   template<> struct QMetaTypeId2<qulonglong> { enum { Defined = 1, IsBuiltIn = true, MetaType = 5 }; static inline constexpr int qt_metatype_id() { return 5; } };   template<> struct QMetaTypeId2<double> { enum { Defined = 1, IsBuiltIn = true, MetaType = 6 }; static inline constexpr int qt_metatype_id() { return 6; } };   template<> struct QMetaTypeId2<long> { enum { Defined = 1, IsBuiltIn = true, MetaType = 32 }; static inline constexpr int qt_metatype_id() { return 32; } };   template<> struct QMetaTypeId2<short> { enum { Defined = 1, IsBuiltIn = true, MetaType = 33 }; static inline constexpr int qt_metatype_id() { return 33; } };   template<> struct QMetaTypeId2<char> { enum { Defined = 1, IsBuiltIn = true, MetaType = 34 }; static inline constexpr int qt_metatype_id() { return 34; } };   template<> struct QMetaTypeId2<ulong> { enum { Defined = 1, IsBuiltIn = true, MetaType = 35 }; static inline constexpr int qt_metatype_id() { return 35; } };   template<> struct QMetaTypeId2<ushort> { enum { Defined = 1, IsBuiltIn = true, MetaType = 36 }; static inline constexpr int qt_metatype_id() { return 36; } };   template<> struct QMetaTypeId2<uchar> { enum { Defined = 1, IsBuiltIn = true, MetaType = 37 }; static inline constexpr int qt_metatype_id() { return 37; } };   template<> struct QMetaTypeId2<float> { enum { Defined = 1, IsBuiltIn = true, MetaType = 38 }; static inline constexpr int qt_metatype_id() { return 38; } };   template<> struct QMetaTypeId2<signed char> { enum { Defined = 1, IsBuiltIn = true, MetaType = 40 }; static inline constexpr int qt_metatype_id() { return 40; } };   template<> struct QMetaTypeId2<std::nullptr_t> { enum { Defined = 1, IsBuiltIn = true, MetaType = 51 }; static inline constexpr int qt_metatype_id() { return 51; } };   template<> struct QMetaTypeId2<QCborSimpleType> { enum { Defined = 1, IsBuiltIn = true, MetaType = 52 }; static inline constexpr int qt_metatype_id() { return 52; } };   template<> struct QMetaTypeId2<void*> { enum { Defined = 1, IsBuiltIn = true, MetaType = 31 }; static inline constexpr int qt_metatype_id() { return 31; } };   template<> struct QMetaTypeId2<QChar> { enum { Defined = 1, IsBuiltIn = true, MetaType = 7 }; static inline constexpr int qt_metatype_id() { return 7; } };   template<> struct QMetaTypeId2<QString> { enum { Defined = 1, IsBuiltIn = true, MetaType = 10 }; static inline constexpr int qt_metatype_id() { return 10; } };   template<> struct QMetaTypeId2<QStringList> { enum { Defined = 1, IsBuiltIn = true, MetaType = 11 }; static inline constexpr int qt_metatype_id() { return 11; } };   template<> struct QMetaTypeId2<QByteArray> { enum { Defined = 1, IsBuiltIn = true, MetaType = 12 }; static inline constexpr int qt_metatype_id() { return 12; } };   template<> struct QMetaTypeId2<QBitArray> { enum { Defined = 1, IsBuiltIn = true, MetaType = 13 }; static inline constexpr int qt_metatype_id() { return 13; } };   template<> struct QMetaTypeId2<QDate> { enum { Defined = 1, IsBuiltIn = true, MetaType = 14 }; static inline constexpr int qt_metatype_id() { return 14; } };   template<> struct QMetaTypeId2<QTime> { enum { Defined = 1, IsBuiltIn = true, MetaType = 15 }; static inline constexpr int qt_metatype_id() { return 15; } };   template<> struct QMetaTypeId2<QDateTime> { enum { Defined = 1, IsBuiltIn = true, MetaType = 16 }; static inline constexpr int qt_metatype_id() { return 16; } };   template<> struct QMetaTypeId2<QUrl> { enum { Defined = 1, IsBuiltIn = true, MetaType = 17 }; static inline constexpr int qt_metatype_id() { return 17; } };   template<> struct QMetaTypeId2<QLocale> { enum { Defined = 1, IsBuiltIn = true, MetaType = 18 }; static inline constexpr int qt_metatype_id() { return 18; } };   template<> struct QMetaTypeId2<QRect> { enum { Defined = 1, IsBuiltIn = true, MetaType = 19 }; static inline constexpr int qt_metatype_id() { return 19; } };   template<> struct QMetaTypeId2<QRectF> { enum { Defined = 1, IsBuiltIn = true, MetaType = 20 }; static inline constexpr int qt_metatype_id() { return 20; } };   template<> struct QMetaTypeId2<QSize> { enum { Defined = 1, IsBuiltIn = true, MetaType = 21 }; static inline constexpr int qt_metatype_id() { return 21; } };   template<> struct QMetaTypeId2<QSizeF> { enum { Defined = 1, IsBuiltIn = true, MetaType = 22 }; static inline constexpr int qt_metatype_id() { return 22; } };   template<> struct QMetaTypeId2<QLine> { enum { Defined = 1, IsBuiltIn = true, MetaType = 23 }; static inline constexpr int qt_metatype_id() { return 23; } };   template<> struct QMetaTypeId2<QLineF> { enum { Defined = 1, IsBuiltIn = true, MetaType = 24 }; static inline constexpr int qt_metatype_id() { return 24; } };   template<> struct QMetaTypeId2<QPoint> { enum { Defined = 1, IsBuiltIn = true, MetaType = 25 }; static inline constexpr int qt_metatype_id() { return 25; } };   template<> struct QMetaTypeId2<QPointF> { enum { Defined = 1, IsBuiltIn = true, MetaType = 26 }; static inline constexpr int qt_metatype_id() { return 26; } };   template<> struct QMetaTypeId2<QRegExp> { enum { Defined = 1, IsBuiltIn = true, MetaType = 27 }; static inline constexpr int qt_metatype_id() { return 27; } };   template<> struct QMetaTypeId2<QEasingCurve> { enum { Defined = 1, IsBuiltIn = true, MetaType = 29 }; static inline constexpr int qt_metatype_id() { return 29; } };   template<> struct QMetaTypeId2<QUuid> { enum { Defined = 1, IsBuiltIn = true, MetaType = 30 }; static inline constexpr int qt_metatype_id() { return 30; } };   template<> struct QMetaTypeId2<QVariant> { enum { Defined = 1, IsBuiltIn = true, MetaType = 41 }; static inline constexpr int qt_metatype_id() { return 41; } };   template<> struct QMetaTypeId2<QRegularExpression> { enum { Defined = 1, IsBuiltIn = true, MetaType = 44 }; static inline constexpr int qt_metatype_id() { return 44; } };   template<> struct QMetaTypeId2<QJsonValue> { enum { Defined = 1, IsBuiltIn = true, MetaType = 45 }; static inline constexpr int qt_metatype_id() { return 45; } };   template<> struct QMetaTypeId2<QJsonObject> { enum { Defined = 1, IsBuiltIn = true, MetaType = 46 }; static inline constexpr int qt_metatype_id() { return 46; } };   template<> struct QMetaTypeId2<QJsonArray> { enum { Defined = 1, IsBuiltIn = true, MetaType = 47 }; static inline constexpr int qt_metatype_id() { return 47; } };   template<> struct QMetaTypeId2<QJsonDocument> { enum { Defined = 1, IsBuiltIn = true, MetaType = 48 }; static inline constexpr int qt_metatype_id() { return 48; } };   template<> struct QMetaTypeId2<QCborValue> { enum { Defined = 1, IsBuiltIn = true, MetaType = 53 }; static inline constexpr int qt_metatype_id() { return 53; } };   template<> struct QMetaTypeId2<QCborArray> { enum { Defined = 1, IsBuiltIn = true, MetaType = 54 }; static inline constexpr int qt_metatype_id() { return 54; } };   template<> struct QMetaTypeId2<QCborMap> { enum { Defined = 1, IsBuiltIn = true, MetaType = 55 }; static inline constexpr int qt_metatype_id() { return 55; } };   template<> struct QMetaTypeId2<QModelIndex> { enum { Defined = 1, IsBuiltIn = true, MetaType = 42 }; static inline constexpr int qt_metatype_id() { return 42; } };   template<> struct QMetaTypeId2<QPersistentModelIndex> { enum { Defined = 1, IsBuiltIn = true, MetaType = 50 }; static inline constexpr int qt_metatype_id() { return 50; } };   template<> struct QMetaTypeId2<QObject*> { enum { Defined = 1, IsBuiltIn = true, MetaType = 39 }; static inline constexpr int qt_metatype_id() { return 39; } };   template<> struct QMetaTypeId2<QVariantMap> { enum { Defined = 1, IsBuiltIn = true, MetaType = 8 }; static inline constexpr int qt_metatype_id() { return 8; } };   template<> struct QMetaTypeId2<QVariantList> { enum { Defined = 1, IsBuiltIn = true, MetaType = 9 }; static inline constexpr int qt_metatype_id() { return 9; } };   template<> struct QMetaTypeId2<QVariantHash> { enum { Defined = 1, IsBuiltIn = true, MetaType = 28 }; static inline constexpr int qt_metatype_id() { return 28; } };   template<> struct QMetaTypeId2<QByteArrayList> { enum { Defined = 1, IsBuiltIn = true, MetaType = 49 }; static inline constexpr int qt_metatype_id() { return 49; } };   template<> struct QMetaTypeId2<QFont> { enum { Defined = 1, IsBuiltIn = true, MetaType = 64 }; static inline constexpr int qt_metatype_id() { return 64; } };   template<> struct QMetaTypeId2<QPixmap> { enum { Defined = 1, IsBuiltIn = true, MetaType = 65 }; static inline constexpr int qt_metatype_id() { return 65; } };   template<> struct QMetaTypeId2<QBrush> { enum { Defined = 1, IsBuiltIn = true, MetaType = 66 }; static inline constexpr int qt_metatype_id() { return 66; } };   template<> struct QMetaTypeId2<QColor> { enum { Defined = 1, IsBuiltIn = true, MetaType = 67 }; static inline constexpr int qt_metatype_id() { return 67; } };   template<> struct QMetaTypeId2<QPalette> { enum { Defined = 1, IsBuiltIn = true, MetaType = 68 }; static inline constexpr int qt_metatype_id() { return 68; } };   template<> struct QMetaTypeId2<QIcon> { enum { Defined = 1, IsBuiltIn = true, MetaType = 69 }; static inline constexpr int qt_metatype_id() { return 69; } };   template<> struct QMetaTypeId2<QImage> { enum { Defined = 1, IsBuiltIn = true, MetaType = 70 }; static inline constexpr int qt_metatype_id() { return 70; } };   template<> struct QMetaTypeId2<QPolygon> { enum { Defined = 1, IsBuiltIn = true, MetaType = 71 }; static inline constexpr int qt_metatype_id() { return 71; } };   template<> struct QMetaTypeId2<QRegion> { enum { Defined = 1, IsBuiltIn = true, MetaType = 72 }; static inline constexpr int qt_metatype_id() { return 72; } };   template<> struct QMetaTypeId2<QBitmap> { enum { Defined = 1, IsBuiltIn = true, MetaType = 73 }; static inline constexpr int qt_metatype_id() { return 73; } };   template<> struct QMetaTypeId2<QCursor> { enum { Defined = 1, IsBuiltIn = true, MetaType = 74 }; static inline constexpr int qt_metatype_id() { return 74; } };   template<> struct QMetaTypeId2<QKeySequence> { enum { Defined = 1, IsBuiltIn = true, MetaType = 75 }; static inline constexpr int qt_metatype_id() { return 75; } };   template<> struct QMetaTypeId2<QPen> { enum { Defined = 1, IsBuiltIn = true, MetaType = 76 }; static inline constexpr int qt_metatype_id() { return 76; } };   template<> struct QMetaTypeId2<QTextLength> { enum { Defined = 1, IsBuiltIn = true, MetaType = 77 }; static inline constexpr int qt_metatype_id() { return 77; } };   template<> struct QMetaTypeId2<QTextFormat> { enum { Defined = 1, IsBuiltIn = true, MetaType = 78 }; static inline constexpr int qt_metatype_id() { return 78; } };   template<> struct QMetaTypeId2<QMatrix> { enum { Defined = 1, IsBuiltIn = true, MetaType = 79 }; static inline constexpr int qt_metatype_id() { return 79; } };   template<> struct QMetaTypeId2<QTransform> { enum { Defined = 1, IsBuiltIn = true, MetaType = 80 }; static inline constexpr int qt_metatype_id() { return 80; } };   template<> struct QMetaTypeId2<QMatrix4x4> { enum { Defined = 1, IsBuiltIn = true, MetaType = 81 }; static inline constexpr int qt_metatype_id() { return 81; } };   template<> struct QMetaTypeId2<QVector2D> { enum { Defined = 1, IsBuiltIn = true, MetaType = 82 }; static inline constexpr int qt_metatype_id() { return 82; } };   template<> struct QMetaTypeId2<QVector3D> { enum { Defined = 1, IsBuiltIn = true, MetaType = 83 }; static inline constexpr int qt_metatype_id() { return 83; } };   template<> struct QMetaTypeId2<QVector4D> { enum { Defined = 1, IsBuiltIn = true, MetaType = 84 }; static inline constexpr int qt_metatype_id() { return 84; } };   template<> struct QMetaTypeId2<QQuaternion> { enum { Defined = 1, IsBuiltIn = true, MetaType = 85 }; static inline constexpr int qt_metatype_id() { return 85; } };   template<> struct QMetaTypeId2<QPolygonF> { enum { Defined = 1, IsBuiltIn = true, MetaType = 86 }; static inline constexpr int qt_metatype_id() { return 86; } };   template<> struct QMetaTypeId2<QSizePolicy> { enum { Defined = 1, IsBuiltIn = true, MetaType = 121 }; static inline constexpr int qt_metatype_id() { return 121; } }; 

 template <> struct QMetaTypeId< QtMetaTypePrivate::QSequentialIterableImpl > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QtMetaTypePrivate::QSequentialIterableImpl >("QtMetaTypePrivate::QSequentialIterableImpl", reinterpret_cast< QtMetaTypePrivate::QSequentialIterableImpl *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QtMetaTypePrivate::QAssociativeIterableImpl > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QtMetaTypePrivate::QAssociativeIterableImpl >("QtMetaTypePrivate::QAssociativeIterableImpl", reinterpret_cast< QtMetaTypePrivate::QAssociativeIterableImpl *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 
 template <> struct QMetaTypeId< QtMetaTypePrivate::QPairVariantInterfaceImpl > { enum { Defined = 1 }; static int qt_metatype_id() { static QBasicAtomicInt metatype_id = { 0 }; if (const int id = metatype_id.loadAcquire()) return id; const int newId = qRegisterMetaType< QtMetaTypePrivate::QPairVariantInterfaceImpl >("QtMetaTypePrivate::QPairVariantInterfaceImpl", reinterpret_cast< QtMetaTypePrivate::QPairVariantInterfaceImpl *>(quintptr(-1))); metatype_id.storeRelease(newId); return newId; } }; 



template <typename T>
inline bool QtPrivate::IsMetaTypePair<T, true>::registerConverter(int id)
{
    const int toId = qMetaTypeId<QtMetaTypePrivate::QPairVariantInterfaceImpl>();
    if (!QMetaType::hasRegisteredConverterFunction(id, toId)) {
        QtMetaTypePrivate::QPairVariantInterfaceConvertFunctor<T> o;
        static const QtPrivate::ConverterFunctor<T,
                                    QtMetaTypePrivate::QPairVariantInterfaceImpl,
                                    QtMetaTypePrivate::QPairVariantInterfaceConvertFunctor<T> > f(o);
        return QMetaType::registerConverterFunction(&f, id, toId);
    }
    return true;
}

namespace QtPrivate {
    template<typename T>
    struct ValueTypeIsMetaType<T, true>
    {
        static bool registerConverter(int id)
        {
            const int toId = qMetaTypeId<QtMetaTypePrivate::QSequentialIterableImpl>();
            if (!QMetaType::hasRegisteredConverterFunction(id, toId)) {
                QtMetaTypePrivate::QSequentialIterableConvertFunctor<T> o;
                static const QtPrivate::ConverterFunctor<T,
                        QtMetaTypePrivate::QSequentialIterableImpl,
                QtMetaTypePrivate::QSequentialIterableConvertFunctor<T> > f(o);
                return QMetaType::registerConverterFunction(&f, id, toId);
            }
            return true;
        }
    };

    template<typename T>
    struct AssociativeValueTypeIsMetaType<T, true>
    {
        static bool registerConverter(int id)
        {
            const int toId = qMetaTypeId<QtMetaTypePrivate::QAssociativeIterableImpl>();
            if (!QMetaType::hasRegisteredConverterFunction(id, toId)) {
                QtMetaTypePrivate::QAssociativeIterableConvertFunctor<T> o;
                static const QtPrivate::ConverterFunctor<T,
                                            QtMetaTypePrivate::QAssociativeIterableImpl,
                                            QtMetaTypePrivate::QAssociativeIterableConvertFunctor<T> > f(o);
                return QMetaType::registerConverterFunction(&f, id, toId);
            }
            return true;
        }
    };
}



#line 2429 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmetatype.h"
#line 46 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"




class QVector3D;
class QVector4D;
class QVariant;



class __declspec(dllimport) QVector2D
{
public:
    constexpr QVector2D();
    explicit QVector2D(Qt::Initialization) {}
    constexpr QVector2D(float xpos, float ypos);
    constexpr explicit QVector2D(const QPoint& point);
    constexpr explicit QVector2D(const QPointF& point);

    explicit QVector2D(const QVector3D& vector);
#line 67 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"

    explicit QVector2D(const QVector4D& vector);
#line 70 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"

    bool isNull() const;

    constexpr float x() const;
    constexpr float y() const;

    void setX(float x);
    void setY(float y);

    float &operator[](int i);
    float operator[](int i) const;

    float length() const;
    float lengthSquared() const; 

     QVector2D normalized() const;
    void normalize();

    float distanceToPoint(const QVector2D &point) const;
    float distanceToLine(const QVector2D& point, const QVector2D& direction) const;

    QVector2D &operator+=(const QVector2D &vector);
    QVector2D &operator-=(const QVector2D &vector);
    QVector2D &operator*=(float factor);
    QVector2D &operator*=(const QVector2D &vector);
    QVector2D &operator/=(float divisor);
    inline QVector2D &operator/=(const QVector2D &vector);

    static float dotProduct(const QVector2D& v1, const QVector2D& v2); 

    constexpr friend inline bool operator==(const QVector2D &v1, const QVector2D &v2);
    constexpr friend inline bool operator!=(const QVector2D &v1, const QVector2D &v2);
    constexpr friend inline const QVector2D operator+(const QVector2D &v1, const QVector2D &v2);
    constexpr friend inline const QVector2D operator-(const QVector2D &v1, const QVector2D &v2);
    constexpr friend inline const QVector2D operator*(float factor, const QVector2D &vector);
    constexpr friend inline const QVector2D operator*(const QVector2D &vector, float factor);
    constexpr friend inline const QVector2D operator*(const QVector2D &v1, const QVector2D &v2);
    constexpr friend inline const QVector2D operator-(const QVector2D &vector);
    constexpr friend inline const QVector2D operator/(const QVector2D &vector, float divisor);
    constexpr friend inline const QVector2D operator/(const QVector2D &vector, const QVector2D &divisor);

    constexpr friend inline bool qFuzzyCompare(const QVector2D& v1, const QVector2D& v2);


    QVector3D toVector3D() const;
#line 116 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"

    QVector4D toVector4D() const;
#line 119 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"

    constexpr QPoint toPoint() const;
    constexpr QPointF toPointF() const;

    operator QVariant() const;

private:
    float v[2];

    friend class QVector3D;
    friend class QVector4D;
};

template<> class QTypeInfo<QVector2D > { public: enum { isSpecialized = true, isComplex = (((Q_PRIMITIVE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QVector2D>(), isStatic = (((Q_PRIMITIVE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_PRIMITIVE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QVector2D>(), isLarge = (sizeof(QVector2D)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QVector2D >::value, isDummy = (((Q_PRIMITIVE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVector2D) }; static inline const char *name() { return "QVector2D"; } };

constexpr inline QVector2D::QVector2D() : v{0.0f, 0.0f} {}

constexpr inline QVector2D::QVector2D(float xpos, float ypos) : v{xpos, ypos} {}

constexpr inline QVector2D::QVector2D(const QPoint& point) : v{float(point.x()), float(point.y())} {}

constexpr inline QVector2D::QVector2D(const QPointF& point) : v{float(point.x()), float(point.y())} {}

inline bool QVector2D::isNull() const
{
    return qIsNull(v[0]) && qIsNull(v[1]);
}

constexpr inline float QVector2D::x() const { return v[0]; }
constexpr inline float QVector2D::y() const { return v[1]; }

inline void QVector2D::setX(float aX) { v[0] = aX; }
inline void QVector2D::setY(float aY) { v[1] = aY; }

inline float &QVector2D::operator[](int i)
{
    static_cast<void>(false && (uint(i) < 2u));
    return v[i];
}

inline float QVector2D::operator[](int i) const
{
    static_cast<void>(false && (uint(i) < 2u));
    return v[i];
}

inline QVector2D &QVector2D::operator+=(const QVector2D &vector)
{
    v[0] += vector.v[0];
    v[1] += vector.v[1];
    return *this;
}

inline QVector2D &QVector2D::operator-=(const QVector2D &vector)
{
    v[0] -= vector.v[0];
    v[1] -= vector.v[1];
    return *this;
}

inline QVector2D &QVector2D::operator*=(float factor)
{
    v[0] *= factor;
    v[1] *= factor;
    return *this;
}

inline QVector2D &QVector2D::operator*=(const QVector2D &vector)
{
    v[0] *= vector.v[0];
    v[1] *= vector.v[1];
    return *this;
}

inline QVector2D &QVector2D::operator/=(float divisor)
{
    v[0] /= divisor;
    v[1] /= divisor;
    return *this;
}

inline QVector2D &QVector2D::operator/=(const QVector2D &vector)
{
    v[0] /= vector.v[0];
    v[1] /= vector.v[1];
    return *this;
}

__pragma(warning(push))



constexpr inline bool operator==(const QVector2D &v1, const QVector2D &v2)
{
    return v1.v[0] == v2.v[0] && v1.v[1] == v2.v[1];
}

constexpr inline bool operator!=(const QVector2D &v1, const QVector2D &v2)
{
    return v1.v[0] != v2.v[0] || v1.v[1] != v2.v[1];
}
__pragma(warning(pop))

constexpr inline const QVector2D operator+(const QVector2D &v1, const QVector2D &v2)
{
    return QVector2D(v1.v[0] + v2.v[0], v1.v[1] + v2.v[1]);
}

constexpr inline const QVector2D operator-(const QVector2D &v1, const QVector2D &v2)
{
    return QVector2D(v1.v[0] - v2.v[0], v1.v[1] - v2.v[1]);
}

constexpr inline const QVector2D operator*(float factor, const QVector2D &vector)
{
    return QVector2D(vector.v[0] * factor, vector.v[1] * factor);
}

constexpr inline const QVector2D operator*(const QVector2D &vector, float factor)
{
    return QVector2D(vector.v[0] * factor, vector.v[1] * factor);
}

constexpr inline const QVector2D operator*(const QVector2D &v1, const QVector2D &v2)
{
    return QVector2D(v1.v[0] * v2.v[0], v1.v[1] * v2.v[1]);
}

constexpr inline const QVector2D operator-(const QVector2D &vector)
{
    return QVector2D(-vector.v[0], -vector.v[1]);
}

constexpr inline const QVector2D operator/(const QVector2D &vector, float divisor)
{
    return QVector2D(vector.v[0] / divisor, vector.v[1] / divisor);
}

constexpr inline const QVector2D operator/(const QVector2D &vector, const QVector2D &divisor)
{
    return QVector2D(vector.v[0] / divisor.v[0], vector.v[1] / divisor.v[1]);
}

constexpr inline bool qFuzzyCompare(const QVector2D& v1, const QVector2D& v2)
{
    return qFuzzyCompare(v1.v[0], v2.v[0]) && qFuzzyCompare(v1.v[1], v2.v[1]);
}

constexpr inline QPoint QVector2D::toPoint() const
{
    return QPoint(qRound(v[0]), qRound(v[1]));
}

constexpr inline QPointF QVector2D::toPointF() const
{
    return QPointF(qreal(v[0]), qreal(v[1]));
}


__declspec(dllimport) QDebug operator<<(QDebug dbg, const QVector2D &vector);
#line 280 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"


__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QVector2D &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QVector2D &);
#line 285 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"

#line 287 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"



#line 291 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtgui\\qvector2d.h"
#line 2 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/geometryhelper.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QtMath"
#line 1 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"












































#line 46 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"







#line 54 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"






#line 61 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"





extern __declspec(dllimport) const qreal qt_sine_table[256];

inline int qCeil(qreal v)
{
    using std::ceil;
    return int(ceil(v));
}

inline int qFloor(qreal v)
{
    using std::floor;
    return int(floor(v));
}

inline qreal qFabs(qreal v)
{
    using std::fabs;
    return fabs(v);
}

inline qreal qSin(qreal v)
{
    using std::sin;
    return sin(v);
}

inline qreal qCos(qreal v)
{
    using std::cos;
    return cos(v);
}

inline qreal qTan(qreal v)
{
    using std::tan;
    return tan(v);
}

inline qreal qAcos(qreal v)
{
    using std::acos;
    return acos(v);
}

inline qreal qAsin(qreal v)
{
    using std::asin;
    return asin(v);
}

inline qreal qAtan(qreal v)
{
    using std::atan;
    return atan(v);
}

inline qreal qAtan2(qreal y, qreal x)
{
    using std::atan2;
    return atan2(y, x);
}

inline qreal qSqrt(qreal v)
{
    using std::sqrt;
    return sqrt(v);
}

inline qreal qLn(qreal v)
{
    using std::log;
    return log(v);
}

inline qreal qExp(qreal v)
{
    using std::exp;
    return exp(v);
}

inline qreal qPow(qreal x, qreal y)
{
    using std::pow;
    return pow(x, y);
}





#line 157 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 161 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 165 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 169 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 173 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 177 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 181 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 185 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 189 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 193 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 197 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 201 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"



#line 205 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"

inline qreal qFastSin(qreal x)
{
    int si = int(x * (0.5 * 256 / (3.14159265358979323846))); 
    qreal d = x - si * (2.0 * (3.14159265358979323846) / 256);
    int ci = si + 256 / 4;
    si &= 256 - 1;
    ci &= 256 - 1;
    return qt_sine_table[si] + (qt_sine_table[ci] - 0.5 * qt_sine_table[si] * d) * d;
}

inline qreal qFastCos(qreal x)
{
    int ci = int(x * (0.5 * 256 / (3.14159265358979323846))); 
    qreal d = x - ci * (2.0 * (3.14159265358979323846) / 256);
    int si = ci + 256 / 4;
    si &= 256 - 1;
    ci &= 256 - 1;
    return qt_sine_table[si] - (qt_sine_table[ci] + 0.5 * qt_sine_table[si] * d) * d;
}

constexpr inline float qDegreesToRadians(float degrees)
{
    return degrees * float((3.14159265358979323846)/180);
}

constexpr inline double qDegreesToRadians(double degrees)
{
    return degrees * ((3.14159265358979323846) / 180);
}

constexpr inline float qRadiansToDegrees(float radians)
{
    return radians * float(180/(3.14159265358979323846));
}

constexpr inline double qRadiansToDegrees(double radians)
{
    return radians * (180 / (3.14159265358979323846));
}


constexpr inline quint32 qNextPowerOfTwo(quint32 v)
{

    if (v == 0)
        return 1;
    return 2U << (31 ^ QAlgorithmsPrivate::qt_builtin_clz(v));








#line 262 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"
}

constexpr inline quint64 qNextPowerOfTwo(quint64 v)
{

    if (v == 0)
        return 1;
    return 2ui64 << (63 ^ QAlgorithmsPrivate::qt_builtin_clzll(v));









#line 280 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"
}

constexpr inline quint32 qNextPowerOfTwo(qint32 v)
{
    return qNextPowerOfTwo(quint32(v));
}

constexpr inline quint64 qNextPowerOfTwo(qint64 v)
{
    return qNextPowerOfTwo(quint64(v));
}



#line 295 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qmath.h"
#line 2 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QtMath"
#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/geometryhelper.h"

namespace parkour {
namespace geometry {
    int compareDoubles(double lhs, double rhs);
    double normalizeDenominater(double d);
    bool pointFallsInRectangle(const QVector2D& point, const QVector2D& rectOffset, const QVector2D& rectDimensions);
}
}

#line 17 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/geometryhelper.h"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./boundingbox.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"

#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./boundingbox.h"

namespace parkour {
    struct BoundingBox {
        


        QVector2D offset;
        


        QVector2D dimensions;
    };
    struct BoundingBoxWorld : public BoundingBox {
        


        QVector2D position;

        BoundingBoxWorld(QVector2D position_, BoundingBox box_)
            : position(position_) {
            this->offset = box_.offset;
            this->dimensions = box_.dimensions;
        }

        




        bool in(const BoundingBoxWorld& other) const;
        bool standUpon(const BoundingBoxWorld& other) const;
        float getMinX() const;
        float getMaxX() const;
        float getMinY() const;
        float getMaxY() const;
        static bool intersect(const BoundingBoxWorld& b1, const BoundingBoxWorld& b2);
    };
}

#line 47 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./boundingbox.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\block.h"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"







#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\icollidable.h"




#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QDebug"
#line 1 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"












































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"












































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiterator.h"




























































































































































































#line 190 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiterator.h"

template<typename Key, typename T, class Iterator>
class QKeyValueIterator
{
public:
    typedef typename Iterator::iterator_category iterator_category;
    typedef typename Iterator::difference_type difference_type;
    typedef std::pair<Key, T> value_type;
    typedef const value_type *pointer;
    typedef const value_type &reference;

    QKeyValueIterator() = default;
    constexpr explicit QKeyValueIterator(Iterator o) noexcept(std::is_nothrow_move_constructible<Iterator>::value)
        : i(std::move(o)) {}

    std::pair<Key, T> operator*() const {
        return std::pair<Key, T>(i.key(), i.value());
    }

    friend bool operator==(QKeyValueIterator lhs, QKeyValueIterator rhs) noexcept { return lhs.i == rhs.i; }
    friend bool operator!=(QKeyValueIterator lhs, QKeyValueIterator rhs) noexcept { return lhs.i != rhs.i; }

    inline QKeyValueIterator &operator++() { ++i; return *this; }
    inline QKeyValueIterator operator++(int) { return QKeyValueIterator(i++);}
    inline QKeyValueIterator &operator--() { --i; return *this; }
    inline QKeyValueIterator operator--(int) { return QKeyValueIterator(i--); }
    Iterator base() const { return i; }

private:
    Iterator i;
};



#line 225 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiterator.h"
#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"















































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"















































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
























































































#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"





#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"







template <typename T>
class QVector
{
    typedef QTypedArrayData<T> Data;
    Data *d;

public:
    inline QVector() noexcept : d(Data::sharedNull()) { }
    explicit QVector(int size);
    QVector(int size, const T &t);
    inline QVector(const QVector<T> &v);
    inline ~QVector() { if (!d->ref.deref()) freeData(d); }
    QVector<T> &operator=(const QVector<T> &v);
    QVector(QVector<T> &&other) noexcept : d(other.d) { other.d = Data::sharedNull(); }
    QVector<T> &operator=(QVector<T> &&other) noexcept
    { QVector moved(std::move(other)); swap(moved); return *this; }
    void swap(QVector<T> &other) noexcept { qSwap(d, other.d); }
    inline QVector(std::initializer_list<T> args);
    QVector<T> &operator=(std::initializer_list<T> args);
    template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator> = true>
    inline QVector(InputIterator first, InputIterator last);
    explicit QVector(QArrayDataPointerRef<T> ref) noexcept : d(ref.ptr) {}

    bool operator==(const QVector<T> &v) const;
    inline bool operator!=(const QVector<T> &v) const { return !(*this == v); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    void resize(int size);

    inline int capacity() const { return int(d->alloc); }
    void reserve(int size);
    inline void squeeze()
    {
        if (d->size < int(d->alloc)) {
            if (!d->size) {
                *this = QVector<T>();
                return;
            }
            realloc(d->size);
        }
        if (d->capacityReserved) {
            
            
            d->capacityReserved = 0;
        }
    }

    inline void detach();
    inline bool isDetached() const { return !d->ref.isShared(); }

    inline void setSharable(bool sharable)
    {
        if (sharable == d->ref.isSharable())
            return;
        if (!sharable)
            detach();

        if (d == Data::unsharableEmpty()) {
            if (sharable)
                d = Data::sharedNull();
        } else {
            d->ref.setSharable(sharable);
        }
        static_cast<void>(false && (d->ref.isSharable() == sharable));
    }
#line 131 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

    inline bool isSharedWith(const QVector<T> &other) const { return d == other.d; }

    inline T *data() { detach(); return d->begin(); }
    inline const T *data() const { return d->begin(); }
    inline const T *constData() const { return d->begin(); }
    void clear();

    const T &at(int i) const;
    T &operator[](int i);
    const T &operator[](int i) const;
    void append(const T &t);
    void append(T &&t);
    inline void append(const QVector<T> &l) { *this += l; }
    void prepend(T &&t);
    void prepend(const T &t);
    void insert(int i, T &&t);
    void insert(int i, const T &t);
    void insert(int i, int n, const T &t);
    void replace(int i, const T &t);
    void remove(int i);
    void remove(int i, int n);
    inline void removeFirst() { static_cast<void>(false && (!isEmpty())); erase(d->begin()); }
    inline void removeLast();
    T takeFirst() { static_cast<void>(false && (!isEmpty())); T r = std::move(first()); removeFirst(); return r; }
    T takeLast()  { static_cast<void>(false && (!isEmpty())); T r = std::move(last()); removeLast(); return r; }

    QVector<T> &fill(const T &t, int size = -1);

    int indexOf(const T &t, int from = 0) const;
    int lastIndexOf(const T &t, int from = -1) const;
    bool contains(const T &t) const;
    int count(const T &t) const;

    
    void removeAt(int i) { remove(i); }
    int removeAll(const T &t)
    {
        const const_iterator ce = this->cend(), cit = std::find(this->cbegin(), ce, t);
        if (cit == ce)
            return 0;
        
        const T tCopy = t;
        const int firstFoundIdx = std::distance(this->cbegin(), cit);
        const iterator e = end(), it = std::remove(begin() + firstFoundIdx, e, tCopy);
        const int result = std::distance(it, e);
        erase(it, e);
        return result;
    }
    bool removeOne(const T &t)
    {
        const int i = indexOf(t);
        if (i < 0)
            return false;
        remove(i);
        return true;
    }
    int length() const { return size(); }
    T takeAt(int i) { T t = std::move((*this)[i]); remove(i); return t; }
    void move(int from, int to)
    {
        static_cast<void>(false && (from >= 0 && from < size()));
        static_cast<void>(false && (to >= 0 && to < size()));
        if (from == to) 
            return;
        detach();
        T * const b = d->begin();
        if (from < to)
            std::rotate(b + from, b + from + 1, b + to + 1);
        else
            std::rotate(b + to, b + from, b + from + 1);
    }

    
    typedef typename Data::iterator iterator;
    typedef typename Data::const_iterator const_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    inline iterator begin() { detach(); return d->begin(); }
    inline const_iterator begin() const noexcept { return d->constBegin(); }
    inline const_iterator cbegin() const noexcept { return d->constBegin(); }
    inline const_iterator constBegin() const noexcept { return d->constBegin(); }
    inline iterator end() { detach(); return d->end(); }
    inline const_iterator end() const noexcept { return d->constEnd(); }
    inline const_iterator cend() const noexcept { return d->constEnd(); }
    inline const_iterator constEnd() const noexcept { return d->constEnd(); }









#line 228 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
    iterator insert(iterator before, int n, const T &x);
    inline iterator insert(iterator before, const T &x) { return insert(before, 1, x); }
    inline iterator insert(iterator before, T &&x);
    iterator erase(iterator begin, iterator end);
    inline iterator erase(iterator pos) { return erase(pos, pos+1); }

    
    inline int count() const { return d->size; }
    inline T& first() { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline const T &first() const { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline const T &constFirst() const { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline T& last() { static_cast<void>(false && (!isEmpty())); return *(end()-1); }
    inline const T &last() const { static_cast<void>(false && (!isEmpty())); return *(end()-1); }
    inline const T &constLast() const { static_cast<void>(false && (!isEmpty())); return *(end()-1); }
    inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
    inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }
    QVector<T> mid(int pos, int len = -1) const;

    T value(int i) const;
    T value(int i, const T &defaultValue) const;

    void swapItemsAt(int i, int j) {
        static_cast<void>(false && (i >= 0 && i < size() && j >= 0 && j < size()));
#line 258 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
        detach();
        qSwap(d->begin()[i], d->begin()[j]);
    }

    
    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef qptrdiff difference_type;
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    typedef int size_type;
    inline void push_back(const T &t) { append(t); }
    void push_back(T &&t) { append(std::move(t)); }
    void push_front(T &&t) { prepend(std::move(t)); }
    inline void push_front(const T &t) { prepend(t); }
    void pop_back() { removeLast(); }
    void pop_front() { removeFirst(); }
    inline bool empty() const
    { return d->size == 0; }
    inline T& front() { return first(); }
    inline const_reference front() const { return first(); }
    inline reference back() { return last(); }
    inline const_reference back() const { return last(); }
    void shrink_to_fit() { squeeze(); }

    
    QVector<T> &operator+=(const QVector<T> &l);
    inline QVector<T> operator+(const QVector<T> &l) const
    { QVector n = *this; n += l; return n; }
    inline QVector<T> &operator+=(const T &t)
    { append(t); return *this; }
    inline QVector<T> &operator<< (const T &t)
    { append(t); return *this; }
    inline QVector<T> &operator<<(const QVector<T> &l)
    { *this += l; return *this; }
    inline QVector<T> &operator+=(T &&t)
    { append(std::move(t)); return *this; }
    inline QVector<T> &operator<<(T &&t)
    { append(std::move(t)); return *this; }

    static QVector<T> fromList(const QList<T> &list);
    QList<T> toList() const;


    __declspec(deprecated("Use QVector<T>(vector.begin(), vector.end()) instead."))
    static inline QVector<T> fromStdVector(const std::vector<T> &vector)
    { return QVector<T>(vector.begin(), vector.end()); }
    __declspec(deprecated("Use std::vector<T>(vector.begin(), vector.end()) instead."))
    inline std::vector<T> toStdVector() const
    { return std::vector<T>(d->begin(), d->end()); }
#line 312 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
private:
    
    void reallocData(const int size, const int alloc, QArrayData::AllocationOptions options = QArrayData::Default);
    void reallocData(const int sz) { reallocData(sz, d->alloc); }
    void realloc(int alloc, QArrayData::AllocationOptions options = QArrayData::Default);
    void freeData(Data *d);
    void defaultConstruct(T *from, T *to);
    void copyConstruct(const T *srcFrom, const T *srcTo, T *dstFrom);
    void destruct(T *from, T *to);
    bool isValidIterator(const iterator &i) const
    {
        const std::less<const T*> less = {};
        return !less(d->end(), i) && !less(i, d->begin());
    }
    class AlignmentDummy { Data header; T array[1]; };
};


template <typename InputIterator,
          typename ValueType = typename std::iterator_traits<InputIterator>::value_type,
          QtPrivate::IfIsInputIterator<InputIterator> = true>
QVector(InputIterator, InputIterator) -> QVector<ValueType>;
#line 335 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"




#pragma warning ( push )
#pragma warning ( disable : 4345 )
#pragma warning(disable : 4127) 
#line 343 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template <typename T>
void QVector<T>::defaultConstruct(T *from, T *to)
{
    if (QTypeInfo<T>::isComplex) {
        while (from != to) {
            new (from++) T();
        }
    } else {
        ::memset(static_cast<void *>(from), 0, (to - from) * sizeof(T));
    }
}

template <typename T>
void QVector<T>::copyConstruct(const T *srcFrom, const T *srcTo, T *dstFrom)
{
    if (QTypeInfo<T>::isComplex) {
        while (srcFrom != srcTo)
            new (dstFrom++) T(*srcFrom++);
    } else {
        ::memcpy(static_cast<void *>(dstFrom), static_cast<const void *>(srcFrom), (srcTo - srcFrom) * sizeof(T));
    }
}

template <typename T>
void QVector<T>::destruct(T *from, T *to)
{
    if (QTypeInfo<T>::isComplex) {
        while (from != to) {
            from++->~T();
        }
    }
}

template <typename T>
inline QVector<T>::QVector(const QVector<T> &v)
{
    if (v.d->ref.ref()) {
        d = v.d;
    } else {
        if (v.d->capacityReserved) {
            d = Data::allocate(v.d->alloc);
            do { if (!(d)) qBadAlloc(); } while (false);
            d->capacityReserved = true;
        } else {
            d = Data::allocate(v.d->size);
            do { if (!(d)) qBadAlloc(); } while (false);
        }
        if (d->alloc) {
            copyConstruct(v.d->begin(), v.d->end(), d->begin());
            d->size = v.d->size;
        }
    }
}


#pragma warning( pop )
#line 401 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template <typename T>
void QVector<T>::detach()
{
    if (!isDetached()) {

        if (!d->alloc)
            d = Data::unsharableEmpty();
        else
#line 411 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
            realloc(int(d->alloc));
    }
    static_cast<void>(false && (isDetached()));
}

template <typename T>
void QVector<T>::reserve(int asize)
{
    if (asize > int(d->alloc))
        realloc(asize);
    if (isDetached()

            && d != Data::unsharableEmpty()
#line 425 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
            )
        d->capacityReserved = 1;
    static_cast<void>(false && (capacity() >= asize));
}

template <typename T>
void QVector<T>::resize(int asize)
{
    if (asize == d->size)
        return detach();
    if (asize > int(d->alloc) || !isDetached()) { 
        QArrayData::AllocationOptions opt = asize > int(d->alloc) ? QArrayData::Grow : QArrayData::Default;
        realloc(qMax(int(d->alloc), asize), opt);
    }
    if (asize < d->size)
        destruct(begin() + asize, end());
    else
        defaultConstruct(end(), begin() + asize);
    d->size = asize;
}
template <typename T>
inline void QVector<T>::clear()
{
    if (!d->size)
        return;
    destruct(begin(), end());
    d->size = 0;
}
template <typename T>
inline const T &QVector<T>::at(int i) const
{ static_cast<void>(false && (i >= 0 && i < d->size));
  return d->begin()[i]; }
template <typename T>
inline const T &QVector<T>::operator[](int i) const
{ static_cast<void>(false && (i >= 0 && i < d->size));
  return d->begin()[i]; }
template <typename T>
inline T &QVector<T>::operator[](int i)
{ static_cast<void>(false && (i >= 0 && i < d->size));
  return data()[i]; }
template <typename T>
inline void QVector<T>::insert(int i, const T &t)
{ static_cast<void>(false && (i >= 0 && i <= d->size));
  insert(begin() + i, 1, t); }
template <typename T>
inline void QVector<T>::insert(int i, int n, const T &t)
{ static_cast<void>(false && (i >= 0 && i <= d->size));
  insert(begin() + i, n, t); }
template <typename T>
inline void QVector<T>::insert(int i, T &&t)
{ static_cast<void>(false && (i >= 0 && i <= d->size));
  insert(begin() + i, std::move(t)); }
template <typename T>
inline void QVector<T>::remove(int i, int n)
{ static_cast<void>(false && (i >= 0 && n >= 0 && i + n <= d->size));
  erase(d->begin() + i, d->begin() + i + n); }
template <typename T>
inline void QVector<T>::remove(int i)
{ static_cast<void>(false && (i >= 0 && i < d->size));
  erase(d->begin() + i, d->begin() + i + 1); }
template <typename T>
inline void QVector<T>::prepend(const T &t)
{ insert(begin(), 1, t); }
template <typename T>
inline void QVector<T>::prepend(T &&t)
{ insert(begin(), std::move(t)); }

template <typename T>
inline void QVector<T>::replace(int i, const T &t)
{
    static_cast<void>(false && (i >= 0 && i < d->size));
    const T copy(t);
    data()[i] = copy;
}

template <typename T>
QVector<T> &QVector<T>::operator=(const QVector<T> &v)
{
    if (v.d != d) {
        QVector<T> tmp(v);
        tmp.swap(*this);
    }
    return *this;
}

template <typename T>
QVector<T>::QVector(int asize)
{
    static_cast<void>(false && (asize >= 0));
    if ((asize > 0)) {
        d = Data::allocate(asize);
        do { if (!(d)) qBadAlloc(); } while (false);
        d->size = asize;
        defaultConstruct(d->begin(), d->end());
    } else {
        d = Data::sharedNull();
    }
}

template <typename T>
QVector<T>::QVector(int asize, const T &t)
{
    static_cast<void>(false && (asize >= 0));
    if (asize > 0) {
        d = Data::allocate(asize);
        do { if (!(d)) qBadAlloc(); } while (false);
        d->size = asize;
        T* i = d->end();
        while (i != d->begin())
            new (--i) T(t);
    } else {
        d = Data::sharedNull();
    }
}


__pragma(warning(push))
__pragma(warning(disable: 4127)) 
#line 544 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template <typename T>
QVector<T>::QVector(std::initializer_list<T> args)
{
    if (args.size() > 0) {
        d = Data::allocate(args.size());
        do { if (!(d)) qBadAlloc(); } while (false);
        
        
        copyConstruct(args.begin(), args.end(), d->begin());
        d->size = int(args.size());
    } else {
        d = Data::sharedNull();
    }
}

template <typename T>
QVector<T> &QVector<T>::operator=(std::initializer_list<T> args)
{
    QVector<T> tmp(args);
    tmp.swap(*this);
    return *this;
}


__pragma(warning(pop))
#line 571 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template <typename T>
template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator>>
QVector<T>::QVector(InputIterator first, InputIterator last)
    : QVector()
{
    QtPrivate::reserveIfForwardIterator(this, first, last);
    std::copy(first, last, std::back_inserter(*this));
}

template <typename T>
void QVector<T>::freeData(Data *x)
{
    destruct(x->begin(), x->end());
    Data::deallocate(x);
}


__pragma(warning(push))
__pragma(warning(disable: 4127)) 
#line 592 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template <typename T>
void QVector<T>::reallocData(const int asize, const int aalloc, QArrayData::AllocationOptions options)
{
    static_cast<void>(false && (asize >= 0 && asize <= aalloc));
    Data *x = d;

    const bool isShared = d->ref.isShared();

    if (aalloc != 0) {
        if (aalloc != int(d->alloc) || isShared) {
            try {
                
                x = Data::allocate(aalloc, options);
                do { if (!(x)) qBadAlloc(); } while (false);
                

                static_cast<void>(false && (x->ref.isSharable() || options.testFlag(QArrayData::Unsharable)));
#line 611 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
                static_cast<void>(false && (!x->ref.isStatic()));
                x->size = asize;

                T *srcBegin = d->begin();
                T *srcEnd = asize > d->size ? d->end() : d->begin() + asize;
                T *dst = x->begin();

                if (!QTypeInfoQuery<T>::isRelocatable || (isShared && QTypeInfo<T>::isComplex)) {
                    try {
                        if (isShared || !std::is_nothrow_move_constructible<T>::value) {
                            
                            while (srcBegin != srcEnd)
                                new (dst++) T(*srcBegin++);
                        } else {
                            while (srcBegin != srcEnd)
                                new (dst++) T(std::move(*srcBegin++));
                        }
                    } catch (...) {
                        
                        destruct(x->begin(), dst);
                        throw;
                    }
                } else {
                    ::memcpy(static_cast<void *>(dst), static_cast<void *>(srcBegin), (srcEnd - srcBegin) * sizeof(T));
                    dst += srcEnd - srcBegin;

                    
                    if (asize < d->size)
                        destruct(d->begin() + asize, d->end());
                }

                if (asize > d->size) {
                    
                    if (!QTypeInfo<T>::isComplex) {
                        ::memset(static_cast<void *>(dst), 0, (static_cast<T *>(x->end()) - dst) * sizeof(T));
                    } else {
                        try {
                            while (dst != x->end())
                                new (dst++) T();
                        } catch (...) {
                            
                            destruct(x->begin(), dst);
                            throw;
                        }
                    }
                }
            } catch (...) {
                Data::deallocate(x);
                throw;
            }
            x->capacityReserved = d->capacityReserved;
        } else {
            static_cast<void>(false && (int(d->alloc) == aalloc)); 
            static_cast<void>(false && (isDetached()));       
            static_cast<void>(false && (x == d));             
            if (asize <= d->size) {
                destruct(x->begin() + asize, x->end()); 
            } else {
                defaultConstruct(x->end(), x->begin() + asize); 
            }
            x->size = asize;
        }
    } else {
        x = Data::sharedNull();
    }
    if (d != x) {
        if (!d->ref.deref()) {
            if (!QTypeInfoQuery<T>::isRelocatable || !aalloc || (isShared && QTypeInfo<T>::isComplex)) {
                
                
                freeData(d);
            } else {
                Data::deallocate(d);
            }
        }
        d = x;
    }

    static_cast<void>(false && (d->data()));
    static_cast<void>(false && (uint(d->size) <= d->alloc));

    static_cast<void>(false && (d != Data::unsharableEmpty()));
#line 694 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
    static_cast<void>(false && (aalloc ? d != Data::sharedNull() : d == Data::sharedNull()));
    static_cast<void>(false && (d->alloc >= uint(aalloc)));
    static_cast<void>(false && (d->size == asize));
}

template<typename T>
void QVector<T>::realloc(int aalloc, QArrayData::AllocationOptions options)
{
    static_cast<void>(false && (aalloc >= d->size));
    Data *x = d;

    const bool isShared = d->ref.isShared();

    try {
        
        x = Data::allocate(aalloc, options);
        do { if (!(x)) qBadAlloc(); } while (false);
        

        static_cast<void>(false && (x->ref.isSharable() || options.testFlag(QArrayData::Unsharable)));
#line 715 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
        static_cast<void>(false && (!x->ref.isStatic()));
        x->size = d->size;

        T *srcBegin = d->begin();
        T *srcEnd = d->end();
        T *dst = x->begin();

        if (!QTypeInfoQuery<T>::isRelocatable || (isShared && QTypeInfo<T>::isComplex)) {
            try {
                if (isShared || !std::is_nothrow_move_constructible<T>::value) {
                    
                    while (srcBegin != srcEnd)
                        new (dst++) T(*srcBegin++);
                } else {
                    while (srcBegin != srcEnd)
                        new (dst++) T(std::move(*srcBegin++));
                }
            } catch (...) {
                
                destruct(x->begin(), dst);
                throw;
            }
        } else {
            ::memcpy(static_cast<void *>(dst), static_cast<void *>(srcBegin), (srcEnd - srcBegin) * sizeof(T));
            dst += srcEnd - srcBegin;
        }

    } catch (...) {
        Data::deallocate(x);
        throw;
    }
    x->capacityReserved = d->capacityReserved;

    static_cast<void>(false && (d != x));
    if (!d->ref.deref()) {
        if (!QTypeInfoQuery<T>::isRelocatable || !aalloc || (isShared && QTypeInfo<T>::isComplex)) {
            
            
            freeData(d);
        } else {
            Data::deallocate(d);
        }
    }
    d = x;

    static_cast<void>(false && (d->data()));
    static_cast<void>(false && (uint(d->size) <= d->alloc));

    static_cast<void>(false && (d != Data::unsharableEmpty()));
#line 765 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
    static_cast<void>(false && (d != Data::sharedNull()));
    static_cast<void>(false && (d->alloc >= uint(aalloc)));
}


__pragma(warning(pop))
#line 772 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

template<typename T>
inline T QVector<T>::value(int i) const
{
    if (uint(i) >= uint(d->size)) {
        return T();
    }
    return d->begin()[i];
}
template<typename T>
inline T QVector<T>::value(int i, const T &defaultValue) const
{
    return uint(i) >= uint(d->size) ? defaultValue : d->begin()[i];
}

template <typename T>
void QVector<T>::append(const T &t)
{
    const bool isTooSmall = uint(d->size + 1) > d->alloc;
    if (!isDetached() || isTooSmall) {
        T copy(t);
        QArrayData::AllocationOptions opt(isTooSmall ? QArrayData::Grow : QArrayData::Default);
        realloc(isTooSmall ? d->size + 1 : d->alloc, opt);

        if (QTypeInfo<T>::isComplex)
            new (d->end()) T(std::move(copy));
        else
            *d->end() = std::move(copy);

    } else {
        if (QTypeInfo<T>::isComplex)
            new (d->end()) T(t);
        else
            *d->end() = t;
    }
    ++d->size;
}

template <typename T>
void QVector<T>::append(T &&t)
{
    const bool isTooSmall = uint(d->size + 1) > d->alloc;
    if (!isDetached() || isTooSmall) {
        QArrayData::AllocationOptions opt(isTooSmall ? QArrayData::Grow : QArrayData::Default);
        realloc(isTooSmall ? d->size + 1 : d->alloc, opt);
    }

    new (d->end()) T(std::move(t));

    ++d->size;
}

template <typename T>
void QVector<T>::removeLast()
{
    static_cast<void>(false && (!isEmpty()));
    static_cast<void>(false && (d->alloc));

    if (d->ref.isShared())
        detach();
    --d->size;
    if (QTypeInfo<T>::isComplex)
        (d->data() + d->size)->~T();
}

template <typename T>
typename QVector<T>::iterator QVector<T>::insert(iterator before, size_type n, const T &t)
{
    static_cast<void>(false && (isValidIterator(before)));

    const auto offset = std::distance(d->begin(), before);
    if (n != 0) {
        const T copy(t);
        if (!isDetached() || d->size + n > int(d->alloc))
            realloc(d->size + n, QArrayData::Grow);
        if (!QTypeInfoQuery<T>::isRelocatable) {
            T *b = d->end();
            T *i = d->end() + n;
            while (i != b)
                new (--i) T;
            i = d->end();
            T *j = i + n;
            b = d->begin() + offset;
            while (i != b)
                *--j = *--i;
            i = b+n;
            while (i != b)
                *--i = copy;
        } else {
            T *b = d->begin() + offset;
            T *i = b + n;
            memmove(static_cast<void *>(i), static_cast<const void *>(b), (d->size - offset) * sizeof(T));
            while (i != b)
                new (--i) T(copy);
        }
        d->size += n;
    }
    return d->begin() + offset;
}

template <typename T>
typename QVector<T>::iterator QVector<T>::insert(iterator before, T &&t)
{
    static_cast<void>(false && (isValidIterator(before)));

    const auto offset = std::distance(d->begin(), before);
    if (!isDetached() || d->size + 1 > int(d->alloc))
        realloc(d->size + 1, QArrayData::Grow);
    if (!QTypeInfoQuery<T>::isRelocatable) {
        T *i = d->end();
        T *j = i + 1;
        T *b = d->begin() + offset;
        
        if (i != b) {
            new (--j) T(std::move(*--i));
            while (i != b)
                *--j = std::move(*--i);
            *b = std::move(t);
        } else {
            new (b) T(std::move(t));
        }
    } else {
        T *b = d->begin() + offset;
        memmove(static_cast<void *>(b + 1), static_cast<const void *>(b), (d->size - offset) * sizeof(T));
        new (b) T(std::move(t));
    }
    d->size += 1;
    return d->begin() + offset;
}

template <typename T>
typename QVector<T>::iterator QVector<T>::erase(iterator abegin, iterator aend)
{
    static_cast<void>(false && (isValidIterator(abegin)));
    static_cast<void>(false && (isValidIterator(aend)));

    const auto itemsToErase = aend - abegin;

    if (!itemsToErase)
        return abegin;

    static_cast<void>(false && (abegin >= d->begin()));
    static_cast<void>(false && (aend <= d->end()));
    static_cast<void>(false && (abegin <= aend));

    const auto itemsUntouched = abegin - d->begin();

    
    
    
    if (d->alloc) {
        detach();
        abegin = d->begin() + itemsUntouched;
        aend = abegin + itemsToErase;
        if (!QTypeInfoQuery<T>::isRelocatable) {
            iterator moveBegin = abegin + itemsToErase;
            iterator moveEnd = d->end();
            while (moveBegin != moveEnd) {
                if (QTypeInfo<T>::isComplex)
                    static_cast<T *>(abegin)->~T();
                new (abegin++) T(*moveBegin++);
            }
            if (abegin < d->end()) {
                
                destruct(abegin, d->end());
            }
        } else {
            destruct(abegin, aend);
            
            
            
            memmove(static_cast<void *>(abegin), static_cast<void *>(aend),
                    (d->size - itemsToErase - itemsUntouched) * sizeof(T));
        }
        d->size -= int(itemsToErase);
    }
    return d->begin() + itemsUntouched;
}

template <typename T>
bool QVector<T>::operator==(const QVector<T> &v) const
{
    if (d == v.d)
        return true;
    if (d->size != v.d->size)
        return false;
    const T *vb = v.d->begin();
    const T *b  = d->begin();
    const T *e  = d->end();
    return std::equal(b, e, stdext::make_checked_array_iterator(vb, size_t(v.d->size)));
}

template <typename T>
QVector<T> &QVector<T>::fill(const T &from, int asize)
{
    const T copy(from);
    resize(asize < 0 ? d->size : asize);
    if (d->size) {
        T *i = d->end();
        T *b = d->begin();
        while (i != b)
            *--i = copy;
    }
    return *this;
}

template <typename T>
QVector<T> &QVector<T>::operator+=(const QVector &l)
{
    if (d->size == 0) {
        *this = l;
    } else {
        uint newSize = d->size + l.d->size;
        const bool isTooSmall = newSize > d->alloc;
        if (!isDetached() || isTooSmall) {
            QArrayData::AllocationOptions opt(isTooSmall ? QArrayData::Grow : QArrayData::Default);
            realloc(isTooSmall ? newSize : d->alloc, opt);
        }

        if (d->alloc) {
            T *w = d->begin() + newSize;
            T *i = l.d->end();
            T *b = l.d->begin();
            while (i != b) {
                if (QTypeInfo<T>::isComplex)
                    new (--w) T(*--i);
                else
                    *--w = *--i;
            }
            d->size = newSize;
        }
    }
    return *this;
}

template <typename T>
int QVector<T>::indexOf(const T &t, int from) const
{
    if (from < 0)
        from = qMax(from + d->size, 0);
    if (from < d->size) {
        T* n = d->begin() + from - 1;
        T* e = d->end();
        while (++n != e)
            if (*n == t)
                return n - d->begin();
    }
    return -1;
}

template <typename T>
int QVector<T>::lastIndexOf(const T &t, int from) const
{
    if (from < 0)
        from += d->size;
    else if (from >= d->size)
        from = d->size-1;
    if (from >= 0) {
        T* b = d->begin();
        T* n = d->begin() + from + 1;
        while (n != b) {
            if (*--n == t)
                return n - b;
        }
    }
    return -1;
}

template <typename T>
bool QVector<T>::contains(const T &t) const
{
    const T *b = d->begin();
    const T *e = d->end();
    return std::find(b, e, t) != e;
}

template <typename T>
int QVector<T>::count(const T &t) const
{
    const T *b = d->begin();
    const T *e = d->end();
    return int(std::count(b, e, t));
}

template <typename T>
inline QVector<T> QVector<T>::mid(int pos, int len) const
{
    using namespace QtPrivate;
    switch (QContainerImplHelper::mid(d->size, &pos, &len)) {
    case QContainerImplHelper::Null:
    case QContainerImplHelper::Empty:
        return QVector<T>();
    case QContainerImplHelper::Full:
        return *this;
    case QContainerImplHelper::Subset:
        break;
    }

    QVector<T> midResult;
    midResult.realloc(len);
    T *srcFrom = d->begin() + pos;
    T *srcTo = d->begin() + pos + len;
    midResult.copyConstruct(srcFrom, srcTo, midResult.data());
    midResult.d->size = len;
    return midResult;
}

template <class T> class QVectorIterator { typedef typename QVector<T>::const_iterator const_iterator; QVector<T> c; const_iterator i; public: inline QVectorIterator(const QVector<T> &container) : c(container), i(c.constBegin()) {} inline QVectorIterator &operator=(const QVector<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableVectorIterator { typedef typename QVector<T>::iterator iterator; typedef typename QVector<T>::const_iterator const_iterator; QVector<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableVectorIterator(QVector<T> &container) : c(&container) { i = c->begin(); n = c->end(); } inline QMutableVectorIterator &operator=(QVector<T> &container) { c = &container; i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { static_cast<void>(false && (item_exists())); return *n; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };

template <typename T>
uint qHash(const QVector<T> &key, uint seed = 0)
    noexcept(noexcept(qHashRange(key.cbegin(), key.cend(), seed)))
{
    return qHashRange(key.cbegin(), key.cend(), seed);
}

template <typename T>
bool operator<(const QVector<T> &lhs, const QVector<T> &rhs)
    noexcept(noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),
                                                               rhs.begin(), rhs.end())))
{
    return std::lexicographical_compare(lhs.begin(), lhs.end(),
                                        rhs.begin(), rhs.end());
}

template <typename T>
inline bool operator>(const QVector<T> &lhs, const QVector<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return rhs < lhs;
}

template <typename T>
inline bool operator<=(const QVector<T> &lhs, const QVector<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs > rhs);
}

template <typename T>
inline bool operator>=(const QVector<T> &lhs, const QVector<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs < rhs);
}












extern template class __declspec(dllimport) QVector<QPointF>;
extern template class __declspec(dllimport) QVector<QPoint>;
#line 1133 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

QVector<uint> QStringView::toUcs4() const { return QtPrivate::convertToUcs4(*this); }

QVector<QStringRef> QString::splitRef(const QString &sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return splitRef(sep, _sb(behavior), cs); }
QVector<QStringRef> QString::splitRef(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return splitRef(sep, _sb(behavior), cs); }

QVector<QStringRef> QString::splitRef(const QRegExp &sep, Qt::SplitBehavior behavior) const
{ return splitRef(sep, _sb(behavior)); }
#line 1144 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"

QVector<QStringRef> QString::splitRef(const QRegularExpression &sep, Qt::SplitBehavior behavior) const
{ return splitRef(sep, _sb(behavior)); }
#line 1148 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
QVector<QStringRef> QStringRef::split(const QString &sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return split(sep, QString::_sb(behavior), cs); }
QVector<QStringRef> QStringRef::split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return split(sep, QString::_sb(behavior), cs); }




#line 1157 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvector.h"
#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
























































































#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"






#line 57 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"







#pragma warning( push )
#pragma warning( disable : 4127 ) 
#line 67 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"




template <typename T> class QVector;
template <typename T> class QSet;

template <typename T> struct QListSpecialMethods
{
protected:
    ~QListSpecialMethods() = default;
};
template <> struct QListSpecialMethods<QByteArray>;
template <> struct QListSpecialMethods<QString>;

struct __declspec(dllimport) QListData {
    
    
    struct NotArrayCompatibleLayout {};
    struct NotIndirectLayout {};
    struct ArrayCompatibleLayout   : NotIndirectLayout {};                           
    struct InlineWithPaddingLayout : NotArrayCompatibleLayout, NotIndirectLayout {}; 
    struct IndirectLayout          : NotArrayCompatibleLayout {};                    

    struct Data {
        QtPrivate::RefCount ref;
        int alloc, begin, end;
        void *array[1];
    };
    enum { DataHeaderSize = sizeof(Data) - sizeof(void *) };

    Data *detach(int alloc);
    Data *detach_grow(int *i, int n);
    void realloc(int alloc);
    void realloc_grow(int growth);
    inline void dispose() { dispose(d); }
    static void dispose(Data *d);
    static const Data shared_null;
    Data *d;
    void **erase(void **xi);
    void **append(int n);
    void **append();
    void **append(const QListData &l);
    void **prepend();
    void **insert(int i);
    void remove(int i);
    void remove(int i, int n);
    void move(int from, int to);
    inline int size() const noexcept { return int(d->end - d->begin); }   
    inline bool isEmpty() const noexcept { return d->end  == d->begin; }
    inline void **at(int i) const noexcept { return d->array + d->begin + i; }
    inline void **begin() const noexcept { return d->array + d->begin; }
    inline void **end() const noexcept { return d->array + d->end; }
};

namespace QtPrivate {
    template <typename V, typename U> int indexOf(const QList<V> &list, const U &u, int from);
    template <typename V, typename U> int lastIndexOf(const QList<V> &list, const U &u, int from);
}

template <typename T>
class QList

    : public QListSpecialMethods<T>
#line 132 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
{
public:
    struct MemoryLayout
        : std::conditional<
            
            QTypeInfo<T>::isStatic || QTypeInfo<T>::isLarge,
            QListData::IndirectLayout,
            typename std::conditional<
                sizeof(T) == sizeof(void*),
                QListData::ArrayCompatibleLayout,
                QListData::InlineWithPaddingLayout
             >::type>::type {};
private:
    template <typename V, typename U> friend int QtPrivate::indexOf(const QList<V> &list, const U &u, int from);
    template <typename V, typename U> friend int QtPrivate::lastIndexOf(const QList<V> &list, const U &u, int from);
    struct Node { void *v;


#line 151 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
        inline T &t()
        { return *reinterpret_cast<T*>(QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic
                                       ? v : this); }
#line 155 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    };

    union { QListData p; QListData::Data *d; };

public:
    inline QList() noexcept : d(const_cast<QListData::Data *>(&QListData::shared_null)) { }
    QList(const QList<T> &l);
    ~QList();
    QList<T> &operator=(const QList<T> &l);
    inline QList(QList<T> &&other) noexcept
        : d(other.d) { other.d = const_cast<QListData::Data *>(&QListData::shared_null); }
    inline QList &operator=(QList<T> &&other) noexcept
    { QList moved(std::move(other)); swap(moved); return *this; }
    inline void swap(QList<T> &other) noexcept { qSwap(d, other.d); }
    inline QList(std::initializer_list<T> args)
        : QList(args.begin(), args.end()) {}
    template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator> = true>
    QList(InputIterator first, InputIterator last);
    bool operator==(const QList<T> &l) const;
    inline bool operator!=(const QList<T> &l) const { return !(*this == l); }

    inline int size() const noexcept { return p.size(); }

    inline void detach() { if (d->ref.isShared()) detach_helper(); }

    inline void detachShared()
    {
        
        if (d->ref.isShared() && this->d != &QListData::shared_null)
            detach_helper();
    }

    inline bool isDetached() const { return !d->ref.isShared(); }

    inline void setSharable(bool sharable)
    {
        if (sharable == d->ref.isSharable())
            return;
        if (!sharable)
            detach();
        if (d != &QListData::shared_null)
            d->ref.setSharable(sharable);
    }
#line 199 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    inline bool isSharedWith(const QList<T> &other) const noexcept { return d == other.d; }

    inline bool isEmpty() const noexcept { return p.isEmpty(); }

    void clear();

    const T &at(int i) const;
    const T &operator[](int i) const;
    T &operator[](int i);

    void reserve(int size);
    void append(const T &t);
    void append(const QList<T> &t);
    void prepend(const T &t);
    void insert(int i, const T &t);
    void replace(int i, const T &t);
    void removeAt(int i);
    int removeAll(const T &t);
    bool removeOne(const T &t);
    T takeAt(int i);
    T takeFirst();
    T takeLast();
    void move(int from, int to);
    void swapItemsAt(int i, int j);

    __declspec(deprecated("Use QList<T>::swapItemsAt()"))
    void swap(int i, int j) { swapItemsAt(i, j); }
#line 227 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    int indexOf(const T &t, int from = 0) const;
    int lastIndexOf(const T &t, int from = -1) const;
    bool contains(const T &t) const;
    int count(const T &t) const;

    class const_iterator;

    class iterator {
    public:
        Node *i;
        typedef std::random_access_iterator_tag  iterator_category;
        
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &reference;

        inline iterator() noexcept : i(nullptr) {}
        inline iterator(Node *n) noexcept : i(n) {}

        
        
        inline iterator(const iterator &o) noexcept : i(o.i){}
        inline iterator &operator=(const iterator &o) noexcept
        { i = o.i; return *this; }
#line 253 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
        inline T &operator*() const { return i->t(); }
        inline T *operator->() const { return &i->t(); }
        inline T &operator[](difference_type j) const { return i[j].t(); }
        inline bool operator==(const iterator &o) const noexcept { return i == o.i; }
        inline bool operator!=(const iterator &o) const noexcept { return i != o.i; }
        inline bool operator<(const iterator& other) const noexcept { return i < other.i; }
        inline bool operator<=(const iterator& other) const noexcept { return i <= other.i; }
        inline bool operator>(const iterator& other) const noexcept { return i > other.i; }
        inline bool operator>=(const iterator& other) const noexcept { return i >= other.i; }

        inline bool operator==(const const_iterator &o) const noexcept
            { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const noexcept
            { return i != o.i; }
        inline bool operator<(const const_iterator& other) const noexcept
            { return i < other.i; }
        inline bool operator<=(const const_iterator& other) const noexcept
            { return i <= other.i; }
        inline bool operator>(const const_iterator& other) const noexcept
            { return i > other.i; }
        inline bool operator>=(const const_iterator& other) const noexcept
            { return i >= other.i; }
#line 276 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
        inline iterator &operator++() { ++i; return *this; }
        inline iterator operator++(int) { Node *n = i; ++i; return n; }
        inline iterator &operator--() { i--; return *this; }
        inline iterator operator--(int) { Node *n = i; i--; return n; }
        inline iterator &operator+=(difference_type j) { i+=j; return *this; }
        inline iterator &operator-=(difference_type j) { i-=j; return *this; }
        inline iterator operator+(difference_type j) const { return iterator(i+j); }
        inline iterator operator-(difference_type j) const { return iterator(i-j); }
        friend inline iterator operator+(difference_type j, iterator k) { return k + j; }
        inline int operator-(iterator j) const { return int(i - j.i); }
    };
    friend class iterator;

    class const_iterator {
    public:
        Node *i;
        typedef std::random_access_iterator_tag  iterator_category;
        
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &reference;

        inline const_iterator() noexcept : i(nullptr) {}
        inline const_iterator(Node *n) noexcept : i(n) {}

        
        
        inline const_iterator(const const_iterator &o) noexcept : i(o.i) {}
        inline const_iterator &operator=(const const_iterator &o) noexcept
        { i = o.i; return *this; }
#line 308 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"



        inline const_iterator(const iterator &o) noexcept : i(o.i) {}
#line 313 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
        inline const T &operator*() const { return i->t(); }
        inline const T *operator->() const { return &i->t(); }
        inline const T &operator[](difference_type j) const { return i[j].t(); }
        inline bool operator==(const const_iterator &o) const noexcept { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const noexcept { return i != o.i; }
        inline bool operator<(const const_iterator& other) const noexcept { return i < other.i; }
        inline bool operator<=(const const_iterator& other) const noexcept { return i <= other.i; }
        inline bool operator>(const const_iterator& other) const noexcept { return i > other.i; }
        inline bool operator>=(const const_iterator& other) const noexcept { return i >= other.i; }
        inline const_iterator &operator++() { ++i; return *this; }
        inline const_iterator operator++(int) { Node *n = i; ++i; return n; }
        inline const_iterator &operator--() { i--; return *this; }
        inline const_iterator operator--(int) { Node *n = i; i--; return n; }
        inline const_iterator &operator+=(difference_type j) { i+=j; return *this; }
        inline const_iterator &operator-=(difference_type j) { i-=j; return *this; }
        inline const_iterator operator+(difference_type j) const { return const_iterator(i+j); }
        inline const_iterator operator-(difference_type j) const { return const_iterator(i-j); }
        friend inline const_iterator operator+(difference_type j, const_iterator k) { return k + j; }
        inline int operator-(const_iterator j) const { return int(i - j.i); }
    };
    friend class const_iterator;

    
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    inline iterator begin() { detach(); return reinterpret_cast<Node *>(p.begin()); }
    inline const_iterator begin() const noexcept { return reinterpret_cast<Node *>(p.begin()); }
    inline const_iterator cbegin() const noexcept { return reinterpret_cast<Node *>(p.begin()); }
    inline const_iterator constBegin() const noexcept { return reinterpret_cast<Node *>(p.begin()); }
    inline iterator end() { detach(); return reinterpret_cast<Node *>(p.end()); }
    inline const_iterator end() const noexcept { return reinterpret_cast<Node *>(p.end()); }
    inline const_iterator cend() const noexcept { return reinterpret_cast<Node *>(p.end()); }
    inline const_iterator constEnd() const noexcept { return reinterpret_cast<Node *>(p.end()); }
    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
    iterator insert(iterator before, const T &t);
    iterator erase(iterator pos);
    iterator erase(iterator first, iterator last);

    
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return p.size(); }
    inline int length() const { return p.size(); } 
    inline T& first() { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline const T& constFirst() const { return first(); }
    inline const T& first() const { static_cast<void>(false && (!isEmpty())); return at(0); }
    T& last() { static_cast<void>(false && (!isEmpty())); return *(--end()); }
    const T& last() const { static_cast<void>(false && (!isEmpty())); return at(count() - 1); }
    inline const T& constLast() const { return last(); }
    inline void removeFirst() { static_cast<void>(false && (!isEmpty())); erase(begin()); }
    inline void removeLast() { static_cast<void>(false && (!isEmpty())); erase(--end()); }
    inline bool startsWith(const T &t) const { return !isEmpty() && first() == t; }
    inline bool endsWith(const T &t) const { return !isEmpty() && last() == t; }
    QList<T> mid(int pos, int length = -1) const;

    T value(int i) const;
    T value(int i, const T &defaultValue) const;

    
    inline void push_back(const T &t) { append(t); }
    inline void push_front(const T &t) { prepend(t); }
    inline T& front() { return first(); }
    inline const T& front() const { return first(); }
    inline T& back() { return last(); }
    inline const T& back() const { return last(); }
    inline void pop_front() { removeFirst(); }
    inline void pop_back() { removeLast(); }
    inline bool empty() const { return isEmpty(); }
    typedef int size_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &reference;
    typedef const value_type &const_reference;
    
    typedef qptrdiff difference_type;

    
    QList<T> &operator+=(const QList<T> &l);
    inline QList<T> operator+(const QList<T> &l) const
    { QList n = *this; n += l; return n; }
    inline QList<T> &operator+=(const T &t)
    { append(t); return *this; }
    inline QList<T> &operator<< (const T &t)
    { append(t); return *this; }
    inline QList<T> &operator<<(const QList<T> &l)
    { *this += l; return *this; }

    static QList<T> fromVector(const QVector<T> &vector);
    QVector<T> toVector() const;


    __declspec(deprecated("Use QList<T>(set.begin(), set.end()) instead."))
    static QList<T> fromSet(const QSet<T> &set);
    __declspec(deprecated("Use QSet<T>(list.begin(), list.end()) instead."))
    QSet<T> toSet() const;

    __declspec(deprecated("Use QList<T>(list.begin(), list.end()) instead."))
    static inline QList<T> fromStdList(const std::list<T> &list)
    { return QList<T>(list.begin(), list.end()); }
    __declspec(deprecated("Use std::list<T>(list.begin(), list.end()) instead."))
    inline std::list<T> toStdList() const
    { return std::list<T>(begin(), end()); }
#line 422 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"

private:
    Node *detach_helper_grow(int i, int n);
    void detach_helper(int alloc);
    void detach_helper();
    void dealloc(QListData::Data *d);

    void node_construct(Node *n, const T &t);
    void node_destruct(Node *n);
    void node_copy(Node *from, Node *to, Node *src);
    void node_destruct(Node *from, Node *to);

    bool isValidIterator(const iterator &i) const noexcept
    {
        const std::less<const Node *> less = {};
        return !less(i.i, cbegin().i) && !less(cend().i, i.i);
    }

private:
    inline bool op_eq_impl(const QList &other, QListData::NotArrayCompatibleLayout) const;
    inline bool op_eq_impl(const QList &other, QListData::ArrayCompatibleLayout) const;
    inline bool contains_impl(const T &, QListData::NotArrayCompatibleLayout) const;
    inline bool contains_impl(const T &, QListData::ArrayCompatibleLayout) const;
    inline int count_impl(const T &, QListData::NotArrayCompatibleLayout) const;
    inline int count_impl(const T &, QListData::ArrayCompatibleLayout) const;
};


template <typename InputIterator,
          typename ValueType = typename std::iterator_traits<InputIterator>::value_type,
          QtPrivate::IfIsInputIterator<InputIterator> = true>
QList(InputIterator, InputIterator) -> QList<ValueType>;
#line 455 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"





#line 461 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"

template <typename T>
inline void QList<T>::node_construct(Node *n, const T &t)
{
    if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) n->v = new T(t);
    else if (QTypeInfo<T>::isComplex) new (n) T(t);





#line 473 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    
    else ::memcpy(n, static_cast<const void *>(&t), sizeof(T));
#line 476 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
}

template <typename T>
inline void QList<T>::node_destruct(Node *n)
{
    if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) delete reinterpret_cast<T*>(n->v);
    else if (QTypeInfo<T>::isComplex) reinterpret_cast<T*>(n)->~T();
}

template <typename T>
inline void QList<T>::node_copy(Node *from, Node *to, Node *src)
{
    Node *current = from;
    if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
        try {
            while(current != to) {
                current->v = new T(*reinterpret_cast<T*>(src->v));
                ++current;
                ++src;
            }
        } catch (...) {
            while (current-- != from)
                delete reinterpret_cast<T*>(current->v);
            throw;
        }

    } else if (QTypeInfo<T>::isComplex) {
        try {
            while(current != to) {
                new (current) T(*reinterpret_cast<T*>(src));
                ++current;
                ++src;
            }
        } catch (...) {
            while (current-- != from)
                (reinterpret_cast<T*>(current))->~T();
            throw;
        }
    } else {
        if (src != from && to - from > 0)
            memcpy(from, src, (to - from) * sizeof(Node));
    }
}

template <typename T>
inline void QList<T>::node_destruct(Node *from, Node *to)
{
    if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic)
        while(from != to) --to, delete reinterpret_cast<T*>(to->v);
    else if (QTypeInfo<T>::isComplex)
        while (from != to) --to, reinterpret_cast<T*>(to)->~T();
}

template <typename T>
inline QList<T> &QList<T>::operator=(const QList<T> &l)
{
    if (d != l.d) {
        QList<T> tmp(l);
        tmp.swap(*this);
    }
    return *this;
}
template <typename T>
inline typename QList<T>::iterator QList<T>::insert(iterator before, const T &t)
{
    static_cast<void>(false && (isValidIterator(before)));

    int iBefore = int(before.i - reinterpret_cast<Node *>(p.begin()));
    Node *n = nullptr;
    if (d->ref.isShared())
        n = detach_helper_grow(iBefore, 1);
    else
        n = reinterpret_cast<Node *>(p.insert(iBefore));
    try {
        node_construct(n, t);
    } catch (...) {
        p.remove(iBefore);
        throw;
    }
    return n;
}
template <typename T>
inline typename QList<T>::iterator QList<T>::erase(iterator it)
{
    static_cast<void>(false && (isValidIterator(it)));
    if (d->ref.isShared()) {
        int offset = int(it.i - reinterpret_cast<Node *>(p.begin()));
        it = begin(); 
        it += offset;
    }
    node_destruct(it.i);
    return reinterpret_cast<Node *>(p.erase(reinterpret_cast<void**>(it.i)));
}
template <typename T>
inline const T &QList<T>::at(int i) const
{ static_cast<void>(false && (i >= 0 && i < p.size()));
 return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline const T &QList<T>::operator[](int i) const
{ static_cast<void>(false && (i >= 0 && i < p.size()));
 return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline T &QList<T>::operator[](int i)
{ static_cast<void>(false && (i >= 0 && i < p.size()));
  detach(); return reinterpret_cast<Node *>(p.at(i))->t(); }
template <typename T>
inline void QList<T>::removeAt(int i)
{ if(i >= 0 && i < p.size()) { detach();
 node_destruct(reinterpret_cast<Node *>(p.at(i))); p.remove(i); } }
template <typename T>
inline T QList<T>::takeAt(int i)
{ static_cast<void>(false && (i >= 0 && i < p.size()));
 detach(); Node *n = reinterpret_cast<Node *>(p.at(i)); T t = std::move(n->t()); node_destruct(n);
 p.remove(i); return t; }
template <typename T>
inline T QList<T>::takeFirst()
{ T t = std::move(first()); removeFirst(); return t; }
template <typename T>
inline T QList<T>::takeLast()
{ T t = std::move(last()); removeLast(); return t; }

template <typename T>
inline void QList<T>::reserve(int alloc)
{
    if (d->alloc < alloc) {
        if (d->ref.isShared())
            detach_helper(alloc);
        else
            p.realloc(alloc);
    }
}

template <typename T>
inline void QList<T>::append(const T &t)
{
    if (d->ref.isShared()) {
        Node *n = detach_helper_grow(2147483647, 1);
        try {
            node_construct(n, t);
        } catch (...) {
            --d->end;
            throw;
        }
    } else {
        if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
            Node *n = reinterpret_cast<Node *>(p.append());
            try {
                node_construct(n, t);
            } catch (...) {
                --d->end;
                throw;
            }
        } else {
            Node *n, copy;
            node_construct(&copy, t); 
            try {
                n = reinterpret_cast<Node *>(p.append());;
            } catch (...) {
                node_destruct(&copy);
                throw;
            }
            *n = copy;
        }
    }
}

template <typename T>
inline void QList<T>::prepend(const T &t)
{
    if (d->ref.isShared()) {
        Node *n = detach_helper_grow(0, 1);
        try {
            node_construct(n, t);
        } catch (...) {
            ++d->begin;
            throw;
        }
    } else {
        if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
            Node *n = reinterpret_cast<Node *>(p.prepend());
            try {
                node_construct(n, t);
            } catch (...) {
                ++d->begin;
                throw;
            }
        } else {
            Node *n, copy;
            node_construct(&copy, t); 
            try {
                n = reinterpret_cast<Node *>(p.prepend());;
            } catch (...) {
                node_destruct(&copy);
                throw;
            }
            *n = copy;
        }
    }
}

template <typename T>
inline void QList<T>::insert(int i, const T &t)
{
    if (d->ref.isShared()) {
        Node *n = detach_helper_grow(i, 1);
        try {
            node_construct(n, t);
        } catch (...) {
            p.remove(i);
            throw;
        }
    } else {
        if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {
            Node *n = reinterpret_cast<Node *>(p.insert(i));
            try {
                node_construct(n, t);
            } catch (...) {
                p.remove(i);
                throw;
            }
        } else {
            Node *n, copy;
            node_construct(&copy, t); 
            try {
                n = reinterpret_cast<Node *>(p.insert(i));;
            } catch (...) {
                node_destruct(&copy);
                throw;
            }
            *n = copy;
        }
    }
}

template <typename T>
inline void QList<T>::replace(int i, const T &t)
{
    static_cast<void>(false && (i >= 0 && i < p.size()));
    detach();
    reinterpret_cast<Node *>(p.at(i))->t() = t;
}

template <typename T>
inline void QList<T>::swapItemsAt(int i, int j)
{
    static_cast<void>(false && (i >= 0 && i < p.size() && j >= 0 && j < p.size()));
#line 723 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    detach();
    qSwap(d->array[d->begin + i], d->array[d->begin + j]);
}

template <typename T>
inline void QList<T>::move(int from, int to)
{
    static_cast<void>(false && (from >= 0 && from < p.size() && to >= 0 && to < p.size()));
#line 732 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
    detach();
    p.move(from, to);
}

template<typename T>
inline QList<T> QList<T>::mid(int pos, int alength) const
{
    using namespace QtPrivate;
    switch (QContainerImplHelper::mid(size(), &pos, &alength)) {
    case QContainerImplHelper::Null:
    case QContainerImplHelper::Empty:
        return QList<T>();
    case QContainerImplHelper::Full:
        return *this;
    case QContainerImplHelper::Subset:
        break;
    }

    QList<T> cpy;
    if (alength <= 0)
        return cpy;
    cpy.reserve(alength);
    cpy.d->end = alength;
    try {
        cpy.node_copy(reinterpret_cast<Node *>(cpy.p.begin()),
                      reinterpret_cast<Node *>(cpy.p.end()),
                      reinterpret_cast<Node *>(p.begin() + pos));
    } catch (...) {
        
        cpy.d->end = 0;
        throw;
    }
    return cpy;
}

template<typename T>
inline T QList<T>::value(int i) const
{
    if (i < 0 || i >= p.size()) {
        return T();
    }
    return reinterpret_cast<Node *>(p.at(i))->t();
}

template<typename T>
inline T QList<T>::value(int i, const T& defaultValue) const
{
    return ((i < 0 || i >= p.size()) ? defaultValue : reinterpret_cast<Node *>(p.at(i))->t());
}

template <typename T>
inline typename QList<T>::Node *QList<T>::detach_helper_grow(int i, int c)
{
    Node *n = reinterpret_cast<Node *>(p.begin());
    QListData::Data *x = p.detach_grow(&i, c);
    try {
        node_copy(reinterpret_cast<Node *>(p.begin()),
                  reinterpret_cast<Node *>(p.begin() + i), n);
    } catch (...) {
        p.dispose();
        d = x;
        throw;
    }
    try {
        node_copy(reinterpret_cast<Node *>(p.begin() + i + c),
                  reinterpret_cast<Node *>(p.end()), n + i);
    } catch (...) {
        node_destruct(reinterpret_cast<Node *>(p.begin()),
                      reinterpret_cast<Node *>(p.begin() + i));
        p.dispose();
        d = x;
        throw;
    }

    if (!x->ref.deref())
        dealloc(x);

    return reinterpret_cast<Node *>(p.begin() + i);
}

template <typename T>
inline void QList<T>::detach_helper(int alloc)
{
    Node *n = reinterpret_cast<Node *>(p.begin());
    QListData::Data *x = p.detach(alloc);
    try {
        node_copy(reinterpret_cast<Node *>(p.begin()), reinterpret_cast<Node *>(p.end()), n);
    } catch (...) {
        p.dispose();
        d = x;
        throw;
    }

    if (!x->ref.deref())
        dealloc(x);
}

template <typename T>
inline void QList<T>::detach_helper()
{
    detach_helper(d->alloc);
}

template <typename T>
inline QList<T>::QList(const QList<T> &l)
    : QListSpecialMethods<T>(l), d(l.d)
{
    if (!d->ref.ref()) {
        p.detach(d->alloc);

        try {
            node_copy(reinterpret_cast<Node *>(p.begin()),
                    reinterpret_cast<Node *>(p.end()),
                    reinterpret_cast<Node *>(l.p.begin()));
        } catch (...) {
            QListData::dispose(d);
            throw;
        }
    }
}

template <typename T>
inline QList<T>::~QList()
{
    if (!d->ref.deref())
        dealloc(d);
}

template <typename T>
template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator>>
QList<T>::QList(InputIterator first, InputIterator last)
    : QList()
{
    QtPrivate::reserveIfForwardIterator(this, first, last);
    std::copy(first, last, std::back_inserter(*this));
}

template <typename T>
inline bool QList<T>::operator==(const QList<T> &l) const
{
    if (d == l.d)
        return true;
    if (p.size() != l.p.size())
        return false;
    return this->op_eq_impl(l, MemoryLayout());
}

template <typename T>
inline bool QList<T>::op_eq_impl(const QList &l, QListData::NotArrayCompatibleLayout) const
{
    Node *i = reinterpret_cast<Node *>(p.begin());
    Node *e = reinterpret_cast<Node *>(p.end());
    Node *li = reinterpret_cast<Node *>(l.p.begin());
    for (; i != e; ++i, ++li) {
        if (!(i->t() == li->t()))
            return false;
    }
    return true;
}

template <typename T>
inline bool QList<T>::op_eq_impl(const QList &l, QListData::ArrayCompatibleLayout) const
{
    const T *lb = reinterpret_cast<const T*>(l.p.begin());
    const T *b  = reinterpret_cast<const T*>(p.begin());
    const T *e  = reinterpret_cast<const T*>(p.end());
    return std::equal(b, e, stdext::make_checked_array_iterator(lb, size_t(l.p.size())));
}

template <typename T>
inline void QList<T>::dealloc(QListData::Data *data)
{
    node_destruct(reinterpret_cast<Node *>(data->array + data->begin),
                  reinterpret_cast<Node *>(data->array + data->end));
    QListData::dispose(data);
}


template <typename T>
inline void QList<T>::clear()
{
    *this = QList<T>();
}

template <typename T>
inline int QList<T>::removeAll(const T &_t)
{
    int index = indexOf(_t);
    if (index == -1)
        return 0;

    const T t = _t;
    detach();

    Node *i = reinterpret_cast<Node *>(p.at(index));
    Node *e = reinterpret_cast<Node *>(p.end());
    Node *n = i;
    node_destruct(i);
    while (++i != e) {
        if (i->t() == t)
            node_destruct(i);
        else
            *n++ = *i;
    }

    int removedCount = int(e - n);
    d->end -= removedCount;
    return removedCount;
}

template <typename T>
inline bool QList<T>::removeOne(const T &_t)
{
    int index = indexOf(_t);
    if (index != -1) {
        removeAt(index);
        return true;
    }
    return false;
}

template <typename T>
inline typename QList<T>::iterator QList<T>::erase(typename QList<T>::iterator afirst,
                                                                 typename QList<T>::iterator alast)
{
    static_cast<void>(false && (isValidIterator(afirst)));
    static_cast<void>(false && (isValidIterator(alast)));

    if (d->ref.isShared()) {
        
        int offsetfirst = int(afirst.i - reinterpret_cast<Node *>(p.begin()));
        int offsetlast = int(alast.i - reinterpret_cast<Node *>(p.begin()));
        afirst = begin(); 
        alast = afirst;
        afirst += offsetfirst;
        alast += offsetlast;
    }

    for (Node *n = afirst.i; n < alast.i; ++n)
        node_destruct(n);
    int idx = afirst - begin();
    p.remove(idx, alast - afirst);
    return begin() + idx;
}

template <typename T>
inline QList<T> &QList<T>::operator+=(const QList<T> &l)
{
    if (!l.isEmpty()) {
        if (d == &QListData::shared_null) {
            *this = l;
        } else {
            Node *n = (d->ref.isShared())
                      ? detach_helper_grow(2147483647, l.size())
                      : reinterpret_cast<Node *>(p.append(l.p));
            try {
                node_copy(n, reinterpret_cast<Node *>(p.end()),
                          reinterpret_cast<Node *>(l.p.begin()));
            } catch (...) {
                
                d->end -= int(reinterpret_cast<Node *>(p.end()) - n);
                throw;
            }
        }
    }
    return *this;
}

template <typename T>
inline void QList<T>::append(const QList<T> &t)
{
    *this += t;
}

template <typename T>
inline int QList<T>::indexOf(const T &t, int from) const
{
    return QtPrivate::indexOf<T, T>(*this, t, from);
}

namespace QtPrivate
{
template <typename T, typename U>
int indexOf(const QList<T> &list, const U &u, int from)
{
    typedef typename QList<T>::Node Node;

    if (from < 0)
        from = qMax(from + list.p.size(), 0);
    if (from < list.p.size()) {
        Node *n = reinterpret_cast<Node *>(list.p.at(from -1));
        Node *e = reinterpret_cast<Node *>(list.p.end());
        while (++n != e)
            if (n->t() == u)
                return int(n - reinterpret_cast<Node *>(list.p.begin()));
    }
    return -1;
}
}

template <typename T>
inline int QList<T>::lastIndexOf(const T &t, int from) const
{
    return QtPrivate::lastIndexOf<T, T>(*this, t, from);
}

namespace QtPrivate
{
template <typename T, typename U>
int lastIndexOf(const QList<T> &list, const U &u, int from)
{
    typedef typename QList<T>::Node Node;

    if (from < 0)
        from += list.p.size();
    else if (from >= list.p.size())
        from = list.p.size()-1;
    if (from >= 0) {
        Node *b = reinterpret_cast<Node *>(list.p.begin());
        Node *n = reinterpret_cast<Node *>(list.p.at(from + 1));
        while (n-- != b) {
            if (n->t() == u)
                return int(n - b);
        }
    }
    return -1;
}
}

template <typename T>
inline bool QList<T>::contains(const T &t) const
{
    return contains_impl(t, MemoryLayout());
}

template <typename T>
inline bool QList<T>::contains_impl(const T &t, QListData::NotArrayCompatibleLayout) const
{
    Node *e = reinterpret_cast<Node *>(p.end());
    Node *i = reinterpret_cast<Node *>(p.begin());
    for (; i != e; ++i)
        if (i->t() == t)
            return true;
    return false;
}

template <typename T>
inline bool QList<T>::contains_impl(const T &t, QListData::ArrayCompatibleLayout) const
{
    const T *b = reinterpret_cast<const T*>(p.begin());
    const T *e = reinterpret_cast<const T*>(p.end());
    return std::find(b, e, t) != e;
}

template <typename T>
inline int QList<T>::count(const T &t) const
{
    return this->count_impl(t, MemoryLayout());
}

template <typename T>
inline int QList<T>::count_impl(const T &t, QListData::NotArrayCompatibleLayout) const
{
    int c = 0;
    Node *e = reinterpret_cast<Node *>(p.end());
    Node *i = reinterpret_cast<Node *>(p.begin());
    for (; i != e; ++i)
        if (i->t() == t)
            ++c;
    return c;
}

template <typename T>
inline int QList<T>::count_impl(const T &t, QListData::ArrayCompatibleLayout) const
{
    return int(std::count(reinterpret_cast<const T*>(p.begin()),
                          reinterpret_cast<const T*>(p.end()),
                          t));
}

template <typename T>
inline QVector<T> QList<T>::toVector() const
{
    return QVector<T>(begin(), end());
}

template <typename T>
QList<T> QList<T>::fromVector(const QVector<T> &vector)
{
    return vector.toList();
}

template <typename T>
inline QList<T> QVector<T>::toList() const
{
    return QList<T>(begin(), end());
}

template <typename T>
QVector<T> QVector<T>::fromList(const QList<T> &list)
{
    return list.toVector();
}

template <class T> class QListIterator { typedef typename QList<T>::const_iterator const_iterator; QList<T> c; const_iterator i; public: inline QListIterator(const QList<T> &container) : c(container), i(c.constBegin()) {} inline QListIterator &operator=(const QList<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };
template <class T> class QMutableListIterator { typedef typename QList<T>::iterator iterator; typedef typename QList<T>::const_iterator const_iterator; QList<T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: inline QMutableListIterator(QList<T> &container) : c(&container) { i = c->begin(); n = c->end(); } inline QMutableListIterator &operator=(QList<T> &container) { c = &container; i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = i; } inline bool hasNext() const { return c->constEnd() != const_iterator(i); } inline T &next() { n = i++; return *n; } inline T &peekNext() const { return *i; } inline bool hasPrevious() const { return c->constBegin() != const_iterator(i); } inline T &previous() { n = --i; return *n; } inline T &peekPrevious() const { iterator p = i; return *--p; } inline void remove() { if (c->constEnd() != const_iterator(n)) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) const { if (c->constEnd() != const_iterator(n)) *n = t; } inline T &value() { static_cast<void>(false && (item_exists())); return *n; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline void insert(const T &t) { n = i = c->insert(i, t); ++i; } inline bool findNext(const T &t) { while (c->constEnd() != const_iterator(n = i)) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (c->constBegin() != const_iterator(i)) if (*(n = --i) == t) return true; n = c->end(); return false; } };

template <typename T>
uint qHash(const QList<T> &key, uint seed = 0)
    noexcept(noexcept(qHashRange(key.cbegin(), key.cend(), seed)))
{
    return qHashRange(key.cbegin(), key.cend(), seed);
}

template <typename T>
bool operator<(const QList<T> &lhs, const QList<T> &rhs)
    noexcept(noexcept(std::lexicographical_compare(lhs.begin(), lhs.end(),
                                                               rhs.begin(), rhs.end())))
{
    return std::lexicographical_compare(lhs.begin(), lhs.end(),
                                        rhs.begin(), rhs.end());
}

template <typename T>
inline bool operator>(const QList<T> &lhs, const QList<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return rhs < lhs;
}

template <typename T>
inline bool operator<=(const QList<T> &lhs, const QList<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs > rhs);
}

template <typename T>
inline bool operator>=(const QList<T> &lhs, const QList<T> &rhs)
    noexcept(noexcept(lhs < rhs))
{
    return !(lhs < rhs);
}



#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"









































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 43 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"









typedef QListIterator<QByteArray> QByteArrayListIterator;
typedef QMutableListIterator<QByteArray> QMutableByteArrayListIterator;
#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"


typedef QList<QByteArray> QByteArrayList;

namespace QtPrivate {
    QByteArray __declspec(dllimport) QByteArrayList_join(const QByteArrayList *that, const char *separator, int separatorLength);
    int __declspec(dllimport) QByteArrayList_indexOf(const QByteArrayList *that, const char *needle, int from);
}
#line 64 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"




template <> struct QListSpecialMethods<QByteArray>
#line 70 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"
{

protected:
    ~QListSpecialMethods() = default;
#line 75 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"
public:
    inline QByteArray join() const
    { return QtPrivate::QByteArrayList_join(self(), nullptr, 0); }
    inline QByteArray join(const QByteArray &sep) const
    { return QtPrivate::QByteArrayList_join(self(), sep.constData(), sep.size()); }
    inline QByteArray join(char sep) const
    { return QtPrivate::QByteArrayList_join(self(), &sep, 1); }

    inline int indexOf(const char *needle, int from = 0) const
    { return QtPrivate::QByteArrayList_indexOf(self(), needle, from); }

private:
    typedef QList<QByteArray> Self;
    Self *self() { return static_cast<Self *>(this); }
    const Self *self() const { return static_cast<const Self *>(this); }
};



#line 95 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"
#line 1179 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"








































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"





#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
























































































#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"



















































struct QRegExpPrivate;
class QStringList;
class QRegExp;

__declspec(dllimport) uint qHash(const QRegExp &key, uint seed = 0) noexcept;

class __declspec(dllimport) QRegExp
{
public:
    enum PatternSyntax {
        RegExp,
        Wildcard,
        FixedString,
        RegExp2,
        WildcardUnix,
        W3CXmlSchema11 };
    enum CaretMode { CaretAtZero, CaretAtOffset, CaretWontMatch };

    QRegExp();
    explicit QRegExp(const QString &pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive,
                     PatternSyntax syntax = RegExp);
    QRegExp(const QRegExp &rx);
    ~QRegExp();
    QRegExp &operator=(const QRegExp &rx);
    QRegExp &operator=(QRegExp &&other) noexcept { swap(other); return *this; }
    void swap(QRegExp &other) noexcept { qSwap(priv, other.priv); }

    bool operator==(const QRegExp &rx) const;
    inline bool operator!=(const QRegExp &rx) const { return !operator==(rx); }

    bool isEmpty() const;
    bool isValid() const;
    QString pattern() const;
    void setPattern(const QString &pattern);
    Qt::CaseSensitivity caseSensitivity() const;
    void setCaseSensitivity(Qt::CaseSensitivity cs);
    PatternSyntax patternSyntax() const;
    void setPatternSyntax(PatternSyntax syntax);

    bool isMinimal() const;
    void setMinimal(bool minimal);

    bool exactMatch(const QString &str) const;

    int indexIn(const QString &str, int offset = 0, CaretMode caretMode = CaretAtZero) const;
    int lastIndexIn(const QString &str, int offset = -1, CaretMode caretMode = CaretAtZero) const;
    int matchedLength() const;

    int captureCount() const;
    QStringList capturedTexts() const;
    QStringList capturedTexts();
    QString cap(int nth = 0) const;
    QString cap(int nth = 0);
    int pos(int nth = 0) const;
    int pos(int nth = 0);
    QString errorString() const;
    QString errorString();
#line 110 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"

    static QString escape(const QString &str);

    friend __declspec(dllimport) uint qHash(const QRegExp &key, uint seed) noexcept;

private:
    QRegExpPrivate *priv;
};

template<> class QTypeInfo<QRegExp > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QRegExp>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QRegExp>(), isLarge = (sizeof(QRegExp)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QRegExp >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QRegExp) }; static inline const char *name() { return "QRegExp"; } };


__declspec(dllimport) QDataStream &operator<<(QDataStream &out, const QRegExp &regExp);
__declspec(dllimport) QDataStream &operator>>(QDataStream &in, QRegExp &regExp);
#line 125 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"


__declspec(dllimport) QDebug operator<<(QDebug, const QRegExp &);
#line 129 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"



#line 133 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"

#line 135 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qregexp.h"
#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringmatcher.h"

















































class QStringMatcherPrivate;

class __declspec(dllimport) QStringMatcher
{
public:
    QStringMatcher();
    explicit QStringMatcher(const QString &pattern,
                   Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QStringMatcher(const QChar *uc, int len,
                   Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QStringMatcher(QStringView pattern,
                   Qt::CaseSensitivity cs = Qt::CaseSensitive);
    QStringMatcher(const QStringMatcher &other);
    ~QStringMatcher();

    QStringMatcher &operator=(const QStringMatcher &other);

    void setPattern(const QString &pattern);
    void setCaseSensitivity(Qt::CaseSensitivity cs);

    int indexIn(const QString &str, int from = 0) const;
    int indexIn(const QChar *str, int length, int from = 0) const;
    qsizetype indexIn(QStringView str, qsizetype from = 0) const;
    QString pattern() const;
    inline Qt::CaseSensitivity caseSensitivity() const { return q_cs; }

private:
    QStringMatcherPrivate *d_ptr;
    QString q_pattern;
    Qt::CaseSensitivity q_cs;
    struct Data {
        uchar q_skiptable[256];
        const QChar *uc;
        int len;
    };
    union {
        uint q_data[256];
        Data p;
    };
};



#line 94 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringmatcher.h"
#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"



class QRegExp;
class QRegularExpression;


typedef QListIterator<QString> QStringListIterator;
typedef QMutableListIterator<QString> QMutableStringListIterator;
#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

class QStringList;




template <> struct QListSpecialMethods<QString>
#line 69 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
{

protected:
    ~QListSpecialMethods() = default;
#line 74 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
public:
    inline void sort(Qt::CaseSensitivity cs = Qt::CaseSensitive);
    inline int removeDuplicates();


    inline QString join(const QString &sep) const;
#line 81 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
    inline QString join(QStringView sep) const;
    inline QString join(QLatin1String sep) const;
    inline QString join(QChar sep) const;

    inline QStringList filter(QStringView str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline QStringList &replaceInStrings(QStringView before, QStringView after, Qt::CaseSensitivity cs = Qt::CaseSensitive);

    inline QStringList filter(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline QStringList &replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    inline QStringList &replaceInStrings(const QString &before, QStringView after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
    inline QStringList &replaceInStrings(QStringView before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
#line 93 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    inline QStringList filter(const QRegExp &rx) const;
    inline QStringList &replaceInStrings(const QRegExp &rx, const QString &after);
#line 98 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    inline QStringList filter(const QRegularExpression &re) const;
    inline QStringList &replaceInStrings(const QRegularExpression &re, const QString &after);
#line 103 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


private:
    inline QStringList *self();
    inline const QStringList *self() const;
};


class QStringList : public QList<QString>
{
#line 114 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
public:
    inline QStringList() noexcept { }
    inline explicit QStringList(const QString &i) { append(i); }
    inline QStringList(const QList<QString> &l) : QList<QString>(l) { }
    inline QStringList(QList<QString> &&l) noexcept : QList<QString>(std::move(l)) { }
    inline QStringList(std::initializer_list<QString> args) : QList<QString>(args) { }
    template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator> = true>
    inline QStringList(InputIterator first, InputIterator last)
        : QList<QString>(first, last) { }

    QStringList &operator=(const QList<QString> &other)
    { QList<QString>::operator=(other); return *this; }
    QStringList &operator=(QList<QString> &&other) noexcept
    { QList<QString>::operator=(std::move(other)); return *this; }


    inline bool contains(const QString &str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
#line 132 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
    inline bool contains(QLatin1String str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
    inline bool contains(QStringView str, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;

    inline QStringList operator+(const QStringList &other) const
    { QStringList n = *this; n += other; return n; }
    inline QStringList &operator<<(const QString &str)
    { append(str); return *this; }
    inline QStringList &operator<<(const QStringList &l)
    { *this += l; return *this; }
    inline QStringList &operator<<(const QList<QString> &l)
    { *this += l; return *this; }

    inline int indexOf(QStringView str, int from = 0) const;
    inline int indexOf(QLatin1String str, int from = 0) const;

    inline int lastIndexOf(QStringView str, int from = -1) const;
    inline int lastIndexOf(QLatin1String str, int from = -1) const;


    inline int indexOf(const QRegExp &rx, int from = 0) const;
    inline int lastIndexOf(const QRegExp &rx, int from = -1) const;
    inline int indexOf(QRegExp &rx, int from = 0) const;
    inline int lastIndexOf(QRegExp &rx, int from = -1) const;
#line 156 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    inline int indexOf(const QRegularExpression &re, int from = 0) const;
    inline int lastIndexOf(const QRegularExpression &re, int from = -1) const;
#line 161 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

    using QList<QString>::indexOf;
    using QList<QString>::lastIndexOf;
};

template<> class QTypeInfo<QStringList > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QStringList>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QStringList>(), isLarge = (sizeof(QStringList)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QStringList >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QStringList) }; static inline const char *name() { return "QStringList"; } };


inline QStringList *QListSpecialMethods<QString>::self()
{ return static_cast<QStringList *>(this); }
inline const QStringList *QListSpecialMethods<QString>::self() const
{ return static_cast<const QStringList *>(this); }

namespace QtPrivate {
    void __declspec(dllimport) QStringList_sort(QStringList *that, Qt::CaseSensitivity cs);
    int __declspec(dllimport) QStringList_removeDuplicates(QStringList *that);
    QString __declspec(dllimport) QStringList_join(const QStringList *that, QStringView sep);
    QString __declspec(dllimport) QStringList_join(const QStringList *that, const QChar *sep, int seplen);
    __declspec(dllimport) QString QStringList_join(const QStringList &list, QLatin1String sep);
    QStringList __declspec(dllimport) QStringList_filter(const QStringList *that, QStringView str,
                                               Qt::CaseSensitivity cs);

    QStringList __declspec(dllimport) QStringList_filter(const QStringList *that, const QString &str,
                                               Qt::CaseSensitivity cs);
#line 186 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    bool __declspec(dllimport) QStringList_contains(const QStringList *that, const QString &str, Qt::CaseSensitivity cs);
#line 190 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
    bool __declspec(dllimport) QStringList_contains(const QStringList *that, QStringView str, Qt::CaseSensitivity cs);
    bool __declspec(dllimport) QStringList_contains(const QStringList *that, QLatin1String str, Qt::CaseSensitivity cs);
    void __declspec(dllimport) QStringList_replaceInStrings(QStringList *that, QStringView before, QStringView after,
                                      Qt::CaseSensitivity cs);

    void __declspec(dllimport) QStringList_replaceInStrings(QStringList *that, const QString &before, const QString &after,
                                      Qt::CaseSensitivity cs);
#line 198 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    void __declspec(dllimport) QStringList_replaceInStrings(QStringList *that, const QRegExp &rx, const QString &after);
    QStringList __declspec(dllimport) QStringList_filter(const QStringList *that, const QRegExp &re);
    int __declspec(dllimport) QStringList_indexOf(const QStringList *that, const QRegExp &rx, int from);
    int __declspec(dllimport) QStringList_lastIndexOf(const QStringList *that, const QRegExp &rx, int from);
    int __declspec(dllimport) QStringList_indexOf(const QStringList *that, QRegExp &rx, int from);
    int __declspec(dllimport) QStringList_lastIndexOf(const QStringList *that, QRegExp &rx, int from);
#line 207 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


    void __declspec(dllimport) QStringList_replaceInStrings(QStringList *that, const QRegularExpression &rx, const QString &after);
    QStringList __declspec(dllimport) QStringList_filter(const QStringList *that, const QRegularExpression &re);
    int __declspec(dllimport) QStringList_indexOf(const QStringList *that, const QRegularExpression &re, int from);
    int __declspec(dllimport) QStringList_lastIndexOf(const QStringList *that, const QRegularExpression &re, int from);
#line 214 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
}

inline void QListSpecialMethods<QString>::sort(Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_sort(self(), cs);
}

inline int QListSpecialMethods<QString>::removeDuplicates()
{
    return QtPrivate::QStringList_removeDuplicates(self());
}


inline QString QListSpecialMethods<QString>::join(const QString &sep) const
{
    return QtPrivate::QStringList_join(self(), sep.constData(), sep.length());
}
#line 232 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

inline QString QListSpecialMethods<QString>::join(QStringView sep) const
{
    return QtPrivate::QStringList_join(self(), sep);
}

QString QListSpecialMethods<QString>::join(QLatin1String sep) const
{
    return QtPrivate::QStringList_join(*self(), sep);
}

inline QString QListSpecialMethods<QString>::join(QChar sep) const
{
    return QtPrivate::QStringList_join(self(), &sep, 1);
}

inline QStringList QListSpecialMethods<QString>::filter(QStringView str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_filter(self(), str, cs);
}


inline QStringList QListSpecialMethods<QString>::filter(const QString &str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_filter(self(), str, cs);
}
#line 259 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


inline bool QStringList::contains(const QString &str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_contains(this, str, cs);
}
#line 266 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

inline bool QStringList::contains(QLatin1String str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_contains(this, str, cs);
}

inline bool QStringList::contains(QStringView str, Qt::CaseSensitivity cs) const
{
    return QtPrivate::QStringList_contains(this, str, cs);
}

inline QStringList &QListSpecialMethods<QString>::replaceInStrings(QStringView before, QStringView after, Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_replaceInStrings(self(), before, after, cs);
    return *self();
}


inline QStringList &QListSpecialMethods<QString>::replaceInStrings(const QString &before, const QString &after, Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_replaceInStrings(self(), before, after, cs);
    return *self();
}

inline QStringList &QListSpecialMethods<QString>::replaceInStrings(QStringView before, const QString &after, Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_replaceInStrings(self(), before, qToStringViewIgnoringNull(after), cs);
    return *self();
}

inline QStringList &QListSpecialMethods<QString>::replaceInStrings(const QString &before, QStringView after, Qt::CaseSensitivity cs)
{
    QtPrivate::QStringList_replaceInStrings(self(), QStringView(before), after, cs);
    return *self();
}
#line 302 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

inline QStringList operator+(const QList<QString> &one, const QStringList &other)
{
    QStringList n = one;
    n += other;
    return n;
}

inline int QStringList::indexOf(QStringView string, int from) const
{
    return QtPrivate::indexOf<QString, QStringView>(*this, string, from);
}

inline int QStringList::indexOf(QLatin1String string, int from) const
{
    return QtPrivate::indexOf<QString, QLatin1String>(*this, string, from);
}

inline int QStringList::lastIndexOf(QStringView string, int from) const
{
    return QtPrivate::lastIndexOf<QString, QStringView>(*this, string, from);
}

inline int QStringList::lastIndexOf(QLatin1String string, int from) const
{
    return QtPrivate::lastIndexOf<QString, QLatin1String>(*this, string, from);
}


inline QStringList &QListSpecialMethods<QString>::replaceInStrings(const QRegExp &rx, const QString &after)
{
    QtPrivate::QStringList_replaceInStrings(self(), rx, after);
    return *self();
}

inline QStringList QListSpecialMethods<QString>::filter(const QRegExp &rx) const
{
    return QtPrivate::QStringList_filter(self(), rx);
}

inline int QStringList::indexOf(const QRegExp &rx, int from) const
{
    return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegExp &rx, int from) const
{
    return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}

inline int QStringList::indexOf(QRegExp &rx, int from) const
{
    return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(QRegExp &rx, int from) const
{
    return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}
#line 362 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"


inline QStringList &QListSpecialMethods<QString>::replaceInStrings(const QRegularExpression &rx, const QString &after)
{
    QtPrivate::QStringList_replaceInStrings(self(), rx, after);
    return *self();
}

inline QStringList QListSpecialMethods<QString>::filter(const QRegularExpression &rx) const
{
    return QtPrivate::QStringList_filter(self(), rx);
}

inline int QStringList::indexOf(const QRegularExpression &rx, int from) const
{
    return QtPrivate::QStringList_indexOf(this, rx, from);
}

inline int QStringList::lastIndexOf(const QRegularExpression &rx, int from) const
{
    return QtPrivate::QStringList_lastIndexOf(this, rx, from);
}
#line 385 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
#line 386 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"





QStringList QString::split(const QString &sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return split(sep, _sb(behavior), cs); }
QStringList QString::split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const
{ return split(sep, _sb(behavior), cs); }

QStringList QString::split(const QRegExp &sep, Qt::SplitBehavior behavior) const
{ return split(sep, _sb(behavior)); }
#line 399 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"

QStringList QString::split(const QRegularExpression &sep, Qt::SplitBehavior behavior) const
{ return split(sep, _sb(behavior)); }
#line 403 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"



#line 407 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"
#line 1180 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"


#pragma warning( pop )
#line 1184 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"

#line 1186 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlist.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
























































































#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"





#pragma warning( push )
#pragma warning( disable : 4311 ) 
#pragma warning( disable : 4127 ) 
#line 59 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"



struct __declspec(dllimport) QHashData
{
    struct Node {
        Node *next;
        uint h;
    };

    Node *fakeNext;
    Node **buckets;
    QtPrivate::RefCount ref;
    int size;
    int nodeSize;
    short userNumBits;
    short numBits;
    int numBuckets;
    uint seed;
    uint sharable : 1;
    uint strictAlignment : 1;
    uint reserved : 30;

    void *allocateNode(int nodeAlign);
    void freeNode(void *node);
    QHashData *detach_helper(void (*node_duplicate)(Node *, void *), void (*node_delete)(Node *),
                             int nodeSize, int nodeAlign);
    bool willGrow();
    void hasShrunk();
    void rehash(int hint);
    void free_helper(void (*node_delete)(Node *));
    Node *firstNode();




    static Node *nextNode(Node *node);
    static Node *previousNode(Node *node);

    static const QHashData shared_null;
};

inline bool QHashData::willGrow()
{
    if (size >= numBuckets) {
        rehash(numBits + 1);
        return true;
    } else {
        return false;
    }
}

inline void QHashData::hasShrunk()
{
    if (size <= (numBuckets >> 3) && numBits > userNumBits) {
        try {
            rehash(qMax(int(numBits) - 2, int(userNumBits)));
        } catch (const std::bad_alloc &) {
            
        }
    }
}

inline QHashData::Node *QHashData::firstNode()
{
    Node *e = reinterpret_cast<Node *>(this);
    Node **bucket = buckets;
    int n = numBuckets;
    while (n--) {
        if (*bucket != e)
            return *bucket;
        ++bucket;
    }
    return e;
}

struct QHashDummyValue
{
};

constexpr bool operator==(const QHashDummyValue &, const QHashDummyValue &) noexcept
{
    return true;
}

template<> class QTypeInfo<QHashDummyValue > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QHashDummyValue>(), isStatic = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QHashDummyValue>(), isLarge = (sizeof(QHashDummyValue)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QHashDummyValue >::value, isDummy = (((Q_MOVABLE_TYPE | Q_DUMMY_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QHashDummyValue) }; static inline const char *name() { return "QHashDummyValue"; } };

template <class Key, class T>
struct QHashNode
{
    QHashNode *next;
    const uint h;
    const Key key;
    T value;

    inline QHashNode(const Key &key0, const T &value0, uint hash, QHashNode *n)
        : next(n), h(hash), key(key0), value(value0) {}
    inline bool same_key(uint h0, const Key &key0) const { return h0 == h && key0 == key; }

private:
    QHashNode(const QHashNode &) = delete; QHashNode &operator=(const QHashNode &) = delete;
};


template <class Key>
struct QHashNode<Key, QHashDummyValue>
{
    union {
        QHashNode *next;
        QHashDummyValue value;
    };
    const uint h;
    const Key key;

    inline QHashNode(const Key &key0, const QHashDummyValue &, uint hash, QHashNode *n)
        : next(n), h(hash), key(key0) {}
    inline bool same_key(uint h0, const Key &key0) const { return h0 == h && key0 == key; }

private:
    QHashNode(const QHashNode &) = delete; QHashNode &operator=(const QHashNode &) = delete;
};










































#line 223 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"

template <class Key, class T>
class QHash
{
    typedef QHashNode<Key, T> Node;

    union {
        QHashData *d;
        QHashNode<Key, T> *e;
    };

    static inline Node *concrete(QHashData::Node *node) {
        return reinterpret_cast<Node *>(node);
    }

    static inline int alignOfNode() { return qMax<int>(sizeof(void*), alignof(Node)); }

public:
    inline QHash() noexcept : d(const_cast<QHashData *>(&QHashData::shared_null)) { }
    inline QHash(std::initializer_list<std::pair<Key,T> > list)
        : d(const_cast<QHashData *>(&QHashData::shared_null))
    {
        reserve(int(list.size()));
        for (typename std::initializer_list<std::pair<Key,T> >::const_iterator it = list.begin(); it != list.end(); ++it)
            insert(it->first, it->second);
    }
    QHash(const QHash &other) : d(other.d) { d->ref.ref(); if (!d->sharable) detach(); }
    ~QHash() { if (!d->ref.deref()) freeData(d); }

    QHash &operator=(const QHash &other);
    QHash(QHash &&other) noexcept : d(other.d) { other.d = const_cast<QHashData *>(&QHashData::shared_null); }
    QHash &operator=(QHash &&other) noexcept
    { QHash moved(std::move(other)); swap(moved); return *this; }




    template <typename InputIterator, QtPrivate::IfAssociativeIteratorHasKeyAndValue<InputIterator> = true>
    QHash(InputIterator f, InputIterator l)
        : QHash()
    {
        QtPrivate::reserveIfForwardIterator(this, f, l);
        for (; f != l; ++f)
            insert(f.key(), f.value());
    }

    template <typename InputIterator, QtPrivate::IfAssociativeIteratorHasFirstAndSecond<InputIterator> = true>
    QHash(InputIterator f, InputIterator l)
        : QHash()
    {
        QtPrivate::reserveIfForwardIterator(this, f, l);
        for (; f != l; ++f)
            insert(f->first, f->second);
    }
#line 278 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
    void swap(QHash &other) noexcept { qSwap(d, other.d); }

    bool operator==(const QHash &other) const;
    bool operator!=(const QHash &other) const { return !(*this == other); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    inline int capacity() const { return d->numBuckets; }
    void reserve(int size);
    inline void squeeze() { reserve(1); }

    inline void detach() { if (d->ref.isShared()) detach_helper(); }
    inline bool isDetached() const { return !d->ref.isShared(); }

    inline void setSharable(bool sharable) { if (!sharable) detach(); if (d != &QHashData::shared_null) d->sharable = sharable; }
#line 296 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
    bool isSharedWith(const QHash &other) const { return d == other.d; }

    void clear();

    int remove(const Key &key);
    T take(const Key &key);

    bool contains(const Key &key) const;
    const Key key(const T &value) const;
    const Key key(const T &value, const Key &defaultKey) const;
    const T value(const Key &key) const;
    const T value(const Key &key, const T &defaultValue) const;
    T &operator[](const Key &key);
    const T operator[](const Key &key) const;

    QList<Key> uniqueKeys() const;
    QList<Key> keys() const;
    QList<Key> keys(const T &value) const;
    QList<T> values() const;
    QList<T> values(const Key &key) const;
    int count(const Key &key) const;

    class const_iterator;

    class iterator
    {
        friend class const_iterator;
        friend class QHash<Key, T>;
        friend class QSet<Key>;
        QHashData::Node *i;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &reference;

        inline iterator() : i(nullptr) { }
        explicit inline iterator(void *node) : i(reinterpret_cast<QHashData::Node *>(node)) { }

        inline const Key &key() const { return concrete(i)->key; }
        inline T &value() const { return concrete(i)->value; }
        inline T &operator*() const { return concrete(i)->value; }
        inline T *operator->() const { return &concrete(i)->value; }
        inline bool operator==(const iterator &o) const { return i == o.i; }
        inline bool operator!=(const iterator &o) const { return i != o.i; }

        inline iterator &operator++() {
            i = QHashData::nextNode(i);
            return *this;
        }
        inline iterator operator++(int) {
            iterator r = *this;
            i = QHashData::nextNode(i);
            return r;
        }
        inline iterator &operator--() {
            i = QHashData::previousNode(i);
            return *this;
        }
        inline iterator operator--(int) {
            iterator r = *this;
            i = QHashData::previousNode(i);
            return r;
        }
        inline iterator operator+(int j) const
        { iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline iterator operator-(int j) const { return operator+(-j); }
        inline iterator &operator+=(int j) { return *this = *this + j; }
        inline iterator &operator-=(int j) { return *this = *this - j; }
        friend inline iterator operator+(int j, iterator k) { return k + j; }


    public:
        inline bool operator==(const const_iterator &o) const
            { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const
            { return i != o.i; }
#line 376 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
    };
    friend class iterator;

    class const_iterator
    {
        friend class iterator;
        friend class QHash<Key, T>;
        friend class QSet<Key>;
        QHashData::Node *i;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &reference;

        constexpr inline const_iterator() : i(nullptr) { }
        explicit inline const_iterator(void *node)
            : i(reinterpret_cast<QHashData::Node *>(node)) { }



        inline const_iterator(const iterator &o)
#line 401 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
        { i = o.i; }

        inline const Key &key() const { return concrete(i)->key; }
        inline const T &value() const { return concrete(i)->value; }
        inline const T &operator*() const { return concrete(i)->value; }
        inline const T *operator->() const { return &concrete(i)->value; }
        constexpr inline bool operator==(const const_iterator &o) const { return i == o.i; }
        constexpr inline bool operator!=(const const_iterator &o) const { return i != o.i; }

        inline const_iterator &operator++() {
            i = QHashData::nextNode(i);
            return *this;
        }
        inline const_iterator operator++(int) {
            const_iterator r = *this;
            i = QHashData::nextNode(i);
            return r;
        }
        inline const_iterator &operator--() {
            i = QHashData::previousNode(i);
            return *this;
        }
        inline const_iterator operator--(int) {
            const_iterator r = *this;
            i = QHashData::previousNode(i);
            return r;
        }
        inline const_iterator operator+(int j) const
        { const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline const_iterator operator-(int j) const { return operator+(-j); }
        inline const_iterator &operator+=(int j) { return *this = *this + j; }
        inline const_iterator &operator-=(int j) { return *this = *this - j; }
        friend inline const_iterator operator+(int j, const_iterator k) { return k + j; }

        





    };
    friend class const_iterator;

    class key_iterator
    {
        const_iterator i;

    public:
        typedef typename const_iterator::iterator_category iterator_category;
        typedef typename const_iterator::difference_type difference_type;
        typedef Key value_type;
        typedef const Key *pointer;
        typedef const Key &reference;

        key_iterator() = default;
        explicit key_iterator(const_iterator o) : i(o) { }

        const Key &operator*() const { return i.key(); }
        const Key *operator->() const { return &i.key(); }
        bool operator==(key_iterator o) const { return i == o.i; }
        bool operator!=(key_iterator o) const { return i != o.i; }

        inline key_iterator &operator++() { ++i; return *this; }
        inline key_iterator operator++(int) { return key_iterator(i++);}
        inline key_iterator &operator--() { --i; return *this; }
        inline key_iterator operator--(int) { return key_iterator(i--); }
        const_iterator base() const { return i; }
    };

    typedef QKeyValueIterator<const Key&, const T&, const_iterator> const_key_value_iterator;
    typedef QKeyValueIterator<const Key&, T&, iterator> key_value_iterator;

    
    inline iterator begin() { detach(); return iterator(d->firstNode()); }
    inline const_iterator begin() const { return const_iterator(d->firstNode()); }
    inline const_iterator cbegin() const { return const_iterator(d->firstNode()); }
    inline const_iterator constBegin() const { return const_iterator(d->firstNode()); }
    inline iterator end() { detach(); return iterator(e); }
    inline const_iterator end() const { return const_iterator(e); }
    inline const_iterator cend() const { return const_iterator(e); }
    inline const_iterator constEnd() const { return const_iterator(e); }
    inline key_iterator keyBegin() const { return key_iterator(begin()); }
    inline key_iterator keyEnd() const { return key_iterator(end()); }
    inline key_value_iterator keyValueBegin() { return key_value_iterator(begin()); }
    inline key_value_iterator keyValueEnd() { return key_value_iterator(end()); }
    inline const_key_value_iterator keyValueBegin() const { return const_key_value_iterator(begin()); }
    inline const_key_value_iterator constKeyValueBegin() const { return const_key_value_iterator(begin()); }
    inline const_key_value_iterator keyValueEnd() const { return const_key_value_iterator(end()); }
    inline const_key_value_iterator constKeyValueEnd() const { return const_key_value_iterator(end()); }

    QPair<iterator, iterator> equal_range(const Key &key);
    QPair<const_iterator, const_iterator> equal_range(const Key &key) const noexcept;
    iterator erase(iterator it) { return erase(const_iterator(it.i)); }
    iterator erase(const_iterator it);

    
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return d->size; }
    iterator find(const Key &key);
    const_iterator find(const Key &key) const;
    const_iterator constFind(const Key &key) const;
    iterator insert(const Key &key, const T &value);
    iterator insertMulti(const Key &key, const T &value);
    QHash &unite(const QHash &other);

    
    typedef T mapped_type;
    typedef Key key_type;
    typedef qptrdiff difference_type;
    typedef int size_type;

    inline bool empty() const { return isEmpty(); }






private:
    void detach_helper();
    void freeData(QHashData *d);
    Node **findNode(const Key &key, uint *hp = nullptr) const;
    Node **findNode(const Key &key, uint h) const;
    Node *createNode(uint h, const Key &key, const T &value, Node **nextNode);
    void deleteNode(Node *node);
    static void deleteNode2(QHashData::Node *node);

    static void duplicateNode(QHashData::Node *originalNode, void *newNode);

    bool isValidIterator(const iterator &it) const noexcept
    { return isValidNode(it.i); }
    bool isValidIterator(const const_iterator &it) const noexcept
    { return isValidNode(it.i); }
    bool isValidNode(QHashData::Node *node) const noexcept
    {




#line 542 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
        (void)node;;
        return true;
#line 545 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
    }
    friend class QSet<Key>;
};


template <class Key, class T>
inline void QHash<Key, T>::deleteNode(Node *node)
{
    deleteNode2(reinterpret_cast<QHashData::Node*>(node));
    d->freeNode(node);
}

template <class Key, class T>
inline void QHash<Key, T>::deleteNode2(QHashData::Node *node)
{



    concrete(node)->~Node();
#line 565 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
}

template <class Key, class T>
inline void QHash<Key, T>::duplicateNode(QHashData::Node *node, void *newNode)
{
    Node *concreteNode = concrete(node);
    new (newNode) Node(concreteNode->key, concreteNode->value, concreteNode->h, nullptr);
}

template <class Key, class T>
inline typename QHash<Key, T>::Node *
QHash<Key, T>::createNode(uint ah, const Key &akey, const T &avalue, Node **anextNode)
{
    Node *node = new (d->allocateNode(alignOfNode())) Node(akey, avalue, ah, *anextNode);
    *anextNode = node;
    ++d->size;
    return node;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::unite(const QHash &other)
{
    if (d == &QHashData::shared_null) {
        *this = other;
    } else {
        QHash copy(other);
        const_iterator it = copy.constEnd();
        while (it != copy.constBegin()) {
            --it;
            insertMulti(it.key(), it.value());
        }
    }
    return *this;
}

template <class Key, class T>
inline void QHash<Key, T>::freeData(QHashData *x)
{
    x->free_helper(deleteNode2);
}

template <class Key, class T>
inline void QHash<Key, T>::clear()
{
    *this = QHash();
}

template <class Key, class T>
inline void QHash<Key, T>::detach_helper()
{
    QHashData *x = d->detach_helper(duplicateNode, deleteNode2, sizeof(Node), alignOfNode());
    if (!d->ref.deref())
        freeData(d);
    d = x;
}

template <class Key, class T>
inline QHash<Key, T> &QHash<Key, T>::operator=(const QHash &other)
{
    if (d != other.d) {
        QHashData *o = other.d;
        o->ref.ref();
        if (!d->ref.deref())
            freeData(d);
        d = o;
        if (!d->sharable)
            detach_helper();
    }
    return *this;
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey) const
{
    Node *node;
    if (d->size == 0 || (node = *findNode(akey)) == e) {
        return T();
    } else {
        return node->value;
    }
}

template <class Key, class T>
inline const T QHash<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
    Node *node;
    if (d->size == 0 || (node = *findNode(akey)) == e) {
        return adefaultValue;
    } else {
        return node->value;
    }
}

template <class Key, class T>
inline QList<Key> QHash<Key, T>::uniqueKeys() const
{
    QList<Key> res;
    res.reserve(size()); 
    const_iterator i = begin();
    if (i != end()) {
        for (;;) {
            const Key &aKey = i.key();
            res.append(aKey);
            do {
                if (++i == end())
                    goto break_out_of_outer_loop;
            } while (aKey == i.key());
        }
    }
break_out_of_outer_loop:
    return res;
}

template <class Key, class T>
inline QList<Key> QHash<Key, T>::keys() const
{
    QList<Key> res;
    res.reserve(size());
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.key());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline QList<Key> QHash<Key, T>::keys(const T &avalue) const
{
    QList<Key> res;
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            res.append(i.key());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline const Key QHash<Key, T>::key(const T &avalue) const
{
    return key(avalue, Key());
}

template <class Key, class T>
inline const Key QHash<Key, T>::key(const T &avalue, const Key &defaultValue) const
{
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            return i.key();
        ++i;
    }

    return defaultValue;
}

template <class Key, class T>
inline QList<T> QHash<Key, T>::values() const
{
    QList<T> res;
    res.reserve(size());
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.value());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline QList<T> QHash<Key, T>::values(const Key &akey) const
{
    QList<T> res;
    Node *node = *findNode(akey);
    if (node != e) {
        do {
            res.append(node->value);
        } while ((node = node->next) != e && node->key == akey);
    }
    return res;
}

template <class Key, class T>
inline int QHash<Key, T>::count(const Key &akey) const
{
    int cnt = 0;
    Node *node = *findNode(akey);
    if (node != e) {
        do {
            ++cnt;
        } while ((node = node->next) != e && node->key == akey);
    }
    return cnt;
}

template <class Key, class T>
inline const T QHash<Key, T>::operator[](const Key &akey) const
{
    return value(akey);
}

template <class Key, class T>
inline T &QHash<Key, T>::operator[](const Key &akey)
{
    detach();

    uint h;
    Node **node = findNode(akey, &h);
    if (*node == e) {
        if (d->willGrow())
            node = findNode(akey, h);
        return createNode(h, akey, T(), node)->value;
    }
    return (*node)->value;
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insert(const Key &akey,
                                                                         const T &avalue)
{
    detach();

    uint h;
    Node **node = findNode(akey, &h);
    if (*node == e) {
        if (d->willGrow())
            node = findNode(akey, h);
        return iterator(createNode(h, akey, avalue, node));
    }

    if (!std::is_same<T, QHashDummyValue>::value)
        (*node)->value = avalue;
    return iterator(*node);
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::insertMulti(const Key &akey,
                                                                              const T &avalue)
{
    detach();
    d->willGrow();

    uint h;
    Node **nextNode = findNode(akey, &h);
    return iterator(createNode(h, akey, avalue, nextNode));
}

template <class Key, class T>
inline int QHash<Key, T>::remove(const Key &akey)
{
    if (isEmpty()) 
        return 0;
    detach();

    int oldSize = d->size;
    Node **node = findNode(akey);
    if (*node != e) {
        bool deleteNext = true;
        do {
            Node *next = (*node)->next;
            deleteNext = (next != e && next->key == (*node)->key);
            deleteNode(*node);
            *node = next;
            --d->size;
        } while (deleteNext);
        d->hasShrunk();
    }
    return oldSize - d->size;
}

template <class Key, class T>
inline T QHash<Key, T>::take(const Key &akey)
{
    if (isEmpty()) 
        return T();
    detach();

    Node **node = findNode(akey);
    if (*node != e) {
        T t = std::move((*node)->value);
        Node *next = (*node)->next;
        deleteNode(*node);
        *node = next;
        --d->size;
        d->hasShrunk();
        return t;
    }
    return T();
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::erase(const_iterator it)
{
    static_cast<void>(false && (isValidIterator(it)));

    if (it == const_iterator(e))
        return iterator(it.i);

    if (d->ref.isShared()) {
        
        int bucketNum = (it.i->h % d->numBuckets);
        const_iterator bucketIterator(*(d->buckets + bucketNum));
        int stepsFromBucketStartToIte = 0;
        while (bucketIterator != it) {
            ++stepsFromBucketStartToIte;
            ++bucketIterator;
        }
        detach();
        it = const_iterator(*(d->buckets + bucketNum));
        while (stepsFromBucketStartToIte > 0) {
            --stepsFromBucketStartToIte;
            ++it;
        }
    }

    iterator ret(it.i);
    ++ret;

    Node *node = concrete(it.i);
    Node **node_ptr = reinterpret_cast<Node **>(&d->buckets[node->h % d->numBuckets]);
    while (*node_ptr != node)
        node_ptr = &(*node_ptr)->next;
    *node_ptr = node->next;
    deleteNode(node);
    --d->size;
    return ret;
}

template <class Key, class T>
inline void QHash<Key, T>::reserve(int asize)
{
    detach();
    d->rehash(-qMax(asize, 1));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::find(const Key &akey) const
{
    return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::const_iterator QHash<Key, T>::constFind(const Key &akey) const
{
    return const_iterator(*findNode(akey));
}

template <class Key, class T>
inline typename QHash<Key, T>::iterator QHash<Key, T>::find(const Key &akey)
{
    detach();
    return iterator(*findNode(akey));
}

template <class Key, class T>
inline bool QHash<Key, T>::contains(const Key &akey) const
{
    return *findNode(akey) != e;
}

template <class Key, class T>
inline typename QHash<Key, T>::Node **QHash<Key, T>::findNode(const Key &akey, uint h) const
{
    Node **node;

    if (d->numBuckets) {
        node = reinterpret_cast<Node **>(&d->buckets[h % d->numBuckets]);
        static_cast<void>(false && (*node == e || (*node)->next));
        while (*node != e && !(*node)->same_key(h, akey))
            node = &(*node)->next;
    } else {
        node = const_cast<Node **>(reinterpret_cast<const Node * const *>(&e));
    }
    return node;
}

template <class Key, class T>
inline typename QHash<Key, T>::Node **QHash<Key, T>::findNode(const Key &akey,
                                                                            uint *ahp) const
{
    uint h = 0;

    if (d->numBuckets || ahp) {
        h = qHash(akey, d->seed);
        if (ahp)
            *ahp = h;
    }
    return findNode(akey, h);
}

template <class Key, class T>
inline bool QHash<Key, T>::operator==(const QHash &other) const
{
    if (d == other.d)
        return true;
    if (size() != other.size())
        return false;

    const_iterator it = begin();

    while (it != end()) {
        
        
        auto thisEqualRangeStart = it;
        const Key &thisEqualRangeKey = it.key();
        size_type n = 0;
        do {
            ++it;
            ++n;
        } while (it != end() && it.key() == thisEqualRangeKey);

        const auto otherEqualRange = other.equal_range(thisEqualRangeKey);

        if (n != std::distance(otherEqualRange.first, otherEqualRange.second))
            return false;

        
        if (!qt_is_permutation(thisEqualRangeStart, it, otherEqualRange.first, otherEqualRange.second))
            return false;
    }

    return true;
}

template <class Key, class T>
QPair<typename QHash<Key, T>::iterator, typename QHash<Key, T>::iterator> QHash<Key, T>::equal_range(const Key &akey)
{
    detach();
    auto pair = qAsConst(*this).equal_range(akey);
    return qMakePair(iterator(pair.first.i), iterator(pair.second.i));
}

template <class Key, class T>
QPair<typename QHash<Key, T>::const_iterator, typename QHash<Key, T>::const_iterator> QHash<Key, T>::equal_range(const Key &akey) const noexcept
{
    Node *node = *findNode(akey);
    const_iterator firstIt = const_iterator(node);

    if (node != e) {
        
        
        
        
        while (node->next != e && node->next->key == akey)
            node = node->next;

        
        
        
        
        node = concrete(QHashData::nextNode(reinterpret_cast<QHashData::Node *>(node)));
    }

    return qMakePair(firstIt, const_iterator(node));
}

template <class Key, class T>
class QMultiHash : public QHash<Key, T>
{
public:
    QMultiHash() noexcept {}
    inline QMultiHash(std::initializer_list<std::pair<Key,T> > list)
    {
        this->reserve(int(list.size()));
        for (typename std::initializer_list<std::pair<Key,T> >::const_iterator it = list.begin(); it != list.end(); ++it)
            insert(it->first, it->second);
    }




    template <typename InputIterator, QtPrivate::IfAssociativeIteratorHasKeyAndValue<InputIterator> = true>
    QMultiHash(InputIterator f, InputIterator l)
    {
        QtPrivate::reserveIfForwardIterator(this, f, l);
        for (; f != l; ++f)
            insert(f.key(), f.value());
    }

    template <typename InputIterator, QtPrivate::IfAssociativeIteratorHasFirstAndSecond<InputIterator> = true>
    QMultiHash(InputIterator f, InputIterator l)
    {
        QtPrivate::reserveIfForwardIterator(this, f, l);
        for (; f != l; ++f)
            insert(f->first, f->second);
    }
#line 1054 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
    
    

    QMultiHash(const QHash<Key, T> &other) : QHash<Key, T>(other) {}
    QMultiHash(QHash<Key, T> &&other) noexcept : QHash<Key, T>(std::move(other)) {}
    void swap(QMultiHash &other) noexcept { QHash<Key, T>::swap(other); } 

    inline typename QHash<Key, T>::iterator replace(const Key &key, const T &value)
    { return QHash<Key, T>::insert(key, value); }

    inline typename QHash<Key, T>::iterator insert(const Key &key, const T &value)
    { return QHash<Key, T>::insertMulti(key, value); }

    inline QMultiHash &operator+=(const QMultiHash &other)
    { this->unite(other); return *this; }
    inline QMultiHash operator+(const QMultiHash &other) const
    { QMultiHash result = *this; result += other; return result; }

    using QHash<Key, T>::contains;
    using QHash<Key, T>::remove;
    using QHash<Key, T>::count;
    using QHash<Key, T>::find;
    using QHash<Key, T>::constFind;

    bool contains(const Key &key, const T &value) const;

    int remove(const Key &key, const T &value);

    int count(const Key &key, const T &value) const;

    typename QHash<Key, T>::iterator find(const Key &key, const T &value) {
        typename QHash<Key, T>::iterator i(find(key));
        typename QHash<Key, T>::iterator end(this->end());
        while (i != end && i.key() == key) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QHash<Key, T>::const_iterator find(const Key &key, const T &value) const {
        typename QHash<Key, T>::const_iterator i(constFind(key));
        typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
        while (i != end && i.key() == key) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QHash<Key, T>::const_iterator constFind(const Key &key, const T &value) const
        { return find(key, value); }
private:
    T &operator[](const Key &key);
    const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiHash<Key, T>::contains(const Key &key, const T &value) const
{
    return constFind(key, value) != QHash<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiHash<Key, T>::remove(const Key &key, const T &value)
{
    int n = 0;
    typename QHash<Key, T>::iterator i(find(key));
    typename QHash<Key, T>::iterator end(QHash<Key, T>::end());
    while (i != end && i.key() == key) {
        if (i.value() == value) {
            i = this->erase(i);
            ++n;
        } else {
            ++i;
        }
    }
    return n;
}

template <class Key, class T>
inline int QMultiHash<Key, T>::count(const Key &key, const T &value) const
{
    int n = 0;
    typename QHash<Key, T>::const_iterator i(constFind(key));
    typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
    while (i != end && i.key() == key) {
        if (i.value() == value)
            ++n;
        ++i;
    }
    return n;
}

template <class Key, class T> class QHashIterator { typedef typename QHash<Key,T>::const_iterator const_iterator; QHash<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: typedef const_iterator Item; inline QHashIterator(const QHash<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QHashIterator &operator=(const QHash<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline const Key &key() const { static_cast<void>(false && (item_exists())); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableHashIterator { typedef typename QHash<Key,T>::iterator iterator; typedef typename QHash<Key,T>::const_iterator const_iterator; QHash<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: typedef iterator Item; inline QMutableHashIterator(QHash<Key,T> &container) : c(&container) { i = c->begin(); n = c->end(); } inline QMutableHashIterator &operator=(QHash<Key,T> &container) { c = &container; i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { static_cast<void>(false && (item_exists())); return *n; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline const Key &key() const { static_cast<void>(false && (item_exists())); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };

template <class Key, class T>
uint qHash(const QHash<Key, T> &key, uint seed = 0)
    noexcept(noexcept(qHash(std::declval<Key&>())) && noexcept(qHash(std::declval<T&>())))
{
    QtPrivate::QHashCombineCommutative hash;
    for (auto it = key.begin(), end = key.end(); it != end; ++it) {
        const Key &k = it.key();
        const T   &v = it.value();
        seed = hash(seed, std::pair<const Key&, const T&>(k, v));
    }
    return seed;
}

template <class Key, class T>
inline uint qHash(const QMultiHash<Key, T> &key, uint seed = 0)
    noexcept(noexcept(qHash(std::declval<Key&>())) && noexcept(qHash(std::declval<T&>())))
{
    const QHash<Key, T> &key2 = key;
    return qHash(key2, seed);
}




#pragma warning( pop )
#line 1177 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"

#line 1179 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qhash.h"
#line 46 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"

































































template <class Key> inline bool qMapLessThanKey(const Key &key1, const Key &key2)
{
    return key1 < key2;
}

template <class Ptr> inline bool qMapLessThanKey(const Ptr *key1, const Ptr *key2)
{
    return std::less<const Ptr *>()(key1, key2);
}

struct QMapDataBase;
template <class Key, class T> struct QMapData;

struct __declspec(dllimport) QMapNodeBase
{
    quintptr p;
    QMapNodeBase *left;
    QMapNodeBase *right;

    enum Color { Red = 0, Black = 1 };
    enum { Mask = 3 }; 

    const QMapNodeBase *nextNode() const;
    QMapNodeBase *nextNode() { return const_cast<QMapNodeBase *>(const_cast<const QMapNodeBase *>(this)->nextNode()); }
    const QMapNodeBase *previousNode() const;
    QMapNodeBase *previousNode() { return const_cast<QMapNodeBase *>(const_cast<const QMapNodeBase *>(this)->previousNode()); }

    Color color() const { return Color(p & 1); }
    void setColor(Color c) { if (c == Black) p |= Black; else p &= ~Black; }
    QMapNodeBase *parent() const { return reinterpret_cast<QMapNodeBase *>(p & ~Mask); }
    void setParent(QMapNodeBase *pp) { p = (p & Mask) | quintptr(pp); }

    template <typename T>
    static typename std::enable_if<QTypeInfo<T>::isComplex>::type
    callDestructorIfNecessary(T &t) noexcept { (void)t;; t.~T(); } 
    template <typename T>
    static typename std::enable_if<!QTypeInfo<T>::isComplex>::type
    callDestructorIfNecessary(T &) noexcept {}
};

template <class Key, class T>
struct QMapNode : public QMapNodeBase
{
    Key key;
    T value;

    inline QMapNode *leftNode() const { return static_cast<QMapNode *>(left); }
    inline QMapNode *rightNode() const { return static_cast<QMapNode *>(right); }

    inline const QMapNode *nextNode() const { return reinterpret_cast<const QMapNode *>(QMapNodeBase::nextNode()); }
    inline const QMapNode *previousNode() const { return static_cast<const QMapNode *>(QMapNodeBase::previousNode()); }
    inline QMapNode *nextNode() { return reinterpret_cast<QMapNode *>(QMapNodeBase::nextNode()); }
    inline QMapNode *previousNode() { return static_cast<QMapNode *>(QMapNodeBase::previousNode()); }

    QMapNode<Key, T> *copy(QMapData<Key, T> *d) const;

    void destroySubTree()
    {
        callDestructorIfNecessary(key);
        callDestructorIfNecessary(value);
        doDestroySubTree(std::integral_constant<bool, QTypeInfo<T>::isComplex || QTypeInfo<Key>::isComplex>());
    }

    QMapNode<Key, T> *lowerBound(const Key &key);
    QMapNode<Key, T> *upperBound(const Key &key);

private:
    void doDestroySubTree(std::false_type) {}
    void doDestroySubTree(std::true_type)
    {
        if (left)
            leftNode()->destroySubTree();
        if (right)
            rightNode()->destroySubTree();
    }

    QMapNode() = delete;
    QMapNode(const QMapNode &) = delete; QMapNode &operator=(const QMapNode &) = delete;
};

template <class Key, class T>
inline QMapNode<Key, T> *QMapNode<Key, T>::lowerBound(const Key &akey)
{
    QMapNode<Key, T> *n = this;
    QMapNode<Key, T> *lastNode = nullptr;
    while (n) {
        if (!qMapLessThanKey(n->key, akey)) {
            lastNode = n;
            n = n->leftNode();
        } else {
            n = n->rightNode();
        }
    }
    return lastNode;
}

template <class Key, class T>
inline QMapNode<Key, T> *QMapNode<Key, T>::upperBound(const Key &akey)
{
    QMapNode<Key, T> *n = this;
    QMapNode<Key, T> *lastNode = nullptr;
    while (n) {
        if (qMapLessThanKey(akey, n->key)) {
            lastNode = n;
            n = n->leftNode();
        } else {
            n = n->rightNode();
        }
    }
    return lastNode;
}



struct __declspec(dllimport) QMapDataBase
{
    QtPrivate::RefCount ref;
    int size;
    QMapNodeBase header;
    QMapNodeBase *mostLeftNode;

    void rotateLeft(QMapNodeBase *x);
    void rotateRight(QMapNodeBase *x);
    void rebalance(QMapNodeBase *x);
    void freeNodeAndRebalance(QMapNodeBase *z);
    void recalcMostLeftNode();

    QMapNodeBase *createNode(int size, int alignment, QMapNodeBase *parent, bool left);
    void freeTree(QMapNodeBase *root, int alignment);

    static const QMapDataBase shared_null;

    static QMapDataBase *createData();
    static void freeData(QMapDataBase *d);
};

template <class Key, class T>
struct QMapData : public QMapDataBase
{
    typedef QMapNode<Key, T> Node;

    Node *root() const { return static_cast<Node *>(header.left); }

    
    
    const Node *end() const { return reinterpret_cast<const Node *>(&header); }
    Node *end() { return reinterpret_cast<Node *>(&header); }
    const Node *begin() const { if (root()) return static_cast<const Node*>(mostLeftNode); return end(); }
    Node *begin() { if (root()) return static_cast<Node*>(mostLeftNode); return end(); }

    void deleteNode(Node *z);
    Node *findNode(const Key &akey) const;
    void nodeRange(const Key &akey, Node **firstNode, Node **lastNode);

    Node *createNode(const Key &k, const T &v, Node *parent = nullptr, bool left = false)
    {
        Node *n = static_cast<Node *>(QMapDataBase::createNode(sizeof(Node), alignof(Node),
                                      parent, left));
        try {
            new (&n->key) Key(k);
            try {
                new (&n->value) T(v);
            } catch (...) {
                n->key.~Key();
                throw;
            }
        } catch (...) {
            QMapDataBase::freeNodeAndRebalance(n);
            throw;
        }
        return n;
    }

    static QMapData *create() {
        return static_cast<QMapData *>(createData());
    }

    void destroy() {
        if (root()) {
            root()->destroySubTree();
            freeTree(header.left, alignof(Node));
        }
        freeData(this);
    }
};

template <class Key, class T>
QMapNode<Key, T> *QMapNode<Key, T>::copy(QMapData<Key, T> *d) const
{
    QMapNode<Key, T> *n = d->createNode(key, value);
    n->setColor(color());
    if (left) {
        n->left = leftNode()->copy(d);
        n->left->setParent(n);
    } else {
        n->left = nullptr;
    }
    if (right) {
        n->right = rightNode()->copy(d);
        n->right->setParent(n);
    } else {
        n->right = nullptr;
    }
    return n;
}

template <class Key, class T>
void QMapData<Key, T>::deleteNode(QMapNode<Key, T> *z)
{
    QMapNodeBase::callDestructorIfNecessary(z->key);
    QMapNodeBase::callDestructorIfNecessary(z->value);
    freeNodeAndRebalance(z);
}

template <class Key, class T>
QMapNode<Key, T> *QMapData<Key, T>::findNode(const Key &akey) const
{
    if (Node *r = root()) {
        Node *lb = r->lowerBound(akey);
        if (lb && !qMapLessThanKey(akey, lb->key))
            return lb;
    }
    return nullptr;
}


template <class Key, class T>
void QMapData<Key, T>::nodeRange(const Key &akey, QMapNode<Key, T> **firstNode, QMapNode<Key, T> **lastNode)
{
    Node *n = root();
    Node *l = end();
    while (n) {
        if (qMapLessThanKey(akey, n->key)) {
            l = n;
            n = n->leftNode();
        } else if (qMapLessThanKey(n->key, akey)) {
            n = n->rightNode();
        } else {
            *firstNode = n->leftNode() ? n->leftNode()->lowerBound(akey) : nullptr;
            if (!*firstNode)
                *firstNode = n;
            *lastNode = n->rightNode() ? n->rightNode()->upperBound(akey) : nullptr;
            if (!*lastNode)
                *lastNode = l;
            return;
        }
    }
    *firstNode = *lastNode = l;
}


template <class Key, class T>
class QMap
{
    typedef QMapNode<Key, T> Node;

    QMapData<Key, T> *d;

public:
    inline QMap() noexcept : d(static_cast<QMapData<Key, T> *>(const_cast<QMapDataBase *>(&QMapDataBase::shared_null))) { }
    inline QMap(std::initializer_list<std::pair<Key,T> > list)
        : d(static_cast<QMapData<Key, T> *>(const_cast<QMapDataBase *>(&QMapDataBase::shared_null)))
    {
        for (typename std::initializer_list<std::pair<Key,T> >::const_iterator it = list.begin(); it != list.end(); ++it)
            insert(it->first, it->second);
    }
    QMap(const QMap<Key, T> &other);

    inline ~QMap() { if (!d->ref.deref()) d->destroy(); }

    QMap<Key, T> &operator=(const QMap<Key, T> &other);
    inline QMap(QMap<Key, T> &&other) noexcept
        : d(other.d)
    {
        other.d = static_cast<QMapData<Key, T> *>(
                const_cast<QMapDataBase *>(&QMapDataBase::shared_null));
    }

    inline QMap<Key, T> &operator=(QMap<Key, T> &&other) noexcept
    { QMap moved(std::move(other)); swap(moved); return *this; }
    inline void swap(QMap<Key, T> &other) noexcept { qSwap(d, other.d); }
    explicit QMap(const typename std::map<Key, T> &other);
    std::map<Key, T> toStdMap() const;

    bool operator==(const QMap<Key, T> &other) const;
    inline bool operator!=(const QMap<Key, T> &other) const { return !(*this == other); }

    inline int size() const { return d->size; }

    inline bool isEmpty() const { return d->size == 0; }

    inline void detach() { if (d->ref.isShared()) detach_helper(); }
    inline bool isDetached() const { return !d->ref.isShared(); }

    inline void setSharable(bool sharable)
    {
        if (sharable == d->ref.isSharable())
            return;
        if (!sharable)
            detach();
        
        d->ref.setSharable(sharable);
    }
#line 370 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
    inline bool isSharedWith(const QMap<Key, T> &other) const { return d == other.d; }

    void clear();

    int remove(const Key &key);
    T take(const Key &key);

    bool contains(const Key &key) const;
    const Key key(const T &value, const Key &defaultKey = Key()) const;
    const T value(const Key &key, const T &defaultValue = T()) const;
    T &operator[](const Key &key);
    const T operator[](const Key &key) const;

    QList<Key> uniqueKeys() const;
    QList<Key> keys() const;
    QList<Key> keys(const T &value) const;
    QList<T> values() const;
    QList<T> values(const Key &key) const;
    int count(const Key &key) const;

    inline const Key &firstKey() const { static_cast<void>(false && (!isEmpty())); return constBegin().key(); }
    inline const Key &lastKey() const { static_cast<void>(false && (!isEmpty())); return (constEnd() - 1).key(); }

    inline T &first() { static_cast<void>(false && (!isEmpty())); return *begin(); }
    inline const T &first() const { static_cast<void>(false && (!isEmpty())); return *constBegin(); }
    inline T &last() { static_cast<void>(false && (!isEmpty())); return *(end() - 1); }
    inline const T &last() const { static_cast<void>(false && (!isEmpty())); return *(constEnd() - 1); }

    class const_iterator;

    class iterator
    {
        friend class const_iterator;
        Node *i;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef T *pointer;
        typedef T &reference;

        inline iterator() : i(nullptr) { }
        inline iterator(Node *node) : i(node) { }

        inline const Key &key() const { return i->key; }
        inline T &value() const { return i->value; }
        inline T &operator*() const { return i->value; }
        inline T *operator->() const { return &i->value; }
        inline bool operator==(const iterator &o) const { return i == o.i; }
        inline bool operator!=(const iterator &o) const { return i != o.i; }

        inline iterator &operator++() {
            i = i->nextNode();
            return *this;
        }
        inline iterator operator++(int) {
            iterator r = *this;
            i = i->nextNode();
            return r;
        }
        inline iterator &operator--() {
            i = i->previousNode();
            return *this;
        }
        inline iterator operator--(int) {
            iterator r = *this;
            i = i->previousNode();
            return r;
        }
        inline iterator operator+(int j) const
        { iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline iterator operator-(int j) const { return operator+(-j); }
        inline iterator &operator+=(int j) { return *this = *this + j; }
        inline iterator &operator-=(int j) { return *this = *this - j; }
        friend inline iterator operator+(int j, iterator k) { return k + j; }


    public:
        inline bool operator==(const const_iterator &o) const
            { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const
            { return i != o.i; }
#line 454 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
        friend class QMap<Key, T>;
    };
    friend class iterator;

    class const_iterator
    {
        friend class iterator;
        const Node *i;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &reference;

        constexpr inline const_iterator() : i(nullptr) { }
        inline const_iterator(const Node *node) : i(node) { }



        inline const_iterator(const iterator &o)
#line 477 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
        { i = o.i; }

        inline const Key &key() const { return i->key; }
        inline const T &value() const { return i->value; }
        inline const T &operator*() const { return i->value; }
        inline const T *operator->() const { return &i->value; }
        constexpr inline bool operator==(const const_iterator &o) const { return i == o.i; }
        constexpr inline bool operator!=(const const_iterator &o) const { return i != o.i; }

        inline const_iterator &operator++() {
            i = i->nextNode();
            return *this;
        }
        inline const_iterator operator++(int) {
            const_iterator r = *this;
            i = i->nextNode();
            return r;
        }
        inline const_iterator &operator--() {
            i = i->previousNode();
            return *this;
        }
        inline const_iterator operator--(int) {
            const_iterator r = *this;
            i = i->previousNode();
            return r;
        }
        inline const_iterator operator+(int j) const
        { const_iterator r = *this; if (j > 0) while (j--) ++r; else while (j++) --r; return r; }
        inline const_iterator operator-(int j) const { return operator+(-j); }
        inline const_iterator &operator+=(int j) { return *this = *this + j; }
        inline const_iterator &operator-=(int j) { return *this = *this - j; }
        friend inline const_iterator operator+(int j, const_iterator k) { return k + j; }






        friend class QMap<Key, T>;
    };
    friend class const_iterator;

    class key_iterator
    {
        const_iterator i;

    public:
        typedef typename const_iterator::iterator_category iterator_category;
        typedef typename const_iterator::difference_type difference_type;
        typedef Key value_type;
        typedef const Key *pointer;
        typedef const Key &reference;

        key_iterator() = default;
        explicit key_iterator(const_iterator o) : i(o) { }

        const Key &operator*() const { return i.key(); }
        const Key *operator->() const { return &i.key(); }
        bool operator==(key_iterator o) const { return i == o.i; }
        bool operator!=(key_iterator o) const { return i != o.i; }

        inline key_iterator &operator++() { ++i; return *this; }
        inline key_iterator operator++(int) { return key_iterator(i++);}
        inline key_iterator &operator--() { --i; return *this; }
        inline key_iterator operator--(int) { return key_iterator(i--); }
        const_iterator base() const { return i; }
    };

    typedef QKeyValueIterator<const Key&, const T&, const_iterator> const_key_value_iterator;
    typedef QKeyValueIterator<const Key&, T&, iterator> key_value_iterator;

    
    inline iterator begin() { detach(); return iterator(d->begin()); }
    inline const_iterator begin() const { return const_iterator(d->begin()); }
    inline const_iterator constBegin() const { return const_iterator(d->begin()); }
    inline const_iterator cbegin() const { return const_iterator(d->begin()); }
    inline iterator end() { detach(); return iterator(d->end()); }
    inline const_iterator end() const { return const_iterator(d->end()); }
    inline const_iterator constEnd() const { return const_iterator(d->end()); }
    inline const_iterator cend() const { return const_iterator(d->end()); }
    inline key_iterator keyBegin() const { return key_iterator(begin()); }
    inline key_iterator keyEnd() const { return key_iterator(end()); }
    inline key_value_iterator keyValueBegin() { return key_value_iterator(begin()); }
    inline key_value_iterator keyValueEnd() { return key_value_iterator(end()); }
    inline const_key_value_iterator keyValueBegin() const { return const_key_value_iterator(begin()); }
    inline const_key_value_iterator constKeyValueBegin() const { return const_key_value_iterator(begin()); }
    inline const_key_value_iterator keyValueEnd() const { return const_key_value_iterator(end()); }
    inline const_key_value_iterator constKeyValueEnd() const { return const_key_value_iterator(end()); }
    iterator erase(iterator it);

    
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return d->size; }
    iterator find(const Key &key);
    const_iterator find(const Key &key) const;
    const_iterator constFind(const Key &key) const;
    iterator lowerBound(const Key &key);
    const_iterator lowerBound(const Key &key) const;
    iterator upperBound(const Key &key);
    const_iterator upperBound(const Key &key) const;
    iterator insert(const Key &key, const T &value);
    iterator insert(const_iterator pos, const Key &key, const T &value);
    iterator insertMulti(const Key &key, const T &value);
    iterator insertMulti(const_iterator pos, const Key &akey, const T &avalue);
    QMap<Key, T> &unite(const QMap<Key, T> &other);

    
    typedef Key key_type;
    typedef T mapped_type;
    typedef qptrdiff difference_type;
    typedef int size_type;
    inline bool empty() const { return isEmpty(); }
    QPair<iterator, iterator> equal_range(const Key &akey);
    QPair<const_iterator, const_iterator> equal_range(const Key &akey) const;





private:
    void detach_helper();
    bool isValidIterator(const const_iterator &ci) const
    {





#line 608 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
        (void)ci;;
        return true;
#line 611 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
    }
};

template <class Key, class T>
inline QMap<Key, T>::QMap(const QMap<Key, T> &other)
{
    if (other.d->ref.ref()) {
        d = other.d;
    } else {
        d = QMapData<Key, T>::create();
        if (other.d->header.left) {
            d->header.left = static_cast<Node *>(other.d->header.left)->copy(d);
            d->header.left->setParent(&d->header);
            d->recalcMostLeftNode();
        }
    }
}

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::operator=(const QMap<Key, T> &other)
{
    if (d != other.d) {
        QMap<Key, T> tmp(other);
        tmp.swap(*this);
    }
    return *this;
}

template <class Key, class T>
inline void QMap<Key, T>::clear()
{
    *this = QMap<Key, T>();
}

__pragma(warning(push))


template <class Key, class T>
inline const T QMap<Key, T>::value(const Key &akey, const T &adefaultValue) const
{
    Node *n = d->findNode(akey);
    return n ? n->value : adefaultValue;
}

__pragma(warning(pop))

template <class Key, class T>
inline const T QMap<Key, T>::operator[](const Key &akey) const
{
    return value(akey);
}

template <class Key, class T>
inline T &QMap<Key, T>::operator[](const Key &akey)
{
    detach();
    Node *n = d->findNode(akey);
    if (!n)
        return *insert(akey, T());
    return n->value;
}

template <class Key, class T>
inline int QMap<Key, T>::count(const Key &akey) const
{
    Node *firstNode;
    Node *lastNode;
    d->nodeRange(akey, &firstNode, &lastNode);

    const_iterator ci_first(firstNode);
    const const_iterator ci_last(lastNode);
    int cnt = 0;
    while (ci_first != ci_last) {
        ++cnt;
        ++ci_first;
    }
    return cnt;
}

template <class Key, class T>
inline bool QMap<Key, T>::contains(const Key &akey) const
{
    return d->findNode(akey) != nullptr;
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insert(const Key &akey, const T &avalue)
{
    detach();
    Node *n = d->root();
    Node *y = d->end();
    Node *lastNode = nullptr;
    bool  left = true;
    while (n) {
        y = n;
        if (!qMapLessThanKey(n->key, akey)) {
            lastNode = n;
            left = true;
            n = n->leftNode();
        } else {
            left = false;
            n = n->rightNode();
        }
    }
    if (lastNode && !qMapLessThanKey(akey, lastNode->key)) {
        lastNode->value = avalue;
        return iterator(lastNode);
    }
    Node *z = d->createNode(akey, avalue, y, left);
    return iterator(z);
}

template <class Key, class T>
typename QMap<Key, T>::iterator QMap<Key, T>::insert(const_iterator pos, const Key &akey, const T &avalue)
{
    if (d->ref.isShared())
        return this->insert(akey, avalue);

    static_cast<void>(false && (isValidIterator(pos)));

    if (pos == constEnd()) {
        
        Node *n = static_cast<Node *>(pos.i->left);
        if (n) {
            while (n->right)
                n = static_cast<Node *>(n->right);

            if (!qMapLessThanKey(n->key, akey))
                return this->insert(akey, avalue); 
            
            
            

            Node *z = d->createNode(akey, avalue, n, false); 
            return iterator(z);
        }
        return this->insert(akey, avalue);
    } else {
        
        
        Node *next = const_cast<Node*>(pos.i);
        if (qMapLessThanKey(next->key, akey))
            return this->insert(akey, avalue); 

        if (pos == constBegin()) {
            
            
            if (!qMapLessThanKey(akey, next->key)) {
                next->value = avalue; 
                return iterator(next);
            }
            
            Node *z = d->createNode(akey, avalue, begin().i, true);
            return iterator(z);
        } else {
            Node *prev = const_cast<Node*>(pos.i->previousNode());
            if (!qMapLessThanKey(prev->key, akey)) {
                return this->insert(akey, avalue); 
            }
            
            if (!qMapLessThanKey(akey, next->key)) {
                next->value = avalue; 
                return iterator(next);
            }

            
            if (prev->right == nullptr) {
                Node *z = d->createNode(akey, avalue, prev, false);
                return iterator(z);
            }
            if (next->left == nullptr) {
                Node *z = d->createNode(akey, avalue, next, true);
                return iterator(z);
            }
            static_cast<void>(false && (false)); 
            return this->insert(akey, avalue);
        }
    }
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::insertMulti(const Key &akey,
                                                                            const T &avalue)
{
    detach();
    Node* y = d->end();
    Node* x = static_cast<Node *>(d->root());
    bool left = true;
    while (x != nullptr) {
        left = !qMapLessThanKey(x->key, akey);
        y = x;
        x = left ? x->leftNode() : x->rightNode();
    }
    Node *z = d->createNode(akey, avalue, y, left);
    return iterator(z);
}

template <class Key, class T>
typename QMap<Key, T>::iterator QMap<Key, T>::insertMulti(const_iterator pos, const Key &akey, const T &avalue)
{
    if (d->ref.isShared())
        return this->insertMulti(akey, avalue);

    static_cast<void>(false && (isValidIterator(pos)));

    if (pos == constEnd()) {
        
        Node *n = static_cast<Node *>(pos.i->left);
        if (n) {
            while (n->right)
                n = static_cast<Node *>(n->right);

            if (!qMapLessThanKey(n->key, akey))
                return this->insertMulti(akey, avalue); 
            Node *z = d->createNode(akey, avalue, n, false); 
            return iterator(z);
        }
        return this->insertMulti(akey, avalue);
    } else {
        
        
        Node *next = const_cast<Node*>(pos.i);
        if (qMapLessThanKey(next->key, akey))
            return this->insertMulti(akey, avalue); 

        if (pos == constBegin()) {
            
            Node *z = d->createNode(akey, avalue, begin().i, true);
            return iterator(z);
        } else {
            Node *prev = const_cast<Node*>(pos.i->previousNode());
            if (!qMapLessThanKey(prev->key, akey))
                return this->insertMulti(akey, avalue); 

            
            if (prev->right == nullptr) {
                Node *z = d->createNode(akey, avalue, prev, false);
                return iterator(z);
            }
            if (next->left == nullptr) {
                Node *z = d->createNode(akey, avalue, next, true);
                return iterator(z);
            }
            static_cast<void>(false && (false)); 
            return this->insertMulti(akey, avalue);
        }
    }
}


template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::constFind(const Key &akey) const
{
    Node *n = d->findNode(akey);
    return const_iterator(n ? n : d->end());
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::find(const Key &akey) const
{
    return constFind(akey);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::find(const Key &akey)
{
    detach();
    Node *n = d->findNode(akey);
    return iterator(n ? n : d->end());
}

template <class Key, class T>
inline QMap<Key, T> &QMap<Key, T>::unite(const QMap<Key, T> &other)
{
    QMap<Key, T> copy(other);
    const_iterator it = copy.constEnd();
    const const_iterator b = copy.constBegin();
    while (it != b) {
        --it;
        insertMulti(it.key(), it.value());
    }
    return *this;
}

template <class Key, class T>
QPair<typename QMap<Key, T>::iterator, typename QMap<Key, T>::iterator> QMap<Key, T>::equal_range(const Key &akey)
{
    detach();
    Node *firstNode, *lastNode;
    d->nodeRange(akey, &firstNode, &lastNode);
    return QPair<iterator, iterator>(iterator(firstNode), iterator(lastNode));
}

template <class Key, class T>
QPair<typename QMap<Key, T>::const_iterator, typename QMap<Key, T>::const_iterator>
QMap<Key, T>::equal_range(const Key &akey) const
{
    Node *firstNode, *lastNode;
    d->nodeRange(akey, &firstNode, &lastNode);
    return qMakePair(const_iterator(firstNode), const_iterator(lastNode));
}























template <class Key, class T>
inline int QMap<Key, T>::remove(const Key &akey)
{
    detach();
    int n = 0;
    while (Node *node = d->findNode(akey)) {
        d->deleteNode(node);
        ++n;
    }
    return n;
}

template <class Key, class T>
inline T QMap<Key, T>::take(const Key &akey)
{
    detach();

    Node *node = d->findNode(akey);
    if (node) {
        T t = std::move(node->value);
        d->deleteNode(node);
        return t;
    }
    return T();
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::erase(iterator it)
{
    if (it == iterator(d->end()))
        return it;

    static_cast<void>(false && (isValidIterator(const_iterator(it))));

    if (d->ref.isShared()) {
        const_iterator oldBegin = constBegin();
        const_iterator old = const_iterator(it);
        int backStepsWithSameKey = 0;

        while (old != oldBegin) {
            --old;
            if (qMapLessThanKey(old.key(), it.key()))
                break;
            ++backStepsWithSameKey;
        }

        it = find(old.key()); 
        static_cast<void>(false && (it != iterator(d->end())));

        while (backStepsWithSameKey > 0) {
            ++it;
            --backStepsWithSameKey;
        }
    }

    Node *n = it.i;
    ++it;
    d->deleteNode(n);
    return it;
}

template <class Key, class T>
inline void QMap<Key, T>::detach_helper()
{
    QMapData<Key, T> *x = QMapData<Key, T>::create();
    if (d->header.left) {
        x->header.left = static_cast<Node *>(d->header.left)->copy(x);
        x->header.left->setParent(&x->header);
    }
    if (!d->ref.deref())
        d->destroy();
    d = x;
    d->recalcMostLeftNode();
}

template <class Key, class T>
inline QList<Key> QMap<Key, T>::uniqueKeys() const
{
    QList<Key> res;
    res.reserve(size()); 
    const_iterator i = begin();
    if (i != end()) {
        for (;;) {
            const Key &aKey = i.key();
            res.append(aKey);
            do {
                if (++i == end())
                    goto break_out_of_outer_loop;
            } while (!qMapLessThanKey(aKey, i.key()));   
        }
    }
break_out_of_outer_loop:
    return res;
}

template <class Key, class T>
inline QList<Key> QMap<Key, T>::keys() const
{
    QList<Key> res;
    res.reserve(size());
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.key());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline QList<Key> QMap<Key, T>::keys(const T &avalue) const
{
    QList<Key> res;
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            res.append(i.key());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline const Key QMap<Key, T>::key(const T &avalue, const Key &defaultKey) const
{
    const_iterator i = begin();
    while (i != end()) {
        if (i.value() == avalue)
            return i.key();
        ++i;
    }

    return defaultKey;
}

template <class Key, class T>
inline QList<T> QMap<Key, T>::values() const
{
    QList<T> res;
    res.reserve(size());
    const_iterator i = begin();
    while (i != end()) {
        res.append(i.value());
        ++i;
    }
    return res;
}

template <class Key, class T>
inline QList<T> QMap<Key, T>::values(const Key &akey) const
{
    QList<T> res;
    Node *n = d->findNode(akey);
    if (n) {
        const_iterator it(n);
        do {
            res.append(*it);
            ++it;
        } while (it != constEnd() && !qMapLessThanKey<Key>(akey, it.key()));
    }
    return res;
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator QMap<Key, T>::lowerBound(const Key &akey) const
{
    Node *lb = d->root() ? d->root()->lowerBound(akey) : nullptr;
    if (!lb)
        lb = d->end();
    return const_iterator(lb);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::lowerBound(const Key &akey)
{
    detach();
    Node *lb = d->root() ? d->root()->lowerBound(akey) : nullptr;
    if (!lb)
        lb = d->end();
    return iterator(lb);
}

template <class Key, class T>
inline typename QMap<Key, T>::const_iterator
QMap<Key, T>::upperBound(const Key &akey) const
{
    Node *ub = d->root() ? d->root()->upperBound(akey) : nullptr;
    if (!ub)
        ub = d->end();
    return const_iterator(ub);
}

template <class Key, class T>
inline typename QMap<Key, T>::iterator QMap<Key, T>::upperBound(const Key &akey)
{
    detach();
    Node *ub = d->root() ? d->root()->upperBound(akey) : nullptr;
    if (!ub)
        ub = d->end();
    return iterator(ub);
}

template <class Key, class T>
inline bool QMap<Key, T>::operator==(const QMap<Key, T> &other) const
{
    if (size() != other.size())
        return false;
    if (d == other.d)
        return true;

    const_iterator it1 = begin();
    const_iterator it2 = other.begin();

    while (it1 != end()) {
        if (!(it1.value() == it2.value()) || qMapLessThanKey(it1.key(), it2.key()) || qMapLessThanKey(it2.key(), it1.key()))
            return false;
        ++it2;
        ++it1;
    }
    return true;
}

template <class Key, class T>
inline QMap<Key, T>::QMap(const std::map<Key, T> &other)
{
    d = QMapData<Key, T>::create();
    typename std::map<Key,T>::const_iterator it = other.end();
    while (it != other.begin()) {
        --it;
        d->createNode((*it).first, (*it).second, d->begin(), true); 
    }
}

template <class Key, class T>
inline std::map<Key, T> QMap<Key, T>::toStdMap() const
{
    std::map<Key, T> map;
    const_iterator it = end();
    while (it != begin()) {
        --it;
        map.insert(map.begin(), std::pair<Key, T>(it.key(), it.value()));
    }
    return map;
}

template <class Key, class T>
class QMultiMap : public QMap<Key, T>
{
public:
    QMultiMap() noexcept {}
    inline QMultiMap(std::initializer_list<std::pair<Key,T> > list)
    {
        for (typename std::initializer_list<std::pair<Key,T> >::const_iterator it = list.begin(); it != list.end(); ++it)
            insert(it->first, it->second);
    }
    QMultiMap(const QMap<Key, T> &other) : QMap<Key, T>(other) {}
    QMultiMap(QMap<Key, T> &&other) noexcept : QMap<Key, T>(std::move(other)) {}
    void swap(QMultiMap<Key, T> &other) noexcept { QMap<Key, T>::swap(other); }

    inline typename QMap<Key, T>::iterator replace(const Key &key, const T &value)
    { return QMap<Key, T>::insert(key, value); }
    inline typename QMap<Key, T>::iterator insert(const Key &key, const T &value)
    { return QMap<Key, T>::insertMulti(key, value); }
    inline typename QMap<Key, T>::iterator insert(typename QMap<Key, T>::const_iterator pos, const Key &key, const T &value)
    { return QMap<Key, T>::insertMulti(pos, key, value); }

    inline QMultiMap &operator+=(const QMultiMap &other)
    { this->unite(other); return *this; }
    inline QMultiMap operator+(const QMultiMap &other) const
    { QMultiMap result = *this; result += other; return result; }

    using QMap<Key, T>::contains;
    using QMap<Key, T>::remove;
    using QMap<Key, T>::count;
    using QMap<Key, T>::find;
    using QMap<Key, T>::constFind;

    bool contains(const Key &key, const T &value) const;

    int remove(const Key &key, const T &value);

    int count(const Key &key, const T &value) const;

    typename QMap<Key, T>::iterator find(const Key &key, const T &value) {
        typename QMap<Key, T>::iterator i(find(key));
        typename QMap<Key, T>::iterator end(this->end());
        while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QMap<Key, T>::const_iterator find(const Key &key, const T &value) const {
        typename QMap<Key, T>::const_iterator i(constFind(key));
        typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
        while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QMap<Key, T>::const_iterator constFind(const Key &key, const T &value) const
        { return find(key, value); }
private:
    T &operator[](const Key &key);
    const T operator[](const Key &key) const;
};

template <class Key, class T>
inline bool QMultiMap<Key, T>::contains(const Key &key, const T &value) const
{
    return constFind(key, value) != QMap<Key, T>::constEnd();
}

template <class Key, class T>
inline int QMultiMap<Key, T>::remove(const Key &key, const T &value)
{
    int n = 0;
    typename QMap<Key, T>::iterator i(find(key));
    typename QMap<Key, T>::iterator end(QMap<Key, T>::end());
    while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
        if (i.value() == value) {
            i = this->erase(i);
            ++n;
        } else {
            ++i;
        }
    }
    return n;
}

template <class Key, class T>
inline int QMultiMap<Key, T>::count(const Key &key, const T &value) const
{
    int n = 0;
    typename QMap<Key, T>::const_iterator i(constFind(key));
    typename QMap<Key, T>::const_iterator end(QMap<Key, T>::constEnd());
    while (i != end && !qMapLessThanKey<Key>(key, i.key())) {
        if (i.value() == value)
            ++n;
        ++i;
    }
    return n;
}

template <class Key, class T> class QMapIterator { typedef typename QMap<Key,T>::const_iterator const_iterator; QMap<Key,T> c; const_iterator i, n; inline bool item_exists() const { return n != c.constEnd(); } public: typedef const_iterator Item; inline QMapIterator(const QMap<Key,T> &container) : c(container), i(c.constBegin()), n(c.constEnd()) {} inline QMapIterator &operator=(const QMap<Key,T> &container) { c = container; i = c.constBegin(); n = c.constEnd(); return *this; } inline void toFront() { i = c.constBegin(); n = c.constEnd(); } inline void toBack() { i = c.constEnd(); n = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { const_iterator p = i; return --p; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline const Key &key() const { static_cast<void>(false && (item_exists())); return n.key(); } inline bool findNext(const T &t) { while ((n = i) != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(n = --i) == t) return true; n = c.constEnd(); return false; } };
template <class Key, class T> class QMutableMapIterator { typedef typename QMap<Key,T>::iterator iterator; typedef typename QMap<Key,T>::const_iterator const_iterator; QMap<Key,T> *c; iterator i, n; inline bool item_exists() const { return const_iterator(n) != c->constEnd(); } public: typedef iterator Item; inline QMutableMapIterator(QMap<Key,T> &container) : c(&container) { i = c->begin(); n = c->end(); } inline QMutableMapIterator &operator=(QMap<Key,T> &container) { c = &container; i = c->begin(); n = c->end(); return *this; } inline void toFront() { i = c->begin(); n = c->end(); } inline void toBack() { i = c->end(); n = c->end(); } inline bool hasNext() const { return const_iterator(i) != c->constEnd(); } inline Item next() { n = i++; return n; } inline Item peekNext() const { return i; } inline bool hasPrevious() const { return const_iterator(i) != c->constBegin(); } inline Item previous() { n = --i; return n; } inline Item peekPrevious() const { iterator p = i; return --p; } inline void remove() { if (const_iterator(n) != c->constEnd()) { i = c->erase(n); n = c->end(); } } inline void setValue(const T &t) { if (const_iterator(n) != c->constEnd()) *n = t; } inline T &value() { static_cast<void>(false && (item_exists())); return *n; } inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; } inline const Key &key() const { static_cast<void>(false && (item_exists())); return n.key(); } inline bool findNext(const T &t) { while (const_iterator(n = i) != c->constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (const_iterator(i) != c->constBegin()) if (*(n = --i) == t) return true; n = c->end(); return false; } };



#line 1287 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qmap.h"
#line 48 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"

#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"












































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"




















































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qscopedpointer.h"
















































template <typename T>
struct QScopedPointerDeleter
{
    static inline void cleanup(T *pointer)
    {
        
        
        
        typedef char IsIncompleteType[ sizeof(T) ? 1 : -1 ];
        (void) sizeof(IsIncompleteType);

        delete pointer;
    }
};

template <typename T>
struct QScopedPointerArrayDeleter
{
    static inline void cleanup(T *pointer)
    {
        
        
        
        typedef char IsIncompleteType[ sizeof(T) ? 1 : -1 ];
        (void) sizeof(IsIncompleteType);

        delete [] pointer;
    }
};

struct QScopedPointerPodDeleter
{
    static inline void cleanup(void *pointer) { if (pointer) free(pointer); }
};


template <typename T>
struct QScopedPointerObjectDeleteLater
{
    static inline void cleanup(T *pointer) { if (pointer) pointer->deleteLater(); }
};

class QObject;
typedef QScopedPointerObjectDeleteLater<QObject> QScopedPointerDeleteLater;
#line 94 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qscopedpointer.h"

template <typename T, typename Cleanup = QScopedPointerDeleter<T> >
class QScopedPointer
{
    typedef T *QScopedPointer:: *RestrictedBool;
public:
    explicit QScopedPointer(T *p = nullptr) noexcept : d(p)
    {
    }

    inline ~QScopedPointer()
    {
        T *oldD = this->d;
        Cleanup::cleanup(oldD);
    }

    inline T &operator*() const
    {
        static_cast<void>(false && (d));
        return *d;
    }

    T *operator->() const noexcept
    {
        return d;
    }

    bool operator!() const noexcept
    {
        return !d;
    }






#line 132 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qscopedpointer.h"
    operator RestrictedBool() const noexcept
    {
        return isNull() ? nullptr : &QScopedPointer::d;
    }
#line 137 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qscopedpointer.h"

    T *data() const noexcept
    {
        return d;
    }

    T *get() const noexcept
    {
        return d;
    }

    bool isNull() const noexcept
    {
        return !d;
    }

    void reset(T *other = nullptr) noexcept(noexcept(Cleanup::cleanup(std::declval<T *>())))
    {
        if (d == other)
            return;
        T *oldD = d;
        d = other;
        Cleanup::cleanup(oldD);
    }

    T *take() noexcept
    {
        T *oldD = d;
        d = nullptr;
        return oldD;
    }

    void swap(QScopedPointer<T, Cleanup> &other) noexcept
    {
        qSwap(d, other.d);
    }

    typedef T *pointer;

protected:
    T *d;

private:
    QScopedPointer(const QScopedPointer &) = delete; QScopedPointer &operator=(const QScopedPointer &) = delete;
};

template <class T, class Cleanup>
inline bool operator==(const QScopedPointer<T, Cleanup> &lhs, const QScopedPointer<T, Cleanup> &rhs) noexcept
{
    return lhs.data() == rhs.data();
}

template <class T, class Cleanup>
inline bool operator!=(const QScopedPointer<T, Cleanup> &lhs, const QScopedPointer<T, Cleanup> &rhs) noexcept
{
    return lhs.data() != rhs.data();
}

template <class T, class Cleanup>
inline bool operator==(const QScopedPointer<T, Cleanup> &lhs, std::nullptr_t) noexcept
{
    return lhs.isNull();
}

template <class T, class Cleanup>
inline bool operator==(std::nullptr_t, const QScopedPointer<T, Cleanup> &rhs) noexcept
{
    return rhs.isNull();
}

template <class T, class Cleanup>
inline bool operator!=(const QScopedPointer<T, Cleanup> &lhs, std::nullptr_t) noexcept
{
    return !lhs.isNull();
}

template <class T, class Cleanup>
inline bool operator!=(std::nullptr_t, const QScopedPointer<T, Cleanup> &rhs) noexcept
{
    return !rhs.isNull();
}

template <class T, class Cleanup>
inline void swap(QScopedPointer<T, Cleanup> &p1, QScopedPointer<T, Cleanup> &p2) noexcept
{ p1.swap(p2); }

template <typename T, typename Cleanup = QScopedPointerArrayDeleter<T> >
class QScopedArrayPointer : public QScopedPointer<T, Cleanup>
{
    template <typename Ptr>
    using if_same_type = typename std::enable_if<std::is_same<typename std::remove_cv<T>::type, Ptr>::value, bool>::type;
public:
    inline QScopedArrayPointer() : QScopedPointer<T, Cleanup>(nullptr) {}

    template <typename D, if_same_type<D> = true>
    explicit QScopedArrayPointer(D *p)
        : QScopedPointer<T, Cleanup>(p)
    {
    }

    inline T &operator[](int i)
    {
        return this->d[i];
    }

    inline const T &operator[](int i) const
    {
        return this->d[i];
    }

    void swap(QScopedArrayPointer &other) noexcept 
    { QScopedPointer<T, Cleanup>::swap(other); }

private:
    explicit inline QScopedArrayPointer(void *) {
        

        
        
        

        
        
    }

    QScopedArrayPointer(const QScopedArrayPointer &) = delete; QScopedArrayPointer &operator=(const QScopedArrayPointer &) = delete;
};

template <typename T, typename Cleanup>
inline void swap(QScopedArrayPointer<T, Cleanup> &lhs, QScopedArrayPointer<T, Cleanup> &rhs) noexcept
{ lhs.swap(rhs); }



#line 272 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qscopedpointer.h"
#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject_impl.h"
















































#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject_impl.h"




namespace QtPrivate {
    









    template <typename ArgList> struct TypesAreDeclaredMetaType { enum { Value = false }; };
    template <> struct TypesAreDeclaredMetaType<List<>> { enum { Value = true }; };
    template <typename Arg, typename... Tail> struct TypesAreDeclaredMetaType<List<Arg, Tail...> >
    { enum { Value = QMetaTypeId2<Arg>::Defined && TypesAreDeclaredMetaType<List<Tail...>>::Value }; };

    template <typename ArgList, bool Declared = TypesAreDeclaredMetaType<ArgList>::Value > struct ConnectionTypes
    { static const int *types() { return nullptr; } };
    template <> struct ConnectionTypes<List<>, true>
    { static const int *types() { return nullptr; } };
    template <typename... Args> struct ConnectionTypes<List<Args...>, true>
    { static const int *types() { static const int t[sizeof...(Args) + 1] = { (QtPrivate::QMetaTypeIdHelper<Args>::qt_metatype_id())..., 0 }; return t; } };

    
    
    template<typename Func, typename Args, typename R> class QStaticSlotObject : public QSlotObjectBase
    {
        typedef QtPrivate::FunctionPointer<Func> FuncType;
        Func function;
        static void impl(int which, QSlotObjectBase *this_, QObject *r, void **a, bool *ret)
        {
            switch (which) {
            case Destroy:
                delete static_cast<QStaticSlotObject*>(this_);
                break;
            case Call:
                FuncType::template call<Args, R>(static_cast<QStaticSlotObject*>(this_)->function, r, a);
                break;
            case Compare:   
            case NumOperations:
                (void)ret;;
            }
        }
    public:
        explicit QStaticSlotObject(Func f) : QSlotObjectBase(&impl), function(f) {}
    };
}




#line 106 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject_impl.h"
#line 57 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ratio"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
	
template<intmax_t _Val>
	struct _Abs
		: integral_constant<intmax_t, (_Val < 0 ? -_Val : _Val)>
	{	
	};

	
template<intmax_t _Ax,
	intmax_t _Bx,
	bool _Sfinae = false,
	bool _Good = (_Abs<_Ax>::value <= 9223372036854775807i64 / (_Bx == 0 ? 1 : _Abs<_Bx>::value))>
	struct _Safe_mult
		: integral_constant<intmax_t, _Ax * _Bx>
	{	
	};

template<intmax_t _Ax,
	intmax_t _Bx,
	bool _Sfinae>
	struct _Safe_mult<_Ax, _Bx, _Sfinae, false>
	{	
	static_assert(_Sfinae,
		"integer arithmetic overflow");
	};

	
template<intmax_t _Val>
	struct _Sign_of
		: integral_constant<intmax_t, (_Val < 0 ? -1 : 1)>
	{	
	};

	
template<intmax_t _Ax,
	intmax_t _Bx,
	bool _Good,
	bool _Also_good>
	struct _Safe_addX
		: integral_constant<intmax_t, _Ax + _Bx>
	{	
	};

template<intmax_t _Ax,
	intmax_t _Bx>
	struct _Safe_addX<_Ax, _Bx, false, false>
	{	
	static_assert(_Always_false<_Safe_addX>,
		"integer arithmetic overflow");
	};

template<intmax_t _Ax,
	intmax_t _Bx>
	struct _Safe_add
		: _Safe_addX<_Ax, _Bx,
			_Sign_of<_Ax>::value != _Sign_of<_Bx>::value,
			(_Abs<_Ax>::value <= 9223372036854775807i64 - _Abs<_Bx>::value)>::type
	{	
	};

	
template<intmax_t _Ax,
	intmax_t _Bx>
	struct _GcdX
		: _GcdX<_Bx, _Ax % _Bx>::type
	{	
	};

template<intmax_t _Ax>
	struct _GcdX<_Ax, 0>
		: integral_constant<intmax_t, _Ax>
	{	
	};

template<intmax_t _Ax,
	intmax_t _Bx>
	struct _Gcd
		: _GcdX<_Abs<_Ax>::value, _Abs<_Bx>::value>::type
	{	
	};

template<>
	struct _Gcd<0, 0>
		: integral_constant<intmax_t, 1>	
	{	
	};

	
template<intmax_t _Nx,
	intmax_t _Dx = 1>
	struct ratio
	{	
	static_assert(_Dx != 0,
		"zero denominator");
	static_assert(-9223372036854775807i64 <= _Nx,
		"numerator too negative");
	static_assert(-9223372036854775807i64 <= _Dx,
		"denominator too negative");

	static constexpr intmax_t num = _Sign_of<_Nx>::value
		* _Sign_of<_Dx>::value * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;

	static constexpr intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>::value;

	typedef ratio<num, den> type;
	};

	
template<class _Ty>
	inline constexpr bool _Is_ratio_v = false;	

template<intmax_t _R1,
	intmax_t _R2>
	inline constexpr bool _Is_ratio_v<ratio<_R1, _R2>> = true;

	
template<class _R1,
	class _R2>
	struct _Ratio_add
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_add<R1, R2> requires R1 and R2 to be ratio<>s.");

	static constexpr intmax_t _N1 = _R1::num;
	static constexpr intmax_t _D1 = _R1::den;
	static constexpr intmax_t _N2 = _R2::num;
	static constexpr intmax_t _D2 = _R2::den;

	static constexpr intmax_t _Gx = _Gcd<_D1, _D2>::value;

	
	typedef typename ratio<
		_Safe_add<
			_Safe_mult<_N1, _D2 / _Gx>::value,
			_Safe_mult<_N2, _D1 / _Gx>::value
			>::value,
		_Safe_mult<_D1, _D2 / _Gx>::value
		>::type type;
	};

template<class _R1,
	class _R2>
	using ratio_add = typename _Ratio_add<_R1, _R2>::type;

	
template<class _R1,
	class _R2>
	struct _Ratio_subtract
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_subtract<R1, R2> requires R1 and R2 to be ratio<>s.");

	static constexpr intmax_t _N2 = _R2::num;
	static constexpr intmax_t _D2 = _R2::den;

	typedef ratio_add<_R1, ratio<-_N2, _D2>> type;
	};

template<class _R1,
	class _R2>
	using ratio_subtract = typename _Ratio_subtract<_R1, _R2>::type;

	
template<class _R1,
	class _R2>
	struct _Ratio_multiply
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_multiply<R1, R2> requires R1 and R2 to be ratio<>s.");

	static constexpr intmax_t _N1 = _R1::num;
	static constexpr intmax_t _D1 = _R1::den;
	static constexpr intmax_t _N2 = _R2::num;
	static constexpr intmax_t _D2 = _R2::den;

	static constexpr intmax_t _Gx = _Gcd<_N1, _D2>::value;
	static constexpr intmax_t _Gy = _Gcd<_N2, _D1>::value;

	typedef _Safe_mult<_N1 / _Gx, _N2 / _Gy, true> _Num;
	typedef _Safe_mult<_D1 / _Gy, _D2 / _Gx, true> _Den;
	};

template<class _R1,
	class _R2,
	bool _Sfinae = true,
	class = void>
	struct _Ratio_multiply_sfinae
	{	
	static_assert(_Sfinae,
		"integer arithmetic overflow");
	};

template<class _R1,
	class _R2,
	bool _Sfinae>
	struct _Ratio_multiply_sfinae<_R1, _R2, _Sfinae, void_t<
		typename _Ratio_multiply<_R1, _R2>::_Num::type,
		typename _Ratio_multiply<_R1, _R2>::_Den::type>>
	{	
	typedef ratio<
		_Ratio_multiply<_R1, _R2>::_Num::value,
		_Ratio_multiply<_R1, _R2>::_Den::value> type;
	};

template<class _R1,
	class _R2>
	using ratio_multiply = typename _Ratio_multiply_sfinae<_R1, _R2, false>::type;

	
template<class _R1,
	class _R2>
	struct _Ratio_divide
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_divide<R1, R2> requires R1 and R2 to be ratio<>s.");

	static constexpr intmax_t _N2 = _R2::num;
	static constexpr intmax_t _D2 = _R2::den;

	typedef ratio<_D2, _N2> _R2_inverse;
	};

template<class _R1,
	class _R2,
	bool _Sfinae = true>
	using _Ratio_divide_sfinae = typename _Ratio_multiply_sfinae<
		_R1, typename _Ratio_divide<_R1, _R2>::_R2_inverse, _Sfinae>::type;

template<class _R1,
	class _R2>
	using ratio_divide = _Ratio_divide_sfinae<_R1, _R2, false>;

	
template<class _R1,
	class _R2>
	struct ratio_equal
		: bool_constant<_R1::num == _R2::num && _R1::den == _R2::den>
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;

	
template<class _R1,
	class _R2>
	struct ratio_not_equal
		: bool_constant<!ratio_equal_v<_R1, _R2>>
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_not_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;

	
struct _Big_uint128
	{
	uint64_t _Upper;
	uint64_t _Lower;

	constexpr bool operator<(const _Big_uint128 _Rhs) const noexcept
		{
		if (_Upper != _Rhs._Upper)
			{
			return (_Upper < _Rhs._Upper);
			}

		return (_Lower < _Rhs._Lower);
		}
	};

constexpr _Big_uint128 _Big_multiply(const uint64_t _Lfactor, const uint64_t _Rfactor) noexcept
	{	
	const uint64_t _Llow = _Lfactor & 0xFFFF'FFFFULL;
	const uint64_t _Lhigh = _Lfactor >> 32;
	const uint64_t _Rlow = _Rfactor & 0xFFFF'FFFFULL;
	const uint64_t _Rhigh = _Rfactor >> 32;

	uint64_t _Temp = _Llow * _Rlow;
	const uint64_t _Lower32 = _Temp & 0xFFFF'FFFFULL;
	uint64_t _Carry = _Temp >> 32;

	_Temp = _Llow * _Rhigh + _Carry;
	const uint64_t _Mid_lower = _Temp & 0xFFFF'FFFFULL;
	const uint64_t _Mid_upper = _Temp >> 32;

	_Temp = _Lhigh * _Rlow + _Mid_lower;
	_Carry = _Temp >> 32;

	return {_Lhigh * _Rhigh + _Mid_upper + _Carry, (_Temp << 32) + _Lower32};
	}

constexpr bool _Ratio_less(const int64_t _N1, const int64_t _D1,
		const int64_t _N2, const int64_t _D2) noexcept
	{
	if (_N1 >= 0 && _N2 >= 0)
		{
		return (_Big_multiply(static_cast<uint64_t>(_N1), static_cast<uint64_t>(_D2))
			< _Big_multiply(static_cast<uint64_t>(_N2), static_cast<uint64_t>(_D1)));
		}

	if (_N1 < 0 && _N2 < 0)
		{
		return (_Big_multiply(static_cast<uint64_t>(-_N2), static_cast<uint64_t>(_D1))
			< _Big_multiply(static_cast<uint64_t>(-_N1), static_cast<uint64_t>(_D2)));
		}

	return (_N1 < _N2);
	}

template<class _R1,
	class _R2>
	struct ratio_less
		: bool_constant<_Ratio_less(_R1::num, _R1::den, _R2::num, _R2::den)>
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_less<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;

	
template<class _R1,
	class _R2>
	struct ratio_less_equal
		: bool_constant<!ratio_less_v<_R2, _R1>>
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_less_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;

	
template<class _R1,
	class _R2>
	struct ratio_greater
		: ratio_less<_R2, _R1>::type
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_greater<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;

	
template<class _R1,
	class _R2>
	struct ratio_greater_equal
		: bool_constant<!ratio_less_v<_R1, _R2>>
	{	
	static_assert(_Is_ratio_v<_R1> && _Is_ratio_v<_R2>,
		"ratio_greater_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
	};

template<class _R1,
	class _R2>
	inline constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;

	
typedef ratio<1, 1000000000000000000LL> atto;
typedef ratio<1, 1000000000000000LL> femto;
typedef ratio<1, 1000000000000LL> pico;
typedef ratio<1, 1000000000> nano;
typedef ratio<1, 1000000> micro;
typedef ratio<1, 1000> milli;
typedef ratio<1, 100> centi;
typedef ratio<1, 10> deci;
typedef ratio<10, 1> deca;
typedef ratio<100, 1> hecto;
typedef ratio<1000, 1> kilo;
typedef ratio<1000000, 1> mega;
typedef ratio<1000000000, 1> giga;
typedef ratio<1000000000000LL, 1> tera;
typedef ratio<1000000000000000LL, 1> peta;
typedef ratio<1000000000000000000LL, 1> exa;
}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ratio"
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\ratio"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"







#pragma once






__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
















  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int* __cdecl __daylight(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __dstbias(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) long* __cdecl __timezone(void);




    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char** __cdecl __tzname(void);



  
__declspec(dllimport) errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
__declspec(dllimport) errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
__declspec(dllimport) errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
__declspec(dllimport) errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
    __declspec(dllimport) errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
__declspec(dllimport) clock_t __cdecl clock(void);

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
__declspec(dllimport) double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
__declspec(dllimport) double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

__declspec(dllimport) size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl _strdate( char *_Buffer);
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"


__declspec(dllimport) errno_t __cdecl _strtime_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__declspec(dllimport) __time32_t __cdecl _time32(
      __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
__declspec(dllimport) int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
__declspec(dllimport) int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










    __declspec(dllimport) void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    











































































































          __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

    #line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    

    
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);
    #line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xtimec.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

 

#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"
  
 #line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"

extern "C" {

typedef unsigned int _Thrd_id_t;
typedef struct
	{	
	void *_Hnd;	
	_Thrd_id_t _Id;
	} _Thrd_imp_t;





typedef unsigned int (__stdcall *_Thrd_callback_t)(void *);

 
 












 
  
  
  
  
 




#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"
 #line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"

typedef struct _Mtx_internal_imp_t *_Mtx_imp_t;

typedef struct _Cnd_internal_imp_t *_Cnd_imp_t;

	
 void __cdecl _Thrd_abort(const char *);
 int __cdecl _Thrd_start(_Thrd_imp_t *, _Thrd_callback_t, void *);

 






#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"
  
 #line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xthrcommon.h"





















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xtimec.h"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

extern "C" {

typedef struct xtime
	{	
	__time64_t sec;
	long nsec;
	} xtime;

 int __cdecl xtime_get(xtime*, int);

 long __cdecl _Xtime_diff_to_millis(const xtime *);
 long __cdecl _Xtime_diff_to_millis2(const xtime*, const xtime *);
 long long __cdecl _Xtime_get_ticks(void);



 long long __cdecl _Query_perf_counter(void);
 long long __cdecl _Query_perf_frequency(void);

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xtimec.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\thr/xtimec.h"





















#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {
namespace chrono {
	
template<class _Rep>
	struct treat_as_floating_point
		: is_floating_point<_Rep>
	{	
	};

template<class _Rep>
	inline constexpr bool treat_as_floating_point_v = treat_as_floating_point<_Rep>::value;

	
template<class _Rep>
	struct duration_values
	{	
	[[nodiscard]] static constexpr _Rep zero() noexcept 
		{	
		return (_Rep(0));
		}

	[[nodiscard]] static constexpr _Rep (min)() noexcept 
		{	
		return (numeric_limits<_Rep>::lowest());
		}

	[[nodiscard]] static constexpr _Rep (max)() noexcept 
		{	
		return ((numeric_limits<_Rep>::max)());
		}
	};

	
template<class _Rep,
	class _Period = ratio<1>>
	class duration;

	
template<class _Ty>
	inline constexpr bool _Is_duration_v = _Is_specialization_v<_Ty, duration>;

template<class _To,
	class _Rep,
	class _Period,
	class = enable_if_t<_Is_duration_v<_To>>>
	constexpr _To duration_cast(const duration<_Rep, _Period>&);

template<class _Rep,
	class _Period>
	class duration
	{	
public:
	using rep = _Rep;
	using period = typename _Period::type;

	static_assert(!_Is_duration_v<_Rep>,
		"duration can't have duration as first template argument");
	static_assert(_Is_ratio_v<_Period>,
		"period not an instance of std::ratio");
	static_assert(0 < _Period::num,
		"period negative or zero");

	constexpr duration() = default;

	template<class _Rep2,
		class = enable_if_t<is_convertible_v<const _Rep2&, _Rep>
			&& (treat_as_floating_point_v<_Rep>
				|| !treat_as_floating_point_v<_Rep2>)>>
		constexpr explicit duration(const _Rep2& _Val)
			: _MyRep(static_cast<_Rep>(_Val))
		{	
		}

	template<class _Rep2,
		class _Period2,
		class = enable_if_t<treat_as_floating_point_v<_Rep>
			|| (_Ratio_divide_sfinae<_Period2, _Period>::den == 1
				&& !treat_as_floating_point_v<_Rep2>)>>
		constexpr duration(const duration<_Rep2, _Period2>& _Dur)
			: _MyRep(chrono::duration_cast<duration>(_Dur).count())
		{	
		}

	[[nodiscard]] constexpr _Rep count() const
		{	
		return (_MyRep);
		}

	[[nodiscard]] constexpr common_type_t<duration> operator+() const
		{	
		return (common_type_t<duration>(*this));
		}

	[[nodiscard]] constexpr common_type_t<duration> operator-() const
		{	
		return (common_type_t<duration>(-_MyRep));
		}

	constexpr duration& operator++()
		{	
		++_MyRep;
		return (*this);
		}

	constexpr duration operator++(int)
		{	
		return (duration(_MyRep++));
		}

	constexpr duration& operator--()
		{	
		--_MyRep;
		return (*this);
		}

	constexpr duration operator--(int)
		{	
		return (duration(_MyRep--));
		}

	constexpr duration& operator+=(const duration& _Right)
		{	
		_MyRep += _Right._MyRep;
		return (*this);
		}

	constexpr duration& operator-=(const duration& _Right)
		{	
		_MyRep -= _Right._MyRep;
		return (*this);
		}

	constexpr duration& operator*=(const _Rep& _Right)
		{	
		_MyRep *= _Right;
		return (*this);
		}

	constexpr duration& operator/=(const _Rep& _Right)
		{	
		_MyRep /= _Right;
		return (*this);
		}

	constexpr duration& operator%=(const _Rep& _Right)
		{	
		_MyRep %= _Right;
		return (*this);
		}

	constexpr duration& operator%=(const duration& _Right)
		{	
		_MyRep %= _Right.count();
		return (*this);
		}

	[[nodiscard]] static constexpr duration zero() noexcept 
		{	
		return (duration(duration_values<_Rep>::zero()));
		}

	[[nodiscard]] static constexpr duration (min)() noexcept 
		{	
		return (duration((duration_values<_Rep>::min)()));
		}

	[[nodiscard]] static constexpr duration (max)() noexcept 
		{	
		return (duration((duration_values<_Rep>::max)()));
		}

private:
	_Rep _MyRep;	
	};

template<class _Clock,
	class _Duration = typename _Clock::duration>
	class time_point
	{	
public:
	using clock = _Clock;
	using duration = _Duration;
	using rep = typename _Duration::rep;
	using period = typename _Duration::period;

	static_assert(_Is_duration_v<_Duration>,
		"duration must be an instance of std::duration");

	constexpr time_point() = default;

	constexpr explicit time_point(const _Duration& _Other)
		: _MyDur(_Other)
		{	
		}

	template<class _Duration2,
		class = enable_if_t<is_convertible_v<_Duration2, _Duration>>>
		constexpr time_point(const time_point<_Clock, _Duration2>& _Tp)
		: _MyDur(_Tp.time_since_epoch())
		{	
		}

	[[nodiscard]] constexpr _Duration time_since_epoch() const
		{	
		return (_MyDur);
		}

	constexpr time_point& operator+=(const _Duration& _Dur)
		{	
		_MyDur += _Dur;
		return (*this);
		}

	constexpr time_point& operator-=(const _Duration& _Dur)
		{	
		_MyDur -= _Dur;
		return (*this);
		}

	[[nodiscard]] static constexpr time_point (min)() noexcept 
		{	
		return (time_point((_Duration::min)()));
		}

	[[nodiscard]] static constexpr time_point (max)() noexcept 
		{	
		return (time_point((_Duration::max)()));
		}

private:
	_Duration _MyDur{duration::zero()};	
	};
}	

	
template<intmax_t _Ax,
	intmax_t _Bx>
	struct _Lcm
		: integral_constant<intmax_t, (_Ax / _Gcd<_Ax, _Bx>::value) * _Bx>
	{	
	};

	
template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	struct common_type<
		chrono::duration<_Rep1, _Period1>,
		chrono::duration<_Rep2, _Period2>>
	{	
	using type = chrono::duration<common_type_t<_Rep1, _Rep2>,
		ratio<_Gcd<_Period1::num, _Period2::num>::value,
			_Lcm<_Period1::den, _Period2::den>::value>>;
	};

template<class _Clock,
	class _Duration1,
	class _Duration2>
	struct common_type<
		chrono::time_point<_Clock, _Duration1>,
		chrono::time_point<_Clock, _Duration2>>
	{	
	using type = chrono::time_point<_Clock, common_type_t<_Duration1, _Duration2>>;
	};

namespace chrono {
	
template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>
		operator+(
			const duration<_Rep1, _Period1>& _Left,
			const duration<_Rep2, _Period2>& _Right)
	{	
	using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CD(_CD(_Left).count() + _CD(_Right).count()));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>
		operator-(
			const duration<_Rep1, _Period1>& _Left,
			const duration<_Rep2, _Period2>& _Right)
	{	
	using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CD(_CD(_Left).count() - _CD(_Right).count()));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class = enable_if_t<is_convertible_v<const _Rep2&, common_type_t<_Rep1, _Rep2>>>>
	[[nodiscard]] constexpr duration<common_type_t<_Rep1, _Rep2>, _Period1>
		operator*(
			const duration<_Rep1, _Period1>& _Left,
			const _Rep2& _Right)
	{	
	using _CR = common_type_t<_Rep1, _Rep2>;
	using _CD = duration<_CR, _Period1>;
	return (_CD(_CD(_Left).count() * _Right));
	}

template<class _Rep1,
	class _Rep2,
	class _Period2,
	class = enable_if_t<is_convertible_v<const _Rep1&, common_type_t<_Rep1, _Rep2>>>>
	[[nodiscard]] constexpr duration<common_type_t<_Rep1, _Rep2>, _Period2>
		operator*(
			const _Rep1& _Left,
			const duration<_Rep2, _Period2>& _Right)
	{	
	return (_Right * _Left);
	}

template<class _CR,
	class _Period1,
	class _Rep2,
	bool = is_convertible_v<const _Rep2&, _CR>>
	struct _Duration_div_mod1
	{	
	using type = duration<_CR, _Period1>;
	};

template<class _CR,
	class _Period1,
	class _Rep2>
	struct _Duration_div_mod1<_CR, _Period1, _Rep2, false>
	{	
	};

template<class _Rep1,
	class _Period1,
	class _Rep2,
	bool = _Is_duration_v<_Rep2>>
	struct _Duration_div_mod
	{	
	};

template<class _Rep1,
	class _Period1,
	class _Rep2>
	struct _Duration_div_mod<_Rep1, _Period1, _Rep2, false>
		: _Duration_div_mod1<common_type_t<_Rep1, _Rep2>,
			_Period1, _Rep2>
	{	
	};

template<class _Rep1,
	class _Period1,
	class _Rep2>
	[[nodiscard]] constexpr typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
		operator/(
			const duration<_Rep1, _Period1>& _Left,
			const _Rep2& _Right)
	{	
	using _CR = common_type_t<_Rep1, _Rep2>;
	using _CD = duration<_CR, _Period1>;
	return (_CD(_CD(_Left).count() / _Right));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr common_type_t<_Rep1, _Rep2>
		operator/(
			const duration<_Rep1, _Period1>& _Left,
			const duration<_Rep2, _Period2>& _Right)
	{	
	using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CD(_Left).count() / _CD(_Right).count());
	}

template<class _Rep1,
	class _Period1,
	class _Rep2>
	[[nodiscard]] constexpr typename _Duration_div_mod<_Rep1, _Period1, _Rep2>::type
		operator%(
			const duration<_Rep1, _Period1>& _Left,
			const _Rep2& _Right)
	{	
	using _CR = common_type_t<_Rep1, _Rep2>;
	using _CD = duration<_CR, _Period1>;
	return (_CD(_CD(_Left).count() % _Right));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>
		operator%(
			const duration<_Rep1, _Period1>& _Left,
			const duration<_Rep2, _Period2>& _Right)
	{	
	using _CD = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CD(_CD(_Left).count() % _CD(_Right).count()));
	}

	
template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator==(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	using _CT = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CT(_Left).count() == _CT(_Right).count());
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator!=(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator<(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	using _CT = common_type_t<duration<_Rep1, _Period1>, duration<_Rep2, _Period2>>;
	return (_CT(_Left).count() < _CT(_Right).count());
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator<=(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator>(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Rep1,
	class _Period1,
	class _Rep2,
	class _Period2>
	[[nodiscard]] constexpr bool operator>=(
		const duration<_Rep1, _Period1>& _Left,
		const duration<_Rep2, _Period2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	
template<class _To,
	class _Rep,
	class _Period,
	class _Enabled>
	[[nodiscard]] constexpr _To duration_cast(const duration<_Rep, _Period>& _Dur)
	{	
	using _CF = ratio_divide<_Period, typename _To::period>;

	using _ToRep = typename _To::rep;
	using _CR = common_type_t<_ToRep, _Rep, intmax_t>;

#pragma warning(push)
#pragma warning(disable: 6326)	
	return (_CF::num == 1 && _CF::den == 1
			? static_cast<_To>(static_cast<_ToRep>(_Dur.count()))
		: _CF::num != 1 && _CF::den == 1
			? static_cast<_To>(static_cast<_ToRep>(
				static_cast<_CR>(
					_Dur.count()) * static_cast<_CR>(_CF::num)))
		: _CF::num == 1 && _CF::den != 1
			? static_cast<_To>(static_cast<_ToRep>(
				static_cast<_CR>(_Dur.count())
					/ static_cast<_CR>(_CF::den)))
		: static_cast<_To>(static_cast<_ToRep>(
			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
				/ static_cast<_CR>(_CF::den))));
#pragma warning(pop)
	}

	
template<class _To,
	class _Rep,
	class _Period,
	class = enable_if_t<_Is_duration_v<_To>>>
	[[nodiscard]] constexpr _To floor(const duration<_Rep, _Period>& _Dur)
	{	
		
	const _To _Casted{chrono::duration_cast<_To>(_Dur)};
	if (_Casted > _Dur)
		{
		return (_To{_Casted.count() - static_cast<typename _To::rep>(1)});
		}

	return (_Casted);
	}

	
template<class _To,
	class _Rep,
	class _Period,
	class = enable_if_t<_Is_duration_v<_To>>>
	[[nodiscard]] constexpr _To ceil(const duration<_Rep, _Period>& _Dur)
	{	
		
	const _To _Casted{chrono::duration_cast<_To>(_Dur)};
	if (_Casted < _Dur)
		{
		return (_To{_Casted.count() + static_cast<typename _To::rep>(1)});
		}

	return (_Casted);
	}

	
template<class _Rep>
	constexpr bool _Is_even(_Rep _Val)
	{	
	return (_Val % 2 == 0);
	}

template<class _To,
	class _Rep,
	class _Period,
	class = enable_if_t<_Is_duration_v<_To>
		&& !treat_as_floating_point_v<typename _To::rep>>>
	[[nodiscard]] constexpr _To round(const duration<_Rep, _Period>& _Dur)
	{	
	const _To _Floored{chrono::floor<_To>(_Dur)};
	const _To _Ceiled{_Floored + _To{1}};
	const auto _Floor_adjustment = _Dur - _Floored;
	const auto _Ceil_adjustment = _Ceiled - _Dur;
	if (_Floor_adjustment < _Ceil_adjustment
		|| (_Floor_adjustment == _Ceil_adjustment && _Is_even(_Floored.count())))
		{
		return (_Floored);
		}

	return (_Ceiled);
	}

	
template<class _Rep,
	class _Period,
	class = enable_if_t<numeric_limits<_Rep>::is_signed>>
	[[nodiscard]] constexpr duration<_Rep, _Period> abs(const duration<_Rep, _Period> _Dur)
	{	
	return (_Dur < duration<_Rep, _Period>::zero()
		? duration<_Rep, _Period>::zero() - _Dur
		: _Dur);
	}

	
using nanoseconds = duration<long long, nano>;
using microseconds = duration<long long, micro>;
using milliseconds = duration<long long, milli>;
using seconds = duration<long long>;
using minutes = duration<int, ratio<60>>;
using hours = duration<int, ratio<3600>>;

	
template<class _Clock,
	class _Duration,
	class _Rep,
	class _Period>
	[[nodiscard]] constexpr time_point<_Clock,
		common_type_t<_Duration, duration<_Rep, _Period>>>
		operator+(
			const time_point<_Clock, _Duration>& _Left,
			const duration<_Rep, _Period>& _Right)
	{	
	using _RT = time_point<_Clock, common_type_t<_Duration, duration<_Rep, _Period>>>;
	return (_RT(_Left.time_since_epoch() + _Right));
	}

template<class _Rep,
	class _Period,
	class _Clock,
	class _Duration>
	[[nodiscard]] constexpr time_point<_Clock,
		common_type_t<duration<_Rep, _Period>, _Duration>>
		operator+(
			const duration<_Rep, _Period>& _Left,
			const time_point<_Clock, _Duration>& _Right)
	{	
	return (_Right + _Left);
	}

template<class _Clock,
	class _Duration,
	class _Rep,
	class _Period>
	[[nodiscard]] constexpr time_point<_Clock,
		common_type_t<_Duration, duration<_Rep, _Period>>>
		operator-(
			const time_point<_Clock, _Duration>& _Left,
			const duration<_Rep, _Period>& _Right)
	{	
	using _RT = time_point<_Clock, common_type_t<_Duration, duration<_Rep, _Period>>>;
	return (_RT(_Left.time_since_epoch() - _Right));
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr common_type_t<_Duration1, _Duration2>
		operator-(
			const time_point<_Clock, _Duration1>& _Left,
			const time_point<_Clock, _Duration2>& _Right)
	{	
	return (_Left.time_since_epoch() - _Right.time_since_epoch());
	}

	
template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator==(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (_Left.time_since_epoch() == _Right.time_since_epoch());
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator!=(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator<(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (_Left.time_since_epoch() < _Right.time_since_epoch());
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator<=(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator>(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Clock,
	class _Duration1,
	class _Duration2>
	[[nodiscard]] constexpr bool operator>=(
		const time_point<_Clock, _Duration1>& _Left,
		const time_point<_Clock, _Duration2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	
template<class _To,
	class _Clock,
	class _Duration,
	class = enable_if_t<_Is_duration_v<_To>>>
	[[nodiscard]] constexpr time_point<_Clock, _To> time_point_cast(const time_point<_Clock, _Duration>& _Time)
	{	
	return (time_point<_Clock, _To>(
		chrono::duration_cast<_To>(_Time.time_since_epoch())));
	}

	
template<class _To,
	class _Clock,
	class _Duration,
	class = enable_if_t<_Is_duration_v<_To>>>
	[[nodiscard]] constexpr time_point<_Clock, _To> floor(const time_point<_Clock, _Duration>& _Time)
	{	
	return (time_point<_Clock, _To>(
		chrono::floor<_To>(_Time.time_since_epoch())));
	}

	
template<class _To,
	class _Clock,
	class _Duration,
	class = enable_if_t<_Is_duration_v<_To>>>
	[[nodiscard]] constexpr time_point<_Clock, _To> ceil(const time_point<_Clock, _Duration>& _Time)
	{	
	return (time_point<_Clock, _To>(
		chrono::ceil<_To>(_Time.time_since_epoch())));
	}

	
template<class _To,
	class _Clock,
	class _Duration,
	class = enable_if_t<_Is_duration_v<_To>
		&& !treat_as_floating_point_v<typename _To::rep>>>
	[[nodiscard]] constexpr time_point<_Clock, _To> round(const time_point<_Clock, _Duration>& _Time)
	{	
	return (time_point<_Clock, _To>(
		chrono::round<_To>(_Time.time_since_epoch())));
	}

	
struct system_clock
	{	
	using rep = long long;

	using period = ratio_multiply<ratio<100, 1>, nano>;

	using duration = chrono::duration<rep, period>;
	using time_point = chrono::time_point<system_clock>;
	static constexpr bool is_steady = false;

	[[nodiscard]] static time_point now() noexcept
		{	
		return (time_point(duration(_Xtime_get_ticks())));
		}

	[[nodiscard]] static __time64_t to_time_t(const time_point& _Time) noexcept
		{	
		return ((__time64_t)(_Time.time_since_epoch().count()
			/ 10000000LL));
		}

	[[nodiscard]] static time_point from_time_t(__time64_t _Tm) noexcept
		{	
		return (time_point(duration(_Tm * 10000000LL)));
		}
	};

struct steady_clock
	{	
	using rep = long long;
	using period = nano;
	using duration = nanoseconds;
	using time_point = chrono::time_point<steady_clock>;
	static constexpr bool is_steady = true;

	[[nodiscard]] static time_point now() noexcept
		{	
		const long long _Freq = _Query_perf_frequency();	
		const long long _Ctr = _Query_perf_counter();
		static_assert(period::num == 1, "This assumes period::num == 1.");
		const long long _Whole = (_Ctr / _Freq) * period::den;
		const long long _Part = (_Ctr % _Freq) * period::den / _Freq;
		return (time_point(duration(_Whole + _Part)));
		}
	};

using high_resolution_clock = steady_clock;
}	

	
template<class _Rep,
	class _Period> inline
	xtime _To_xtime(const chrono::duration<_Rep, _Period>& _Rel_time)
	{	
	xtime _Xt;
	if (_Rel_time <= chrono::duration<_Rep, _Period>::zero())
		{	
		_Xt.sec = 0;
		_Xt.nsec = 0;
		}
	else
		{	
		chrono::nanoseconds _T0 =
			chrono::system_clock::now().time_since_epoch();
		_T0 += chrono::duration_cast<chrono::nanoseconds>(_Rel_time);
		_Xt.sec = chrono::duration_cast<chrono::seconds>(_T0).count();
		_T0 -= chrono::seconds(_Xt.sec);
		_Xt.nsec = (long)_T0.count();
		}
	return (_Xt);
	}

	
inline namespace literals {
inline namespace chrono_literals {
[[nodiscard]] constexpr chrono::hours operator "" h(unsigned long long _Val)
	{	
	return (chrono::hours(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double, ratio<3600>> operator "" h(
	long double _Val)
	{	
	return (chrono::duration<double, ratio<3600>>(_Val));
	}

[[nodiscard]] constexpr chrono::minutes (operator "" min)(unsigned long long _Val)
	{	
	return (chrono::minutes(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double, ratio<60>> (operator "" min)(
	long double _Val)
	{	
	return (chrono::duration<double, ratio<60>>(_Val));
	}

[[nodiscard]] constexpr chrono::seconds operator "" s(unsigned long long _Val)
	{	
	return (chrono::seconds(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double> operator "" s(long double _Val)
	{	
	return (chrono::duration<double>(_Val));
	}

[[nodiscard]] constexpr chrono::milliseconds operator "" ms(unsigned long long _Val)
	{	
	return (chrono::milliseconds(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double, milli> operator "" ms(
	long double _Val)
	{	
	return (chrono::duration<double, milli>(_Val));
	}

[[nodiscard]] constexpr chrono::microseconds operator "" us(unsigned long long _Val)
	{	
	return (chrono::microseconds(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double, micro> operator "" us(
	long double _Val)
	{	
	return (chrono::duration<double, micro>(_Val));
	}

[[nodiscard]] constexpr chrono::nanoseconds operator "" ns(unsigned long long _Val)
	{	
	return (chrono::nanoseconds(_Val));
	}

[[nodiscard]] constexpr chrono::duration<double, nano> operator "" ns(
	long double _Val)
	{	
	return (chrono::duration<double, nano>(_Val));
	}
}	
}	

namespace chrono {
	using namespace literals::chrono_literals;
}	

}
 
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"
#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\chrono"





#line 60 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"




class QEvent;
class QTimerEvent;
class QChildEvent;
struct QMetaObject;
class QVariant;
class QObjectPrivate;
class QObject;
class QThread;
class QWidget;
class QAccessibleWidget;

class QRegExp;
#line 78 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

class QRegularExpression;
#line 81 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


#line 84 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

class QObjectUserData;
#line 87 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
struct QDynamicMetaObjectData;

typedef QList<QObject*> QObjectList;

__declspec(dllimport) void qt_qFindChildren_helper(const QObject *parent, const QString &name,
                                           const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
__declspec(dllimport) void qt_qFindChildren_helper(const QObject *parent, const QRegExp &re,
                                           const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
__declspec(dllimport) void qt_qFindChildren_helper(const QObject *parent, const QRegularExpression &re,
                                           const QMetaObject &mo, QList<void *> *list, Qt::FindChildOptions options);
__declspec(dllimport) QObject *qt_qFindChild_helper(const QObject *parent, const QString &name, const QMetaObject &mo, Qt::FindChildOptions options);

class __declspec(dllimport) QObjectData {
    QObjectData(const QObjectData &) = delete; QObjectData &operator=(const QObjectData &) = delete;
public:
    QObjectData() = default;
    virtual ~QObjectData() = 0;
    QObject *q_ptr;
    QObject *parent;
    QObjectList children;

    uint isWidget : 1;
    uint blockSig : 1;
    uint wasDeleted : 1;
    uint isDeletingChildren : 1;
    uint sendChildEvents : 1;
    uint receiveChildEvents : 1;
    uint isWindow : 1; 
    uint deleteLaterCalled : 1;
    uint unused : 24;
    int postedEvents;
    QDynamicMetaObjectData *metaObject;
    QMetaObject *dynamicMetaObject() const;




};


class __declspec(dllimport) QObject
{
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    
    inline QObjectPrivate* d_func() { __pragma(warning(push))  return reinterpret_cast<QObjectPrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } inline const QObjectPrivate* d_func() const { __pragma(warning(push))  return reinterpret_cast<const QObjectPrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } friend class QObjectPrivate;

public:
     explicit QObject(QObject *parent=nullptr);
    virtual ~QObject();

    virtual bool event(QEvent *event);
    virtual bool eventFilter(QObject *watched, QEvent *event);








#line 149 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

    QString objectName() const;
    void setObjectName(const QString &name);

    inline bool isWidgetType() const { return d_ptr->isWidget; }
    inline bool isWindowType() const { return d_ptr->isWindow; }

    inline bool signalsBlocked() const noexcept { return d_ptr->blockSig; }
    bool blockSignals(bool b) noexcept;

    QThread *thread() const;
    void moveToThread(QThread *thread);

    int startTimer(int interval, Qt::TimerType timerType = Qt::CoarseTimer);

    __forceinline
    int startTimer(std::chrono::milliseconds time, Qt::TimerType timerType = Qt::CoarseTimer)
    {
        return startTimer(int(time.count()), timerType);
    }
#line 170 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
    void killTimer(int id);

    template<typename T>
    inline T findChild(const QString &aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
    {
        typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
        return static_cast<T>(qt_qFindChild_helper(this, aName, ObjType::staticMetaObject, options));
    }

    template<typename T>
    inline QList<T> findChildren(const QString &aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
    {
        typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
        QList<T> list;
        qt_qFindChildren_helper(this, aName, ObjType::staticMetaObject,
                                reinterpret_cast<QList<void *> *>(&list), options);
        return list;
    }



    template<typename T>
    __declspec(deprecated("Use findChildren(const QRegularExpression &, ...) instead."))
    inline QList<T> findChildren(const QRegExp &re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
    {
        typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
        QList<T> list;
        qt_qFindChildren_helper(this, re, ObjType::staticMetaObject,
                                reinterpret_cast<QList<void *> *>(&list), options);
        return list;
    }
#line 202 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
#line 203 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


    template<typename T>
    inline QList<T> findChildren(const QRegularExpression &re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) const
    {
        typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
        QList<T> list;
        qt_qFindChildren_helper(this, re, ObjType::staticMetaObject,
                                reinterpret_cast<QList<void *> *>(&list), options);
        return list;
    }
#line 215 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

    inline const QObjectList &children() const { return d_ptr->children; }

    void setParent(QObject *parent);
    void installEventFilter(QObject *filterObj);
    void removeEventFilter(QObject *obj);

    static QMetaObject::Connection connect(const QObject *sender, const char *signal,
                        const QObject *receiver, const char *member, Qt::ConnectionType = Qt::AutoConnection);

    static QMetaObject::Connection connect(const QObject *sender, const QMetaMethod &signal,
                        const QObject *receiver, const QMetaMethod &method,
                        Qt::ConnectionType type = Qt::AutoConnection);

    inline QMetaObject::Connection connect(const QObject *sender, const char *signal,
                        const char *member, Qt::ConnectionType type = Qt::AutoConnection) const;









    
    template <typename Func1, typename Func2>
    static inline QMetaObject::Connection connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
                                     const typename QtPrivate::FunctionPointer<Func2>::Object *receiver, Func2 slot,
                                     Qt::ConnectionType type = Qt::AutoConnection)
    {
        typedef QtPrivate::FunctionPointer<Func1> SignalType;
        typedef QtPrivate::FunctionPointer<Func2> SlotType;

        static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<typename SignalType::Object>::Value), "No Q_OBJECT in the class with the signal");
#line 251 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        
        static_assert(bool(int(SignalType::ArgumentCount) >= int(SlotType::ArgumentCount)), "The slot requires more arguments than the signal provides.");
#line 255 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
        static_assert(bool((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value)), "Signal and slot arguments are not compatible.");
#line 257 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
        static_assert(bool((QtPrivate::AreArgumentsCompatible<typename SlotType::ReturnType, typename SignalType::ReturnType>::value)), "Return type of the slot is not compatible with the return type of the signal.");
#line 259 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        const int *types = nullptr;
        if (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)
            types = QtPrivate::ConnectionTypes<typename SignalType::Arguments>::types();

        return connectImpl(sender, reinterpret_cast<void **>(&signal),
                           receiver, reinterpret_cast<void **>(&slot),
                           new QtPrivate::QSlotObject<Func2, typename QtPrivate::List_Left<typename SignalType::Arguments, SlotType::ArgumentCount>::Value,
                                           typename SignalType::ReturnType>(slot),
                            type, types, &SignalType::Object::staticMetaObject);
    }

    
    template <typename Func1, typename Func2>
    static inline typename std::enable_if<int(QtPrivate::FunctionPointer<Func2>::ArgumentCount) >= 0, QMetaObject::Connection>::type
            connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, Func2 slot)
    {
        return connect(sender, signal, sender, slot, Qt::DirectConnection);
    }

    
    template <typename Func1, typename Func2>
    static inline typename std::enable_if<int(QtPrivate::FunctionPointer<Func2>::ArgumentCount) >= 0 &&
                                          !QtPrivate::FunctionPointer<Func2>::IsPointerToMemberFunction, QMetaObject::Connection>::type
            connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, const QObject *context, Func2 slot,
                    Qt::ConnectionType type = Qt::AutoConnection)
    {
        typedef QtPrivate::FunctionPointer<Func1> SignalType;
        typedef QtPrivate::FunctionPointer<Func2> SlotType;

        static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<typename SignalType::Object>::Value), "No Q_OBJECT in the class with the signal");
#line 291 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        
        static_assert(bool(int(SignalType::ArgumentCount) >= int(SlotType::ArgumentCount)), "The slot requires more arguments than the signal provides.");
#line 295 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
        static_assert(bool((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value)), "Signal and slot arguments are not compatible.");
#line 297 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
        static_assert(bool((QtPrivate::AreArgumentsCompatible<typename SlotType::ReturnType, typename SignalType::ReturnType>::value)), "Return type of the slot is not compatible with the return type of the signal.");
#line 299 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        const int *types = nullptr;
        if (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)
            types = QtPrivate::ConnectionTypes<typename SignalType::Arguments>::types();

        return connectImpl(sender, reinterpret_cast<void **>(&signal), context, nullptr,
                           new QtPrivate::QStaticSlotObject<Func2,
                                                 typename QtPrivate::List_Left<typename SignalType::Arguments, SlotType::ArgumentCount>::Value,
                                                 typename SignalType::ReturnType>(slot),
                           type, types, &SignalType::Object::staticMetaObject);
    }

    
    template <typename Func1, typename Func2>
    static inline typename std::enable_if<QtPrivate::FunctionPointer<Func2>::ArgumentCount == -1, QMetaObject::Connection>::type
            connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, Func2 slot)
    {
        return connect(sender, signal, sender, std::move(slot), Qt::DirectConnection);
    }

    
    template <typename Func1, typename Func2>
    static inline typename std::enable_if<QtPrivate::FunctionPointer<Func2>::ArgumentCount == -1, QMetaObject::Connection>::type
            connect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal, const QObject *context, Func2 slot,
                    Qt::ConnectionType type = Qt::AutoConnection)
    {
        typedef QtPrivate::FunctionPointer<Func1> SignalType;
        const int FunctorArgumentCount = QtPrivate::ComputeFunctorArgumentCount<Func2 , typename SignalType::Arguments>::Value;

        static_assert(bool((FunctorArgumentCount >= 0)), "Signal and slot arguments are not compatible.");
#line 330 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
        const int SlotArgumentCount = (FunctorArgumentCount >= 0) ? FunctorArgumentCount : 0;
        typedef typename QtPrivate::FunctorReturnType<Func2, typename QtPrivate::List_Left<typename SignalType::Arguments, SlotArgumentCount>::Value>::Value SlotReturnType;

        static_assert(bool((QtPrivate::AreArgumentsCompatible<SlotReturnType, typename SignalType::ReturnType>::value)), "Return type of the slot is not compatible with the return type of the signal.");
#line 335 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<typename SignalType::Object>::Value), "No Q_OBJECT in the class with the signal");
#line 338 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        const int *types = nullptr;
        if (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)
            types = QtPrivate::ConnectionTypes<typename SignalType::Arguments>::types();

        return connectImpl(sender, reinterpret_cast<void **>(&signal), context, nullptr,
                           new QtPrivate::QFunctorSlotObject<Func2, SlotArgumentCount,
                                typename QtPrivate::List_Left<typename SignalType::Arguments, SlotArgumentCount>::Value,
                                typename SignalType::ReturnType>(std::move(slot)),
                           type, types, &SignalType::Object::staticMetaObject);
    }
#line 350 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

    static bool disconnect(const QObject *sender, const char *signal,
                           const QObject *receiver, const char *member);
    static bool disconnect(const QObject *sender, const QMetaMethod &signal,
                           const QObject *receiver, const QMetaMethod &member);
    inline bool disconnect(const char *signal = nullptr,
                           const QObject *receiver = nullptr, const char *member = nullptr) const
        { return disconnect(this, signal, receiver, member); }
    inline bool disconnect(const QObject *receiver, const char *member = nullptr) const
        { return disconnect(this, nullptr, receiver, member); }
    static bool disconnect(const QMetaObject::Connection &);





    template <typename Func1, typename Func2>
    static inline bool disconnect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
                                  const typename QtPrivate::FunctionPointer<Func2>::Object *receiver, Func2 slot)
    {
        typedef QtPrivate::FunctionPointer<Func1> SignalType;
        typedef QtPrivate::FunctionPointer<Func2> SlotType;

        static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<typename SignalType::Object>::Value), "No Q_OBJECT in the class with the signal");
#line 375 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        
        static_assert(bool((QtPrivate::CheckCompatibleArguments<typename SignalType::Arguments, typename SlotType::Arguments>::value)), "Signal and slot arguments are not compatible.");
#line 379 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

        return disconnectImpl(sender, reinterpret_cast<void **>(&signal), receiver, reinterpret_cast<void **>(&slot),
                              &SignalType::Object::staticMetaObject);
    }
    template <typename Func1>
    static inline bool disconnect(const typename QtPrivate::FunctionPointer<Func1>::Object *sender, Func1 signal,
                                  const QObject *receiver, void **zero)
    {
        
        
        
        static_cast<void>(false && (!zero));
        typedef QtPrivate::FunctionPointer<Func1> SignalType;
        return disconnectImpl(sender, reinterpret_cast<void **>(&signal), receiver, zero,
                              &SignalType::Object::staticMetaObject);
    }
#line 396 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"



    void dumpObjectTree(); 
    void dumpObjectInfo(); 
#line 402 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
    void dumpObjectTree() const;
    void dumpObjectInfo() const;


    bool setProperty(const char *name, const QVariant &value);
    QVariant property(const char *name) const;
    QList<QByteArray> dynamicPropertyNames() const;
#line 410 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


    __declspec(deprecated)
    static uint registerUserData();
    __declspec(deprecated("Use setProperty()"))
    void setUserData(uint id, QObjectUserData* data);
    __declspec(deprecated("Use property()"))
    QObjectUserData* userData(uint id) const;
#line 419 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

public :
    void destroyed(QObject * = nullptr);
    void objectNameChanged(const QString &objectName, QPrivateSignal);

public:
    inline QObject *parent() const { return d_ptr->parent; }

    inline bool inherits(const char *classname) const
        { return const_cast<QObject *>(this)->qt_metacast(classname) != nullptr; }

public :
    void deleteLater();

protected:
    QObject *sender() const;
    int senderSignalIndex() const;
    int receivers(const char* signal) const;
    bool isSignalConnected(const QMetaMethod &signal) const;

    virtual void timerEvent(QTimerEvent *event);
    virtual void childEvent(QChildEvent *event);
    virtual void customEvent(QEvent *event);

    virtual void connectNotify(const QMetaMethod &signal);
    virtual void disconnectNotify(const QMetaMethod &signal);

protected:
    QObject(QObjectPrivate &dd, QObject *parent = nullptr);

protected:
    QScopedPointer<QObjectData> d_ptr;

    static const QMetaObject staticQtMetaObject;
    friend inline const QMetaObject *qt_getQtMetaObject() noexcept;

    friend struct QMetaObject;
    friend struct QMetaObjectPrivate;
    friend class QMetaCallEvent;
    friend class QApplication;
    friend class QApplicationPrivate;
    friend class QCoreApplication;
    friend class QCoreApplicationPrivate;
    friend class QWidget;
    friend class QAccessibleWidget;
    friend class QThreadData;

private:
    QObject(const QObject &) = delete; QObject &operator=(const QObject &) = delete;
    

private:
    static QMetaObject::Connection connectImpl(const QObject *sender, void **signal,
                                               const QObject *receiver, void **slotPtr,
                                               QtPrivate::QSlotObjectBase *slot, Qt::ConnectionType type,
                                               const int *types, const QMetaObject *senderMetaObject);

    static bool disconnectImpl(const QObject *sender, void **signal, const QObject *receiver, void **slot,
                               const QMetaObject *senderMetaObject);

};

inline QMetaObject::Connection QObject::connect(const QObject *asender, const char *asignal,
                                            const char *amember, Qt::ConnectionType atype) const
{ return connect(asender, asignal, this, amember, atype); }

inline const QMetaObject *qt_getQtMetaObject() noexcept
{ return &QObject::staticQtMetaObject; }


class __declspec(dllimport) QObjectUserData {
    QObjectUserData(const QObjectUserData &) = delete; QObjectUserData &operator=(const QObjectUserData &) = delete;
public:
    QObjectUserData() = default;
    virtual ~QObjectUserData();
};
#line 496 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"




















#line 517 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

template <class T>
inline T qobject_cast(QObject *object)
{
    typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
    static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<ObjType>::Value), "qobject_cast requires the type to have a Q_OBJECT macro");
#line 524 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
    return static_cast<T>(ObjType::staticMetaObject.cast(object));
}

template <class T>
inline T qobject_cast(const QObject *object)
{
    typedef typename std::remove_cv<typename std::remove_pointer<T>::type>::type ObjType;
    static_assert(bool(QtPrivate::HasQ_OBJECT_Macro<ObjType>::Value), "qobject_cast requires the type to have a Q_OBJECT macro");
#line 533 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
    return static_cast<T>(ObjType::staticMetaObject.cast(object));
}


template <class T> inline const char * qobject_interface_iid()
{ return nullptr; }




#line 544 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"







#line 552 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"


__declspec(dllimport) QDebug operator<<(QDebug, const QObject *);
#line 556 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

class QSignalBlocker
{
public:
    inline explicit QSignalBlocker(QObject *o) noexcept;
    inline explicit QSignalBlocker(QObject &o) noexcept;
    inline ~QSignalBlocker();

    inline QSignalBlocker(QSignalBlocker &&other) noexcept;
    inline QSignalBlocker &operator=(QSignalBlocker &&other) noexcept;

    inline void reblock() noexcept;
    inline void unblock() noexcept;
private:
    QSignalBlocker(const QSignalBlocker &) = delete; QSignalBlocker &operator=(const QSignalBlocker &) = delete;
    QObject * m_o;
    bool m_blocked;
    bool m_inhibited;
};

QSignalBlocker::QSignalBlocker(QObject *o) noexcept
    : m_o(o),
      m_blocked(o && o->blockSignals(true)),
      m_inhibited(false)
{}

QSignalBlocker::QSignalBlocker(QObject &o) noexcept
    : m_o(&o),
      m_blocked(o.blockSignals(true)),
      m_inhibited(false)
{}

QSignalBlocker::QSignalBlocker(QSignalBlocker &&other) noexcept
    : m_o(other.m_o),
      m_blocked(other.m_blocked),
      m_inhibited(other.m_inhibited)
{
    other.m_o = nullptr;
}

QSignalBlocker &QSignalBlocker::operator=(QSignalBlocker &&other) noexcept
{
    if (this != &other) {
        
        
        if (m_o != other.m_o || (!m_inhibited && other.m_inhibited))
            unblock();
        m_o = other.m_o;
        m_blocked = other.m_blocked;
        m_inhibited = other.m_inhibited;
        
        other.m_o = nullptr;
    }
    return *this;
}

QSignalBlocker::~QSignalBlocker()
{
    if (m_o && !m_inhibited)
        m_o->blockSignals(m_blocked);
}

void QSignalBlocker::reblock() noexcept
{
    if (m_o) m_o->blockSignals(true);
    m_inhibited = false;
}

void QSignalBlocker::unblock() noexcept
{
    if (m_o) m_o->blockSignals(m_blocked);
    m_inhibited = true;
}

namespace QtPrivate {
    inline QObject & deref_for_methodcall(QObject &o) { return  o; }
    inline QObject & deref_for_methodcall(QObject *o) { return *o; }
}




#line 639 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"

#line 641 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qobject.h"
#line 46 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"



#line 50 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"









class QByteArray;
class QIODevicePrivate;

class __declspec(dllimport) QIODevice

    : public QObject
#line 66 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"
{

    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
#line 70 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"
public:
    enum OpenModeFlag {
        NotOpen = 0x0000,
        ReadOnly = 0x0001,
        WriteOnly = 0x0002,
        ReadWrite = ReadOnly | WriteOnly,
        Append = 0x0004,
        Truncate = 0x0008,
        Text = 0x0010,
        Unbuffered = 0x0020,
        NewOnly = 0x0040,
        ExistingOnly = 0x0080
    };
    typedef QFlags<OpenModeFlag> OpenMode;

    QIODevice();

    explicit QIODevice(QObject *parent);
#line 89 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"
    virtual ~QIODevice();

    OpenMode openMode() const;

    void setTextModeEnabled(bool enabled);
    bool isTextModeEnabled() const;

    bool isOpen() const;
    bool isReadable() const;
    bool isWritable() const;
    virtual bool isSequential() const;

    int readChannelCount() const;
    int writeChannelCount() const;
    int currentReadChannel() const;
    void setCurrentReadChannel(int channel);
    int currentWriteChannel() const;
    void setCurrentWriteChannel(int channel);

    virtual bool open(OpenMode mode);
    virtual void close();

    
    
    virtual qint64 pos() const;
    virtual qint64 size() const;
    virtual bool seek(qint64 pos);
    virtual bool atEnd() const;
    virtual bool reset();

    virtual qint64 bytesAvailable() const;
    virtual qint64 bytesToWrite() const;

    qint64 read(char *data, qint64 maxlen);
    QByteArray read(qint64 maxlen);
    QByteArray readAll();
    qint64 readLine(char *data, qint64 maxlen);
    QByteArray readLine(qint64 maxlen = 0);
    virtual bool canReadLine() const;

    void startTransaction();
    void commitTransaction();
    void rollbackTransaction();
    bool isTransactionStarted() const;

    qint64 write(const char *data, qint64 len);
    qint64 write(const char *data);
    inline qint64 write(const QByteArray &data)
    { return write(data.constData(), data.size()); }

    qint64 peek(char *data, qint64 maxlen);
    QByteArray peek(qint64 maxlen);
    qint64 skip(qint64 maxSize);

    virtual bool waitForReadyRead(int msecs);
    virtual bool waitForBytesWritten(int msecs);

    void ungetChar(char c);
    bool putChar(char c);
    bool getChar(char *c);

    QString errorString() const;


public :
    void readyRead();
    void channelReadyRead(int channel);
    void bytesWritten(qint64 bytes);
    void channelBytesWritten(int channel, qint64 bytes);
    void aboutToClose();
    void readChannelFinished();
#line 161 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"

protected:



    QIODevice(QIODevicePrivate &dd, QObject *parent = nullptr);
#line 168 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"
    virtual qint64 readData(char *data, qint64 maxlen) = 0;
    virtual qint64 readLineData(char *data, qint64 maxlen);
    virtual qint64 writeData(const char *data, qint64 len) = 0;

    void setOpenMode(OpenMode openMode);

    void setErrorString(const QString &errorString);





private:
    inline QIODevicePrivate* d_func() { __pragma(warning(push))  return reinterpret_cast<QIODevicePrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } inline const QIODevicePrivate* d_func() const { __pragma(warning(push))  return reinterpret_cast<const QIODevicePrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } friend class QIODevicePrivate;
    QIODevice(const QIODevice &) = delete; QIODevice &operator=(const QIODevice &) = delete;
};

constexpr inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QIODevice::OpenMode::enum_type f2) noexcept { return QFlags<QIODevice::OpenMode::enum_type>(f1) | f2; } constexpr inline QFlags<QIODevice::OpenMode::enum_type> operator|(QIODevice::OpenMode::enum_type f1, QFlags<QIODevice::OpenMode::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QIODevice::OpenMode::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }


class QDebug;
__declspec(dllimport) QDebug operator<<(QDebug debug, QIODevice::OpenMode modes);
#line 191 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"



#line 195 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qiodevice.h"
#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"






#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qstringlist.h"






















































































































































































































































































































































































































#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbytearraylist.h"






























































































#line 54 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
#line 55 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"


#pragma once











#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"


#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {

	
template<class _Base>
	struct _Non_trivial_copy
		: _Base
	{	
	using _Base::_Base;

	_Non_trivial_copy() = default;
	_Non_trivial_copy(const _Non_trivial_copy& _That)
		noexcept(noexcept(::std:: declval<_Base&>()._Construct_from(static_cast<const _Base&>(_That))))
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
		{
		_Base::_Construct_from(static_cast<const _Base&>(_That));
		}
	_Non_trivial_copy(_Non_trivial_copy&&) = default;
	_Non_trivial_copy& operator=(const _Non_trivial_copy&) = default;
	_Non_trivial_copy& operator=(_Non_trivial_copy&&) = default;
	};

template<class _Base,
	class... _Types>
	using _SMF_control_copy = conditional_t<
		conjunction_v<
			is_copy_constructible<_Types>...,
			negation<conjunction<is_trivially_copy_constructible<_Types>...>>>,
		_Non_trivial_copy<_Base>,
		_Base>;


	
template<class _Base,
	class... _Types>
	struct _Non_trivial_move
		: _SMF_control_copy<_Base, _Types...>
	{	
	using _Mybase = _SMF_control_copy<_Base, _Types...>;
	using _Mybase::_Mybase;

	_Non_trivial_move() = default;
	_Non_trivial_move(const _Non_trivial_move&) = default;
	_Non_trivial_move(_Non_trivial_move&& _That)
		noexcept(noexcept(::std:: declval<_Base&>()._Construct_from(static_cast<_Base&&>(_That))))
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
		{
		_Mybase::_Construct_from(static_cast<_Base&&>(_That));
		}
	_Non_trivial_move& operator=(const _Non_trivial_move&) = default;
	_Non_trivial_move& operator=(_Non_trivial_move&&) = default;
	};

template<class _Base,
	class... _Types>
	using _SMF_control_move = conditional_t<
		conjunction_v<
			is_move_constructible<_Types>...,
			negation<conjunction<is_trivially_move_constructible<_Types>...>>>,
		_Non_trivial_move<_Base, _Types...>,
		_SMF_control_copy<_Base, _Types...>>;


	
template<class _Base,
	class... _Types>
	struct _Non_trivial_copy_assign
		: _SMF_control_move<_Base, _Types...>
	{	
	using _Mybase = _SMF_control_move<_Base, _Types...>;
	using _Mybase::_Mybase;

	_Non_trivial_copy_assign() = default;
	_Non_trivial_copy_assign(const _Non_trivial_copy_assign&) = default;
	_Non_trivial_copy_assign(_Non_trivial_copy_assign&&) = default;
	_Non_trivial_copy_assign& operator=(const _Non_trivial_copy_assign& _That)
		noexcept(noexcept(::std:: declval<_Base&>()._Assign_from(static_cast<const _Base&>(_That))))
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
		{
		_Mybase::_Assign_from(static_cast<const _Base&>(_That));
		return (*this);
		}
	_Non_trivial_copy_assign& operator=(_Non_trivial_copy_assign&&) = default;
	};

template<class _Base,
	class... _Types>
	struct _Deleted_copy_assign
		: _SMF_control_move<_Base, _Types...>
	{	
	using _Mybase = _SMF_control_move<_Base, _Types...>;
	using _Mybase::_Mybase;

	_Deleted_copy_assign() = default;
	_Deleted_copy_assign(const _Deleted_copy_assign&) = default;
	_Deleted_copy_assign(_Deleted_copy_assign&&) = default;
	_Deleted_copy_assign& operator=(const _Deleted_copy_assign&) = delete;
	_Deleted_copy_assign& operator=(_Deleted_copy_assign&&) = default;
	};

template<class _Base,
	class... _Types>
	using _SMF_control_copy_assign =
		conditional_t<
			conjunction_v<
				is_trivially_destructible<_Types>...,
				is_trivially_copy_constructible<_Types>...,
				is_trivially_copy_assignable<_Types>...>,
			_SMF_control_move<_Base, _Types...>,
			conditional_t<
				conjunction_v<
					is_copy_constructible<_Types>...,
					is_copy_assignable<_Types>...>,
				_Non_trivial_copy_assign<_Base, _Types...>,
				_Deleted_copy_assign<_Base, _Types...>>>;


	
template<class _Base,
	class... _Types>
	struct _Non_trivial_move_assign
		: _SMF_control_copy_assign<_Base, _Types...>
	{	
	using _Mybase = _SMF_control_copy_assign<_Base, _Types...>;
	using _Mybase::_Mybase;

	_Non_trivial_move_assign() = default;
	_Non_trivial_move_assign(const _Non_trivial_move_assign&) = default;
	_Non_trivial_move_assign(_Non_trivial_move_assign&&) = default;
	_Non_trivial_move_assign& operator=(const _Non_trivial_move_assign&) = default;
	_Non_trivial_move_assign& operator=(_Non_trivial_move_assign&& _That)
		noexcept(noexcept(::std:: declval<_Base&>()._Assign_from(static_cast<_Base&&>(_That))))
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
		{
		_Mybase::_Assign_from(static_cast<_Base&&>(_That));
		return (*this);
		}
	};

template<class _Base,
	class... _Types>
	struct _Deleted_move_assign
		: _SMF_control_copy_assign<_Base, _Types...>
	{	
	using _Mybase = _SMF_control_copy_assign<_Base, _Types...>;
	using _Mybase::_Mybase;

	_Deleted_move_assign() = default;
	_Deleted_move_assign(const _Deleted_move_assign&) = default;
	_Deleted_move_assign(_Deleted_move_assign&&) = default;
	_Deleted_move_assign& operator=(const _Deleted_move_assign&) = default;
	_Deleted_move_assign& operator=(_Deleted_move_assign&&) = delete;
	};

template<class _Base,
	class... _Types>
	using _SMF_control_move_assign =
		conditional_t<
			conjunction_v<
				is_trivially_destructible<_Types>...,
				is_trivially_move_constructible<_Types>...,
				is_trivially_move_assignable<_Types>...>,
			_SMF_control_copy_assign<_Base, _Types...>,
			conditional_t<
				conjunction_v<
					is_move_constructible<_Types>...,
					is_move_assignable<_Types>...>,
				_Non_trivial_move_assign<_Base, _Types...>,
				_Deleted_move_assign<_Base, _Types...>>>;


	
template<class _Base,
	class... _Types>
	using _SMF_control = _SMF_control_move_assign<_Base, _Types...>;

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)

#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\xsmf_control.h"
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"


 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4455 4494  4619 4643 4702 4984 4988 )
 
 
 

namespace std {

	
template<class...>
	struct _All_same
		: true_type {};
template<class _First,
	class... _Rest>
	struct _All_same<_First, _Rest...>
		: bool_constant<conjunction_v<is_same<_First, _Rest>...>>
	{	
	};

	
template<class... _Types>
	struct _Meta_list
	{	
	using type = _Meta_list;
	};
struct _Meta_nil
	{};

	
template<class _List> struct _Meta_front_ {};
template<class _List> using _Meta_front =
	
	typename _Meta_front_<_List>::type;

template<class _First,
	class... _Rest>
	struct _Meta_front_<_Meta_list<_First, _Rest...>>
	{
	using type = _First;
	};

	
template<class _List> struct _Meta_pop_front_ {};
template<class _List> using _Meta_pop_front =
	
	typename _Meta_pop_front_<_List>::type;

template<class _First,
	class... _Rest>
	struct _Meta_pop_front_<_Meta_list<_First, _Rest...>>
	{
	using type = _Meta_list<_Rest...>;
	};

	
template<class _List, class _Ty> struct _Meta_push_front_ {};
template<class _List, class _Ty> using _Meta_push_front =
	
	typename _Meta_push_front_<_List, _Ty>::type;

template<class... _Types,
	class _Ty>
	struct _Meta_push_front_<_Meta_list<_Types...>, _Ty>
	{
	using type = _Meta_list<_Ty, _Types...>;
	};

	
template<class _Void,
	template<class...> class _Fn,
	class... _Args>
	struct _Meta_quote_helper_
	{};
template<template<class...> class _Fn,
	class... _Args>
	struct _Meta_quote_helper_<void_t<_Fn<_Args...>>, _Fn, _Args...>
	{
	using type = _Fn<_Args...>;
	};
template<template<class...> class _Fn>
	struct _Meta_quote
	{	
	template<class... _Types>
		using _Invoke = typename _Meta_quote_helper_<void, _Fn, _Types...>::type;
	};

	
template<class _Fn,
	class... _Args>
	using _Meta_invoke = 
		typename _Fn::template _Invoke<_Args...>;

	
template<class _Fn,
	class... _Args>
	struct _Meta_bind_back
	{	
	template<class... _Types>
		using _Invoke = _Meta_invoke<_Fn, _Types..., _Args...>;
	};

	
template<class _Fn, class _List> struct _Meta_apply_ {};
template<class _Fn, class _List> using _Meta_apply =
	
	typename _Meta_apply_<_Fn, _List>::type;

template<class _Fn,
	template<class...> class _Template,
	class... _Types>
struct _Meta_apply_<_Fn, _Template<_Types...>>
	{	
	using type = _Meta_invoke<_Fn, _Types...>;
	};

template<class _Fn,
	class _Ty,
	_Ty... _Idxs>
struct _Meta_apply_<_Fn, integer_sequence<_Ty, _Idxs...>>
	{	
	using type = _Meta_invoke<_Fn, integral_constant<_Ty, _Idxs>...>;
	};

	
template<class _Fn, class _List> struct _Meta_transform_ {};
template<class _Fn, class _List> using _Meta_transform =
	
	typename _Meta_transform_<_Fn, _List>::type;

template<class _Fn,
	class... _Types>
	struct _Meta_transform_<_Fn, _Meta_list<_Types...>>
	{
	using type = _Meta_list<_Meta_invoke<_Fn, _Types>...>;
	};

	
template<class, class, template <class...> class> struct _Meta_repeat_n_c_ {};
template<size_t _Count, class _Ty,
	template <class...> class _Continue = _Meta_list> using _Meta_repeat_n_c =
	
	typename _Meta_repeat_n_c_<_Ty, make_index_sequence<_Count>, _Continue>::type;

template<class _Ty,
	size_t>
	using _Meta_repeat_first_helper = _Ty;

template<class _Ty,
	size_t... _Idxs,
	template <class...> class _Continue>
	struct _Meta_repeat_n_c_<_Ty, index_sequence<_Idxs...>, _Continue>
	{
	using type = _Continue<_Meta_repeat_first_helper<_Ty, _Idxs>...>;
	};

	
template<class _List, size_t _Idx, class = void> struct _Meta_at_ {};
template<class _List, size_t _Idx> using _Meta_at_c =
	
	typename _Meta_at_<_List, _Idx>::type;
template<class _List, class _Idx> using _Meta_at =
	
	typename _Meta_at_<_List, _Idx::value>::type;

template<class _VoidPtrs>
	struct _Meta_at_impl; 

template<class... _VoidPtrs>
	struct _Meta_at_impl<_Meta_list<_VoidPtrs...>>
	{
	static _Meta_nil _Eval(...); 

	template<class _Ty,
		class... _Types>
		static _Ty _Eval(_VoidPtrs..., _Ty *, _Types *...); 
	};

template<class _Ty>
	constexpr _Identity<_Ty> * _Type_as_pointer()
	{
	return (nullptr);
	}

template<class... _Types,
	size_t _Idx>
	struct _Meta_at_<_Meta_list<_Types...>, _Idx, enable_if_t<(_Idx < sizeof...(_Types))>>
		: decltype(_Meta_at_impl<_Meta_repeat_n_c<_Idx, void *>>::_Eval(_Type_as_pointer<_Types>()...))
	{};

	
template<class _List, class _Ty> struct _Meta_find_index_ {};
template<class _List, class _Ty> using _Meta_find_index =
	
	typename _Meta_find_index_<_List, _Ty>::type;

inline constexpr auto _Meta_npos = static_cast<size_t>(-1);

constexpr size_t _Meta_find_index_i_(const bool * const _Ptr, const size_t _Count, const size_t _Idx = 0)
	{	
	return (_Idx >= _Count ? _Meta_npos : _Ptr[_Idx] ? _Idx : _Meta_find_index_i_(_Ptr, _Count, _Idx + 1));
	}

template<class _Ty>
	struct _Meta_find_index_<_Meta_list<>, _Ty>
		: integral_constant<size_t, _Meta_npos>
	{};

template<class... _Types,
	class _Ty>
	struct _Meta_find_index_<_Meta_list<_Types...>, _Ty>
	{
	static constexpr bool _Bools[] = { is_same_v<_Types, _Ty>... };
	using type = integral_constant<size_t, _Meta_find_index_i_(_Bools, sizeof...(_Types))>;
	};

	
template<class _List, class _Ty> struct _Meta_find_unique_index_ {};
template<class _List, class _Ty> using _Meta_find_unique_index =
	
	typename _Meta_find_unique_index_<_List, _Ty>::type;

constexpr size_t _Meta_find_unique_index_i_2(const bool * const _Ptr, const size_t _Count, const size_t _First)
	{	
	return (_First != _Meta_npos && _Meta_find_index_i_(_Ptr, _Count, _First + 1) == _Meta_npos ? _First : _Meta_npos);
	}

constexpr size_t _Meta_find_unique_index_i_(const bool * const _Ptr, const size_t _Count)
	{	
	return (_Meta_find_unique_index_i_2(_Ptr, _Count, _Meta_find_index_i_(_Ptr, _Count)));
	}

template<class _Ty>
	struct _Meta_find_unique_index_<_Meta_list<>, _Ty>
		: integral_constant<size_t, _Meta_npos>
	{};

template<class... _Types,
	class _Ty>
	struct _Meta_find_unique_index_<_Meta_list<_Types...>, _Ty>
	{
	using type = integral_constant<size_t, _Meta_find_unique_index_i_(
		_Meta_find_index_<_Meta_list<_Types...>, _Ty>::_Bools, sizeof...(_Types))>;
	};

	
template<class> struct _Meta_as_list_ {};
template<class _Ty> using _Meta_as_list =
	
	typename _Meta_as_list_<_Ty>::type;

template<template<class> class _Template,
	class... _Types>
	struct _Meta_as_list_<_Template<_Types...>>
	{	
	using type = _Meta_list<_Types...>;
	};

template<class _Ty,
	_Ty... _Idxs>
	struct _Meta_as_list_<integer_sequence<_Ty, _Idxs...>>
	{	
	using type = _Meta_list<integral_constant<_Ty, _Idxs>...>;
	};

	
template<class _List> struct _Meta_as_integer_sequence_ {};
template<class _List> using _Meta_as_integer_sequence =
	
	typename _Meta_as_integer_sequence_<_List>::type;

template<class _Ty,
	_Ty... _Idxs>
	struct _Meta_as_integer_sequence_<_Meta_list<integral_constant<_Ty, _Idxs>...>>
	{
	using type = integer_sequence<_Ty, _Idxs...>;
	};

	
template<class...> struct _Meta_concat_ {};
template<class... _Types> using _Meta_concat =
	
	typename _Meta_concat_<_Types...>::type;

template<>
	struct _Meta_concat_<_Meta_list<>>
	{
	using type = _Meta_list<>;
	};

template<class... _Items1>
	struct _Meta_concat_<_Meta_list<_Items1...>>
	{
	using type = _Meta_list<_Items1...>;
	};

template<class... _Items1,
	class... _Items2>
	struct _Meta_concat_<_Meta_list<_Items1...>, _Meta_list<_Items2...>>
	{
	using type = _Meta_list<_Items1..., _Items2...>;
	};

template<class... _Items1,
	class... _Items2,
	class... _Items3>
	struct _Meta_concat_<_Meta_list<_Items1...>, _Meta_list<_Items2...>, _Meta_list<_Items3...>>
	{
	using type = _Meta_list<_Items1..., _Items2..., _Items3...>;
	};

template<class... _Items1,
	class... _Items2,
	class... _Items3,
	class... _Rest>
	struct _Meta_concat_<_Meta_list<_Items1...>, _Meta_list<_Items2...>, _Meta_list<_Items3...>, _Rest...>
	{
	using type = _Meta_concat<_Meta_list<_Items1..., _Items2..., _Items3...>, _Rest...>;
	};

	
template<class _ListOfLists> using _Meta_join =
	
	_Meta_apply<_Meta_quote<_Meta_concat>, _ListOfLists>;

	
template<class> struct _Meta_cartesian_product_ {};
template<class _ListOfLists> using _Meta_cartesian_product =
	
	typename _Meta_cartesian_product_<_ListOfLists>::type;

template<>
	struct _Meta_cartesian_product_<_Meta_list<>>
	{
	using type = _Meta_list<>;
	};

template<class... _Items>
	struct _Meta_cartesian_product_<_Meta_list<_Meta_list<_Items...>>>
	{
	using type = _Meta_list<_Meta_list<_Items>...>;
	};

template<class... _Items,
	class... _Lists>
	struct _Meta_cartesian_product_<_Meta_list<_Meta_list<_Items...>, _Lists...>>
	{
	using type = _Meta_join<_Meta_list<_Meta_transform<
		_Meta_bind_back<_Meta_quote<_Meta_push_front>, _Items>,
		_Meta_cartesian_product<_Meta_list<_Lists...>>>...>>;
	};

	
template<class... _Types>
	class variant;

	
template<class _Ty>
	struct variant_size; 
template<class _Ty>
	struct variant_size<const _Ty>
		: variant_size<_Ty>::type
	{};
template<class _Ty>
	struct variant_size<volatile _Ty>
		: variant_size<_Ty>::type
	{};
template<class _Ty>
	struct variant_size<const volatile _Ty>
		: variant_size<_Ty>::type
	{};
template<class _Ty>
	inline constexpr size_t variant_size_v = variant_size<_Ty>::value;

template<class... _Types>
	struct variant_size<variant<_Types...>>
		: integral_constant<size_t, sizeof...(_Types)>
	{};

template<size_t _Idx,
	class _Ty>
	struct variant_alternative; 
template<size_t _Idx,
	class _Ty>
	using variant_alternative_t = typename variant_alternative<_Idx, _Ty>::type;
template<size_t _Idx,
	class _Ty>
	struct variant_alternative<_Idx, const _Ty>
	{
	using type = add_const_t<variant_alternative_t<_Idx, _Ty>>;
	};
template<size_t _Idx,
	class _Ty>
	struct variant_alternative<_Idx, volatile _Ty>
	{
	using type = add_volatile_t<variant_alternative_t<_Idx, _Ty>>;
	};
template<size_t _Idx,
	class _Ty>
	struct variant_alternative<_Idx, const volatile _Ty>
	{
	using type = add_cv_t<variant_alternative_t<_Idx, _Ty>>;
	};
template<size_t _Idx,
	class... _Types>
	struct variant_alternative<_Idx, variant<_Types...>>
	{
	static_assert(_Idx < sizeof...(_Types), "variant index out of bounds");

	using type = _Meta_at_c<_Meta_list<_Types...>, _Idx>;
	};

inline constexpr auto variant_npos = _Meta_npos;

	
class bad_variant_access
	: public exception
	{	
public:
	bad_variant_access() noexcept = default;

	[[nodiscard]] virtual const char *  what() const noexcept override
		{	
		return ("bad variant access");
		}

 





#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	};

template<bool _TrivialDestruction,
	class... _Types>
	class _Variant_storage_
	{	
	};

	
template<class... _Types>
	using _Variant_storage = _Variant_storage_<conjunction_v<
		is_trivially_destructible<_Types>...>, _Types...>;

template<class _First,
	class... _Rest>
	class _Variant_storage_<true, _First, _Rest...>
	{	
public:
	static constexpr size_t _Size = 1 + sizeof...(_Rest);
	union
		{
		remove_const_t<_First> _Head;
		_Variant_storage<_Rest...> _Tail;
		};

	_Variant_storage_() noexcept
		{	
		}

	template<class... _Types>
		constexpr explicit _Variant_storage_(integral_constant<size_t, 0>, _Types&&... _Args)
			noexcept(is_nothrow_constructible_v<_First, _Types...>)
			: _Head(static_cast<_Types&&>(_Args)...)
		{	
		}
	template<size_t _Idx,
		class... _Types,
		enable_if_t<(_Idx > 0), int> = 0>
		constexpr explicit _Variant_storage_(integral_constant<size_t, _Idx>, _Types&&... _Args)
			noexcept(is_nothrow_constructible_v<_Variant_storage<_Rest...>, integral_constant<size_t, _Idx - 1>, _Types...>)
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
			: _Tail(integral_constant<size_t, _Idx - 1>{}, static_cast<_Types&&>(_Args)...)
		{	
		}

	constexpr _First& _Get() & noexcept
		{
		return (_Head);
		}
	constexpr const _First& _Get() const & noexcept
		{
		return (_Head);
		}
	constexpr _First&& _Get() && noexcept
		{
		return (::std:: move(_Head));
		}
	constexpr const _First&& _Get() const && noexcept
		{
		return (::std:: move(_Head));
		}
	};

template<class _First,
	class... _Rest>
	class _Variant_storage_<false, _First, _Rest...>
	{	
public:
	static constexpr size_t _Size = 1 + sizeof...(_Rest);
	union
		{
		remove_const_t<_First> _Head;
		_Variant_storage<_Rest...> _Tail;
		};

	~_Variant_storage_() noexcept
		{	
			
		}

	_Variant_storage_() noexcept
		{	
		}

	template<class... _Types>
		constexpr explicit _Variant_storage_(integral_constant<size_t, 0>, _Types&&... _Args)
			noexcept(is_nothrow_constructible_v<_First, _Types...>)
			: _Head(static_cast<_Types&&>(_Args)...)
		{	
		}
	template<size_t _Idx,
		class... _Types,
		enable_if_t<(_Idx > 0), int> = 0>
		constexpr explicit _Variant_storage_(integral_constant<size_t, _Idx>, _Types&&... _Args)
			noexcept(is_nothrow_constructible_v<_Variant_storage<_Rest...>, integral_constant<size_t, _Idx - 1>, _Types...>)
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
			: _Tail(integral_constant<size_t, _Idx - 1>{}, static_cast<_Types&&>(_Args)...)
		{	
		}

	_Variant_storage_(_Variant_storage_&&) = default;
	_Variant_storage_(const _Variant_storage_&) = default;
	_Variant_storage_& operator=(_Variant_storage_&&) = default;
	_Variant_storage_& operator=(const _Variant_storage_&) = default;

	constexpr _First& _Get() & noexcept
		{
		return (_Head);
		}
	constexpr const _First& _Get() const & noexcept
		{
		return (_Head);
		}
	constexpr _First&& _Get() && noexcept
		{
		return (::std:: move(_Head));
		}
	constexpr const _First&& _Get() const && noexcept
		{
		return (::std:: move(_Head));
		}
	};












































































	

template<size_t _Idx,
	class _Storage>
	constexpr decltype(auto) _Variant_raw_get(_Storage&& _Obj)
	{	
	if constexpr (_Idx == 0)
		{
		return (static_cast<_Storage&&>(_Obj)._Get());
		}
	else if constexpr (_Idx == 1)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Get());
		}
	else if constexpr (_Idx == 2)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Get());
		}
	else if constexpr (_Idx == 3)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Tail._Get());
		}
	else if constexpr (_Idx == 4)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Tail._Tail._Get());
		}
	else if constexpr (_Idx == 5)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Tail._Tail._Tail._Get());
		}
	else if constexpr (_Idx == 6)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Tail._Tail._Tail._Tail._Get());
		}
	else if constexpr (_Idx == 7)
		{
		return (static_cast<_Storage&&>(_Obj)._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Get());
		}
	else if constexpr (_Idx < 16)
		{
		return (_Variant_raw_get<_Idx - 8>(static_cast<_Storage&&>(_Obj)
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail));
		}
	else if constexpr (_Idx < 32)
		{
		return (_Variant_raw_get<_Idx - 16>(static_cast<_Storage&&>(_Obj)
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail));
		}
	else if constexpr (_Idx < 64)
		{
		return (_Variant_raw_get<_Idx - 32>(static_cast<_Storage&&>(_Obj)
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail));
		}
	else 
		{
		return (_Variant_raw_get<_Idx - 64>(static_cast<_Storage&&>(_Obj)
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail
			._Tail._Tail._Tail._Tail._Tail._Tail._Tail._Tail));
		}
	}
















#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"

template<class _Storage,
	class _Fn>
	using _Variant_visit_raw_t = decltype(::std:: declval<_Fn>()(integral_constant<size_t, 0>{},
		_Variant_raw_get<0>(::std:: declval<_Storage>())));

template<class _Storage,
	class _Fn,
	size_t _Idx>
	constexpr _Variant_visit_raw_t<_Storage, _Fn>
	_Variant_visit_raw_dispatch(_Storage&& _Obj, _Fn&& _Func)
	{	
	return (static_cast<_Fn&&>(_Func)(integral_constant<size_t, _Idx>{},
		_Variant_raw_get<_Idx>(static_cast<_Storage&&>(_Obj))));
	}

template<class _Storage,
	class _Fn,
	class _Indices = make_index_sequence<remove_reference_t<_Storage>::_Size>>
	struct _Variant_raw_dispatch_table; 

template<class _Storage,
	class _Fn,
	size_t... _Idxs>
	struct _Variant_raw_dispatch_table<_Storage, _Fn, index_sequence<_Idxs...>>
	{	
	using _Dispatch_t = _Variant_visit_raw_t<_Storage, _Fn>(*)(_Storage&&, _Fn&&);
	static constexpr _Dispatch_t _Array[] = { &_Variant_visit_raw_dispatch<_Storage, _Fn, _Idxs>... };
	};

template<class _Storage,
	class _Fn>
	constexpr _Variant_visit_raw_t<_Storage, _Fn>
	_Variant_visit_raw(const size_t _Idx, _Storage&& _Obj, _Fn&& _Func)
	{	
		
	constexpr auto& _Array = _Variant_raw_dispatch_table<_Storage, _Fn>::_Array;
	return (_Array[_Idx](static_cast<_Storage&&>(_Obj), static_cast<_Fn&&>(_Func)));
	}

	
template<class...>
	class _Variant_base;

template<size_t _Count>
	using _Variant_index_t = 
		conditional_t<(_Count < static_cast<size_t>((numeric_limits<signed char>::max)())), signed char,
		conditional_t<(_Count < static_cast<size_t>((numeric_limits<short>::max)())), short,
		int>>;

template<class... _Types>
	struct _Variant_construct_visitor
	{	
		
	_Variant_base<_Types...>& _Self;

	template<class _Idx,
		class _Ty>
		void operator()(_Idx, _Ty&& _Source) const
		{	
			
		_Construct_in_place(_Variant_raw_get<_Idx::value>(_Self._Storage()), static_cast<_Ty&&>(_Source));
		_Self._Set_index(_Idx::value);
		}
	};

template<class... _Types>
	struct _Variant_move_assign_visitor
	{	
		
	_Variant_base<_Types...>& _Self;

	template<class _Idx,
		class _Ty>
		void operator()(_Idx, _Ty&& _Source) const
		{	
		_Variant_raw_get<_Idx::value>(_Self._Storage()) = static_cast<_Ty&&>(_Source);
		}
	};

template<class... _Types>
	struct _Variant_same_copy_assign_visitor
	{	
	_Variant_base<_Types...>& _Self;

	template<class _Idx,
		class _Ty>
		void operator()(_Idx, const _Ty& _Source) const
		{	
			
		_Variant_raw_get<_Idx::value>(_Self._Storage()) = _Source;
		}
	};

template<class _Target,
	class... _Types>
	inline constexpr bool _Variant_should_directly_construct_v =
		is_nothrow_constructible_v<_Target, _Types...> || !is_nothrow_move_constructible_v<_Target>;

template<class... _Types>
	struct _Variant_different_copy_assign_visitor
	{	
	_Variant_base<_Types...>& _Self;

	template<class _Idx,
		class _Ty>
		void operator()(_Idx, const _Ty& _Source) const
		{	
			
		auto& _Raw_target = _Variant_raw_get<_Idx::value>(_Self._Storage());
		if constexpr (_Variant_should_directly_construct_v<_Ty, const _Ty&>)
			{
			_Self._Reset();
			_Construct_in_place(_Raw_target, _Source);
			}
		else
			{
			auto _Temp = _Source;
			_Self._Reset();
			_Construct_in_place(_Raw_target, ::std:: move(_Temp));
			}

		_Self._Set_index(_Idx::value);
		}
	};

template<class... _Types>
	class _Variant_base
		: private _Variant_storage<_Types...>
	{	
public:
	using _Index_t = _Variant_index_t<sizeof...(_Types)>;
	static constexpr auto _Invalid_index = static_cast<_Index_t>(-1);
	_Index_t _Which;

	using _Storage_t = _Variant_storage<_Types...>;
	constexpr _Storage_t& _Storage() & noexcept
		{	
		return (*this);
		}
	constexpr const _Storage_t& _Storage() const & noexcept
		{	
		return (*this);
		}
	constexpr _Storage_t&& _Storage() && noexcept
		{	
		return (::std:: move(*this));
		}
	constexpr const _Storage_t&& _Storage() const && noexcept
		{	
		return (::std:: move(*this));
		}

	_Variant_base()
		: _Storage_t{}, _Which{_Invalid_index}
		{	
		}

	template<size_t _Idx,
		class... _UTypes,
		enable_if_t<is_constructible_v<_Meta_at_c<_Meta_list<_Types...>, _Idx>, _UTypes...>, int> = 0>
		constexpr explicit _Variant_base(in_place_index_t<_Idx>, _UTypes&&... _Args)
			: _Storage_t(integral_constant<size_t, _Idx>{}, static_cast<_UTypes&&>(_Args)...),
				_Which{static_cast<_Index_t>(_Idx)}
		{	
		}

	[[nodiscard]] constexpr bool valueless_by_exception() const noexcept
		{	
		return (_Which < 0);
		}
	[[nodiscard]] constexpr size_t index() const noexcept
		{	
		return (static_cast<size_t>(_Which));
		}
	void _Set_index(const size_t _Idx)
		{	
			
		_Which = static_cast<_Index_t>(_Idx);
		}

	void _Reset() noexcept
		{	

		if constexpr (!conjunction_v<is_trivially_destructible<_Types>...>)
			{
			if (!this->valueless_by_exception())
				{
				_Variant_visit_raw(index(), _Storage(), [](auto, auto& _Obj)
					{
					_Destroy_in_place(_Obj);
					});
				}
			}





#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		_Set_index(variant_npos);
		}

	void _Construct_from(const _Variant_base& _That)
		{	
		if (!_That.valueless_by_exception())
			{
			_Variant_visit_raw(_That.index(), _That._Storage(), _Variant_construct_visitor<_Types...>{*this});
			}
		}

	void _Construct_from(_Variant_base&& _That)
		noexcept(conjunction_v<is_nothrow_move_constructible<_Types>...>)
		{	
		if (!_That.valueless_by_exception())
			{
			_Variant_visit_raw(_That.index(), ::std:: move(_That)._Storage(),
				_Variant_construct_visitor<_Types...>{*this});
			}
		}

	void _Assign_from(const _Variant_base& _That)
		{	
		if (_Which == _That._Which)
			{
			if (!valueless_by_exception())
				{
				_Variant_visit_raw(_That.index(), _That._Storage(),
					_Variant_same_copy_assign_visitor<_Types...>{*this});
				}
			}
		else
			{
			if (_That.valueless_by_exception())
				{
				_Reset();
				}
			else
				{
				_Variant_visit_raw(_That.index(), _That._Storage(),
					_Variant_different_copy_assign_visitor<_Types...>{*this});
				}
			}
		}

	void _Assign_from(_Variant_base&& _That)
		noexcept(conjunction_v< is_nothrow_move_constructible<_Types>..., is_nothrow_move_assignable<_Types>...>)
#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		{	
		if (_Which == _That._Which)
			{
			if (!valueless_by_exception())
				{
				_Variant_visit_raw(_That.index(), ::std:: move(_That)._Storage(),
					_Variant_move_assign_visitor<_Types...>{*this});
				}
			}
		else
			{
			if (!valueless_by_exception())
				{
				_Reset();
				}

			if (!_That.valueless_by_exception())
				{
				_Variant_visit_raw(_That.index(), ::std:: move(_That)._Storage(),
					_Variant_construct_visitor<_Types...>{*this});
				}
			}
		}














#line 1023 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	};

template<class... _Types>
	struct _Variant_destroy_layer_
		: _Variant_base<_Types...>
	{	
	using _Variant_base<_Types...>::_Variant_base;

	~_Variant_destroy_layer_() noexcept
		{	
		this->_Reset();
		}

	_Variant_destroy_layer_() = default;
	_Variant_destroy_layer_(const _Variant_destroy_layer_&) = default;
	_Variant_destroy_layer_(_Variant_destroy_layer_&&) = default;
	_Variant_destroy_layer_& operator=(const _Variant_destroy_layer_&) = default;
	_Variant_destroy_layer_& operator=(_Variant_destroy_layer_&&) = default;
	};

template<class... _Types>
	using _Variant_destroy_layer = conditional_t<
		conjunction_v<is_trivially_destructible<_Types>...>,
		_Variant_base<_Types...>, _Variant_destroy_layer_<_Types...>>;

	
template<size_t _Idx,
	class _Ty>
	struct _Variant_init_single_overload
	{
	using _FTy = _Meta_list<integral_constant<size_t, _Idx>, _Ty> (*)(_Ty);
	operator _FTy();
	};

template<class _Indices,
	class... _Types>
	struct _Variant_init_overload_set_;

template<size_t... _Indices,
	class... _Types>
	struct _Variant_init_overload_set_<index_sequence<_Indices...>, _Types...>
		: _Variant_init_single_overload<_Indices, _Types>...
	{};

template<class... _Types>
	using _Variant_init_overload_set = _Variant_init_overload_set_<index_sequence_for<_Types...>, _Types...>;

template<class Enable,
	class _Ty,
	class... _Types>
	struct _Variant_init_helper
	{	
	};

template<class _Ty,
	class... _Types>
	struct _Variant_init_helper<void_t<
		decltype(_Variant_init_overload_set<_Types...>{}(::std:: declval<_Ty>()))>, _Ty, _Types...>
	{	
		
	using type = decltype(_Variant_init_overload_set<_Types...>{}(::std:: declval<_Ty>()));
	};

template<class _Ty,
	class... _Types>	
	using _Variant_init_type = _Meta_front<_Meta_pop_front<
		typename _Variant_init_helper<void, _Ty, _Types...>::type>>;

template<class _Ty,
	class... _Types>	
	using _Variant_init_index = _Meta_front<
		typename _Variant_init_helper<void, _Ty, _Types...>::type>;

template<class>
	struct _Is_in_place_index_specialization
		: false_type
	{};
template<size_t _Idx>
	struct _Is_in_place_index_specialization<in_place_index_t<_Idx>>
		: true_type
	{};

template<class... _Types>
	class variant
		: private _SMF_control<_Variant_destroy_layer<_Types...>, _Types...>
	{	
public:
	static_assert(conjunction_v<is_object<_Types>..., negation<is_array<_Types>>...>,
		"variant<Ts...> requires all of the Ts to be non-array object types ([variant.variant]/2).");
	static_assert(sizeof...(_Types) > 0,
		"variant<> may not be instantiated ([variant.variant]/3).");
	using _Mybase = _SMF_control<_Variant_destroy_layer<_Types...>, _Types...>;

	
	template<class _First = _Meta_front<_Meta_list<_Types...>>,
		enable_if_t<is_default_constructible_v<_First>, int> = 0>
		constexpr variant()
			noexcept(is_nothrow_default_constructible_v<_First>)
			: _Mybase(in_place_index<0>)
		{	
		}

	template<class _Ty,
		enable_if_t<sizeof...(_Types) != 0
			&& !is_same_v<remove_cv_t<remove_reference_t<_Ty>>, variant>
			&& !_Is_specialization_v<remove_cv_t<remove_reference_t<_Ty>>, in_place_type_t>
			&& !_Is_in_place_index_specialization<remove_cv_t<remove_reference_t<_Ty>>>::value
			&& is_constructible_v<_Variant_init_type<_Ty, _Types...>, _Ty>, int> = 0>
		constexpr variant(_Ty&& _Obj)
			noexcept(is_nothrow_constructible_v<_Variant_init_type<_Ty, _Types...>, _Ty>)
			: _Mybase(in_place_index<_Variant_init_index<_Ty, _Types...>::value>, static_cast<_Ty&&>(_Obj))
		{	
		}

	template<class _Ty,
		class... _UTypes,
		class _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>,
		enable_if_t<_Idx::value != _Meta_npos && is_constructible_v<_Ty, _UTypes...>, int> = 0>
		constexpr explicit variant(in_place_type_t<_Ty>, _UTypes&&... _Args)
			: _Mybase(in_place_index<_Idx::value>, static_cast<_UTypes&&>(_Args)...)
		{	
		}
	template<class _Ty,
		class _Elem,
		class... _UTypes,
		class _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>,
		enable_if_t<_Idx::value != _Meta_npos
			&& is_constructible_v<_Ty, initializer_list<_Elem>&, _UTypes...>,
			int> = 0>
		constexpr explicit variant(in_place_type_t<_Ty>, initializer_list<_Elem> _Ilist, _UTypes&&... _Args)
			: _Mybase(in_place_index<_Idx::value>, _Ilist, static_cast<_UTypes&&>(_Args)...)
		{	
		}

	template<size_t _Idx,
		class... _UTypes,
		enable_if_t<is_constructible_v<_Meta_at_c<_Meta_list<_Types...>, _Idx>, _UTypes...>, int> = 0>
		constexpr explicit variant(in_place_index_t<_Idx>, _UTypes&&... _Args)
			: _Mybase(in_place_index<_Idx>, static_cast<_UTypes&&>(_Args)...)
		{	
		}
	template<size_t _Idx,
		class _Elem,
		class... _UTypes,
		enable_if_t<is_constructible_v<_Meta_at_c<_Meta_list<_Types...>, _Idx>,
			initializer_list<_Elem>&, _UTypes...>, int> = 0>
		constexpr explicit variant(in_place_index_t<_Idx>, initializer_list<_Elem> _Ilist, _UTypes&&... _Args)
			: _Mybase(in_place_index<_Idx>, _Ilist, static_cast<_UTypes&&>(_Args)...)
		{	
		}

	
	template<class _Ty,
		enable_if_t<!is_same_v<remove_cv_t<remove_reference_t<_Ty>>, variant>
			&& is_constructible_v<_Variant_init_type<_Ty, _Types...>, _Ty>
			&& is_assignable_v<_Variant_init_type<_Ty, _Types...>&, _Ty>, int> = 0>
		variant& operator=(_Ty&& _Obj)
			noexcept(is_nothrow_assignable_v<_Variant_init_type<_Ty, _Types...>&, _Ty> && is_nothrow_constructible_v<_Variant_init_type<_Ty, _Types...>, _Ty>)
#line 1182 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		{	
		constexpr size_t _Idx = _Variant_init_index<_Ty, _Types...>::value;
		if (index() == _Idx)
			{
			_Variant_raw_get<_Idx>(this->_Storage()) = static_cast<_Ty&&>(_Obj);
			}
		else
			{
			using _TargetTy = _Variant_init_type<_Ty, _Types...>;
			if constexpr (_Variant_should_directly_construct_v<_TargetTy, _Ty>)
				{
				this->_Reset();
				_Emplace_valueluess<_Idx>(static_cast<_Ty&&>(_Obj));
				}
			else
				{
				_TargetTy _Temp(static_cast<_Ty&&>(_Obj));
				this->_Reset();
				_Emplace_valueluess<_Idx>(::std:: move(_Temp));
				}
			}

		return (*this);
		}

	
	using _Mybase::_Storage;

	template<class _Ty,
		class... _ArgTypes,
		size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value,
		enable_if_t<_Idx != _Meta_npos && is_constructible_v<_Ty, _ArgTypes...>, int> = 0>
		_Ty& emplace(_ArgTypes&&... _Args)
		{	
		this->_Reset();
		return (_Emplace_valueluess<_Idx>(static_cast<_ArgTypes&&>(_Args)...));
		}
	template<class _Ty,
		class _Elem,
		class... _ArgTypes,
		size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value,
		enable_if_t<_Idx != _Meta_npos
			&& is_constructible_v<_Ty, initializer_list<_Elem>&, _ArgTypes...>,
			int> = 0>
		_Ty& emplace(initializer_list<_Elem> _Ilist, _ArgTypes&&... _Args)
		{	
		this->_Reset();
		return (_Emplace_valueluess<_Idx>(_Ilist, static_cast<_ArgTypes&&>(_Args)...));
		}

	template<size_t _Idx,
		class... _ArgTypes,
		class _Ty = _Meta_at_c<_Meta_list<_Types...>, _Idx>,
		enable_if_t<is_constructible_v<_Ty, _ArgTypes...>, int> = 0>
		_Ty& emplace(_ArgTypes&&... _Args)
		{	
		this->_Reset();
		return (_Emplace_valueluess<_Idx>(static_cast<_ArgTypes&&>(_Args)...));
		}
	template<size_t _Idx,
		class _Elem,
		class... _ArgTypes,
		class _Ty = _Meta_at_c<_Meta_list<_Types...>, _Idx>,
		enable_if_t<is_constructible_v<_Ty, initializer_list<_Elem>&, _ArgTypes...>, int> = 0>
		_Ty& emplace(initializer_list<_Elem> _Ilist, _ArgTypes&&... _Args)
		{	
		this->_Reset();
		return (_Emplace_valueluess<_Idx>(_Ilist, static_cast<_ArgTypes&&>(_Args)...));
		}

	
	using _Mybase::valueless_by_exception;
	using _Mybase::index;

	
	void swap(variant& _That)
		noexcept(conjunction_v<is_nothrow_move_constructible<_Types>..., is_nothrow_swappable<_Types>...>)
#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		{	
			
		static_assert(conjunction_v<is_move_constructible<_Types>...>,
			"variant<Types...>::swap requires all of the Types... to be move constructible.");
		static_assert(disjunction_v<negation<is_move_constructible<_Types>>...,
			conjunction<is_swappable<_Types>...>>,
			"variant<Types...>::swap requires all of the Types... to be swappable.");

		if constexpr (conjunction_v<_Is_trivially_swappable<_Types>...>)
			{
			using _BaseTy = _Variant_base<_Types...>;
			::std:: swap(static_cast<_BaseTy&>(*this), static_cast<_BaseTy&>(_That));
			}
		else
			{
			if (this->_Which == _That._Which)
				{
				if (!this->valueless_by_exception())
					{
					_Variant_visit_raw(static_cast<size_t>(this->_Which), _That._Storage(),
						[this](auto _Idx, auto& _Other)
						{
						_Swap_adl(_Variant_raw_get<_Idx>(this->_Storage()), _Other);
						});
					}
				}
			else
				{
				variant _Tmp = ::std:: move(*this);
				this->_Emplace_from(::std:: move(_That));
				_That._Emplace_from(::std:: move(_Tmp));
				}
			}



#line 1297 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		}

private:


























#line 1327 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"

	template<size_t _Idx,
		class... _ArgTypes,
		class _Ty = _Meta_at_c<_Meta_list<_Types...>, _Idx>>
		_Ty& _Emplace_valueluess(_ArgTypes&&... _Args)
		{	
			
		auto& _Obj = _Variant_raw_get<_Idx>(this->_Storage());
		_Construct_in_place(_Obj, static_cast<_ArgTypes&&>(_Args)...);
		this->_Set_index(_Idx);
		return (_Obj);
		}

	void _Emplace_from(variant&& _That)
		{	
		this->_Reset();
		if (_That.valueless_by_exception())
			{
			return;
			}

		_Variant_visit_raw(_That.index(), ::std:: move(_That)._Storage(), [this](auto _Idx, auto&& _Source)
			{
			_Emplace_valueluess<_Idx>(static_cast<decltype(_Source)&&>(_Source));
			});
		}
	};

	
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr bool holds_alternative(const variant<_Types...>& _Var) noexcept
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx != _Meta_npos,
		"holds_alternative<T>(const variant<Types...>&) requires T to occur exactly once in Types.");
	return (_Var.index() == _Idx);
	}

template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(variant<_Types...>& _Var)
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	if (_Var.index() != _Idx)
		{
		throw bad_variant_access{};
		}

	return (_Variant_raw_get<_Idx>(_Var._Storage()));
	}
template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(variant<_Types...>&& _Var)
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	if (_Var.index() != _Idx)
		{
		throw bad_variant_access{};
		}

	return (_Variant_raw_get<_Idx>(::std:: move(_Var)._Storage()));
	}
template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(const variant<_Types...>& _Var)
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	if (_Var.index() != _Idx)
		{
		throw bad_variant_access{};
		}

	return (_Variant_raw_get<_Idx>(_Var._Storage()));
	}
template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(const variant<_Types...>&& _Var)
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	if (_Var.index() != _Idx)
		{
		throw bad_variant_access{};
		}

	return (_Variant_raw_get<_Idx>(::std:: move(_Var)._Storage()));
	}

template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(variant<_Types...>& _Var)
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx < sizeof...(_Types),
		"get<T>(variant<Types...>&) requires T to occur exactly once in Types.");
	return (::std:: get<_Idx>(_Var));
	}
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(variant<_Types...>&& _Var)
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx < sizeof...(_Types),
		"get<T>(variant<Types...>&&) requires T to occur exactly once in Types.");
	return (::std:: get<_Idx>(::std:: move(_Var)));
	}
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(const variant<_Types...>& _Var)
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx < sizeof...(_Types),
		"get<T>(const variant<Types...>&) requires T to occur exactly once in Types.");
	return (::std:: get<_Idx>(_Var));
	}
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr decltype(auto) get(const variant<_Types...>&& _Var)
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx < sizeof...(_Types),
		"get<T>(const variant<Types...>&&) requires T to occur exactly once in Types.");
	return (::std:: get<_Idx>(::std:: move(_Var)));
	}

template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr auto get_if(variant<_Types...> * _Ptr) noexcept
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	return (_Ptr && _Ptr->index() == _Idx ? ::std:: addressof(::std:: get<_Idx>(*_Ptr)) : nullptr);
	}
template<size_t _Idx,
	class... _Types>
	[[nodiscard]] constexpr auto get_if(const variant<_Types...> * _Ptr) noexcept
	{	
	static_assert(_Idx < sizeof...(_Types),
		"variant index out of bounds");
	return (_Ptr && _Ptr->index() == _Idx ? ::std:: addressof(::std:: get<_Idx>(*_Ptr)) : nullptr);
	}

template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr add_pointer_t<_Ty> get_if(variant<_Types...> * _Ptr) noexcept
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx != _Meta_npos,
		"get_if<T>(variant<Types...> *) requires T to occur exactly once in Types.");
	return (::std:: get_if<_Idx>(_Ptr));
	}
template<class _Ty,
	class... _Types>
	[[nodiscard]] constexpr add_pointer_t<const _Ty> get_if(const variant<_Types...> * _Ptr) noexcept
	{	
	constexpr size_t _Idx = _Meta_find_unique_index<_Meta_list<_Types...>, _Ty>::value;
	static_assert(_Idx != _Meta_npos,
		"get_if<T>(const variant<Types...> *) requires T to occur exactly once in Types.");
	return (::std:: get_if<_Idx>(_Ptr));
	}

	
template<template<class...> class _Op,
	class... _Types>
	struct _Variant_relop_visitor
	{	
	const variant<_Types...>& _Left;

	template<class _Idx,
		class _Ty>
		constexpr bool operator()(_Idx, const _Ty& _Right) const
		{	
			
		using _CmpTy = remove_cv_t<remove_reference_t<_Meta_at<_Meta_list<_Types...>, _Idx>>>;
		return (_Op<_CmpTy>{}(_Variant_raw_get<_Idx::value>(_Left._Storage()), _Right));
		}
	};

template<class... _Types>
	[[nodiscard]] constexpr bool operator==(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
	using _Var = _Variant_relop_visitor<equal_to, _Types...>;
	return (_Left.index() == _Right.index() && (_Left.valueless_by_exception()
		|| _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left})));
	}

template<class... _Types>
	[[nodiscard]] constexpr bool operator!=(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
	using _Var = _Variant_relop_visitor<not_equal_to, _Types...>;
	return (_Left.index() != _Right.index() || (!_Left.valueless_by_exception()
		&& _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left})));
	}

template<class... _Types>
	[[nodiscard]] constexpr bool operator<(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
	using _Var = _Variant_relop_visitor<less, _Types...>;
	return (!_Right.valueless_by_exception() && (_Left.valueless_by_exception()
		|| _Left.index() < _Right.index() || (!(_Left.index() > _Right.index())
			&& _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left}))));
	}

template<class... _Types>
	[[nodiscard]] constexpr bool operator>(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
	using _Var = _Variant_relop_visitor<greater, _Types...>;
	return (!_Left.valueless_by_exception() && (_Right.valueless_by_exception()
		|| _Right.index() < _Left.index() || (!(_Right.index() > _Left.index())
			&& _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left}))));
	}

template<class... _Types>
	[[nodiscard]] constexpr bool operator<=(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
		
	using _Var = _Variant_relop_visitor<less_equal, _Types...>;
	return (_Left.valueless_by_exception() || (!_Right.valueless_by_exception()
		&& (_Left.index() < _Right.index() || (!(_Left.index() > _Right.index())
			&& _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left})))));
	}

template<class... _Types>
	[[nodiscard]] constexpr bool operator>=(const variant<_Types...>& _Left, const variant<_Types...>& _Right)
	{	
		
	using _Var = _Variant_relop_visitor<greater_equal, _Types...>;
	return (_Right.valueless_by_exception() || (!_Left.valueless_by_exception()
		&& (_Right.index() < _Left.index() || (!(_Right.index() > _Left.index())
			&& _Variant_visit_raw(_Right.index(), _Right._Storage(), _Var{_Left})))));
	}

	
template<class...>
	inline constexpr size_t _Variant_total_alternatives = 1;
template<class _First, class... _Rest>
	inline constexpr size_t _Variant_total_alternatives<_First, _Rest...> =
		variant_size_v<_First> * _Variant_total_alternatives<_Rest...>;

constexpr size_t _Variant_visit_index()
	{	
	return (0);
	}
template<class _FirstTy,
	class... _RestTys>
	constexpr size_t _Variant_visit_index(const _FirstTy& _First, const _RestTys&... _Rest)
	{	
	const size_t _Idx = _First.index();
	if (_Idx >= variant_size_v<_FirstTy>)
		{
		throw bad_variant_access{};
		}

	constexpr size_t _Scale = _Variant_total_alternatives<_RestTys...>; 
	return (_Idx * _Scale + _Variant_visit_index(_Rest...));
	}

template<class _Callable,
	class... _Types>
	using _Variant_visit_result_t =
		decltype(_C_invoke(::std:: declval<_Callable>(), ::std:: get<0>(::std:: declval<_Types>())...));

template<class _Ordinals,
	class _Callable,
	class _Variants>
	struct _Variant_dispatch_table_; 

template<class _Callable,
	class _IndexSequence,
	class... _Variants>
	struct _Variant_single_visit_result; 

template<class _Callable,
	size_t... _Idxs,
	class... _Variants>
	struct _Variant_single_visit_result<_Callable, index_sequence<_Idxs...>, _Variants...>
	{	
	using type = decltype(_C_invoke(::std:: declval<_Callable>(), ::std:: get<_Idxs>(::std:: declval<_Variants>())...));
	};

template<class _Callable,
	class _ListOfIndexVectors,
	class... _Variants>
	struct _Variant_all_visit_results_same; 

template<class _Callable,
	class... _IndexVectors,
	class... _Variants>
	struct _Variant_all_visit_results_same<_Callable, _Meta_list<_IndexVectors...>, _Variants...>
		: _All_same<typename _Variant_single_visit_result<_Callable, _IndexVectors, _Variants...>::type...>::type
	{	
		
	};

template<class _Callable,
	class... _Variants,
	enable_if_t<conjunction_v<_Is_specialization<remove_cv_t<remove_reference_t<_Variants>>, variant>...>, int> = 0>
	constexpr _Variant_visit_result_t<_Callable, _Variants...> visit(_Callable&& _Obj, _Variants&&... _Args);
	

	
struct monostate
	{	
	};

	
[[nodiscard]] constexpr bool operator<(monostate, monostate) noexcept
	{	
	return (false);
	}
[[nodiscard]] constexpr bool operator>(monostate, monostate) noexcept
	{	
	return (false);
	}
[[nodiscard]] constexpr bool operator<=(monostate, monostate) noexcept
	{	
	return (true);
	}
[[nodiscard]] constexpr bool operator>=(monostate, monostate) noexcept
	{	
	return (true);
	}
[[nodiscard]] constexpr bool operator==(monostate, monostate) noexcept
	{	
	return (true);
	}
[[nodiscard]] constexpr bool operator!=(monostate, monostate) noexcept
	{	
	return (false);
	}

	
template<class... _Types,
	enable_if_t<conjunction_v<is_move_constructible<_Types>..., is_swappable<_Types>...>, int> = 0> inline
	void swap(variant<_Types...>& _Left, variant<_Types...>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

	
struct _Variant_hash_visitor
	{	
	template<class _Ty>
		size_t operator()(const _Ty& _Obj) const
		{	
		return (hash<_Ty>{}(_Obj));
		}
	};

template<class... _Types>
	struct hash<variant<_Types...>>
		: _Conditionally_enabled_hash<variant<_Types...>,
			conjunction_v<is_default_constructible<hash<remove_const_t<_Types>>>...>>
	{	
	static size_t _Do_hash(const variant<_Types...>& _Var)
			noexcept(conjunction_v<_Is_nothrow_hashable<remove_const_t<_Types>>...>) 
		{	
		if (_Var.valueless_by_exception())
			{
			return (0);
			}

		return (::std:: visit(_Variant_hash_visitor{}, _Var));
		}
	};

template<>
	struct hash<monostate>
	{	
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef monostate argument_type;
	[[deprecated("warning STL4007: Many result_type typedefs " "and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. " "You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING " "or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t result_type;

	[[nodiscard]] size_t operator()(monostate) const noexcept
		{	
		return (1729);
		}
	};




template<size_t... _Is,
	class _Callable,
	class... _Types>
	constexpr _Variant_visit_result_t<_Callable, _Types...>
	_Variant_visit1(index_sequence<_Is...>, _Callable&& _Obj, _Types&&... _Args)

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	{	

 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	return (_C_invoke(static_cast<_Callable&&>(_Obj),
		_Variant_raw_get<_Is>(static_cast<_Types&&>(_Args)._Storage())...));

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	}

template<class _Indices,
	class _Callable,
	class... _Types>
	constexpr _Variant_visit_result_t<_Callable, _Types...>
	_Variant_visit_dispatch(_Callable&& _Obj, _Types&&... _Args)

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	{	

 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	return (_Variant_visit1(_Indices{}, static_cast<_Callable&&>(_Obj), static_cast<_Types&&>(_Args)...));

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	}

template<class... _Ordinals,
	class _Callable,
	class... _Variants>
	struct _Variant_dispatch_table_<_Meta_list<_Ordinals...>, _Callable, _Meta_list<_Variants...>>
	{	
	using _Dispatch_t = _Variant_visit_result_t<_Callable, _Variants...>(*)(_Callable&&, _Variants&&...);
	static constexpr _Dispatch_t _Array[] = { &_Variant_visit_dispatch<_Ordinals, _Callable, _Variants...>... };
	};

template<class... _Ordinals,
	class _Callable,
	class... _Variants>
	constexpr _Variant_visit_result_t<_Callable, _Variants...>
	_Visit1(_Meta_list<_Ordinals...>, _Callable&& _Obj, _Variants&&... _Args)

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	{	

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	constexpr auto& _Array =
		_Variant_dispatch_table_<_Meta_list<_Ordinals...>, _Callable, _Meta_list<_Variants...>>::_Array;

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	const auto _Idx = _Variant_visit_index(_Args...);

 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	return (_Array[_Idx](static_cast<_Callable&&>(_Obj), static_cast<_Variants&&>(_Args)...));

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	}

template<class _Callable,
	class... _Variants,
	enable_if_t<conjunction_v<_Is_specialization<remove_cv_t<remove_reference_t<_Variants>>, variant>...>, int> >
	constexpr _Variant_visit_result_t<_Callable, _Variants...> visit(_Callable&& _Obj, _Variants&&... _Args)

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	{	
	using _ListOfIndexLists = _Meta_list<
		_Meta_as_list<make_index_sequence<variant_size_v<remove_cv_t<remove_reference_t<_Variants>>>>>...>;
	using _ListOfIndexVectors = _Meta_transform<_Meta_quote<_Meta_as_integer_sequence>,
		_Meta_cartesian_product<_ListOfIndexLists>>;
	static_assert(_Variant_all_visit_results_same<_Callable, _ListOfIndexVectors, _Variants...>::value,
		"visit() requires the result of all potential invocations to have the same type and value category "
		"(N4741 23.7.7 [variant.visit]/2).");

	if constexpr (sizeof...(_Args) == 0)
		{

 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		return (_C_invoke(static_cast<_Callable&&>(_Obj)));

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		}
	else
		{

 #line 16707565 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 16707566 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		return (_Visit1(_ListOfIndexVectors{}, static_cast<_Callable&&>(_Obj), static_cast<_Variants&&>(_Args)...));

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
		}

 #line 15732479 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732480 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
	}

}

 
 
 #pragma warning(pop)
 #pragma pack(pop)



#line 15732492 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732493 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 15732494 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\include\\variant"
#line 58 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"


#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"




class QBitArray;
class QDataStream;
class QDate;
class QDateTime;

class QEasingCurve;
#line 72 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
class QLine;
class QLineF;
class QLocale;
class QMatrix;
class QTransform;
class QStringList;
class QTime;
class QPoint;
class QPointF;
class QSize;
class QSizeF;
class QRect;
class QRectF;

class QRegExp;
#line 88 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

class QRegularExpression;
#line 91 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
class QTextFormat;
class QTextLength;
class QUrl;
class QVariant;
class QVariantComparisonHelper;

template<typename T>
inline T qvariant_cast(const QVariant &);

namespace QtPrivate {

    template <typename Derived, typename Argument, typename ReturnType>
    struct ObjectInvoker
    {
        static ReturnType invoke(Argument a)
        {
            return Derived::object(a);
        }
    };

    template <typename Derived, typename Argument, typename ReturnType>
    struct MetaTypeInvoker
    {
        static ReturnType invoke(Argument a)
        {
            return Derived::metaType(a);
        }
    };

    template <typename Derived, typename T, typename Argument, typename ReturnType, bool = IsPointerToTypeDerivedFromQObject<T>::Value>
    struct TreatAsQObjectBeforeMetaType : ObjectInvoker<Derived, Argument, ReturnType>
    {
    };

    template <typename Derived, typename T, typename Argument, typename ReturnType>
    struct TreatAsQObjectBeforeMetaType<Derived, T, Argument, ReturnType, false> : MetaTypeInvoker<Derived, Argument, ReturnType>
    {
    };

    template<typename T> struct QVariantValueHelper;
}

class __declspec(dllimport) QVariant
{
 public:
    enum Type {
        Invalid = QMetaType::UnknownType,
        Bool = QMetaType::Bool,
        Int = QMetaType::Int,
        UInt = QMetaType::UInt,
        LongLong = QMetaType::LongLong,
        ULongLong = QMetaType::ULongLong,
        Double = QMetaType::Double,
        Char = QMetaType::QChar,
        Map = QMetaType::QVariantMap,
        List = QMetaType::QVariantList,
        String = QMetaType::QString,
        StringList = QMetaType::QStringList,
        ByteArray = QMetaType::QByteArray,
        BitArray = QMetaType::QBitArray,
        Date = QMetaType::QDate,
        Time = QMetaType::QTime,
        DateTime = QMetaType::QDateTime,
        Url = QMetaType::QUrl,
        Locale = QMetaType::QLocale,
        Rect = QMetaType::QRect,
        RectF = QMetaType::QRectF,
        Size = QMetaType::QSize,
        SizeF = QMetaType::QSizeF,
        Line = QMetaType::QLine,
        LineF = QMetaType::QLineF,
        Point = QMetaType::QPoint,
        PointF = QMetaType::QPointF,
        RegExp = QMetaType::QRegExp,
        RegularExpression = QMetaType::QRegularExpression,
        Hash = QMetaType::QVariantHash,

        EasingCurve = QMetaType::QEasingCurve,
#line 170 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
        Uuid = QMetaType::QUuid,

        ModelIndex = QMetaType::QModelIndex,
        PersistentModelIndex = QMetaType::QPersistentModelIndex,
#line 175 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
        LastCoreType = QMetaType::LastCoreType,

        Font = QMetaType::QFont,
        Pixmap = QMetaType::QPixmap,
        Brush = QMetaType::QBrush,
        Color = QMetaType::QColor,
        Palette = QMetaType::QPalette,
        Image = QMetaType::QImage,
        Polygon = QMetaType::QPolygon,
        Region = QMetaType::QRegion,
        Bitmap = QMetaType::QBitmap,
        Cursor = QMetaType::QCursor,
        KeySequence = QMetaType::QKeySequence,
        Pen = QMetaType::QPen,
        TextLength = QMetaType::QTextLength,
        TextFormat = QMetaType::QTextFormat,
        Matrix = QMetaType::QMatrix,
        Transform = QMetaType::QTransform,
        Matrix4x4 = QMetaType::QMatrix4x4,
        Vector2D = QMetaType::QVector2D,
        Vector3D = QMetaType::QVector3D,
        Vector4D = QMetaType::QVector4D,
        Quaternion = QMetaType::QQuaternion,
        PolygonF = QMetaType::QPolygonF,
        Icon = QMetaType::QIcon,
        LastGuiType = QMetaType::LastGuiType,

        SizePolicy = QMetaType::QSizePolicy,

        UserType = QMetaType::User,
        LastType = 0xffffffff 
    };

    QVariant() noexcept : d() {}
    ~QVariant();
    QVariant(Type type);
    QVariant(int typeId, const void *copy);
    QVariant(int typeId, const void *copy, uint flags);
    QVariant(const QVariant &other);


    QVariant(QDataStream &s);
#line 218 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant(int i);
    QVariant(uint ui);
    QVariant(qlonglong ll);
    QVariant(qulonglong ull);
    QVariant(bool b);
    QVariant(double d);
    QVariant(float f);

     QVariant(const char *str);
#line 229 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant(const QByteArray &bytearray);
    QVariant(const QBitArray &bitarray);
    QVariant(const QString &string);
    QVariant(QLatin1String string);
    QVariant(const QStringList &stringlist);
    QVariant(QChar qchar);
    QVariant(const QDate &date);
    QVariant(const QTime &time);
    QVariant(const QDateTime &datetime);
    QVariant(const QList<QVariant> &list);
    QVariant(const QMap<QString,QVariant> &map);
    QVariant(const QHash<QString,QVariant> &hash);

    QVariant(const QSize &size);
    QVariant(const QSizeF &size);
    QVariant(const QPoint &pt);
    QVariant(const QPointF &pt);
    QVariant(const QLine &line);
    QVariant(const QLineF &line);
    QVariant(const QRect &rect);
    QVariant(const QRectF &rect);
#line 252 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    QVariant(const QLocale &locale);

    QVariant(const QRegExp &regExp);
#line 256 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant(const QRegularExpression &re);
#line 259 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant(const QUrl &url);

    QVariant(const QEasingCurve &easing);
#line 264 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    QVariant(const QUuid &uuid);
    QVariant(const QJsonValue &jsonValue);
    QVariant(const QJsonObject &jsonObject);
    QVariant(const QJsonArray &jsonArray);
    QVariant(const QJsonDocument &jsonDocument);
#line 270 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant(const QModelIndex &modelIndex);
    QVariant(const QPersistentModelIndex &modelIndex);
#line 274 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QVariant& operator=(const QVariant &other);
    inline QVariant(QVariant &&other) noexcept : d(other.d)
    { other.d = Private(); }
    inline QVariant &operator=(QVariant &&other) noexcept
    { qSwap(d, other.d); return *this; }

    inline void swap(QVariant &other) noexcept { qSwap(d, other.d); }

    Type type() const;
    int userType() const;
    const char *typeName() const;

    bool canConvert(int targetTypeId) const;
    bool convert(int targetTypeId);

    inline bool isValid() const;
    bool isNull() const;

    void clear();

    void detach();
    inline bool isDetached() const;

    int toInt(bool *ok = nullptr) const;
    uint toUInt(bool *ok = nullptr) const;
    qlonglong toLongLong(bool *ok = nullptr) const;
    qulonglong toULongLong(bool *ok = nullptr) const;
    bool toBool() const;
    double toDouble(bool *ok = nullptr) const;
    float toFloat(bool *ok = nullptr) const;
    qreal toReal(bool *ok = nullptr) const;
    QByteArray toByteArray() const;
    QBitArray toBitArray() const;
    QString toString() const;
    QStringList toStringList() const;
    QChar toChar() const;
    QDate toDate() const;
    QTime toTime() const;
    QDateTime toDateTime() const;
    QList<QVariant> toList() const;
    QMap<QString, QVariant> toMap() const;
    QHash<QString, QVariant> toHash() const;


    QPoint toPoint() const;
    QPointF toPointF() const;
    QRect toRect() const;
    QSize toSize() const;
    QSizeF toSizeF() const;
    QLine toLine() const;
    QLineF toLineF() const;
    QRectF toRectF() const;
#line 328 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    QLocale toLocale() const;

    QRegExp toRegExp() const;
#line 332 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QRegularExpression toRegularExpression() const;
#line 335 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QUrl toUrl() const;

    QEasingCurve toEasingCurve() const;
#line 340 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    QUuid toUuid() const;
    QJsonValue toJsonValue() const;
    QJsonObject toJsonObject() const;
    QJsonArray toJsonArray() const;
    QJsonDocument toJsonDocument() const;
#line 346 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    QModelIndex toModelIndex() const;
    QPersistentModelIndex toPersistentModelIndex() const;
#line 350 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"


    void load(QDataStream &ds);
    void save(QDataStream &ds) const;
#line 355 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    static const char *typeToName(int typeId);
    static Type nameToType(const char *name);

    void *data();
    const void *constData() const;
    inline const void *data() const { return constData(); }

    template<typename T>
    inline void setValue(const T &value);

    template<typename T>
    inline T value() const
    { return qvariant_cast<T>(*this); }

    template<typename T>
    static inline QVariant fromValue(const T &value)
    { return QVariant(qMetaTypeId<T>(), &value, QTypeInfo<T>::isPointer); }


    template<typename... Types>
    static inline QVariant fromStdVariant(const std::variant<Types...> &value)
    {
        if (value.valueless_by_exception())
            return QVariant();
        return std::visit([](const auto &arg) { return fromValue(arg); }, value);
    }
#line 382 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    template<typename T>
    bool canConvert() const
    { return canConvert(qMetaTypeId<T>()); }

 public:
    struct PrivateShared
    {
        inline PrivateShared(void *v) : ptr(v), ref(1) { }
        void *ptr;
        QAtomicInt ref;
    };
    struct Private
    {
        inline Private() noexcept : type(Invalid), is_shared(false), is_null(true)
        { data.ptr = nullptr; }

        
        explicit inline Private(uint variantType) noexcept
            : type(variantType), is_shared(false), is_null(false)
        {}


        Private(const Private &other) noexcept
            : data(other.data), type(other.type),
              is_shared(other.is_shared), is_null(other.is_null)
        {}
        Private &operator=(const Private &other) noexcept = default;
#line 411 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
        union Data
        {
            char c;
            uchar uc;
            short s;
            signed char sc;
            ushort us;
            int i;
            uint u;
            long l;
            ulong ul;
            bool b;
            double d;
            float f;
            qreal real;
            qlonglong ll;
            qulonglong ull;
            QObject *o;
            void *ptr;
            PrivateShared *shared;
        } data;
        uint type : 30;
        uint is_shared : 1;
        uint is_null : 1;
    };
 public:
    typedef void (*f_construct)(Private *, const void *);
    typedef void (*f_clear)(Private *);
    typedef bool (*f_null)(const Private *);

    typedef void (*f_load)(Private *, QDataStream &);
    typedef void (*f_save)(const Private *, QDataStream &);
#line 444 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    typedef bool (*f_compare)(const Private *, const Private *);
    typedef bool (*f_convert)(const QVariant::Private *d, int t, void *, bool *);
    typedef bool (*f_canConvert)(const QVariant::Private *d, int t);
    typedef void (*f_debugStream)(QDebug, const QVariant &);
    struct Handler {
        f_construct construct;
        f_clear clear;
        f_null isNull;

        f_load load;
        f_save save;
#line 456 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
        f_compare compare;
        f_convert convert;
        f_canConvert canConvert;
        f_debugStream debugStream;
    };

    inline bool operator==(const QVariant &v) const
    { return cmp(v); }
    inline bool operator!=(const QVariant &v) const
    { return !cmp(v); }
    inline bool operator<(const QVariant &v) const
    { return compare(v) < 0; }
    inline bool operator<=(const QVariant &v) const
    { return compare(v) <= 0; }
    inline bool operator>(const QVariant &v) const
    { return compare(v) > 0; }
    inline bool operator>=(const QVariant &v) const
    { return compare(v) >= 0; }

protected:
    friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);

    friend __declspec(dllimport) QDebug operator<<(QDebug, const QVariant &);
#line 480 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"






#line 487 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
public:
#line 489 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    Private d;
    void create(int type, const void *copy);
    bool cmp(const QVariant &other) const;
    int compare(const QVariant &other) const;
    bool convert(const int t, void *ptr) const; 

private:
    
    inline QVariant(void *) = delete;
    
    
    
    
    
    
    QVariant(QMetaType::Type) = delete;

    
    
    
    
    
    QVariant(Qt::GlobalColor) = delete;
    QVariant(Qt::BrushStyle) = delete;
    QVariant(Qt::PenStyle) = delete;
    QVariant(Qt::CursorShape) = delete;




public:
    typedef Private DataPtr;
    inline DataPtr &data_ptr() { return d; }
    inline const DataPtr &data_ptr() const { return d; }
};


template <typename T>
__declspec(deprecated("Use QVariant::fromValue() instead."))
inline QVariant qVariantFromValue(const T &t)
{
    return QVariant::fromValue(t);
}

template <typename T>
__declspec(deprecated("Use QVariant::setValue() instead."))
inline void qVariantSetValue(QVariant &v, const T &t)
{
    v.setValue(t);
}
#line 540 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

template<>
inline QVariant QVariant::fromValue(const QVariant &value)
{
    return value;
}


template<>
inline QVariant QVariant::fromValue(const std::monostate &)
{
    return QVariant();
}
#line 554 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

inline bool QVariant::isValid() const { return d.type != Invalid; }

template<typename T>
inline void QVariant::setValue(const T &avalue)
{
    
    const uint type = qMetaTypeId<T>();
    if (isDetached() && (type == d.type || (type <= uint(QVariant::Char) && d.type <= uint(QVariant::Char)))) {
        d.type = type;
        d.is_null = false;
        T *old = reinterpret_cast<T*>(d.is_shared ? d.data.shared->ptr : &d.data.ptr);
        if (QTypeInfo<T>::isComplex)
            old->~T();
        new (old) T(avalue); 
    } else {
        *this = QVariant(type, &avalue, QTypeInfo<T>::isPointer);
    }
}

template<>
inline void QVariant::setValue(const QVariant &avalue)
{
    *this = avalue;
}


__declspec(dllimport) QDataStream& operator>> (QDataStream& s, QVariant& p);
__declspec(dllimport) QDataStream& operator<< (QDataStream& s, const QVariant& p);
__declspec(dllimport) QDataStream& operator>> (QDataStream& s, QVariant::Type& p);
__declspec(dllimport) QDataStream& operator<< (QDataStream& s, const QVariant::Type p);
#line 586 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

inline bool QVariant::isDetached() const
{ return !d.is_shared || d.data.shared->ref.loadRelaxed() == 1; }










class QVariantComparisonHelper
{
public:
    inline QVariantComparisonHelper(const QVariant &var)
        : v(&var) {}
private:
    friend inline bool operator==(const QVariant &, const QVariantComparisonHelper &);
    const QVariant *v;
};

inline bool operator==(const QVariant &v1, const QVariantComparisonHelper &v2)
{
    return v1.cmp(*v2.v);
}

inline bool operator!=(const QVariant &v1, const QVariantComparisonHelper &v2)
{
    return !operator==(v1, v2);
}
#line 619 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
template<> class QTypeInfo<QVariant > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QVariant>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QVariant>(), isLarge = (sizeof(QVariant)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QVariant >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QVariant) }; static inline const char *name() { return "QVariant"; } }; inline void swap(QVariant &value1, QVariant &value2) noexcept(noexcept(value1.swap(value2))) { value1.swap(value2); }

class __declspec(dllimport) QSequentialIterable
{
    QtMetaTypePrivate::QSequentialIterableImpl m_impl;
public:
    struct __declspec(dllimport) const_iterator
    {
    private:
        QtMetaTypePrivate::QSequentialIterableImpl m_impl;
        QAtomicInt *ref;
        friend class QSequentialIterable;
        explicit const_iterator(const QSequentialIterable &iter, QAtomicInt *ref_);

        explicit const_iterator(const QtMetaTypePrivate::QSequentialIterableImpl &impl, QAtomicInt *ref_);

        void begin();
        void end();
    public:
        ~const_iterator();

        const_iterator(const const_iterator &other);

        const_iterator& operator=(const const_iterator &other);

        const QVariant operator*() const;
        bool operator==(const const_iterator &o) const;
        bool operator!=(const const_iterator &o) const;
        const_iterator &operator++();
        const_iterator operator++(int);
        const_iterator &operator--();
        const_iterator operator--(int);
        const_iterator &operator+=(int j);
        const_iterator &operator-=(int j);
        const_iterator operator+(int j) const;
        const_iterator operator-(int j) const;
        friend inline const_iterator operator+(int j, const_iterator k) { return k + j; }
    };

    friend struct const_iterator;


    explicit QSequentialIterable(QtMetaTypePrivate::QSequentialIterableImpl impl);


#line 665 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    const_iterator begin() const;
    const_iterator end() const;

    QVariant at(int idx) const;
    int size() const;

    bool canReverseIterate() const;
};

class __declspec(dllimport) QAssociativeIterable
{
    QtMetaTypePrivate::QAssociativeIterableImpl m_impl;
public:
    struct __declspec(dllimport) const_iterator
    {
    private:
        QtMetaTypePrivate::QAssociativeIterableImpl m_impl;
        QAtomicInt *ref;
        friend class QAssociativeIterable;
        explicit const_iterator(const QAssociativeIterable &iter, QAtomicInt *ref_);

        explicit const_iterator(const QtMetaTypePrivate::QAssociativeIterableImpl &impl, QAtomicInt *ref_);

        void begin();
        void end();
        void find(const QVariant &key);
    public:
        ~const_iterator();
        const_iterator(const const_iterator &other);

        const_iterator& operator=(const const_iterator &other);

        const QVariant key() const;

        const QVariant value() const;

        const QVariant operator*() const;
        bool operator==(const const_iterator &o) const;
        bool operator!=(const const_iterator &o) const;
        const_iterator &operator++();
        const_iterator operator++(int);
        const_iterator &operator--();
        const_iterator operator--(int);
        const_iterator &operator+=(int j);
        const_iterator &operator-=(int j);
        const_iterator operator+(int j) const;
        const_iterator operator-(int j) const;
        friend inline const_iterator operator+(int j, const_iterator k) { return k + j; }
    };

    friend struct const_iterator;


    explicit QAssociativeIterable(QtMetaTypePrivate::QAssociativeIterableImpl impl);


#line 723 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

    const_iterator begin() const;
    const_iterator end() const;
    const_iterator find(const QVariant &key) const;

    QVariant value(const QVariant &key) const;

    int size() const;
};


namespace QtPrivate {
    template<typename T>
    struct QVariantValueHelper : TreatAsQObjectBeforeMetaType<QVariantValueHelper<T>, T, const QVariant &, T>
    {
        static T metaType(const QVariant &v)
        {
            const int vid = qMetaTypeId<T>();
            if (vid == v.userType())
                return *reinterpret_cast<const T *>(v.constData());
            T t;
            if (v.convert(vid, &t))
                return t;
            return T();
        }

        static T object(const QVariant &v)
        {
            return qobject_cast<T>(QMetaType::typeFlags(v.userType()) & QMetaType::PointerToQObject
                ? v.d.data.o
                : QVariantValueHelper::metaType(v));
        }
#line 756 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
    };

    template<typename T>
    struct QVariantValueHelperInterface : QVariantValueHelper<T>
    {
    };

    template<>
    struct QVariantValueHelperInterface<QSequentialIterable>
    {
        static QSequentialIterable invoke(const QVariant &v)
        {
            const int typeId = v.userType();
            if (typeId == qMetaTypeId<QVariantList>()) {
                return QSequentialIterable(QtMetaTypePrivate::QSequentialIterableImpl(reinterpret_cast<const QVariantList*>(v.constData())));
            }
            if (typeId == qMetaTypeId<QStringList>()) {
                return QSequentialIterable(QtMetaTypePrivate::QSequentialIterableImpl(reinterpret_cast<const QStringList*>(v.constData())));
            }

            if (typeId == qMetaTypeId<QByteArrayList>()) {
                return QSequentialIterable(QtMetaTypePrivate::QSequentialIterableImpl(reinterpret_cast<const QByteArrayList*>(v.constData())));
            }
#line 780 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
            return QSequentialIterable(v.value<QtMetaTypePrivate::QSequentialIterableImpl>());
        }
    };
    template<>
    struct QVariantValueHelperInterface<QAssociativeIterable>
    {
        static QAssociativeIterable invoke(const QVariant &v)
        {
            const int typeId = v.userType();
            if (typeId == qMetaTypeId<QVariantMap>()) {
                return QAssociativeIterable(QtMetaTypePrivate::QAssociativeIterableImpl(reinterpret_cast<const QVariantMap*>(v.constData())));
            }
            if (typeId == qMetaTypeId<QVariantHash>()) {
                return QAssociativeIterable(QtMetaTypePrivate::QAssociativeIterableImpl(reinterpret_cast<const QVariantHash*>(v.constData())));
            }
            return QAssociativeIterable(v.value<QtMetaTypePrivate::QAssociativeIterableImpl>());
        }
    };
    template<>
    struct QVariantValueHelperInterface<QVariantList>
    {
        static QVariantList invoke(const QVariant &v)
        {
            const int typeId = v.userType();
            if (typeId == qMetaTypeId<QStringList>() || typeId == qMetaTypeId<QByteArrayList>() ||
                (QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QtMetaTypePrivate::QSequentialIterableImpl>()) && !QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QVariantList>()))) {
                QSequentialIterable iter = QVariantValueHelperInterface<QSequentialIterable>::invoke(v);
                QVariantList l;
                l.reserve(iter.size());
                for (QSequentialIterable::const_iterator it = iter.begin(), end = iter.end(); it != end; ++it)
                    l << *it;
                return l;
            }
            return QVariantValueHelper<QVariantList>::invoke(v);
        }
    };
    template<>
    struct QVariantValueHelperInterface<QVariantHash>
    {
        static QVariantHash invoke(const QVariant &v)
        {
            const int typeId = v.userType();
            if (typeId == qMetaTypeId<QVariantMap>() || ((QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QtMetaTypePrivate::QAssociativeIterableImpl>())) && !QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QVariantHash>()))) {
                QAssociativeIterable iter = QVariantValueHelperInterface<QAssociativeIterable>::invoke(v);
                QVariantHash l;
                l.reserve(iter.size());
                for (QAssociativeIterable::const_iterator it = iter.begin(), end = iter.end(); it != end; ++it)
                    l.insertMulti(it.key().toString(), it.value());
                return l;
            }
            return QVariantValueHelper<QVariantHash>::invoke(v);
        }
    };
    template<>
    struct QVariantValueHelperInterface<QVariantMap>
    {
        static QVariantMap invoke(const QVariant &v)
        {
            const int typeId = v.userType();
            if (typeId == qMetaTypeId<QVariantHash>() || (QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QtMetaTypePrivate::QAssociativeIterableImpl>()) && !QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QVariantMap>()))) {
                QAssociativeIterable iter = QVariantValueHelperInterface<QAssociativeIterable>::invoke(v);
                QVariantMap l;
                for (QAssociativeIterable::const_iterator it = iter.begin(), end = iter.end(); it != end; ++it)
                    l.insertMulti(it.key().toString(), it.value());
                return l;
            }
            return QVariantValueHelper<QVariantMap>::invoke(v);
        }
    };
    template<>
    struct QVariantValueHelperInterface<QPair<QVariant, QVariant> >
    {
        static QPair<QVariant, QVariant> invoke(const QVariant &v)
        {
            const int typeId = v.userType();

            if (QMetaType::hasRegisteredConverterFunction(typeId, qMetaTypeId<QtMetaTypePrivate::QPairVariantInterfaceImpl>()) && !(typeId == qMetaTypeId<QPair<QVariant, QVariant> >())) {
                QtMetaTypePrivate::QPairVariantInterfaceImpl pi = v.value<QtMetaTypePrivate::QPairVariantInterfaceImpl>();

                const QtMetaTypePrivate::VariantData d1 = pi.first();
                QVariant v1(d1.metaTypeId, d1.data, d1.flags);
                if (d1.metaTypeId == qMetaTypeId<QVariant>())
                    v1 = *reinterpret_cast<const QVariant*>(d1.data);

                const QtMetaTypePrivate::VariantData d2 = pi.second();
                QVariant v2(d2.metaTypeId, d2.data, d2.flags);
                if (d2.metaTypeId == qMetaTypeId<QVariant>())
                    v2 = *reinterpret_cast<const QVariant*>(d2.data);

                return QPair<QVariant, QVariant>(v1, v2);
            }
            return QVariantValueHelper<QPair<QVariant, QVariant> >::invoke(v);
        }
    };
}

template<typename T> inline T qvariant_cast(const QVariant &v)
{
    return QtPrivate::QVariantValueHelperInterface<T>::invoke(v);
}

template<> inline QVariant qvariant_cast<QVariant>(const QVariant &v)
{
    if (v.userType() == QMetaType::QVariant)
        return *reinterpret_cast<const QVariant *>(v.constData());
    return v;
}









#line 897 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"

#line 899 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"


__declspec(dllimport) QDebug operator<<(QDebug, const QVariant &);
__declspec(dllimport) QDebug operator<<(QDebug, const QVariant::Type);
#line 904 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"



#line 908 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qvariant.h"
#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"


#line 48 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"





template <class T> class QSharedDataPointer;

class

__declspec(dllimport)
#line 59 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"
QSharedData
{
public:
    mutable QAtomicInt ref;

    inline QSharedData() noexcept : ref(0) { }
    inline QSharedData(const QSharedData &) noexcept : ref(0) { }

    
    QSharedData &operator=(const QSharedData &) = delete;
    ~QSharedData() = default;
};

template <class T> class QSharedDataPointer
{
public:
    typedef T Type;
    typedef T *pointer;

    inline void detach() { if (d && d->ref.loadRelaxed() != 1) detach_helper(); }
    inline T &operator*() { detach(); return *d; }
    inline const T &operator*() const { return *d; }
    inline T *operator->() { detach(); return d; }
    inline const T *operator->() const { return d; }
    inline operator T *() { detach(); return d; }
    inline operator const T *() const { return d; }
    inline T *data() { detach(); return d; }
    inline const T *data() const { return d; }
    inline const T *constData() const { return d; }

    inline bool operator==(const QSharedDataPointer<T> &other) const { return d == other.d; }
    inline bool operator!=(const QSharedDataPointer<T> &other) const { return d != other.d; }

    inline QSharedDataPointer() { d = nullptr; }
    inline ~QSharedDataPointer() { if (d && !d->ref.deref()) delete d; }

    explicit QSharedDataPointer(T *data) noexcept;
    inline QSharedDataPointer(const QSharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }
    inline QSharedDataPointer<T> & operator=(const QSharedDataPointer<T> &o) {
        if (o.d != d) {
            if (o.d)
                o.d->ref.ref();
            T *old = d;
            d = o.d;
            if (old && !old->ref.deref())
                delete old;
        }
        return *this;
    }
    inline QSharedDataPointer &operator=(T *o) {
        if (o != d) {
            if (o)
                o->ref.ref();
            T *old = d;
            d = o;
            if (old && !old->ref.deref())
                delete old;
        }
        return *this;
    }
    QSharedDataPointer(QSharedDataPointer &&o) noexcept : d(o.d) { o.d = nullptr; }
    inline QSharedDataPointer<T> &operator=(QSharedDataPointer<T> &&other) noexcept
    {
        QSharedDataPointer moved(std::move(other));
        swap(moved);
        return *this;
    }

    inline bool operator!() const { return !d; }

    inline void swap(QSharedDataPointer &other) noexcept
    { qSwap(d, other.d); }

protected:
    T *clone();

private:
    void detach_helper();

    T *d;
};

template <class T> inline bool operator==(std::nullptr_t p1, const QSharedDataPointer<T> &p2)
{
    (void)p1;;
    return !p2;
}

template <class T> inline bool operator==(const QSharedDataPointer<T> &p1, std::nullptr_t p2)
{
    (void)p2;;
    return !p1;
}

template <class T> class QExplicitlySharedDataPointer
{
public:
    typedef T Type;
    typedef T *pointer;

    inline T &operator*() const { return *d; }
    inline T *operator->() { return d; }
    inline T *operator->() const { return d; }
    inline T *data() const { return d; }
    inline const T *constData() const { return d; }
    inline T *take() { T *x = d; d = nullptr; return x; }

    inline void detach() { if (d && d->ref.loadRelaxed() != 1) detach_helper(); }

    inline void reset()
    {
        if(d && !d->ref.deref())
            delete d;

        d = nullptr;
    }

    inline operator bool () const { return d != nullptr; }

    inline bool operator==(const QExplicitlySharedDataPointer<T> &other) const { return d == other.d; }
    inline bool operator!=(const QExplicitlySharedDataPointer<T> &other) const { return d != other.d; }
    inline bool operator==(const T *ptr) const { return d == ptr; }
    inline bool operator!=(const T *ptr) const { return d != ptr; }

    inline QExplicitlySharedDataPointer() { d = nullptr; }
    inline ~QExplicitlySharedDataPointer() { if (d && !d->ref.deref()) delete d; }

    explicit QExplicitlySharedDataPointer(T *data) noexcept;
    inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<T> &o) : d(o.d) { if (d) d->ref.ref(); }

    template<class X>
    inline QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer<X> &o)



        : d(o.data())
#line 196 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"
    {
        if(d)
            d->ref.ref();
    }

    inline QExplicitlySharedDataPointer<T> & operator=(const QExplicitlySharedDataPointer<T> &o) {
        if (o.d != d) {
            if (o.d)
                o.d->ref.ref();
            T *old = d;
            d = o.d;
            if (old && !old->ref.deref())
                delete old;
        }
        return *this;
    }
    inline QExplicitlySharedDataPointer &operator=(T *o) {
        if (o != d) {
            if (o)
                o->ref.ref();
            T *old = d;
            d = o;
            if (old && !old->ref.deref())
                delete old;
        }
        return *this;
    }
    inline QExplicitlySharedDataPointer(QExplicitlySharedDataPointer &&o) noexcept : d(o.d) { o.d = nullptr; }
    inline QExplicitlySharedDataPointer<T> &operator=(QExplicitlySharedDataPointer<T> &&other) noexcept
    {
        QExplicitlySharedDataPointer moved(std::move(other));
        swap(moved);
        return *this;
    }

    inline bool operator!() const { return !d; }

    inline void swap(QExplicitlySharedDataPointer &other) noexcept
    { qSwap(d, other.d); }

protected:
    T *clone();

private:
    void detach_helper();

    T *d;
};

template <class T>
inline QSharedDataPointer<T>::QSharedDataPointer(T *adata) noexcept
    : d(adata)
{ if (d) d->ref.ref(); }

template <class T>
inline T *QSharedDataPointer<T>::clone()
{
    return new T(*d);
}

template <class T>
inline void QSharedDataPointer<T>::detach_helper()
{
    T *x = clone();
    x->ref.ref();
    if (!d->ref.deref())
        delete d;
    d = x;
}

template <class T>
inline T *QExplicitlySharedDataPointer<T>::clone()
{
    return new T(*d);
}

template <class T>
inline void QExplicitlySharedDataPointer<T>::detach_helper()
{
    T *x = clone();
    x->ref.ref();
    if (!d->ref.deref())
        delete d;
    d = x;
}

template <class T>
inline QExplicitlySharedDataPointer<T>::QExplicitlySharedDataPointer(T *adata) noexcept
    : d(adata)
{ if (d) d->ref.ref(); }

template <class T> inline bool operator==(std::nullptr_t p1, const QExplicitlySharedDataPointer<T> &p2)
{
    (void)p1;;
    return !p2;
}

template <class T> inline bool operator==(const QExplicitlySharedDataPointer<T> &p1, std::nullptr_t p2)
{
    (void)p2;;
    return !p1;
}

template <class T>
inline void swap(QSharedDataPointer<T> &p1, QSharedDataPointer<T> &p2)
{ p1.swap(p2); }

template <class T>
inline void swap(QExplicitlySharedDataPointer<T> &p1, QExplicitlySharedDataPointer<T> &p2)
{ p1.swap(p2); }

template <class T>
inline uint qHash(const QSharedDataPointer<T> &ptr, uint seed = 0) noexcept
{
    return qHash(ptr.data(), seed);
}
template <class T>
inline uint qHash(const QExplicitlySharedDataPointer<T> &ptr, uint seed = 0) noexcept
{
    return qHash(ptr.data(), seed);
}

template<typename T> class QTypeInfo<QSharedDataPointer<T> > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QSharedDataPointer<T>>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QSharedDataPointer<T>>(), isLarge = (sizeof(QSharedDataPointer<T>)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QSharedDataPointer<T> >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSharedDataPointer<T>) }; static inline const char *name() { return "QSharedDataPointer<T>"; } };
template<typename T> class QTypeInfo<QExplicitlySharedDataPointer<T> > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QExplicitlySharedDataPointer<T>>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QExplicitlySharedDataPointer<T>>(), isLarge = (sizeof(QExplicitlySharedDataPointer<T>)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QExplicitlySharedDataPointer<T> >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QExplicitlySharedDataPointer<T>) }; static inline const char *name() { return "QExplicitlySharedDataPointer<T>"; } };



#line 324 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qshareddata.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"



class QCalendar;
class QDataStream;
class QDate;
class QDateTime;
class QLocale;
class QTime;
class QVariant;
class QTextStream;
class QTextStreamPrivate;

class QLocalePrivate;

__declspec(dllimport) uint qHash(const QLocale &key, uint seed = 0) noexcept;

class __declspec(dllimport) QLocale
{
    public: static const QMetaObject staticMetaObject; void qt_check_for_QGADGET_macro(); typedef void QtGadgetHelper; private: __pragma(warning(push))   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) 
    friend class QString;
    friend class QStringRef;
    friend class QByteArray;
    friend class QIntValidator;
    friend class QDoubleValidatorPrivate;
    friend class QTextStream;
    friend class QTextStreamPrivate;

public:


    enum Language {
        AnyLanguage = 0,
        C = 1,
        Abkhazian = 2,
        Oromo = 3,
        Afar = 4,
        Afrikaans = 5,
        Albanian = 6,
        Amharic = 7,
        Arabic = 8,
        Armenian = 9,
        Assamese = 10,
        Aymara = 11,
        Azerbaijani = 12,
        Bashkir = 13,
        Basque = 14,
        Bengali = 15,
        Dzongkha = 16,
        Bihari = 17,
        Bislama = 18,
        Breton = 19,
        Bulgarian = 20,
        Burmese = 21,
        Belarusian = 22,
        Khmer = 23,
        Catalan = 24,
        Chinese = 25,
        Corsican = 26,
        Croatian = 27,
        Czech = 28,
        Danish = 29,
        Dutch = 30,
        English = 31,
        Esperanto = 32,
        Estonian = 33,
        Faroese = 34,
        Fijian = 35,
        Finnish = 36,
        French = 37,
        WesternFrisian = 38,
        Gaelic = 39,
        Galician = 40,
        Georgian = 41,
        German = 42,
        Greek = 43,
        Greenlandic = 44,
        Guarani = 45,
        Gujarati = 46,
        Hausa = 47,
        Hebrew = 48,
        Hindi = 49,
        Hungarian = 50,
        Icelandic = 51,
        Indonesian = 52,
        Interlingua = 53,
        Interlingue = 54,
        Inuktitut = 55,
        Inupiak = 56,
        Irish = 57,
        Italian = 58,
        Japanese = 59,
        Javanese = 60,
        Kannada = 61,
        Kashmiri = 62,
        Kazakh = 63,
        Kinyarwanda = 64,
        Kirghiz = 65,
        Korean = 66,
        Kurdish = 67,
        Rundi = 68,
        Lao = 69,
        Latin = 70,
        Latvian = 71,
        Lingala = 72,
        Lithuanian = 73,
        Macedonian = 74,
        Malagasy = 75,
        Malay = 76,
        Malayalam = 77,
        Maltese = 78,
        Maori = 79,
        Marathi = 80,
        Marshallese = 81,
        Mongolian = 82,
        NauruLanguage = 83,
        Nepali = 84,
        NorwegianBokmal = 85,
        Occitan = 86,
        Oriya = 87,
        Pashto = 88,
        Persian = 89,
        Polish = 90,
        Portuguese = 91,
        Punjabi = 92,
        Quechua = 93,
        Romansh = 94,
        Romanian = 95,
        Russian = 96,
        Samoan = 97,
        Sango = 98,
        Sanskrit = 99,
        Serbian = 100,
        Ossetic = 101,
        SouthernSotho = 102,
        Tswana = 103,
        Shona = 104,
        Sindhi = 105,
        Sinhala = 106,
        Swati = 107,
        Slovak = 108,
        Slovenian = 109,
        Somali = 110,
        Spanish = 111,
        Sundanese = 112,
        Swahili = 113,
        Swedish = 114,
        Sardinian = 115,
        Tajik = 116,
        Tamil = 117,
        Tatar = 118,
        Telugu = 119,
        Thai = 120,
        Tibetan = 121,
        Tigrinya = 122,
        Tongan = 123,
        Tsonga = 124,
        Turkish = 125,
        Turkmen = 126,
        Tahitian = 127,
        Uighur = 128,
        Ukrainian = 129,
        Urdu = 130,
        Uzbek = 131,
        Vietnamese = 132,
        Volapuk = 133,
        Welsh = 134,
        Wolof = 135,
        Xhosa = 136,
        Yiddish = 137,
        Yoruba = 138,
        Zhuang = 139,
        Zulu = 140,
        NorwegianNynorsk = 141,
        Bosnian = 142,
        Divehi = 143,
        Manx = 144,
        Cornish = 145,
        Akan = 146,
        Konkani = 147,
        Ga = 148,
        Igbo = 149,
        Kamba = 150,
        Syriac = 151,
        Blin = 152,
        Geez = 153,
        Koro = 154,
        Sidamo = 155,
        Atsam = 156,
        Tigre = 157,
        Jju = 158,
        Friulian = 159,
        Venda = 160,
        Ewe = 161,
        Walamo = 162,
        Hawaiian = 163,
        Tyap = 164,
        Nyanja = 165,
        Filipino = 166,
        SwissGerman = 167,
        SichuanYi = 168,
        Kpelle = 169,
        LowGerman = 170,
        SouthNdebele = 171,
        NorthernSotho = 172,
        NorthernSami = 173,
        Taroko = 174,
        Gusii = 175,
        Taita = 176,
        Fulah = 177,
        Kikuyu = 178,
        Samburu = 179,
        Sena = 180,
        NorthNdebele = 181,
        Rombo = 182,
        Tachelhit = 183,
        Kabyle = 184,
        Nyankole = 185,
        Bena = 186,
        Vunjo = 187,
        Bambara = 188,
        Embu = 189,
        Cherokee = 190,
        Morisyen = 191,
        Makonde = 192,
        Langi = 193,
        Ganda = 194,
        Bemba = 195,
        Kabuverdianu = 196,
        Meru = 197,
        Kalenjin = 198,
        Nama = 199,
        Machame = 200,
        Colognian = 201,
        Masai = 202,
        Soga = 203,
        Luyia = 204,
        Asu = 205,
        Teso = 206,
        Saho = 207,
        KoyraChiini = 208,
        Rwa = 209,
        Luo = 210,
        Chiga = 211,
        CentralMoroccoTamazight = 212,
        KoyraboroSenni = 213,
        Shambala = 214,
        Bodo = 215,
        Avaric = 216,
        Chamorro = 217,
        Chechen = 218,
        Church = 219,
        Chuvash = 220,
        Cree = 221,
        Haitian = 222,
        Herero = 223,
        HiriMotu = 224,
        Kanuri = 225,
        Komi = 226,
        Kongo = 227,
        Kwanyama = 228,
        Limburgish = 229,
        LubaKatanga = 230,
        Luxembourgish = 231,
        Navaho = 232,
        Ndonga = 233,
        Ojibwa = 234,
        Pali = 235,
        Walloon = 236,
        Aghem = 237,
        Basaa = 238,
        Zarma = 239,
        Duala = 240,
        JolaFonyi = 241,
        Ewondo = 242,
        Bafia = 243,
        MakhuwaMeetto = 244,
        Mundang = 245,
        Kwasio = 246,
        Nuer = 247,
        Sakha = 248,
        Sangu = 249,
        CongoSwahili = 250,
        Tasawaq = 251,
        Vai = 252,
        Walser = 253,
        Yangben = 254,
        Avestan = 255,
        Asturian = 256,
        Ngomba = 257,
        Kako = 258,
        Meta = 259,
        Ngiemboon = 260,
        Aragonese = 261,
        Akkadian = 262,
        AncientEgyptian = 263,
        AncientGreek = 264,
        Aramaic = 265,
        Balinese = 266,
        Bamun = 267,
        BatakToba = 268,
        Buginese = 269,
        Buhid = 270,
        Carian = 271,
        Chakma = 272,
        ClassicalMandaic = 273,
        Coptic = 274,
        Dogri = 275,
        EasternCham = 276,
        EasternKayah = 277,
        Etruscan = 278,
        Gothic = 279,
        Hanunoo = 280,
        Ingush = 281,
        LargeFloweryMiao = 282,
        Lepcha = 283,
        Limbu = 284,
        Lisu = 285,
        Lu = 286,
        Lycian = 287,
        Lydian = 288,
        Mandingo = 289,
        Manipuri = 290,
        Meroitic = 291,
        NorthernThai = 292,
        OldIrish = 293,
        OldNorse = 294,
        OldPersian = 295,
        OldTurkish = 296,
        Pahlavi = 297,
        Parthian = 298,
        Phoenician = 299,
        PrakritLanguage = 300,
        Rejang = 301,
        Sabaean = 302,
        Samaritan = 303,
        Santali = 304,
        Saurashtra = 305,
        Sora = 306,
        Sylheti = 307,
        Tagbanwa = 308,
        TaiDam = 309,
        TaiNua = 310,
        Ugaritic = 311,
        Akoose = 312,
        Lakota = 313,
        StandardMoroccanTamazight = 314,
        Mapuche = 315,
        CentralKurdish = 316,
        LowerSorbian = 317,
        UpperSorbian = 318,
        Kenyang = 319,
        Mohawk = 320,
        Nko = 321,
        Prussian = 322,
        Kiche = 323,
        SouthernSami = 324,
        LuleSami = 325,
        InariSami = 326,
        SkoltSami = 327,
        Warlpiri = 328,
        ManichaeanMiddlePersian = 329,
        Mende = 330,
        AncientNorthArabian = 331,
        LinearA = 332,
        HmongNjua = 333,
        Ho = 334,
        Lezghian = 335,
        Bassa = 336,
        Mono = 337,
        TedimChin = 338,
        Maithili = 339,
        Ahom = 340,
        AmericanSignLanguage = 341,
        ArdhamagadhiPrakrit = 342,
        Bhojpuri = 343,
        HieroglyphicLuwian = 344,
        LiteraryChinese = 345,
        Mazanderani = 346,
        Mru = 347,
        Newari = 348,
        NorthernLuri = 349,
        Palauan = 350,
        Papiamento = 351,
        Saraiki = 352,
        TokelauLanguage = 353,
        TokPisin = 354,
        TuvaluLanguage = 355,
        UncodedLanguages = 356,
        Cantonese = 357,
        Osage = 358,
        Tangut = 359,
        Ido = 360,
        Lojban = 361,
        Sicilian = 362,
        SouthernKurdish = 363,
        WesternBalochi = 364,
        Cebuano = 365,
        Erzya = 366,
        Chickasaw = 367,
        Muscogee = 368,
        Silesian = 369,

        Afan = Oromo,
        Bhutani = Dzongkha,
        Byelorussian = Belarusian,
        Cambodian = Khmer,
        Chewa = Nyanja,
        Frisian = WesternFrisian,
        Kurundi = Rundi,
        Moldavian = Romanian,
        Norwegian = NorwegianBokmal,
        RhaetoRomance = Romansh,
        SerboCroatian = Serbian,
        Tagalog = Filipino,
        Twi = Akan,
        Uigur = Uighur,

        LastLanguage = Silesian
    };

    enum Script {
        AnyScript = 0,
        ArabicScript = 1,
        CyrillicScript = 2,
        DeseretScript = 3,
        GurmukhiScript = 4,
        SimplifiedHanScript = 5,
        TraditionalHanScript = 6,
        LatinScript = 7,
        MongolianScript = 8,
        TifinaghScript = 9,
        ArmenianScript = 10,
        BengaliScript = 11,
        CherokeeScript = 12,
        DevanagariScript = 13,
        EthiopicScript = 14,
        GeorgianScript = 15,
        GreekScript = 16,
        GujaratiScript = 17,
        HebrewScript = 18,
        JapaneseScript = 19,
        KhmerScript = 20,
        KannadaScript = 21,
        KoreanScript = 22,
        LaoScript = 23,
        MalayalamScript = 24,
        MyanmarScript = 25,
        OriyaScript = 26,
        TamilScript = 27,
        TeluguScript = 28,
        ThaanaScript = 29,
        ThaiScript = 30,
        TibetanScript = 31,
        SinhalaScript = 32,
        SyriacScript = 33,
        YiScript = 34,
        VaiScript = 35,
        AvestanScript = 36,
        BalineseScript = 37,
        BamumScript = 38,
        BatakScript = 39,
        BopomofoScript = 40,
        BrahmiScript = 41,
        BugineseScript = 42,
        BuhidScript = 43,
        CanadianAboriginalScript = 44,
        CarianScript = 45,
        ChakmaScript = 46,
        ChamScript = 47,
        CopticScript = 48,
        CypriotScript = 49,
        EgyptianHieroglyphsScript = 50,
        FraserScript = 51,
        GlagoliticScript = 52,
        GothicScript = 53,
        HanScript = 54,
        HangulScript = 55,
        HanunooScript = 56,
        ImperialAramaicScript = 57,
        InscriptionalPahlaviScript = 58,
        InscriptionalParthianScript = 59,
        JavaneseScript = 60,
        KaithiScript = 61,
        KatakanaScript = 62,
        KayahLiScript = 63,
        KharoshthiScript = 64,
        LannaScript = 65,
        LepchaScript = 66,
        LimbuScript = 67,
        LinearBScript = 68,
        LycianScript = 69,
        LydianScript = 70,
        MandaeanScript = 71,
        MeiteiMayekScript = 72,
        MeroiticScript = 73,
        MeroiticCursiveScript = 74,
        NkoScript = 75,
        NewTaiLueScript = 76,
        OghamScript = 77,
        OlChikiScript = 78,
        OldItalicScript = 79,
        OldPersianScript = 80,
        OldSouthArabianScript = 81,
        OrkhonScript = 82,
        OsmanyaScript = 83,
        PhagsPaScript = 84,
        PhoenicianScript = 85,
        PollardPhoneticScript = 86,
        RejangScript = 87,
        RunicScript = 88,
        SamaritanScript = 89,
        SaurashtraScript = 90,
        SharadaScript = 91,
        ShavianScript = 92,
        SoraSompengScript = 93,
        CuneiformScript = 94,
        SundaneseScript = 95,
        SylotiNagriScript = 96,
        TagalogScript = 97,
        TagbanwaScript = 98,
        TaiLeScript = 99,
        TaiVietScript = 100,
        TakriScript = 101,
        UgariticScript = 102,
        BrailleScript = 103,
        HiraganaScript = 104,
        CaucasianAlbanianScript = 105,
        BassaVahScript = 106,
        DuployanScript = 107,
        ElbasanScript = 108,
        GranthaScript = 109,
        PahawhHmongScript = 110,
        KhojkiScript = 111,
        LinearAScript = 112,
        MahajaniScript = 113,
        ManichaeanScript = 114,
        MendeKikakuiScript = 115,
        ModiScript = 116,
        MroScript = 117,
        OldNorthArabianScript = 118,
        NabataeanScript = 119,
        PalmyreneScript = 120,
        PauCinHauScript = 121,
        OldPermicScript = 122,
        PsalterPahlaviScript = 123,
        SiddhamScript = 124,
        KhudawadiScript = 125,
        TirhutaScript = 126,
        VarangKshitiScript = 127,
        AhomScript = 128,
        AnatolianHieroglyphsScript = 129,
        HatranScript = 130,
        MultaniScript = 131,
        OldHungarianScript = 132,
        SignWritingScript = 133,
        AdlamScript = 134,
        BhaiksukiScript = 135,
        MarchenScript = 136,
        NewaScript = 137,
        OsageScript = 138,
        TangutScript = 139,
        HanWithBopomofoScript = 140,
        JamoScript = 141,

        SimplifiedChineseScript = SimplifiedHanScript,
        TraditionalChineseScript = TraditionalHanScript,

        LastScript = JamoScript
    };
    enum Country {
        AnyCountry = 0,
        Afghanistan = 1,
        Albania = 2,
        Algeria = 3,
        AmericanSamoa = 4,
        Andorra = 5,
        Angola = 6,
        Anguilla = 7,
        Antarctica = 8,
        AntiguaAndBarbuda = 9,
        Argentina = 10,
        Armenia = 11,
        Aruba = 12,
        Australia = 13,
        Austria = 14,
        Azerbaijan = 15,
        Bahamas = 16,
        Bahrain = 17,
        Bangladesh = 18,
        Barbados = 19,
        Belarus = 20,
        Belgium = 21,
        Belize = 22,
        Benin = 23,
        Bermuda = 24,
        Bhutan = 25,
        Bolivia = 26,
        BosniaAndHerzegowina = 27,
        Botswana = 28,
        BouvetIsland = 29,
        Brazil = 30,
        BritishIndianOceanTerritory = 31,
        Brunei = 32,
        Bulgaria = 33,
        BurkinaFaso = 34,
        Burundi = 35,
        Cambodia = 36,
        Cameroon = 37,
        Canada = 38,
        CapeVerde = 39,
        CaymanIslands = 40,
        CentralAfricanRepublic = 41,
        Chad = 42,
        Chile = 43,
        China = 44,
        ChristmasIsland = 45,
        CocosIslands = 46,
        Colombia = 47,
        Comoros = 48,
        CongoKinshasa = 49,
        CongoBrazzaville = 50,
        CookIslands = 51,
        CostaRica = 52,
        IvoryCoast = 53,
        Croatia = 54,
        Cuba = 55,
        Cyprus = 56,
        CzechRepublic = 57,
        Denmark = 58,
        Djibouti = 59,
        Dominica = 60,
        DominicanRepublic = 61,
        EastTimor = 62,
        Ecuador = 63,
        Egypt = 64,
        ElSalvador = 65,
        EquatorialGuinea = 66,
        Eritrea = 67,
        Estonia = 68,
        Ethiopia = 69,
        FalklandIslands = 70,
        FaroeIslands = 71,
        Fiji = 72,
        Finland = 73,
        France = 74,
        Guernsey = 75,
        FrenchGuiana = 76,
        FrenchPolynesia = 77,
        FrenchSouthernTerritories = 78,
        Gabon = 79,
        Gambia = 80,
        Georgia = 81,
        Germany = 82,
        Ghana = 83,
        Gibraltar = 84,
        Greece = 85,
        Greenland = 86,
        Grenada = 87,
        Guadeloupe = 88,
        Guam = 89,
        Guatemala = 90,
        Guinea = 91,
        GuineaBissau = 92,
        Guyana = 93,
        Haiti = 94,
        HeardAndMcDonaldIslands = 95,
        Honduras = 96,
        HongKong = 97,
        Hungary = 98,
        Iceland = 99,
        India = 100,
        Indonesia = 101,
        Iran = 102,
        Iraq = 103,
        Ireland = 104,
        Israel = 105,
        Italy = 106,
        Jamaica = 107,
        Japan = 108,
        Jordan = 109,
        Kazakhstan = 110,
        Kenya = 111,
        Kiribati = 112,
        NorthKorea = 113,
        SouthKorea = 114,
        Kuwait = 115,
        Kyrgyzstan = 116,
        Laos = 117,
        Latvia = 118,
        Lebanon = 119,
        Lesotho = 120,
        Liberia = 121,
        Libya = 122,
        Liechtenstein = 123,
        Lithuania = 124,
        Luxembourg = 125,
        Macau = 126,
        Macedonia = 127,
        Madagascar = 128,
        Malawi = 129,
        Malaysia = 130,
        Maldives = 131,
        Mali = 132,
        Malta = 133,
        MarshallIslands = 134,
        Martinique = 135,
        Mauritania = 136,
        Mauritius = 137,
        Mayotte = 138,
        Mexico = 139,
        Micronesia = 140,
        Moldova = 141,
        Monaco = 142,
        Mongolia = 143,
        Montserrat = 144,
        Morocco = 145,
        Mozambique = 146,
        Myanmar = 147,
        Namibia = 148,
        NauruCountry = 149,
        Nepal = 150,
        Netherlands = 151,
        CuraSao = 152,
        NewCaledonia = 153,
        NewZealand = 154,
        Nicaragua = 155,
        Niger = 156,
        Nigeria = 157,
        Niue = 158,
        NorfolkIsland = 159,
        NorthernMarianaIslands = 160,
        Norway = 161,
        Oman = 162,
        Pakistan = 163,
        Palau = 164,
        PalestinianTerritories = 165,
        Panama = 166,
        PapuaNewGuinea = 167,
        Paraguay = 168,
        Peru = 169,
        Philippines = 170,
        Pitcairn = 171,
        Poland = 172,
        Portugal = 173,
        PuertoRico = 174,
        Qatar = 175,
        Reunion = 176,
        Romania = 177,
        Russia = 178,
        Rwanda = 179,
        SaintKittsAndNevis = 180,
        SaintLucia = 181,
        SaintVincentAndTheGrenadines = 182,
        Samoa = 183,
        SanMarino = 184,
        SaoTomeAndPrincipe = 185,
        SaudiArabia = 186,
        Senegal = 187,
        Seychelles = 188,
        SierraLeone = 189,
        Singapore = 190,
        Slovakia = 191,
        Slovenia = 192,
        SolomonIslands = 193,
        Somalia = 194,
        SouthAfrica = 195,
        SouthGeorgiaAndTheSouthSandwichIslands = 196,
        Spain = 197,
        SriLanka = 198,
        SaintHelena = 199,
        SaintPierreAndMiquelon = 200,
        Sudan = 201,
        Suriname = 202,
        SvalbardAndJanMayenIslands = 203,
        Swaziland = 204,
        Sweden = 205,
        Switzerland = 206,
        Syria = 207,
        Taiwan = 208,
        Tajikistan = 209,
        Tanzania = 210,
        Thailand = 211,
        Togo = 212,
        TokelauCountry = 213,
        Tonga = 214,
        TrinidadAndTobago = 215,
        Tunisia = 216,
        Turkey = 217,
        Turkmenistan = 218,
        TurksAndCaicosIslands = 219,
        TuvaluCountry = 220,
        Uganda = 221,
        Ukraine = 222,
        UnitedArabEmirates = 223,
        UnitedKingdom = 224,
        UnitedStates = 225,
        UnitedStatesMinorOutlyingIslands = 226,
        Uruguay = 227,
        Uzbekistan = 228,
        Vanuatu = 229,
        VaticanCityState = 230,
        Venezuela = 231,
        Vietnam = 232,
        BritishVirginIslands = 233,
        UnitedStatesVirginIslands = 234,
        WallisAndFutunaIslands = 235,
        WesternSahara = 236,
        Yemen = 237,
        CanaryIslands = 238,
        Zambia = 239,
        Zimbabwe = 240,
        ClippertonIsland = 241,
        Montenegro = 242,
        Serbia = 243,
        SaintBarthelemy = 244,
        SaintMartin = 245,
        LatinAmerica = 246,
        AscensionIsland = 247,
        AlandIslands = 248,
        DiegoGarcia = 249,
        CeutaAndMelilla = 250,
        IsleOfMan = 251,
        Jersey = 252,
        TristanDaCunha = 253,
        SouthSudan = 254,
        Bonaire = 255,
        SintMaarten = 256,
        Kosovo = 257,
        EuropeanUnion = 258,
        OutlyingOceania = 259,
        World = 260,
        Europe = 261,

        DemocraticRepublicOfCongo = CongoKinshasa,
        DemocraticRepublicOfKorea = NorthKorea,
        LatinAmericaAndTheCaribbean = LatinAmerica,
        PeoplesRepublicOfCongo = CongoBrazzaville,
        RepublicOfKorea = SouthKorea,
        RussianFederation = Russia,
        SyrianArabRepublic = Syria,
        Tokelau = TokelauCountry,
        Tuvalu = TuvaluCountry,

        LastCountry = Europe
    };


     friend constexpr const QMetaObject *qt_getEnumMetaObject(Language) noexcept { return &staticMetaObject; } friend constexpr const char *qt_getEnumName(Language) noexcept { return "Language"; }
     friend constexpr const QMetaObject *qt_getEnumMetaObject(Country) noexcept { return &staticMetaObject; } friend constexpr const char *qt_getEnumName(Country) noexcept { return "Country"; }
     friend constexpr const QMetaObject *qt_getEnumMetaObject(Script) noexcept { return &staticMetaObject; } friend constexpr const char *qt_getEnumName(Script) noexcept { return "Script"; }

    enum MeasurementSystem {
        MetricSystem,
        ImperialUSSystem,
        ImperialUKSystem,
        ImperialSystem = ImperialUSSystem 
    };
     friend constexpr const QMetaObject *qt_getEnumMetaObject(MeasurementSystem) noexcept { return &staticMetaObject; } friend constexpr const char *qt_getEnumName(MeasurementSystem) noexcept { return "MeasurementSystem"; }

    enum FormatType { LongFormat, ShortFormat, NarrowFormat };
    enum NumberOption {
        DefaultNumberOptions = 0x0,
        OmitGroupSeparator = 0x01,
        RejectGroupSeparator = 0x02,
        OmitLeadingZeroInExponent = 0x04,
        RejectLeadingZeroInExponent = 0x08,
        IncludeTrailingZeroesAfterDot = 0x10,
        RejectTrailingZeroesAfterDot = 0x20
    };
    typedef QFlags<NumberOption> NumberOptions;

    enum FloatingPointPrecisionOption {
        FloatingPointShortest = -128
    };

    enum CurrencySymbolFormat {
        CurrencyIsoCode,
        CurrencySymbol,
        CurrencyDisplayName
    };

    enum DataSizeFormat {
        
        DataSizeBase1000 = 1, 
        DataSizeSIQuantifiers = 2, 

        
        DataSizeIecFormat = 0, 
        DataSizeTraditionalFormat = DataSizeSIQuantifiers, 
        DataSizeSIFormat = DataSizeBase1000 | DataSizeSIQuantifiers 
    };
    typedef QFlags<DataSizeFormat> DataSizeFormats;
     friend constexpr const QMetaObject *qt_getEnumMetaObject(DataSizeFormats) noexcept { return &staticMetaObject; } friend constexpr const char *qt_getEnumName(DataSizeFormats) noexcept { return "DataSizeFormats"; }

    QLocale();
    QLocale(const QString &name);
    QLocale(Language language, Country country = AnyCountry);
    QLocale(Language language, Script script, Country country);
    QLocale(const QLocale &other);
    QLocale &operator=(QLocale &&other) noexcept { swap(other); return *this; }
    QLocale &operator=(const QLocale &other);
    ~QLocale();

    void swap(QLocale &other) noexcept { qSwap(d, other.d); }

    Language language() const;
    Script script() const;
    Country country() const;
    QString name() const;

    QString bcp47Name() const;
    QString nativeLanguageName() const;
    QString nativeCountryName() const;


    short toShort(const QString &s, bool *ok = nullptr) const;
    ushort toUShort(const QString &s, bool *ok = nullptr) const;
    int toInt(const QString &s, bool *ok = nullptr) const;
    uint toUInt(const QString &s, bool *ok = nullptr) const;
    long toLong(const QString &s, bool *ok = nullptr) const;
    ulong toULong(const QString &s, bool *ok = nullptr) const;
    qlonglong toLongLong(const QString &s, bool *ok = nullptr) const;
    qulonglong toULongLong(const QString &s, bool *ok = nullptr) const;
    float toFloat(const QString &s, bool *ok = nullptr) const;
    double toDouble(const QString &s, bool *ok = nullptr) const;

    short toShort(const QStringRef &s, bool *ok = nullptr) const;
    ushort toUShort(const QStringRef &s, bool *ok = nullptr) const;
    int toInt(const QStringRef &s, bool *ok = nullptr) const;
    uint toUInt(const QStringRef &s, bool *ok = nullptr) const;
    long toLong(const QStringRef &s, bool *ok = nullptr) const;
    ulong toULong(const QStringRef &s, bool *ok = nullptr) const;
    qlonglong toLongLong(const QStringRef &s, bool *ok = nullptr) const;
    qulonglong toULongLong(const QStringRef &s, bool *ok = nullptr) const;
    float toFloat(const QStringRef &s, bool *ok = nullptr) const;
    double toDouble(const QStringRef &s, bool *ok = nullptr) const;
#line 985 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"

    short toShort(QStringView s, bool *ok = nullptr) const;
    ushort toUShort(QStringView s, bool *ok = nullptr) const;
    int toInt(QStringView s, bool *ok = nullptr) const;
    uint toUInt(QStringView s, bool *ok = nullptr) const;
    long toLong(QStringView s, bool *ok = nullptr) const;
    ulong toULong(QStringView s, bool *ok = nullptr) const;
    qlonglong toLongLong(QStringView s, bool *ok = nullptr) const;
    qulonglong toULongLong(QStringView s, bool *ok = nullptr) const;
    float toFloat(QStringView s, bool *ok = nullptr) const;
    double toDouble(QStringView s, bool *ok = nullptr) const;

    QString toString(qlonglong i) const;
    QString toString(qulonglong i) const;
    inline QString toString(long i) const;
    inline QString toString(ulong i) const;
    inline QString toString(short i) const;
    inline QString toString(ushort i) const;
    inline QString toString(int i) const;
    inline QString toString(uint i) const;
    QString toString(double i, char f = 'g', int prec = 6) const;
    inline QString toString(float i, char f = 'g', int prec = 6) const;


    QString toString(const QDate &date, const QString &formatStr) const;
    QString toString(const QTime &time, const QString &formatStr) const;
    QString toString(const QDateTime &dateTime, const QString &format) const;
#line 1013 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"
    QString toString(const QDate &date, QStringView formatStr) const;
    QString toString(const QTime &time, QStringView formatStr) const;
    QString toString(const QDateTime &dateTime, QStringView format) const;
    QString toString(const QDate &date, FormatType format = LongFormat) const;
    QString toString(const QTime &time, FormatType format = LongFormat) const;
    QString toString(const QDateTime &dateTime, FormatType format = LongFormat) const;
    



    QString toString(const QDate &date, QStringView formatStr, QCalendar cal) const;
    QString toString(const QDate &date, FormatType format, QCalendar cal) const;
    QString toString(const QDateTime &dateTime, FormatType format, QCalendar cal) const;
    QString toString(const QDateTime &dateTime, QStringView formatStr, QCalendar cal) const;

    QString dateFormat(FormatType format = LongFormat) const;
    QString timeFormat(FormatType format = LongFormat) const;
    QString dateTimeFormat(FormatType format = LongFormat) const;

    QDate toDate(const QString &string, FormatType = LongFormat) const;
    QTime toTime(const QString &string, FormatType = LongFormat) const;
    QDateTime toDateTime(const QString &string, FormatType format = LongFormat) const;
    QDate toDate(const QString &string, const QString &format) const;
    QTime toTime(const QString &string, const QString &format) const;
    QDateTime toDateTime(const QString &string, const QString &format) const;
    
    QDate toDate(const QString &string, FormatType format, QCalendar cal) const;
    QTime toTime(const QString &string, FormatType format, QCalendar cal) const;
    QDateTime toDateTime(const QString &string, FormatType format, QCalendar cal) const;
    QDate toDate(const QString &string, const QString &format, QCalendar cal) const;
    QTime toTime(const QString &string, const QString &format, QCalendar cal) const;
    QDateTime toDateTime(const QString &string, const QString &format, QCalendar cal) const;
#line 1046 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"

    
    
    QChar decimalPoint() const;
    QChar groupSeparator() const;
    QChar percent() const;
    QChar zeroDigit() const;
    QChar negativeSign() const;
    QChar positiveSign() const;
    QChar exponential() const;

    QString monthName(int, FormatType format = LongFormat) const;
    QString standaloneMonthName(int, FormatType format = LongFormat) const;
    QString dayName(int, FormatType format = LongFormat) const;
    QString standaloneDayName(int, FormatType format = LongFormat) const;

    Qt::DayOfWeek firstDayOfWeek() const;
    QList<Qt::DayOfWeek> weekdays() const;

    QString amText() const;
    QString pmText() const;

    MeasurementSystem measurementSystem() const;
    QLocale collation() const;
    Qt::LayoutDirection textDirection() const;

    QString toUpper(const QString &str) const;
    QString toLower(const QString &str) const;

    QString currencySymbol(CurrencySymbolFormat = CurrencySymbol) const;
    QString toCurrencyString(qlonglong, const QString &symbol = QString()) const;
    QString toCurrencyString(qulonglong, const QString &symbol = QString()) const;
    inline QString toCurrencyString(short, const QString &symbol = QString()) const;
    inline QString toCurrencyString(ushort, const QString &symbol = QString()) const;
    inline QString toCurrencyString(int, const QString &symbol = QString()) const;
    inline QString toCurrencyString(uint, const QString &symbol = QString()) const;




#line 1087 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"
    QString toCurrencyString(double, const QString &symbol = QString()) const;
    QString toCurrencyString(double, const QString &symbol, int precision) const;
    inline QString toCurrencyString(float i, const QString &symbol = QString()) const
    { return toCurrencyString(double(i), symbol); }
    inline QString toCurrencyString(float i, const QString &symbol, int precision) const
    { return toCurrencyString(double(i), symbol, precision); }
#line 1094 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"


    QString formattedDataSize(qint64 bytes, int precision = 2, DataSizeFormats format = DataSizeIecFormat);
#line 1098 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"
    QString formattedDataSize(qint64 bytes, int precision = 2, DataSizeFormats format = DataSizeIecFormat) const;

    QStringList uiLanguages() const;

    bool operator==(const QLocale &other) const;
    bool operator!=(const QLocale &other) const;

    static QString languageToString(Language language);
    static QString countryToString(Country country);
    static QString scriptToString(Script script);
    static void setDefault(const QLocale &locale);

    static QLocale c() { return QLocale(C); }
    static QLocale system();

    static QList<QLocale> matchingLocales(QLocale::Language language, QLocale::Script script, QLocale::Country country);
    static QList<Country> countriesForLanguage(Language lang);

    void setNumberOptions(NumberOptions options);
    NumberOptions numberOptions() const;

    enum QuotationStyle { StandardQuotation, AlternateQuotation };
    QString quoteString(const QString &str, QuotationStyle style = StandardQuotation) const;
    QString quoteString(const QStringRef &str, QuotationStyle style = StandardQuotation) const;

    QString createSeparatedList(const QStringList &strl) const;

private:
    QLocale(QLocalePrivate &dd);
    friend class QLocalePrivate;
    friend class QSystemLocale;
    friend class QCalendarBackend;
    friend class QGregorianCalendar;
    friend __declspec(dllimport) uint qHash(const QLocale &key, uint seed) noexcept;

    QSharedDataPointer<QLocalePrivate> d;
};
template<> class QTypeInfo<QLocale > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QLocale>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QLocale>(), isLarge = (sizeof(QLocale)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QLocale >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QLocale) }; static inline const char *name() { return "QLocale"; } }; inline void swap(QLocale &value1, QLocale &value2) noexcept(noexcept(value1.swap(value2))) { value1.swap(value2); }
constexpr inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QLocale::NumberOptions::enum_type f2) noexcept { return QFlags<QLocale::NumberOptions::enum_type>(f1) | f2; } constexpr inline QFlags<QLocale::NumberOptions::enum_type> operator|(QLocale::NumberOptions::enum_type f1, QFlags<QLocale::NumberOptions::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QLocale::NumberOptions::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }

inline QString QLocale::toString(long i) const
    { return toString(qlonglong(i)); }
inline QString QLocale::toString(ulong i) const
    { return toString(qulonglong(i)); }
inline QString QLocale::toString(short i) const
    { return toString(qlonglong(i)); }
inline QString QLocale::toString(ushort i) const
    { return toString(qulonglong(i)); }
inline QString QLocale::toString(int i) const
    { return toString(qlonglong(i)); }
inline QString QLocale::toString(uint i) const
    { return toString(qulonglong(i)); }
inline QString QLocale::toString(float i, char f, int prec) const
    { return toString(double(i), f, prec); }

inline QString QLocale::toCurrencyString(short i, const QString &symbol) const
    { return toCurrencyString(qlonglong(i), symbol); }
inline QString QLocale::toCurrencyString(ushort i, const QString &symbol) const
    { return toCurrencyString(qulonglong(i), symbol); }
inline QString QLocale::toCurrencyString(int i, const QString &symbol) const
{ return toCurrencyString(qlonglong(i), symbol); }
inline QString QLocale::toCurrencyString(uint i, const QString &symbol) const
{ return toCurrencyString(qulonglong(i), symbol); }


__declspec(dllimport) QDataStream &operator<<(QDataStream &, const QLocale &);
__declspec(dllimport) QDataStream &operator>>(QDataStream &, QLocale &);
#line 1166 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"


__declspec(dllimport) QDebug operator<<(QDebug, const QLocale &);
#line 1170 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"



#line 1174 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qlocale.h"
#line 47 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"











class QTextCodec;
class QTextDecoder;

class QTextStreamPrivate;
class __declspec(dllimport) QTextStream                                
{
    inline QTextStreamPrivate* d_func() { __pragma(warning(push))  return reinterpret_cast<QTextStreamPrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } inline const QTextStreamPrivate* d_func() const { __pragma(warning(push))  return reinterpret_cast<const QTextStreamPrivate *>(qGetPtrHelper(d_ptr)); __pragma(warning(pop)) } friend class QTextStreamPrivate;

public:
    enum RealNumberNotation {
        SmartNotation,
        FixedNotation,
        ScientificNotation
    };
    enum FieldAlignment {
        AlignLeft,
        AlignRight,
        AlignCenter,
        AlignAccountingStyle
    };
    enum Status {
        Ok,
        ReadPastEnd,
        ReadCorruptData,
        WriteFailed
    };
    enum NumberFlag {
        ShowBase = 0x1,
        ForcePoint = 0x2,
        ForceSign = 0x4,
        UppercaseBase = 0x8,
        UppercaseDigits = 0x10
    };
    typedef QFlags<NumberFlag> NumberFlags;

    QTextStream();
    explicit QTextStream(QIODevice *device);
    explicit QTextStream(FILE *fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(QByteArray *array, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    explicit QTextStream(const QByteArray &array, QIODevice::OpenMode openMode = QIODevice::ReadOnly);
    virtual ~QTextStream();


    void setCodec(QTextCodec *codec);
    void setCodec(const char *codecName);
    QTextCodec *codec() const;
    void setAutoDetectUnicode(bool enabled);
    bool autoDetectUnicode() const;
    void setGenerateByteOrderMark(bool generate);
    bool generateByteOrderMark() const;
#line 110 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"

    void setLocale(const QLocale &locale);
    QLocale locale() const;

    void setDevice(QIODevice *device);
    QIODevice *device() const;

    void setString(QString *string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
    QString *string() const;

    Status status() const;
    void setStatus(Status status);
    void resetStatus();

    bool atEnd() const;
    void reset();
    void flush();
    bool seek(qint64 pos);
    qint64 pos() const;

    void skipWhiteSpace();

    QString readLine(qint64 maxlen = 0);
    bool readLineInto(QString *line, qint64 maxlen = 0);
    QString readAll();
    QString read(qint64 maxlen);

    void setFieldAlignment(FieldAlignment alignment);
    FieldAlignment fieldAlignment() const;

    void setPadChar(QChar ch);
    QChar padChar() const;

    void setFieldWidth(int width);
    int fieldWidth() const;

    void setNumberFlags(NumberFlags flags);
    NumberFlags numberFlags() const;

    void setIntegerBase(int base);
    int integerBase() const;

    void setRealNumberNotation(RealNumberNotation notation);
    RealNumberNotation realNumberNotation() const;

    void setRealNumberPrecision(int precision);
    int realNumberPrecision() const;

    QTextStream &operator>>(QChar &ch);
    QTextStream &operator>>(char &ch);
    QTextStream &operator>>(signed short &i);
    QTextStream &operator>>(unsigned short &i);
    QTextStream &operator>>(signed int &i);
    QTextStream &operator>>(unsigned int &i);
    QTextStream &operator>>(signed long &i);
    QTextStream &operator>>(unsigned long &i);
    QTextStream &operator>>(qlonglong &i);
    QTextStream &operator>>(qulonglong &i);
    QTextStream &operator>>(float &f);
    QTextStream &operator>>(double &f);
    QTextStream &operator>>(QString &s);
    QTextStream &operator>>(QByteArray &array);
    QTextStream &operator>>(char *c);

    QTextStream &operator<<(QChar ch);
    QTextStream &operator<<(char ch);
    QTextStream &operator<<(signed short i);
    QTextStream &operator<<(unsigned short i);
    QTextStream &operator<<(signed int i);
    QTextStream &operator<<(unsigned int i);
    QTextStream &operator<<(signed long i);
    QTextStream &operator<<(unsigned long i);
    QTextStream &operator<<(qlonglong i);
    QTextStream &operator<<(qulonglong i);
    QTextStream &operator<<(float f);
    QTextStream &operator<<(double f);
    QTextStream &operator<<(const QString &s);
    QTextStream &operator<<(QStringView s);
    QTextStream &operator<<(QLatin1String s);
    QTextStream &operator<<(const QStringRef &s);
    QTextStream &operator<<(const QByteArray &array);
    QTextStream &operator<<(const char *c);
    QTextStream &operator<<(const void *ptr);

private:
    QTextStream(const QTextStream &) = delete; QTextStream &operator=(const QTextStream &) = delete;
    friend class QDebugStateSaverPrivate;
    friend class QDebug;

    QScopedPointer<QTextStreamPrivate> d_ptr;
};

constexpr inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QTextStream::NumberFlags::enum_type f2) noexcept { return QFlags<QTextStream::NumberFlags::enum_type>(f1) | f2; } constexpr inline QFlags<QTextStream::NumberFlags::enum_type> operator|(QTextStream::NumberFlags::enum_type f1, QFlags<QTextStream::NumberFlags::enum_type> f2) noexcept { return f2 | f1; } constexpr inline QIncompatibleFlag operator|(QTextStream::NumberFlags::enum_type f1, int f2) noexcept { return QIncompatibleFlag(int(f1) | f2); }





typedef QTextStream & (*QTextStreamFunction)(QTextStream &);
typedef void (QTextStream::*QTSMFI)(int); 
typedef void (QTextStream::*QTSMFC)(QChar); 


class __declspec(dllimport) QTextStreamManipulator
{
public:
    constexpr QTextStreamManipulator(QTSMFI m, int a) noexcept : mf(m), mc(nullptr), arg(a), ch() {}
    constexpr QTextStreamManipulator(QTSMFC m, QChar c) noexcept : mf(nullptr), mc(m), arg(-1), ch(c) {}
    void exec(QTextStream &s) { if (mf) { (s.*mf)(arg); } else { (s.*mc)(ch); } }

private:
    QTSMFI mf;                                        
    QTSMFC mc;                                        
    int arg;                                          
    QChar ch;
};

inline QTextStream &operator>>(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamFunction f)
{ return (*f)(s); }

inline QTextStream &operator<<(QTextStream &s, QTextStreamManipulator m)
{ m.exec(s); return s; }



#line 239 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"

namespace QTextStreamFunctions {
#line 242 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"

__declspec(dllimport) QTextStream &bin(QTextStream &s);
__declspec(dllimport) QTextStream &oct(QTextStream &s);
__declspec(dllimport) QTextStream &dec(QTextStream &s);
__declspec(dllimport) QTextStream &hex(QTextStream &s);

__declspec(dllimport) QTextStream &showbase(QTextStream &s);
__declspec(dllimport) QTextStream &forcesign(QTextStream &s);
__declspec(dllimport) QTextStream &forcepoint(QTextStream &s);
__declspec(dllimport) QTextStream &noshowbase(QTextStream &s);
__declspec(dllimport) QTextStream &noforcesign(QTextStream &s);
__declspec(dllimport) QTextStream &noforcepoint(QTextStream &s);

__declspec(dllimport) QTextStream &uppercasebase(QTextStream &s);
__declspec(dllimport) QTextStream &uppercasedigits(QTextStream &s);
__declspec(dllimport) QTextStream &lowercasebase(QTextStream &s);
__declspec(dllimport) QTextStream &lowercasedigits(QTextStream &s);

__declspec(dllimport) QTextStream &fixed(QTextStream &s);
__declspec(dllimport) QTextStream &scientific(QTextStream &s);

__declspec(dllimport) QTextStream &left(QTextStream &s);
__declspec(dllimport) QTextStream &right(QTextStream &s);
__declspec(dllimport) QTextStream &center(QTextStream &s);

__declspec(dllimport) QTextStream &endl(QTextStream &s);
__declspec(dllimport) QTextStream &flush(QTextStream &s);
__declspec(dllimport) QTextStream &reset(QTextStream &s);

__declspec(dllimport) QTextStream &bom(QTextStream &s);

__declspec(dllimport) QTextStream &ws(QTextStream &s);

} 


namespace Qt {
using namespace QTextStreamFunctions;
}

__pragma(warning(push))



using namespace QTextStreamFunctions;
__pragma(warning(pop))
#line 289 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"

inline QTextStreamManipulator qSetFieldWidth(int width)
{
    QTSMFI func = &QTextStream::setFieldWidth;
    return QTextStreamManipulator(func,width);
}

inline QTextStreamManipulator qSetPadChar(QChar ch)
{
    QTSMFC func = &QTextStream::setPadChar;
    return QTextStreamManipulator(func, ch);
}

inline QTextStreamManipulator qSetRealNumberPrecision(int precision)
{
    QTSMFI func = &QTextStream::setRealNumberPrecision;
    return QTextStreamManipulator(func, precision);
}



#line 311 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qtextstream.h"
#line 50 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"











































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontainertools_impl.h"
























































































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"







template <class T>
class QSet
{
    typedef QHash<T, QHashDummyValue> Hash;

public:
    inline QSet() noexcept {}
    inline QSet(std::initializer_list<T> list)
        : QSet(list.begin(), list.end()) {}
    template <typename InputIterator, QtPrivate::IfIsInputIterator<InputIterator> = true>
    inline QSet(InputIterator first, InputIterator last)
    {
        QtPrivate::reserveIfForwardIterator(this, first, last);
        for (; first != last; ++first)
            insert(*first);
    }

    
    

    inline void swap(QSet<T> &other) noexcept { q_hash.swap(other.q_hash); }

    inline bool operator==(const QSet<T> &other) const
        { return q_hash == other.q_hash; }
    inline bool operator!=(const QSet<T> &other) const
        { return q_hash != other.q_hash; }

    inline int size() const { return q_hash.size(); }

    inline bool isEmpty() const { return q_hash.isEmpty(); }

    inline int capacity() const { return q_hash.capacity(); }
    inline void reserve(int size);
    inline void squeeze() { q_hash.squeeze(); }

    inline void detach() { q_hash.detach(); }
    inline bool isDetached() const { return q_hash.isDetached(); }

    inline void setSharable(bool sharable) { q_hash.setSharable(sharable); }
#line 92 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"

    inline void clear() { q_hash.clear(); }

    inline bool remove(const T &value) { return q_hash.remove(value) != 0; }

    inline bool contains(const T &value) const { return q_hash.contains(value); }

    bool contains(const QSet<T> &set) const;

    class const_iterator;

    class iterator
    {
        typedef QHash<T, QHashDummyValue> Hash;
        typename Hash::iterator i;
        friend class const_iterator;
        friend class QSet<T>;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &reference;

        inline iterator() {}
        inline iterator(typename Hash::iterator o) : i(o) {}
        inline iterator(const iterator &o) : i(o.i) {}
        inline iterator &operator=(const iterator &o) { i = o.i; return *this; }
        inline const T &operator*() const { return i.key(); }
        inline const T *operator->() const { return &i.key(); }
        inline bool operator==(const iterator &o) const { return i == o.i; }
        inline bool operator!=(const iterator &o) const { return i != o.i; }
        inline bool operator==(const const_iterator &o) const
            { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const
            { return i != o.i; }
        inline iterator &operator++() { ++i; return *this; }
        inline iterator operator++(int) { iterator r = *this; ++i; return r; }
        inline iterator &operator--() { --i; return *this; }
        inline iterator operator--(int) { iterator r = *this; --i; return r; }
        inline iterator operator+(int j) const { return i + j; }
        inline iterator operator-(int j) const { return i - j; }
        friend inline iterator operator+(int j, iterator k) { return k + j; }
        inline iterator &operator+=(int j) { i += j; return *this; }
        inline iterator &operator-=(int j) { i -= j; return *this; }
    };

    class const_iterator
    {
        typedef QHash<T, QHashDummyValue> Hash;
        typename Hash::const_iterator i;
        friend class iterator;
        friend class QSet<T>;

    public:
        typedef std::bidirectional_iterator_tag iterator_category;
        typedef qptrdiff difference_type;
        typedef T value_type;
        typedef const T *pointer;
        typedef const T &reference;

        inline const_iterator() {}
        inline const_iterator(typename Hash::const_iterator o) : i(o) {}
        inline const_iterator(const const_iterator &o) : i(o.i) {}
        inline const_iterator(const iterator &o)
            : i(o.i) {}
        inline const_iterator &operator=(const const_iterator &o) { i = o.i; return *this; }
        inline const T &operator*() const { return i.key(); }
        inline const T *operator->() const { return &i.key(); }
        inline bool operator==(const const_iterator &o) const { return i == o.i; }
        inline bool operator!=(const const_iterator &o) const { return i != o.i; }
        inline const_iterator &operator++() { ++i; return *this; }
        inline const_iterator operator++(int) { const_iterator r = *this; ++i; return r; }
        inline const_iterator &operator--() { --i; return *this; }
        inline const_iterator operator--(int) { const_iterator r = *this; --i; return r; }
        inline const_iterator operator+(int j) const { return i + j; }
        inline const_iterator operator-(int j) const { return i - j; }
        friend inline const_iterator operator+(int j, const_iterator k) { return k + j; }
        inline const_iterator &operator+=(int j) { i += j; return *this; }
        inline const_iterator &operator-=(int j) { i -= j; return *this; }
    };

    
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    inline iterator begin() { return q_hash.begin(); }
    inline const_iterator begin() const noexcept { return q_hash.begin(); }
    inline const_iterator cbegin() const noexcept { return q_hash.begin(); }
    inline const_iterator constBegin() const noexcept { return q_hash.constBegin(); }
    inline iterator end() { return q_hash.end(); }
    inline const_iterator end() const noexcept { return q_hash.end(); }
    inline const_iterator cend() const noexcept { return q_hash.end(); }
    inline const_iterator constEnd() const noexcept { return q_hash.constEnd(); }

    reverse_iterator rbegin() { return reverse_iterator(end()); }
    reverse_iterator rend() { return reverse_iterator(begin()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }

    iterator erase(iterator i)
    { return erase(m2c(i)); }
    iterator erase(const_iterator i)
    {
        static_cast<void>(false && (isValidIterator(i)));
        return q_hash.erase(reinterpret_cast<typename Hash::const_iterator &>(i));
    }

    
    typedef iterator Iterator;
    typedef const_iterator ConstIterator;
    inline int count() const { return q_hash.count(); }
    inline iterator insert(const T &value)
        { return static_cast<typename Hash::iterator>(q_hash.insert(value, QHashDummyValue())); }
    iterator find(const T &value) { return q_hash.find(value); }
    const_iterator find(const T &value) const { return q_hash.find(value); }
    inline const_iterator constFind(const T &value) const { return find(value); }
    QSet<T> &unite(const QSet<T> &other);
    QSet<T> &intersect(const QSet<T> &other);
    bool intersects(const QSet<T> &other) const;
    QSet<T> &subtract(const QSet<T> &other);

    
    typedef T key_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &reference;
    typedef const value_type &const_reference;
    typedef qptrdiff difference_type;
    typedef int size_type;

    inline bool empty() const { return isEmpty(); }
    
    inline QSet<T> &operator<<(const T &value) { insert(value); return *this; }
    inline QSet<T> &operator|=(const QSet<T> &other) { unite(other); return *this; }
    inline QSet<T> &operator|=(const T &value) { insert(value); return *this; }
    inline QSet<T> &operator&=(const QSet<T> &other) { intersect(other); return *this; }
    inline QSet<T> &operator&=(const T &value)
        { QSet<T> result; if (contains(value)) result.insert(value); return (*this = result); }
    inline QSet<T> &operator+=(const QSet<T> &other) { unite(other); return *this; }
    inline QSet<T> &operator+=(const T &value) { insert(value); return *this; }
    inline QSet<T> &operator-=(const QSet<T> &other) { subtract(other); return *this; }
    inline QSet<T> &operator-=(const T &value) { remove(value); return *this; }
    inline QSet<T> operator|(const QSet<T> &other) const
        { QSet<T> result = *this; result |= other; return result; }
    inline QSet<T> operator&(const QSet<T> &other) const
        { QSet<T> result = *this; result &= other; return result; }
    inline QSet<T> operator+(const QSet<T> &other) const
        { QSet<T> result = *this; result += other; return result; }
    inline QSet<T> operator-(const QSet<T> &other) const
        { QSet<T> result = *this; result -= other; return result; }

    QList<T> values() const;

    __declspec(deprecated("Use values() instead."))
    QList<T> toList() const { return values(); }
    __declspec(deprecated("Use QSet<T>(list.begin(), list.end()) instead."))
    static QSet<T> fromList(const QList<T> &list);
#line 255 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"

private:
    Hash q_hash;

    static const_iterator m2c(iterator it) noexcept
    { return const_iterator(typename Hash::const_iterator(it.i.i)); }

    bool isValidIterator(const iterator &i) const
    {
        return q_hash.isValidIterator(reinterpret_cast<const typename Hash::iterator&>(i));
    }
    bool isValidIterator(const const_iterator &i) const noexcept
    {
        return q_hash.isValidIterator(reinterpret_cast<const typename Hash::const_iterator&>(i));
    }
};


template <typename InputIterator,
          typename ValueType = typename std::iterator_traits<InputIterator>::value_type,
          QtPrivate::IfIsInputIterator<InputIterator> = true>
QSet(InputIterator, InputIterator) -> QSet<ValueType>;
#line 278 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"

template <typename T>
uint qHash(const QSet<T> &key, uint seed = 0)
noexcept(noexcept(qHashRangeCommutative(key.begin(), key.end(), seed)))
{
    return qHashRangeCommutative(key.begin(), key.end(), seed);
}



template <class T>
inline void QSet<T>::reserve(int asize) { q_hash.reserve(asize); }

template <class T>
inline QSet<T> &QSet<T>::unite(const QSet<T> &other)
{
    if (!q_hash.isSharedWith(other.q_hash)) {
        for (const T &e : other)
            insert(e);
    }
    return *this;
}

template <class T>
inline QSet<T> &QSet<T>::intersect(const QSet<T> &other)
{
    QSet<T> copy1;
    QSet<T> copy2;
    if (size() <= other.size()) {
        copy1 = *this;
        copy2 = other;
    } else {
        copy1 = other;
        copy2 = *this;
        *this = copy1;
    }
    for (const auto &e : qAsConst(copy1)) {
        if (!copy2.contains(e))
            remove(e);
    }
    return *this;
}

template <class T>
inline bool QSet<T>::intersects(const QSet<T> &other) const
{
    const bool otherIsBigger = other.size() > size();
    const QSet &smallestSet = otherIsBigger ? *this : other;
    const QSet &biggestSet = otherIsBigger ? other : *this;
    const bool equalSeeds = q_hash.d->seed == other.q_hash.d->seed;
    typename QSet::const_iterator i = smallestSet.cbegin();
    typename QSet::const_iterator e = smallestSet.cend();

    if ((equalSeeds)) {
        
        while (i != e) {
            if (*biggestSet.q_hash.findNode(*i, i.i.i->h) != biggestSet.q_hash.e)
                return true;
            ++i;
        }
    } else {
        while (i != e) {
            if (biggestSet.contains(*i))
                return true;
            ++i;
        }
     }

    return false;
}

template <class T>
inline QSet<T> &QSet<T>::subtract(const QSet<T> &other)
{
    if (q_hash.isSharedWith(other.q_hash)) {
        clear();
    } else {
        for (const auto &e : other)
            remove(e);
    }
    return *this;
}

template <class T>
inline bool QSet<T>::contains(const QSet<T> &other) const
{
    typename QSet<T>::const_iterator i = other.constBegin();
    while (i != other.constEnd()) {
        if (!contains(*i))
            return false;
        ++i;
    }
    return true;
}

template <typename T>
inline QList<T> QSet<T>::values() const
{
    QList<T> result;
    result.reserve(size());
    typename QSet<T>::const_iterator i = constBegin();
    while (i != constEnd()) {
        result.append(*i);
        ++i;
    }
    return result;
}


template <typename T>
inline QSet<T> QList<T>::toSet() const
{
    QSet<T> result;
    result.reserve(size());
    for (int i = 0; i < size(); ++i)
        result.insert(at(i));
    return result;
}

template <typename T>
QSet<T> QSet<T>::fromList(const QList<T> &list)
{
    return list.toSet();
}

template <typename T>
QList<T> QList<T>::fromSet(const QSet<T> &set)
{
    return set.toList();
}
#line 409 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"

template <class T> class QSetIterator { typedef typename QSet<T>::const_iterator const_iterator; QSet<T> c; const_iterator i; public: inline QSetIterator(const QSet<T> &container) : c(container), i(c.constBegin()) {} inline QSetIterator &operator=(const QSet<T> &container) { c = container; i = c.constBegin(); return *this; } inline void toFront() { i = c.constBegin(); } inline void toBack() { i = c.constEnd(); } inline bool hasNext() const { return i != c.constEnd(); } inline const T &next() { return *i++; } inline const T &peekNext() const { return *i; } inline bool hasPrevious() const { return i != c.constBegin(); } inline const T &previous() { return *--i; } inline const T &peekPrevious() const { const_iterator p = i; return *--p; } inline bool findNext(const T &t) { while (i != c.constEnd()) if (*i++ == t) return true; return false; } inline bool findPrevious(const T &t) { while (i != c.constBegin()) if (*(--i) == t) return true; return false; } };


template <typename T>
class QMutableSetIterator
{
    typedef typename QSet<T>::iterator iterator;
    QSet<T> *c;
    iterator i, n;
    inline bool item_exists() const { return c->constEnd() != n; }

public:
    inline QMutableSetIterator(QSet<T> &container)
        : c(&container)
    { i = c->begin(); n = c->end(); }
    inline QMutableSetIterator &operator=(QSet<T> &container)
    { c = &container; i = c->begin(); n = c->end(); return *this; }
    inline void toFront() { i = c->begin(); n = c->end(); }
    inline void toBack() { i = c->end(); n = i; }
    inline bool hasNext() const { return c->constEnd() != i; }
    inline const T &next() { n = i++; return *n; }
    inline const T &peekNext() const { return *i; }
    inline bool hasPrevious() const { return c->constBegin() != i; }
    inline const T &previous() { n = --i; return *n; }
    inline const T &peekPrevious() const { iterator p = i; return *--p; }
    inline void remove()
    { if (c->constEnd() != n) { i = c->erase(n); n = c->end(); } }
    inline const T &value() const { static_cast<void>(false && (item_exists())); return *n; }
    inline bool findNext(const T &t)
    { while (c->constEnd() != (n = i)) if (*i++ == t) return true; return false; }
    inline bool findPrevious(const T &t)
    { while (c->constBegin() != i) if (*(n = --i) == t) return true;
      n = c->end(); return false;  }
};
#line 445 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"



#line 449 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qset.h"
#line 53 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontiguouscache.h"










































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 44 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontiguouscache.h"








struct __declspec(dllimport) QContiguousCacheData
{
    QBasicAtomicInt ref;
    int alloc;
    int count;
    int start;
    int offset;
    uint sharable : 1;
    uint reserved : 31;

    
    
    
    

    static QContiguousCacheData *allocateData(int size, int alignment);
    static void freeData(QContiguousCacheData *data);




};

template <typename T>
struct QContiguousCacheTypedData: private QContiguousCacheData
{
    
    T array[1];

    static inline void freeData(QContiguousCacheTypedData *data) { QContiguousCacheData::freeData(data); }
};

template<typename T>
class QContiguousCache {
    typedef QContiguousCacheTypedData<T> Data;
    union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; };
public:
    
    typedef T value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef qptrdiff difference_type;
    typedef int size_type;

    explicit QContiguousCache(int capacity = 0);
    QContiguousCache(const QContiguousCache<T> &v) : d(v.d) { d->ref.ref(); if (!d->sharable) detach_helper(); }

    inline ~QContiguousCache() { if (!d) return; if (!d->ref.deref()) freeData(p); }

    inline void detach() { if (d->ref.loadRelaxed() != 1) detach_helper(); }
    inline bool isDetached() const { return d->ref.loadRelaxed() == 1; }

    inline void setSharable(bool sharable) { if (!sharable) detach(); d->sharable = sharable; }
#line 108 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontiguouscache.h"

    QContiguousCache<T> &operator=(const QContiguousCache<T> &other);
    inline QContiguousCache<T> &operator=(QContiguousCache<T> &&other) noexcept
    { qSwap(d, other.d); return *this; }
    inline void swap(QContiguousCache<T> &other) noexcept { qSwap(d, other.d); }
    bool operator==(const QContiguousCache<T> &other) const;
    inline bool operator!=(const QContiguousCache<T> &other) const { return !(*this == other); }

    inline int capacity() const {return d->alloc; }
    inline int count() const { return d->count; }
    inline int size() const { return d->count; }

    inline bool isEmpty() const { return d->count == 0; }
    inline bool isFull() const { return d->count == d->alloc; }
    inline int available() const { return d->alloc - d->count; }

    void clear();
    void setCapacity(int size);

    const T &at(int pos) const;
    T &operator[](int i);
    const T &operator[](int i) const;

    void append(const T &value);
    void prepend(const T &value);
    void insert(int pos, const T &value);

    inline bool containsIndex(int pos) const { return pos >= d->offset && pos - d->offset < d->count; }
    inline int firstIndex() const { return d->offset; }
    inline int lastIndex() const { return d->offset + d->count - 1; }

    inline const T &first() const { static_cast<void>(false && (!isEmpty())); return p->array[d->start]; }
    inline const T &last() const { static_cast<void>(false && (!isEmpty())); return p->array[(d->start + d->count -1) % d->alloc]; }
    inline T &first() { static_cast<void>(false && (!isEmpty())); detach(); return p->array[d->start]; }
    inline T &last() { static_cast<void>(false && (!isEmpty())); detach(); return p->array[(d->start + d->count -1) % d->alloc]; }

    void removeFirst();
    T takeFirst();
    void removeLast();
    T takeLast();

    inline bool areIndexesValid() const
    { return d->offset >= 0 && d->offset < 2147483647 - d->count && (d->offset % d->alloc) == d->start; }

    inline void normalizeIndexes() { d->offset = d->start; }




private:
    void detach_helper();

    QContiguousCacheData *allocateData(int aalloc);
    void freeData(Data *x);
    int sizeOfTypedData() {
        
        
        return reinterpret_cast<const char *>(&(reinterpret_cast<const Data *>(this))->array[1]) - reinterpret_cast<const char *>(this);
    }
    int alignOfTypedData() const
    {
        return qMax<int>(sizeof(void*), alignof(Data));
    }
};

template <typename T>
void QContiguousCache<T>::detach_helper()
{
    union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;

    x.d = allocateData(d->alloc);
    x.d->ref.storeRelaxed(1);
    x.d->count = d->count;
    x.d->start = d->start;
    x.d->offset = d->offset;
    x.d->alloc = d->alloc;
    x.d->sharable = true;
    x.d->reserved = 0;

    T *dest = x.p->array + x.d->start;
    T *src = p->array + d->start;
    int oldcount = x.d->count;
    while (oldcount--) {
        if (QTypeInfo<T>::isComplex) {
            new (dest) T(*src);
        } else {
            *dest = *src;
        }
        dest++;
        if (dest == x.p->array + x.d->alloc)
            dest = x.p->array;
        src++;
        if (src == p->array + d->alloc)
            src = p->array;
    }

    if (!d->ref.deref())
        freeData(p);
    d = x.d;
}

template <typename T>
void QContiguousCache<T>::setCapacity(int asize)
{
    static_cast<void>(false && (asize >= 0));
    if (asize == d->alloc)
        return;
    detach();
    union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;
    x.d = allocateData(asize);
    x.d->ref.storeRelaxed(1);
    x.d->alloc = asize;
    x.d->count = qMin(d->count, asize);
    x.d->offset = d->offset + d->count - x.d->count;
    if(asize)
        x.d->start = x.d->offset % x.d->alloc;
    else
        x.d->start = 0;

    int oldcount = x.d->count;
    if(oldcount)
    {
        T *dest = x.p->array + (x.d->start + x.d->count-1) % x.d->alloc;
        T *src = p->array + (d->start + d->count-1) % d->alloc;
        while (oldcount--) {
            if (QTypeInfo<T>::isComplex) {
                new (dest) T(*src);
            } else {
                *dest = *src;
            }
            if (dest == x.p->array)
                dest = x.p->array + x.d->alloc;
            dest--;
            if (src == p->array)
                src = p->array + d->alloc;
            src--;
        }
    }
    
    freeData(p);
    d = x.d;
}

template <typename T>
void QContiguousCache<T>::clear()
{
    if (d->ref.loadRelaxed() == 1) {
        if (QTypeInfo<T>::isComplex) {
            int oldcount = d->count;
            T * i = p->array + d->start;
            T * e = p->array + d->alloc;
            while (oldcount--) {
                i->~T();
                i++;
                if (i == e)
                    i = p->array;
            }
        }
        d->count = d->start = d->offset = 0;
    } else {
        union { QContiguousCacheData *d; QContiguousCacheTypedData<T> *p; } x;
        x.d = allocateData(d->alloc);
        x.d->ref.storeRelaxed(1);
        x.d->alloc = d->alloc;
        x.d->count = x.d->start = x.d->offset = 0;
        x.d->sharable = true;
        if (!d->ref.deref()) freeData(p);
        d = x.d;
    }
}

template <typename T>
inline QContiguousCacheData *QContiguousCache<T>::allocateData(int aalloc)
{
    return QContiguousCacheData::allocateData(sizeOfTypedData() + (aalloc - 1) * sizeof(T), alignOfTypedData());
}

template <typename T>
QContiguousCache<T>::QContiguousCache(int cap)
{
    static_cast<void>(false && (cap >= 0));
    d = allocateData(cap);
    d->ref.storeRelaxed(1);
    d->alloc = cap;
    d->count = d->start = d->offset = 0;
    d->sharable = true;
}

template <typename T>
QContiguousCache<T> &QContiguousCache<T>::operator=(const QContiguousCache<T> &other)
{
    other.d->ref.ref();
    if (!d->ref.deref())
        freeData(p);
    d = other.d;
    if (!d->sharable)
        detach_helper();
    return *this;
}

template <typename T>
bool QContiguousCache<T>::operator==(const QContiguousCache<T> &other) const
{
    if (other.d == d)
        return true;
    if (other.d->start != d->start
            || other.d->count != d->count
            || other.d->offset != d->offset
            || other.d->alloc != d->alloc)
        return false;
    for (int i = firstIndex(); i <= lastIndex(); ++i)
        if (!(at(i) == other.at(i)))
            return false;
    return true;
}

template <typename T>
void QContiguousCache<T>::freeData(Data *x)
{
    if (QTypeInfo<T>::isComplex) {
        int oldcount = d->count;
        T * i = p->array + d->start;
        T * e = p->array + d->alloc;
        while (oldcount--) {
            i->~T();
            i++;
            if (i == e)
                i = p->array;
        }
    }
    x->freeData(x);
}
template <typename T>
void QContiguousCache<T>::append(const T &value)
{
    if (!d->alloc)
        return;     
    detach();
    if (QTypeInfo<T>::isComplex) {
        if (d->count == d->alloc)
            (p->array + (d->start+d->count) % d->alloc)->~T();
        new (p->array + (d->start+d->count) % d->alloc) T(value);
    } else {
        p->array[(d->start+d->count) % d->alloc] = value;
    }

    if (d->count == d->alloc) {
        d->start++;
        d->start %= d->alloc;
        d->offset++;
    } else {
        d->count++;
    }
}

template<typename T>
void QContiguousCache<T>::prepend(const T &value)
{
    if (!d->alloc)
        return;     
    detach();
    if (d->start)
        d->start--;
    else
        d->start = d->alloc-1;
    d->offset--;

    if (d->count != d->alloc)
        d->count++;
    else
        if (d->count == d->alloc)
            (p->array + d->start)->~T();

    if (QTypeInfo<T>::isComplex)
        new (p->array + d->start) T(value);
    else
        p->array[d->start] = value;
}

template<typename T>
void QContiguousCache<T>::insert(int pos, const T &value)
{
    static_cast<void>(false && (pos >= 0 && pos < 2147483647));
    if (!d->alloc)
        return;     
    detach();
    if (containsIndex(pos)) {
        if (QTypeInfo<T>::isComplex) {
            (p->array + pos % d->alloc)->~T();
            new (p->array + pos % d->alloc) T(value);
        } else {
            p->array[pos % d->alloc] = value;
        }
    } else if (pos == d->offset-1)
        prepend(value);
    else if (pos == d->offset+d->count)
        append(value);
    else {
        
        clear();
        d->offset = pos;
        d->start = pos % d->alloc;
        d->count = 1;
        if (QTypeInfo<T>::isComplex)
            new (p->array + d->start) T(value);
        else
            p->array[d->start] = value;
    }
}

template <typename T>
inline const T &QContiguousCache<T>::at(int pos) const
{ static_cast<void>(false && (pos >= d->offset && pos - d->offset < d->count)); return p->array[pos % d->alloc]; }
template <typename T>
inline const T &QContiguousCache<T>::operator[](int pos) const
{ static_cast<void>(false && (pos >= d->offset && pos - d->offset < d->count)); return p->array[pos % d->alloc]; }

template <typename T>
inline T &QContiguousCache<T>::operator[](int pos)
{
    detach();
    if (!containsIndex(pos))
        insert(pos, T());
    return p->array[pos % d->alloc];
}

template <typename T>
inline void QContiguousCache<T>::removeFirst()
{
    static_cast<void>(false && (d->count > 0));
    detach();
    d->count--;
    if (QTypeInfo<T>::isComplex)
        (p->array + d->start)->~T();
    d->start = (d->start + 1) % d->alloc;
    d->offset++;
}

template <typename T>
inline void QContiguousCache<T>::removeLast()
{
    static_cast<void>(false && (d->count > 0));
    detach();
    d->count--;
    if (QTypeInfo<T>::isComplex)
        (p->array + (d->start + d->count) % d->alloc)->~T();
}

template <typename T>
inline T QContiguousCache<T>::takeFirst()
{ T t = first(); removeFirst(); return t; }

template <typename T>
inline T QContiguousCache<T>::takeLast()
{ T t = last(); removeLast(); return t; }



#line 467 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qcontiguouscache.h"
#line 54 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer.h"











































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 45 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer.h"



#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

















































#line 51 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"









#line 61 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"


#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qatomic.h"



















































































































































































































































































#line 64 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"



#line 68 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"









template <class T> class QWeakPointer;
template <class T> class QSharedPointer;
template <class T> class QEnableSharedFromThis;

class QVariant;

template <class X, class T>
QSharedPointer<X> qSharedPointerCast(const QSharedPointer<T> &ptr);
template <class X, class T>
QSharedPointer<X> qSharedPointerDynamicCast(const QSharedPointer<T> &ptr);
template <class X, class T>
QSharedPointer<X> qSharedPointerConstCast(const QSharedPointer<T> &ptr);


template <class X, class T>
QSharedPointer<X> qSharedPointerObjectCast(const QSharedPointer<T> &ptr);
#line 94 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

namespace QtPrivate {
struct EnableInternalData;
}

namespace QtSharedPointer {
    template <class T> class ExternalRefCount;

    template <class X, class Y> QSharedPointer<X> copyAndSetPointer(X * ptr, const QSharedPointer<Y> &src);

    
    __declspec(dllimport) void internalSafetyCheckAdd(const void *, const volatile void *);
    __declspec(dllimport) void internalSafetyCheckRemove(const void *);

    template <class T, typename Klass, typename RetVal>
    inline void executeDeleter(T *t, RetVal (Klass:: *memberDeleter)())
    { (t->*memberDeleter)(); }
    template <class T, typename Deleter>
    inline void executeDeleter(T *t, Deleter d)
    { d(t); }
    struct NormalDeleter {};

    
    template <class T> struct RemovePointer;
    template <class T> struct RemovePointer<T *> { typedef T Type; };
    template <class T> struct RemovePointer<QSharedPointer<T> > { typedef T Type; };
    template <class T> struct RemovePointer<QWeakPointer<T> > { typedef T Type; };

    
    
    
    
    
    
    
    
    
    
    struct ExternalRefCountData
    {
        typedef void (*DestroyerFn)(ExternalRefCountData *);
        QBasicAtomicInt weakref;
        QBasicAtomicInt strongref;
        DestroyerFn destroyer;

        inline ExternalRefCountData(DestroyerFn d)
            : destroyer(d)
        {
            strongref.storeRelaxed(1);
            weakref.storeRelaxed(1);
        }
        inline ExternalRefCountData(Qt::Initialization) { }
        ~ExternalRefCountData() { static_cast<void>(false && (!weakref.loadRelaxed())); static_cast<void>(false && (strongref.loadRelaxed() <= 0)); }

        void destroy() { destroyer(this); }


        __declspec(dllimport) static ExternalRefCountData *getAndRef(const QObject *);
        __declspec(dllimport) void setQObjectShared(const QObject *, bool enable);
        __declspec(dllimport) void checkQObjectShared(const QObject *);
#line 155 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
        inline void checkQObjectShared(...) { }
        inline void setQObjectShared(...) { }

        inline void operator delete(void *ptr) { ::operator delete(ptr); }
        inline void operator delete(void *, void *) { }
    };
    

    template <class T, typename Deleter>
    struct CustomDeleter
    {
        Deleter deleter;
        T *ptr;

        CustomDeleter(T *p, Deleter d) : deleter(d), ptr(p) {}
        void execute() { executeDeleter(ptr, deleter); }
    };
    
    
    
    

    
    
    
    template <class T>
    struct CustomDeleter<T, NormalDeleter>
    {
        T *ptr;

        CustomDeleter(T *p, NormalDeleter) : ptr(p) {}
        void execute() { delete ptr; }
    };
    

    
    
    
    
    template <class T, typename Deleter>
    struct ExternalRefCountWithCustomDeleter: public ExternalRefCountData
    {
        typedef ExternalRefCountWithCustomDeleter Self;
        typedef ExternalRefCountData BaseClass;
        CustomDeleter<T, Deleter> extra;

        static inline void deleter(ExternalRefCountData *self)
        {
            Self *realself = static_cast<Self *>(self);
            realself->extra.execute();

            
            realself->extra.~CustomDeleter<T, Deleter>();
        }
        static void safetyCheckDeleter(ExternalRefCountData *self)
        {
            internalSafetyCheckRemove(self);
            deleter(self);
        }

        static inline Self *create(T *ptr, Deleter userDeleter, DestroyerFn actualDeleter)
        {
            Self *d = static_cast<Self *>(::operator new(sizeof(Self)));

            
            new (&d->extra) CustomDeleter<T, Deleter>(ptr, userDeleter);
            new (d) BaseClass(actualDeleter); 

            return d;
        }
    private:
        
        ExternalRefCountWithCustomDeleter() = delete;
        ~ExternalRefCountWithCustomDeleter() = delete;
        ExternalRefCountWithCustomDeleter(const ExternalRefCountWithCustomDeleter &) = delete; ExternalRefCountWithCustomDeleter &operator=(const ExternalRefCountWithCustomDeleter &) = delete;
    };

    
    
    
    
    template <class T>
    struct ExternalRefCountWithContiguousData: public ExternalRefCountData
    {
        typedef ExternalRefCountData Parent;
        typedef typename std::remove_cv<T>::type NoCVType;
        NoCVType data;

        static void deleter(ExternalRefCountData *self)
        {
            ExternalRefCountWithContiguousData *that =
                    static_cast<ExternalRefCountWithContiguousData *>(self);
            that->data.~T();
            (void)that;; 
        }
        static void safetyCheckDeleter(ExternalRefCountData *self)
        {
            internalSafetyCheckRemove(self);
            deleter(self);
        }
        static void noDeleter(ExternalRefCountData *) { }

        static inline ExternalRefCountData *create(NoCVType **ptr, DestroyerFn destroy)
        {
            ExternalRefCountWithContiguousData *d =
                static_cast<ExternalRefCountWithContiguousData *>(::operator new(sizeof(ExternalRefCountWithContiguousData)));

            
            
            new (d) Parent(destroy); 

            *ptr = &d->data;
            return d;
        }

    private:
        
        ExternalRefCountWithContiguousData() = delete;
        ~ExternalRefCountWithContiguousData() = delete;
        ExternalRefCountWithContiguousData(const ExternalRefCountWithContiguousData &) = delete; ExternalRefCountWithContiguousData &operator=(const ExternalRefCountWithContiguousData &) = delete;
    };


    __declspec(dllimport) QWeakPointer<QObject> weakPointerFromVariant_internal(const QVariant &variant);
    __declspec(dllimport) QSharedPointer<QObject> sharedPointerFromVariant_internal(const QVariant &variant);
#line 281 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
} 

template <class T> class QSharedPointer
{
    typedef T *QSharedPointer:: *RestrictedBool;
    typedef QtSharedPointer::ExternalRefCountData Data;
    template <typename X>
    using IfCompatible = typename std::enable_if<std::is_convertible<X*, T*>::value, bool>::type;

public:
    typedef T Type;
    typedef T element_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &reference;
    typedef const value_type &const_reference;
    typedef qptrdiff difference_type;

    T *data() const noexcept { return value; }
    T *get() const noexcept { return value; }
    bool isNull() const noexcept { return !data(); }
    operator RestrictedBool() const noexcept { return isNull() ? nullptr : &QSharedPointer::value; }
    bool operator !() const noexcept { return isNull(); }
    T &operator*() const { return *data(); }
    T *operator->() const noexcept { return data(); }

    constexpr QSharedPointer() noexcept : value(nullptr), d(nullptr) { }
    ~QSharedPointer() { deref(); }

    constexpr QSharedPointer(std::nullptr_t) noexcept : value(nullptr), d(nullptr) { }

    template <class X, IfCompatible<X> = true>
    inline explicit QSharedPointer(X *ptr) : value(ptr) 
    { internalConstruct(ptr, QtSharedPointer::NormalDeleter()); }

    template <class X, typename Deleter, IfCompatible<X> = true>
    inline QSharedPointer(X *ptr, Deleter deleter) : value(ptr) 
    { internalConstruct(ptr, deleter); }

    template <typename Deleter>
    QSharedPointer(std::nullptr_t, Deleter) : value(nullptr), d(nullptr) { }

    QSharedPointer(const QSharedPointer &other) noexcept : value(other.value), d(other.d)
    { if (d) ref(); }
    QSharedPointer &operator=(const QSharedPointer &other) noexcept
    {
        QSharedPointer copy(other);
        swap(copy);
        return *this;
    }
    QSharedPointer(QSharedPointer &&other) noexcept
        : value(other.value), d(other.d)
    {
        other.d = nullptr;
        other.value = nullptr;
    }
    QSharedPointer &operator=(QSharedPointer &&other) noexcept
    {
        QSharedPointer moved(std::move(other));
        swap(moved);
        return *this;
    }

    template <class X, IfCompatible<X> = true>
    QSharedPointer(QSharedPointer<X> &&other) noexcept
        : value(other.value), d(other.d)
    {
        other.d = nullptr;
        other.value = nullptr;
    }

    template <class X, IfCompatible<X> = true>
    QSharedPointer &operator=(QSharedPointer<X> &&other) noexcept
    {
        QSharedPointer moved(std::move(other));
        swap(moved);
        return *this;
    }

    template <class X, IfCompatible<X> = true>
    QSharedPointer(const QSharedPointer<X> &other) noexcept : value(other.value), d(other.d)
    { if (d) ref(); }

    template <class X, IfCompatible<X> = true>
    inline QSharedPointer &operator=(const QSharedPointer<X> &other)
    {
        QSharedPointer copy(other);
        swap(copy);
        return *this;
    }

    template <class X, IfCompatible<X> = true>
    inline QSharedPointer(const QWeakPointer<X> &other) : value(nullptr), d(nullptr)
    { *this = other; }

    template <class X, IfCompatible<X> = true>
    inline QSharedPointer<T> &operator=(const QWeakPointer<X> &other)
    { internalSet(other.d, other.value); return *this; }

    inline void swap(QSharedPointer &other) noexcept
    { this->internalSwap(other); }

    inline void reset() { clear(); }
    inline void reset(T *t)
    { QSharedPointer copy(t); swap(copy); }
    template <typename Deleter>
    inline void reset(T *t, Deleter deleter)
    { QSharedPointer copy(t, deleter); swap(copy); }

    template <class X>
    QSharedPointer<X> staticCast() const
    {
        return qSharedPointerCast<X, T>(*this);
    }

    template <class X>
    QSharedPointer<X> dynamicCast() const
    {
        return qSharedPointerDynamicCast<X, T>(*this);
    }

    template <class X>
    QSharedPointer<X> constCast() const
    {
        return qSharedPointerConstCast<X, T>(*this);
    }


    template <class X>
    QSharedPointer<X> objectCast() const
    {
        return qSharedPointerObjectCast<X, T>(*this);
    }
#line 416 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

    inline void clear() { QSharedPointer copy; swap(copy); }

    QWeakPointer<T> toWeakRef() const;

    template <typename... Args>
    static QSharedPointer create(Args && ...arguments)
    {
        typedef QtSharedPointer::ExternalRefCountWithContiguousData<T> Private;



        typename Private::DestroyerFn destroy = &Private::deleter;
#line 430 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
        typename Private::DestroyerFn noDestroy = &Private::noDeleter;
        QSharedPointer result(Qt::Uninitialized);
        typename std::remove_cv<T>::type *ptr;
        result.d = Private::create(&ptr, noDestroy);

        
        new (ptr) T(std::forward<Args>(arguments)...);
        result.value = ptr;
        result.d->destroyer = destroy;
        result.d->setQObjectShared(result.value, true);



        result.enableSharedFromThis(result.data());
        return result;
    }

private:
    explicit QSharedPointer(Qt::Initialization) {}

    void deref() noexcept
    { deref(d); }
    static void deref(Data *dd) noexcept
    {
        if (!dd) return;
        if (!dd->strongref.deref()) {
            dd->destroy();
        }
        if (!dd->weakref.deref())
            delete dd;
    }

    template <class X>
    inline void enableSharedFromThis(const QEnableSharedFromThis<X> *ptr)
    {
        ptr->initializeFromSharedPointer(constCast<typename std::remove_cv<T>::type>());
    }

    inline void enableSharedFromThis(...) {}

    template <typename X, typename Deleter>
    inline void internalConstruct(X *ptr, Deleter deleter)
    {
        if (!ptr) {
            d = nullptr;
            return;
        }

        typedef QtSharedPointer::ExternalRefCountWithCustomDeleter<X, Deleter> Private;



        typename Private::DestroyerFn actualDeleter = &Private::deleter;
#line 484 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
        d = Private::create(ptr, deleter, actualDeleter);




        d->setQObjectShared(ptr, true);
        enableSharedFromThis(ptr);
    }

    void internalSwap(QSharedPointer &other) noexcept
    {
        qSwap(d, other.d);
        qSwap(this->value, other.value);
    }



#line 502 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
    template <class X> friend class QSharedPointer;
    template <class X> friend class QWeakPointer;
    template <class X, class Y> friend QSharedPointer<X> QtSharedPointer::copyAndSetPointer(X * ptr, const QSharedPointer<Y> &src);
#line 506 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
    void ref() const noexcept { d->weakref.ref(); d->strongref.ref(); }

    inline void internalSet(Data *o, T *actual)
    {
        if (o) {
            
            
            int tmp = o->strongref.loadRelaxed();
            while (tmp > 0) {
                
                if (o->strongref.testAndSetRelaxed(tmp, tmp + 1))
                    break;   
                tmp = o->strongref.loadRelaxed();  
            }

            if (tmp > 0) {
                o->weakref.ref();
            } else {
                o->checkQObjectShared(actual);
                o = nullptr;
            }
        }

        qSwap(d, o);
        qSwap(this->value, actual);
        if (!d || d->strongref.loadRelaxed() == 0)
            this->value = nullptr;

        
        deref(o);
    }

    Type *value;
    Data *d;
};

template <class T>
class QWeakPointer
{
    typedef T *QWeakPointer:: *RestrictedBool;
    typedef QtSharedPointer::ExternalRefCountData Data;
    template <typename X>
    using IfCompatible = typename std::enable_if<std::is_convertible<X*, T*>::value, bool>::type;

public:
    typedef T element_type;
    typedef T value_type;
    typedef value_type *pointer;
    typedef const value_type *const_pointer;
    typedef value_type &reference;
    typedef const value_type &const_reference;
    typedef qptrdiff difference_type;

    bool isNull() const noexcept { return d == nullptr || d->strongref.loadRelaxed() == 0 || value == nullptr; }
    operator RestrictedBool() const noexcept { return isNull() ? nullptr : &QWeakPointer::value; }
    bool operator !() const noexcept { return isNull(); }


    __declspec(deprecated("Use toStrongRef() instead, and data() on the returned QSharedPointer"))
    T *data() const noexcept { return internalData(); }
#line 567 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

    inline QWeakPointer() noexcept : d(nullptr), value(nullptr) { }
    inline ~QWeakPointer() { if (d && !d->weakref.deref()) delete d; }


    




#line 578 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
#line 579 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"





#line 585 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

    QWeakPointer(const QWeakPointer &other) noexcept : d(other.d), value(other.value)
    { if (d) d->weakref.ref(); }
    QWeakPointer(QWeakPointer &&other) noexcept
        : d(other.d), value(other.value)
    {
        other.d = nullptr;
        other.value = nullptr;
    }
    QWeakPointer &operator=(QWeakPointer &&other) noexcept
    { QWeakPointer moved(std::move(other)); swap(moved); return *this; }
    QWeakPointer &operator=(const QWeakPointer &other) noexcept
    {
        QWeakPointer copy(other);
        swap(copy);
        return *this;
    }

    void swap(QWeakPointer &other) noexcept
    {
        qSwap(this->d, other.d);
        qSwap(this->value, other.value);
    }

    inline QWeakPointer(const QSharedPointer<T> &o) : d(o.d), value(o.data())
    { if (d) d->weakref.ref();}
    inline QWeakPointer &operator=(const QSharedPointer<T> &o)
    {
        internalSet(o.d, o.value);
        return *this;
    }

    template <class X, IfCompatible<X> = true>
    inline QWeakPointer(const QWeakPointer<X> &o) : d(nullptr), value(nullptr)
    { *this = o; }

    template <class X, IfCompatible<X> = true>
    inline QWeakPointer &operator=(const QWeakPointer<X> &o)
    {
        
        
        *this = o.toStrongRef();
        return *this;
    }

    template <class X>
    bool operator==(const QWeakPointer<X> &o) const noexcept
    { return d == o.d && value == static_cast<const T *>(o.value); }

    template <class X>
    bool operator!=(const QWeakPointer<X> &o) const noexcept
    { return !(*this == o); }

    template <class X, IfCompatible<X> = true>
    inline QWeakPointer(const QSharedPointer<X> &o) : d(nullptr), value(nullptr)
    { *this = o; }

    template <class X, IfCompatible<X> = true>
    inline QWeakPointer &operator=(const QSharedPointer<X> &o)
    {
        internalSet(o.d, o.data());
        return *this;
    }

    template <class X>
    bool operator==(const QSharedPointer<X> &o) const noexcept
    { return d == o.d; }

    template <class X>
    bool operator!=(const QSharedPointer<X> &o) const noexcept
    { return !(*this == o); }

    inline void clear() { *this = QWeakPointer(); }

    inline QSharedPointer<T> toStrongRef() const { return QSharedPointer<T>(*this); }
    
    inline QSharedPointer<T> lock() const { return toStrongRef(); }



#line 666 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

private:
    friend struct QtPrivate::EnableInternalData;


#line 672 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
    template <class X> friend class QSharedPointer;
    template <class X> friend class QPointer;
#line 675 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

    template <class X>
    inline QWeakPointer &assign(X *ptr)
    { return *this = QWeakPointer<X>(ptr, true); }


    template <class X, IfCompatible<X> = true>
    inline QWeakPointer(X *ptr, bool) : d(ptr ? Data::getAndRef(ptr) : nullptr), value(ptr)
    { }
#line 685 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

    inline void internalSet(Data *o, T *actual)
    {
        if (d == o) return;
        if (o)
            o->weakref.ref();
        if (d && !d->weakref.deref())
            delete d;
        d = o;
        value = actual;
    }

    
    
    inline T *internalData() const noexcept
    {
        return d == nullptr || d->strongref.loadRelaxed() == 0 ? nullptr : value;
    }

    Data *d;
    T *value;
};

namespace QtPrivate {
struct EnableInternalData {
    template <typename T>
    static T *internalData(const QWeakPointer<T> &p) noexcept { return p.internalData(); }
};


template <typename T>
struct EnableInternalDataWrap : EnableInternalData {};
}

template <class T>
class QEnableSharedFromThis
{
protected:
    QEnableSharedFromThis() = default;
    QEnableSharedFromThis(const QEnableSharedFromThis &) {}
    QEnableSharedFromThis &operator=(const QEnableSharedFromThis &) { return *this; }

public:
    inline QSharedPointer<T> sharedFromThis() { return QSharedPointer<T>(weakPointer); }
    inline QSharedPointer<const T> sharedFromThis() const { return QSharedPointer<const T>(weakPointer); }


private:
    template <class X> friend class QSharedPointer;


#line 737 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
    template <class X>
    inline void initializeFromSharedPointer(const QSharedPointer<X> &ptr) const
    {
        weakPointer = ptr;
    }

    mutable QWeakPointer<T> weakPointer;
};




template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2) noexcept
{
    return ptr1.data() == ptr2.data();
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2) noexcept
{
    return ptr1.data() != ptr2.data();
}

template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const X *ptr2) noexcept
{
    return ptr1.data() == ptr2;
}
template <class T, class X>
bool operator==(const T *ptr1, const QSharedPointer<X> &ptr2) noexcept
{
    return ptr1 == ptr2.data();
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const X *ptr2) noexcept
{
    return !(ptr1 == ptr2);
}
template <class T, class X>
bool operator!=(const T *ptr1, const QSharedPointer<X> &ptr2) noexcept
{
    return !(ptr2 == ptr1);
}

template <class T, class X>
bool operator==(const QSharedPointer<T> &ptr1, const QWeakPointer<X> &ptr2) noexcept
{
    return ptr2 == ptr1;
}
template <class T, class X>
bool operator!=(const QSharedPointer<T> &ptr1, const QWeakPointer<X> &ptr2) noexcept
{
    return ptr2 != ptr1;
}

template<class T>
inline bool operator==(const QSharedPointer<T> &lhs, std::nullptr_t) noexcept
{
    return lhs.isNull();
}

template<class T>
inline bool operator!=(const QSharedPointer<T> &lhs, std::nullptr_t) noexcept
{
    return !lhs.isNull();
}

template<class T>
inline bool operator==(std::nullptr_t, const QSharedPointer<T> &rhs) noexcept
{
    return rhs.isNull();
}

template<class T>
inline bool operator!=(std::nullptr_t, const QSharedPointer<T> &rhs) noexcept
{
    return !rhs.isNull();
}

template<class T>
inline bool operator==(const QWeakPointer<T> &lhs, std::nullptr_t) noexcept
{
    return lhs.isNull();
}

template<class T>
inline bool operator!=(const QWeakPointer<T> &lhs, std::nullptr_t) noexcept
{
    return !lhs.isNull();
}

template<class T>
inline bool operator==(std::nullptr_t, const QWeakPointer<T> &rhs) noexcept
{
    return rhs.isNull();
}

template<class T>
inline bool operator!=(std::nullptr_t, const QWeakPointer<T> &rhs) noexcept
{
    return !rhs.isNull();
}




template <class T, class X>
inline typename QSharedPointer<T>::difference_type operator-(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
    return ptr1.data() - ptr2.data();
}
template <class T, class X>
inline typename QSharedPointer<T>::difference_type operator-(const QSharedPointer<T> &ptr1, X *ptr2)
{
    return ptr1.data() - ptr2;
}
template <class T, class X>
inline typename QSharedPointer<X>::difference_type operator-(T *ptr1, const QSharedPointer<X> &ptr2)
{
    return ptr1 - ptr2.data();
}




template <class T, class X>
inline bool operator<(const QSharedPointer<T> &ptr1, const QSharedPointer<X> &ptr2)
{
    using CT = typename std::common_type<T *, X *>::type;
    return std::less<CT>()(ptr1.data(), ptr2.data());
}
template <class T, class X>
inline bool operator<(const QSharedPointer<T> &ptr1, X *ptr2)
{
    using CT = typename std::common_type<T *, X *>::type;
    return std::less<CT>()(ptr1.data(), ptr2);
}
template <class T, class X>
inline bool operator<(T *ptr1, const QSharedPointer<X> &ptr2)
{
    using CT = typename std::common_type<T *, X *>::type;
    return std::less<CT>()(ptr1, ptr2.data());
}




template <class T>
inline uint qHash(const QSharedPointer<T> &ptr, uint seed = 0)
{
    return ::qHash(ptr.data(), seed);
}


template <class T>
inline QWeakPointer<T> QSharedPointer<T>::toWeakRef() const
{
    return QWeakPointer<T>(*this);
}

template <class T>
inline void swap(QSharedPointer<T> &p1, QSharedPointer<T> &p2) noexcept
{ p1.swap(p2); }

template <class T>
inline void swap(QWeakPointer<T> &p1, QWeakPointer<T> &p2) noexcept
{ p1.swap(p2); }

namespace QtSharedPointer {

    template <class X, class T>
    inline QSharedPointer<X> copyAndSetPointer(X *ptr, const QSharedPointer<T> &src)
    {
        QSharedPointer<X> result;
        result.internalSet(src.d, ptr);
        return result;
    }
}


template <class X, class T>
inline QSharedPointer<X> qSharedPointerCast(const QSharedPointer<T> &src)
{
    X *ptr = static_cast<X *>(src.data()); 
    return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerCast(const QWeakPointer<T> &src)
{
    return qSharedPointerCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<X> qSharedPointerDynamicCast(const QSharedPointer<T> &src)
{
    X *ptr = dynamic_cast<X *>(src.data()); 
    if (!ptr)
        return QSharedPointer<X>();
    return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerDynamicCast(const QWeakPointer<T> &src)
{
    return qSharedPointerDynamicCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<X> qSharedPointerConstCast(const QSharedPointer<T> &src)
{
    X *ptr = const_cast<X *>(src.data()); 
    return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerConstCast(const QWeakPointer<T> &src)
{
    return qSharedPointerConstCast<X, T>(src.toStrongRef());
}

template <class X, class T>
inline
QWeakPointer<X> qWeakPointerCast(const QSharedPointer<T> &src)
{
    return qSharedPointerCast<X, T>(src).toWeakRef();
}


template <class X, class T>
inline QSharedPointer<X> qSharedPointerObjectCast(const QSharedPointer<T> &src)
{
    X *ptr = qobject_cast<X *>(src.data());
    return QtSharedPointer::copyAndSetPointer(ptr, src);
}
template <class X, class T>
inline QSharedPointer<X> qSharedPointerObjectCast(const QWeakPointer<T> &src)
{
    return qSharedPointerObjectCast<X>(src.toStrongRef());
}

template <class X, class T>
inline QSharedPointer<typename QtSharedPointer::RemovePointer<X>::Type>
qobject_cast(const QSharedPointer<T> &src)
{
    return qSharedPointerObjectCast<typename QtSharedPointer::RemovePointer<X>::Type, T>(src);
}
template <class X, class T>
inline QSharedPointer<typename QtSharedPointer::RemovePointer<X>::Type>
qobject_cast(const QWeakPointer<T> &src)
{
    return qSharedPointerObjectCast<typename QtSharedPointer::RemovePointer<X>::Type, T>(src);
}



template<typename T>
QWeakPointer<typename std::enable_if<QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value, T>::type>
qWeakPointerFromVariant(const QVariant &variant)
{
    return QWeakPointer<T>(qobject_cast<T*>(QtPrivate::EnableInternalData::internalData(QtSharedPointer::weakPointerFromVariant_internal(variant))));
}
template<typename T>
QSharedPointer<typename std::enable_if<QtPrivate::IsPointerToTypeDerivedFromQObject<T*>::Value, T>::type>
qSharedPointerFromVariant(const QVariant &variant)
{
    return qSharedPointerObjectCast<T>(QtSharedPointer::sharedPointerFromVariant_internal(variant));
}



template <typename X, class T>
std::shared_ptr<X> qobject_pointer_cast(const std::shared_ptr<T> &src)
{
    using element_type = typename std::shared_ptr<X>::element_type;
    return std::shared_ptr<X>(src, qobject_cast<element_type *>(src.get()));
}

template <typename X, class T>
std::shared_ptr<X> qobject_pointer_cast(std::shared_ptr<T> &&src)
{
    using element_type = typename std::shared_ptr<X>::element_type;
    auto castResult = qobject_cast<element_type *>(src.get());
    if (castResult) {
        auto result = std::shared_ptr<X>(std::move(src), castResult);

        
        
        
        
        src.reset();
#line 1026 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
        return result;
    }
    return std::shared_ptr<X>();
}

template <typename X, class T>
std::shared_ptr<X> qSharedPointerObjectCast(const std::shared_ptr<T> &src)
{
    return qobject_pointer_cast<X>(src);
}

template <typename X, class T>
std::shared_ptr<X> qSharedPointerObjectCast(std::shared_ptr<T> &&src)
{
    return qobject_pointer_cast<X>(std::move(src));
}

#line 1044 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"

template<typename T> class QTypeInfo<QWeakPointer<T> > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QWeakPointer<T>>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QWeakPointer<T>>(), isLarge = (sizeof(QWeakPointer<T>)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QWeakPointer<T> >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QWeakPointer<T>) }; static inline const char *name() { return "QWeakPointer<T>"; } };
template<typename T> class QTypeInfo<QSharedPointer<T> > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QSharedPointer<T>>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QSharedPointer<T>>(), isLarge = (sizeof(QSharedPointer<T>)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QSharedPointer<T> >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QSharedPointer<T>) }; static inline const char *name() { return "QSharedPointer<T>"; } };




#line 1052 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer_impl.h"
#line 49 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer.h"




































































































































#line 182 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer.h"

#line 184 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qsharedpointer.h"
#line 55 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"










class __declspec(dllimport) QDebug
{
    friend class QMessageLogger;
    friend class QDebugStateSaver;
    friend class QDebugStateSaverPrivate;
    struct Stream {
        enum { VerbosityShift = 29, VerbosityMask = 0x7 };

        Stream(QIODevice *device) : ts(device), ref(1), type(QtDebugMsg),
            space(true), message_output(false), flags(DefaultVerbosity << VerbosityShift) {}
        Stream(QString *string) : ts(string, QIODevice::WriteOnly), ref(1), type(QtDebugMsg),
            space(true), message_output(false), flags(DefaultVerbosity << VerbosityShift) {}
        Stream(QtMsgType t) : ts(&buffer, QIODevice::WriteOnly), ref(1), type(t),
            space(true), message_output(true), flags(DefaultVerbosity << VerbosityShift) {}
        QTextStream ts;
        QString buffer;
        int ref;
        QtMsgType type;
        bool space;
        bool message_output;
        QMessageLogContext context;

        enum FormatFlag { 
            NoQuotes = 0x1
        };

        
        bool testFlag(FormatFlag flag) const { return (context.version > 1) ? (flags & flag) : false; }
        void setFlag(FormatFlag flag) { if (context.version > 1) { flags |= flag; } }
        void unsetFlag(FormatFlag flag) { if (context.version > 1) { flags &= ~flag; } }
        int verbosity() const
        { return context.version > 1 ? (flags >> VerbosityShift) & VerbosityMask : int(DefaultVerbosity); }
        void setVerbosity(int v)
        {
            if (context.version > 1) {
                flags &= ~(uint(VerbosityMask) << VerbosityShift);
                flags |= (v & VerbosityMask) << VerbosityShift;
            }
        }
        
        int flags;
    } *stream;

    enum Latin1Content { ContainsBinary = 0, ContainsLatin1 };

    void putUcs4(uint ucs4);
    void putString(const QChar *begin, size_t length);
    void putByteArray(const char *begin, size_t length, Latin1Content content);
public:
    inline QDebug(QIODevice *device) : stream(new Stream(device)) {}
    inline QDebug(QString *string) : stream(new Stream(string)) {}
    inline QDebug(QtMsgType t) : stream(new Stream(t)) {}
    inline QDebug(const QDebug &o):stream(o.stream) { ++stream->ref; }
    QDebug(QDebug &&other) noexcept : stream{qExchange(other.stream, nullptr)} {}
    inline QDebug &operator=(const QDebug &other);
    QDebug &operator=(QDebug &&other) noexcept
    { QDebug{std::move(other)}.swap(*this); return *this; }
    ~QDebug();
    inline void swap(QDebug &other) noexcept { qSwap(stream, other.stream); }

    QDebug &resetFormat();

    inline QDebug &space() { stream->space = true; stream->ts << ' '; return *this; }
    inline QDebug &nospace() { stream->space = false; return *this; }
    inline QDebug &maybeSpace() { if (stream->space) stream->ts << ' '; return *this; }
    inline QDebug &verbosity(int verbosityLevel) { setVerbosity(verbosityLevel); return *this; }
    int verbosity() const { return stream->verbosity(); }
    void setVerbosity(int verbosityLevel) { stream->setVerbosity(verbosityLevel); }
    enum VerbosityLevel { MinimumVerbosity = 0, DefaultVerbosity = 2, MaximumVerbosity = 7 };

    bool autoInsertSpaces() const { return stream->space; }
    void setAutoInsertSpaces(bool b) { stream->space = b; }

    inline QDebug &quote() { stream->unsetFlag(Stream::NoQuotes); return *this; }
    inline QDebug &noquote() { stream->setFlag(Stream::NoQuotes); return *this; }
    inline QDebug &maybeQuote(char c = '"') { if (!(stream->testFlag(Stream::NoQuotes))) stream->ts << c; return *this; }

    inline QDebug &operator<<(QChar t) { putUcs4(t.unicode()); return maybeSpace(); }
    inline QDebug &operator<<(bool t) { stream->ts << (t ? "true" : "false"); return maybeSpace(); }
    inline QDebug &operator<<(char t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(signed short t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(unsigned short t) { stream->ts << t; return maybeSpace(); }

    inline QDebug &operator<<(char16_t t) { return *this << QChar(ushort(t)); }
    inline QDebug &operator<<(char32_t t) { putUcs4(t); return maybeSpace(); }
#line 151 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
    inline QDebug &operator<<(signed int t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(unsigned int t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(signed long t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(unsigned long t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(qint64 t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(quint64 t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(float t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(double t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(const char* t) { stream->ts << QString::fromUtf8(t); return maybeSpace(); }

    inline QDebug &operator<<(const QString & t) { putString(t.constData(), uint(t.length())); return maybeSpace(); }
    inline QDebug &operator<<(const QStringRef & t) { putString(t.constData(), uint(t.length())); return maybeSpace(); }
#line 164 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
    inline QDebug &operator<<(QStringView s) { putString(s.data(), size_t(s.size())); return maybeSpace(); }
    inline QDebug &operator<<(QLatin1String t) { putByteArray(t.latin1(), t.size(), ContainsLatin1); return maybeSpace(); }
    inline QDebug &operator<<(const QByteArray & t) { putByteArray(t.constData(), t.size(), ContainsBinary); return maybeSpace(); }
    inline QDebug &operator<<(const void * t) { stream->ts << t; return maybeSpace(); }
    inline QDebug &operator<<(std::nullptr_t) { stream->ts << "(nullptr)"; return maybeSpace(); }
    inline QDebug &operator<<(QTextStreamFunction f) {
        stream->ts << f;
        return *this;
    }

    inline QDebug &operator<<(QTextStreamManipulator m)
    { stream->ts << m; return *this; }
};

template<> class QTypeInfo<QDebug > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QDebug>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QDebug>(), isLarge = (sizeof(QDebug)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QDebug >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QDebug) }; static inline const char *name() { return "QDebug"; } }; inline void swap(QDebug &value1, QDebug &value2) noexcept(noexcept(value1.swap(value2))) { value1.swap(value2); }

class QDebugStateSaverPrivate;
class __declspec(dllimport) QDebugStateSaver
{
public:
    QDebugStateSaver(QDebug &dbg);
    ~QDebugStateSaver();
private:
    QDebugStateSaver(const QDebugStateSaver &) = delete; QDebugStateSaver &operator=(const QDebugStateSaver &) = delete;
    QScopedPointer<QDebugStateSaverPrivate> d;
};

class QNoDebug
{
public:
    inline QNoDebug &operator<<(QTextStreamFunction) { return *this; }
    inline QNoDebug &operator<<(QTextStreamManipulator) { return *this; }
    inline QNoDebug &space() { return *this; }
    inline QNoDebug &nospace() { return *this; }
    inline QNoDebug &maybeSpace() { return *this; }
    inline QNoDebug &quote() { return *this; }
    inline QNoDebug &noquote() { return *this; }
    inline QNoDebug &maybeQuote(const char = '"') { return *this; }
    inline QNoDebug &verbosity(int) { return *this; }

    template<typename T>
    inline QNoDebug &operator<<(const T &) { return *this; }
};

inline QDebug &QDebug::operator=(const QDebug &other)
{
    QDebug{other}.swap(*this);
    return *this;
}

namespace QtPrivate {

template <typename SequentialContainer>
inline QDebug printSequentialContainer(QDebug debug, const char *which, const SequentialContainer &c)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << which << '(';
    typename SequentialContainer::const_iterator it = c.begin(), end = c.end();
    if (it != end) {
        debug << *it;
        ++it;
    }
    while (it != end) {
        debug << ", " << *it;
        ++it;
    }
    debug << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

} 

template <class T>
inline QDebug operator<<(QDebug debug, const QList<T> &list)
{
    return QtPrivate::printSequentialContainer(debug, "" , list);
}

template <typename T>
inline QDebug operator<<(QDebug debug, const QVector<T> &vec)
{
    return QtPrivate::printSequentialContainer(debug, "QVector", vec);
}

template <typename T, typename Alloc>
inline QDebug operator<<(QDebug debug, const std::vector<T, Alloc> &vec)
{
    return QtPrivate::printSequentialContainer(debug, "std::vector", vec);
}

template <typename T, typename Alloc>
inline QDebug operator<<(QDebug debug, const std::list<T, Alloc> &vec)
{
    return QtPrivate::printSequentialContainer(debug, "std::list", vec);
}

template <typename Key, typename T, typename Compare, typename Alloc>
inline QDebug operator<<(QDebug debug, const std::map<Key, T, Compare, Alloc> &map)
{
    return QtPrivate::printSequentialContainer(debug, "std::map", map); 
}

template <typename Key, typename T, typename Compare, typename Alloc>
inline QDebug operator<<(QDebug debug, const std::multimap<Key, T, Compare, Alloc> &map)
{
    return QtPrivate::printSequentialContainer(debug, "std::multimap", map); 
}

template <class Key, class T>
inline QDebug operator<<(QDebug debug, const QMap<Key, T> &map)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << "QMap(";
    for (typename QMap<Key, T>::const_iterator it = map.constBegin();
         it != map.constEnd(); ++it) {
        debug << '(' << it.key() << ", " << it.value() << ')';
    }
    debug << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

template <class Key, class T>
inline QDebug operator<<(QDebug debug, const QHash<Key, T> &hash)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << "QHash(";
    for (typename QHash<Key, T>::const_iterator it = hash.constBegin();
            it != hash.constEnd(); ++it)
        debug << '(' << it.key() << ", " << it.value() << ')';
    debug << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

template <class T1, class T2>
inline QDebug operator<<(QDebug debug, const QPair<T1, T2> &pair)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << "QPair(" << pair.first << ',' << pair.second << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

template <class T1, class T2>
inline QDebug operator<<(QDebug debug, const std::pair<T1, T2> &pair)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << "std::pair(" << pair.first << ',' << pair.second << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

template <typename T>
inline QDebug operator<<(QDebug debug, const QSet<T> &set)
{
    return QtPrivate::printSequentialContainer(debug, "QSet", set);
}

template <class T>
inline QDebug operator<<(QDebug debug, const QContiguousCache<T> &cache)
{
    const bool oldSetting = debug.autoInsertSpaces();
    debug.nospace() << "QContiguousCache(";
    for (int i = cache.firstIndex(); i <= cache.lastIndex(); ++i) {
        debug << cache[i];
        if (i != cache.lastIndex())
            debug << ", ";
    }
    debug << ')';
    debug.setAutoInsertSpaces(oldSetting);
    return debug.maybeSpace();
}

template <class T>
inline QDebug operator<<(QDebug debug, const QSharedPointer<T> &ptr)
{
    QDebugStateSaver saver(debug);
    debug.nospace() << "QSharedPointer(" << ptr.data() << ")";
    return debug;
}

__declspec(dllimport) void qt_QMetaEnum_flagDebugOperator(QDebug &debug, size_t sizeofT, int value);

template <typename Int>
void qt_QMetaEnum_flagDebugOperator(QDebug &debug, size_t sizeofT, Int value)
{
    const QDebugStateSaver saver(debug);
    debug.resetFormat();
    debug.nospace() << "QFlags(" << Qt::hex << Qt::showbase;
    bool needSeparator = false;
    for (uint i = 0; i < sizeofT * 8; ++i) {
        if (value & (Int(1) << i)) {
            if (needSeparator)
                debug << '|';
            else
                needSeparator = true;
            debug << (Int(1) << i);
        }
    }
    debug << ')';
}


__declspec(dllimport) QDebug qt_QMetaEnum_debugOperator(QDebug&, int value, const QMetaObject *meta, const char *name);
__declspec(dllimport) QDebug qt_QMetaEnum_flagDebugOperator(QDebug &dbg, quint64 value, const QMetaObject *meta, const char *name);

template<typename T>
typename std::enable_if<QtPrivate::IsQEnumHelper<T>::Value, QDebug>::type
operator<<(QDebug dbg, T value)
{
    const QMetaObject *obj = qt_getEnumMetaObject(value);
    const char *name = qt_getEnumName(value);
    return qt_QMetaEnum_debugOperator(dbg, typename QFlags<T>::Int(value), obj, name);
}

template<typename T,
         typename A = typename std::enable_if<std::is_enum<T>::value, void>::type,
         typename B = typename std::enable_if<sizeof(T) <= sizeof(int), void>::type,
         typename C = typename std::enable_if<!QtPrivate::IsQEnumHelper<T>::Value, void>::type,
         typename D = typename std::enable_if<QtPrivate::IsQEnumHelper<QFlags<T>>::Value, void>::type>
inline QDebug operator<<(QDebug dbg, T value)
{
    typedef QFlags<T> FlagsT;
    const QMetaObject *obj = qt_getEnumMetaObject(FlagsT());
    const char *name = qt_getEnumName(FlagsT());
    return qt_QMetaEnum_debugOperator(dbg, typename FlagsT::Int(value), obj, name);
}

template <class T>
inline typename std::enable_if<
    QtPrivate::IsQEnumHelper<T>::Value || QtPrivate::IsQEnumHelper<QFlags<T> >::Value,
    QDebug>::type
qt_QMetaEnum_flagDebugOperator_helper(QDebug debug, const QFlags<T> &flags)
{
    const QMetaObject *obj = qt_getEnumMetaObject(T());
    const char *name = qt_getEnumName(T());
    return qt_QMetaEnum_flagDebugOperator(debug, quint64(flags), obj, name);
}

template <class T>
inline typename std::enable_if<
    !QtPrivate::IsQEnumHelper<T>::Value && !QtPrivate::IsQEnumHelper<QFlags<T> >::Value,
    QDebug>::type
qt_QMetaEnum_flagDebugOperator_helper(QDebug debug, const QFlags<T> &flags)



#line 414 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
{
    qt_QMetaEnum_flagDebugOperator(debug, sizeof(T), typename QFlags<T>::Int(flags));
    return debug;
}

template<typename T>
inline QDebug operator<<(QDebug debug, const QFlags<T> &flags)
{
    
    
    return qt_QMetaEnum_flagDebugOperator_helper(debug, flags);
}















































































#line 506 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qdebug.h"
#line 2 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QDebug"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\icollidable.h"

namespace parkour {
    class ICollidable {
    public:
        



        virtual BoundingBoxWorld getBoundingBoxWorld() const = 0;
        virtual void collide(const ICollidable&, Direction) = 0;
        virtual QVector2D getVelocity() const = 0;
        virtual void setVelocity(const QVector2D&) = 0;
        virtual Direction checkCollideWith(const ICollidable&) final;
    };
}

#line 23 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\icollidable.h"
#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QString"

#line 11 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"

#line 12 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"

namespace parkour {

class Entity : public QObject, public ICollidable {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    QVector2D position;
    QVector2D velocity;
    QVector2D acceleration;

    double hp = 20.0;
    bool dying = false;
    bool onFloor = true;

public:
    virtual QString getName() const = 0;
    


    void updatePosition();
    



    virtual void collide(const ICollidable&, Direction) override {};
    


    virtual void update() {};

    



    void placeBoundingBoxAt(const QVector2D& bottomLeft);
    


    QVector2D getBoundingBoxBottomLeft();

    explicit Entity(QObject* parent = nullptr);
    virtual ~Entity() {};

    QVector2D getPosition() const;
    void setPosition(const QVector2D& value);

    QVector2D getVelocity() const override;
    void setVelocity(const QVector2D& value) override;

    QVector2D getAcceleration() const;
    void setAcceleration(const QVector2D& value);

    virtual double getHp() const final;
    virtual void setHp(double value) final;
    virtual void damage(double value);

    virtual QString getResourceLocation() = 0;
    



    virtual QVector2D getTextureDimensions() = 0;

    bool isDying() const;

    bool isOnFloor() const;
    void setOnFloor(bool value);

    BoundingBoxWorld getBoundingBoxWorld() const override final;
    virtual BoundingBox getBoundingBox() const = 0;
};
}

#line 86 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\./entity.h"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\block.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\block.h"

namespace parkour {

class Block : public QObject {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    explicit Block() {};

    virtual QString getName() const = 0;
    virtual QString getResourceLocation() const = 0;
    virtual double getExplosionResistance() const = 0;
    



    virtual int getCurrentFrame() const;

    




    virtual void onExplosion(QPoint blockPos, double power);
    virtual void collide(QPoint, const Entity&, Direction) {};
    virtual BoundingBox getBoundingBox() const;
public :
};

}

#line 38 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\block.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"


#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/singleton.h"



namespace parkour {
    template<typename T>
    class Singleton {
    protected:
        Singleton() = default;
        ~Singleton() = default;
        Singleton(const Singleton&) = delete;
        Singleton(Singleton&&) = delete;
    public:
        static T& instance() {
            static T inst;
            return inst;
        }
    };
}

#line 21 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../utils/singleton.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"

#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockdirt.h"




#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"





#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QDebug"

#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QHash"

#line 8 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QList"

#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QPair"

#line 11 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QString"

#line 12 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"

namespace parkour {
class WorldController;
class World : public QObject, public Singleton<World> {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    friend class WorldController;

public:
    bool isReady() const;
    void setReady(bool value);
    void setBlock(QPoint blockPos, QString blockName);
    QString getBlock(QPoint blockPos);

    void addEntity(QSharedPointer<Entity>);

    const QList<QSharedPointer<Entity>>& getEntities() const;

    size_t getTicksFromBirth() const;

    const QHash<QSharedPointer<Entity>, int>& getDyingEntities() const;

    QVector2D getSpawnPoint() const;
    void setSpawnPoint(const QVector2D& value);

private:
    bool ready = false;
    size_t ticksFromBirth = 0;
    QVector2D spawnPoint;
    QList<QSharedPointer<Entity>> entities;
    QHash<QSharedPointer<Entity>, int> dyingEntities;
    QHash<QPair<int, int>, QString> blocks;
};
}

#line 48 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\world.h"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockdirt.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockdirt.h"

namespace parkour {

class BlockDirt : public Block {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    BlockDirt() = default;
    QString getResourceLocation() const override;
    QString getName() const override;
    double getExplosionResistance() const override;
    BoundingBox getBoundingBox() const override;
};
}

#line 22 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockdirt.h"
#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockgrass.h"




#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QDebug"

#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockgrass.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QString"

#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockgrass.h"

namespace parkour {
class BlockGrass : public Block
{
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    BlockGrass() = default;

    QString getName() const override;
    QString getResourceLocation() const override;

    double getExplosionResistance() const override;
};
}

#line 23 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blockgrass.h"
#line 8 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blocktnt.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"




































#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blocktnt.h"

#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\entitytnt.h"







namespace parkour {
class EntityTNT : public Entity {
public:
    EntityTNT();

    const int TICKS_BEFORE_EXPLOSION = TICKS_PER_SEC * 3;
    int ticksLeft = 0;

    
public:
    void collide(const ICollidable&, Direction) override;

    
public:
    QString getName() const override;
    void update() override;
    void damage(double value) override;
    QString getResourceLocation() override;
    QVector2D getTextureDimensions() override;
    BoundingBox getBoundingBox() const override;
};
}

#line 32 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\entitytnt.h"
#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blocktnt.h"


namespace parkour {
class BlockTNT : public Block
{
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    BlockTNT();

    
public:
    QString getName() const override;
    QString getResourceLocation() const override;
    double getExplosionResistance() const override;

    
public:
    void onExplosion(QPoint blockPos, double power) override;
    void collide(QPoint, const Entity&, Direction) override;
};
}

#line 30 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\blocktnt.h"
#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QHash"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QSharedDataPointer"

#line 11 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QString"

#line 12 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"

namespace parkour {

namespace registry {
    typedef QHash<QString, QSharedPointer<Block>> BlockMapType;

    class BlockRegistry : public QObject, public Singleton<BlockRegistry> {
        public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
        BlockMapType blockMap;
        QVector<QString> blockIds;
        QHash<QString, size_t> idMapping;

        template <typename T>
        void registerBlock();

    public:
        BlockRegistry();
        QSharedPointer<Block> getBlockByName(QString blockName);
        const QVector<QString>& getBlockIds();
        size_t getBlockIdByName(QString);
    };

}
}

#line 38 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\registry.h"
#line 8 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QString"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"

#line 11 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"

namespace parkour {

class BlockDelegate : public QObject, public ICollidable {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
    QSharedPointer<Block> block;
    QPoint blockPos;

public:
    




    BlockDelegate(QString blockName_, QPoint blockPos_);

    BoundingBoxWorld getBoundingBoxWorld() const override;
    void collide(const ICollidable&, Direction) override;
    QVector2D getVelocity() const override;
    void setVelocity(const QVector2D&) override;

    bool isAir() { return block == nullptr; }
};

}

#line 38 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/blockdelegate.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"
#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/entityplayer.h"



#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\entityplayerlike.h"








#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QtGlobal"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\entityplayerlike.h"

namespace parkour {
class EntityPlayerLike : public Entity {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    bool sneak;

public:
    EntityPlayerLike();
    


    void collide(const ICollidable&, Direction) override;

    virtual void jump();
    virtual void goLeft();
    virtual void goRight();
    bool isSneak() const;
    bool setSneak(bool value);
};
}

#line 33 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\entityplayerlike.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/entityplayer.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"

#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/entityplayer.h"

namespace parkour {

class EntityPlayer : public EntityPlayerLike {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    EntityPlayer();

    
public:
    BoundingBox getBoundingBox() const override;

    
public:
    QString getName() const override;
    QString getResourceLocation() override;
    QVector2D getTextureDimensions() override;
};
}

#line 27 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../model/entityplayer.h"
#line 6 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"




#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\playercontroller.h"





#line 1 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../utils/askeyvaluerange.h"



namespace parkour {
template <typename T>
class AsKeyValueRange {
    T& container;

public:
    AsKeyValueRange(T& container_)
        : container(container_) {}

    auto begin() { return container.keyValueBegin(); }
    auto end() { return container.keyValueEnd(); }
};

template <typename T>
auto asKeyValueRange(T& container) {
    return AsKeyValueRange<T>(container);
}
}

#line 24 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\../utils/askeyvaluerange.h"
#line 7 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\playercontroller.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 8 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\playercontroller.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QWeakPointer"

#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\playercontroller.h"

namespace parkour {
class PlayerController : public QObject
{
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    


    bool alive;
    


    bool readyJump;
    


    bool goingLeft;
    


    bool goingRight;
    


    bool sneakingExpected;

public:
    explicit PlayerController();

    void tick();
    bool isAlive() const;
    



    QSharedPointer<EntityPlayer> getPlayer();

public :
    void setReadyJump(bool value);
    void setGoingLeft(bool value);
    void setGoingRight(bool value);
    void setSneakingExpected(bool value);
};
}

#line 56 "c:\\users\\panda2134\\documents\\parkourgame\\src\\controller\\playercontroller.h"
#line 11 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QObject"

#line 12 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QSharedPointer"

#line 13 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QTimer"
#line 1 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"














































#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasictimer.h"
















































class QObject;

class __declspec(dllimport) QBasicTimer
{
    int id;


#line 57 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasictimer.h"
public:
    
    __declspec(deprecated("copy-construction is unsupported; use move-construction instead"))
    QBasicTimer(const QBasicTimer &);
    __declspec(deprecated("copy-assignment is unsupported; use move-assignment instead"))
    QBasicTimer &operator=(const QBasicTimer &);
#line 64 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasictimer.h"

public:
    constexpr QBasicTimer() noexcept : id{0} {}
    inline ~QBasicTimer() { if (id) stop(); }

    QBasicTimer(QBasicTimer &&other) noexcept
        : id{qExchange(other.id, 0)}
    {}

    QBasicTimer& operator=(QBasicTimer &&other) noexcept
    {
        QBasicTimer{std::move(other)}.swap(*this);
        return *this;
    }

    void swap(QBasicTimer &other) noexcept { qSwap(id, other.id); }

    bool isActive() const noexcept { return id != 0; }
    int timerId() const noexcept { return id; }

    void start(int msec, QObject *obj);
    void start(int msec, Qt::TimerType timerType, QObject *obj);
    void stop();
};
template<> class QTypeInfo<QBasicTimer > { public: enum { isSpecialized = true, isComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0) && !qIsTrivial<QBasicTimer>(), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isRelocatable = !isStatic || ((Q_MOVABLE_TYPE) & Q_RELOCATABLE_TYPE) || qIsRelocatable<QBasicTimer>(), isLarge = (sizeof(QBasicTimer)>sizeof(void*)), isPointer = false, isIntegral = std::is_integral< QBasicTimer >::value, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0), sizeOf = sizeof(QBasicTimer) }; static inline const char *name() { return "QBasicTimer"; } };

inline void swap(QBasicTimer &lhs, QBasicTimer &rhs) noexcept { lhs.swap(rhs); }



#line 95 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore/qbasictimer.h"
#line 48 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"




#line 53 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"




class __declspec(dllimport) QTimer : public QObject
{
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
    
    
    
    
    
public:
    explicit QTimer(QObject *parent = nullptr);
    ~QTimer();

    inline bool isActive() const { return id >= 0; }
    int timerId() const { return id; }

    void setInterval(int msec);
    int interval() const { return inter; }

    int remainingTime() const;

    void setTimerType(Qt::TimerType atype) { this->type = atype; }
    Qt::TimerType timerType() const { return Qt::TimerType(type); }

    inline void setSingleShot(bool singleShot);
    inline bool isSingleShot() const { return single; }

    static void singleShot(int msec, const QObject *receiver, const char *member);
    static void singleShot(int msec, Qt::TimerType timerType, const QObject *receiver, const char *member);





















    
    template <typename Duration, typename Func1>
    static inline void singleShot(Duration interval, const typename QtPrivate::FunctionPointer<Func1>::Object *receiver, Func1 slot)
    {
        singleShot(interval, defaultTypeFor(interval), receiver, slot);
    }
    template <typename Duration, typename Func1>
    static inline void singleShot(Duration interval, Qt::TimerType timerType, const typename QtPrivate::FunctionPointer<Func1>::Object *receiver,
                                  Func1 slot)
    {
        typedef QtPrivate::FunctionPointer<Func1> SlotType;

        
        static_assert(bool(int(SlotType::ArgumentCount) == 0), "The slot must not have any arguments.");
#line 121 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"

        singleShotImpl(interval, timerType, receiver,
                       new QtPrivate::QSlotObject<Func1, typename SlotType::Arguments, void>(slot));
    }
    
    template <typename Duration, typename Func1>
    static inline typename std::enable_if<!QtPrivate::FunctionPointer<Func1>::IsPointerToMemberFunction &&
                                          !std::is_same<const char*, Func1>::value, void>::type
            singleShot(Duration interval, Func1 slot)
    {
        singleShot(interval, defaultTypeFor(interval), nullptr, std::move(slot));
    }
    template <typename Duration, typename Func1>
    static inline typename std::enable_if<!QtPrivate::FunctionPointer<Func1>::IsPointerToMemberFunction &&
                                          !std::is_same<const char*, Func1>::value, void>::type
            singleShot(Duration interval, Qt::TimerType timerType, Func1 slot)
    {
        singleShot(interval, timerType, nullptr, std::move(slot));
    }
    
    template <typename Duration, typename Func1>
    static inline typename std::enable_if<!QtPrivate::FunctionPointer<Func1>::IsPointerToMemberFunction &&
                                          !std::is_same<const char*, Func1>::value, void>::type
            singleShot(Duration interval, const QObject *context, Func1 slot)
    {
        singleShot(interval, defaultTypeFor(interval), context, std::move(slot));
    }
    template <typename Duration, typename Func1>
    static inline typename std::enable_if<!QtPrivate::FunctionPointer<Func1>::IsPointerToMemberFunction &&
                                          !std::is_same<const char*, Func1>::value, void>::type
            singleShot(Duration interval, Qt::TimerType timerType, const QObject *context, Func1 slot)
    {
        
        typedef QtPrivate::FunctionPointer<Func1> SlotType;
        static_assert(bool(int(SlotType::ArgumentCount) <= 0), "The slot must not have any arguments.");

        singleShotImpl(interval, timerType, context,
                       new QtPrivate::QFunctorSlotObject<Func1, 0,
                            typename QtPrivate::List_Left<void, 0>::Value, void>(std::move(slot)));
    }

    template <typename ... Args>
    QMetaObject::Connection callOnTimeout(Args && ...args)
    {
        return QObject::connect(this, &QTimer::timeout, std::forward<Args>(args)... );
    }

#line 169 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"

public :
    void start(int msec);

    void start();
    void stop();

public :
    void timeout(QPrivateSignal);

public:

    void setInterval(std::chrono::milliseconds value)
    {
        setInterval(int(value.count()));
    }

    std::chrono::milliseconds intervalAsDuration() const
    {
        return std::chrono::milliseconds(interval());
    }

    std::chrono::milliseconds remainingTimeAsDuration() const
    {
        return std::chrono::milliseconds(remainingTime());
    }

    static void singleShot(std::chrono::milliseconds value, const QObject *receiver, const char *member)
    {
        singleShot(int(value.count()), receiver, member);
    }

    static void singleShot(std::chrono::milliseconds value, Qt::TimerType timerType, const QObject *receiver, const char *member)
    {
        singleShot(int(value.count()), timerType, receiver, member);
    }

    void start(std::chrono::milliseconds value)
    {
        start(int(value.count()));
    }
#line 211 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"

protected:
    void timerEvent(QTimerEvent *) override;

private:
    QTimer(const QTimer &) = delete; QTimer &operator=(const QTimer &) = delete;

    inline int startTimer(int){ return -1;}
    inline void killTimer(int){}

    static constexpr Qt::TimerType defaultTypeFor(int msecs) noexcept
    { return msecs >= 2000 ? Qt::CoarseTimer : Qt::PreciseTimer; }
    static void singleShotImpl(int msec, Qt::TimerType timerType,
                               const QObject *receiver, QtPrivate::QSlotObjectBase *slotObj);


    static Qt::TimerType defaultTypeFor(std::chrono::milliseconds interval)
    { return defaultTypeFor(int(interval.count())); }

    static void singleShotImpl(std::chrono::milliseconds interval, Qt::TimerType timerType,
                               const QObject *receiver, QtPrivate::QSlotObjectBase *slotObj)
    {
        singleShotImpl(int(interval.count()),
                       timerType, receiver, slotObj);
    }
#line 237 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"

    int id, inter, del;
    uint single : 1;
    uint nulltimer : 1;
    uint type : 2;
    
};

inline void QTimer::setSingleShot(bool asingleShot) { single = asingleShot; }



#line 250 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"

#line 252 "c:\\qt\\qt5.14.2\\5.14.2\\msvc2017_64\\include\\qtcore\\qtimer.h"
#line 2 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QTimer"
#line 14 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"

namespace parkour {
class WorldController : public QObject, public Singleton<WorldController> {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 

    QSharedPointer<PlayerController> playerController;

public:
    WorldController();

    void loadTestWorld() const;
    void unloadWorld() const;

    void explode(QPoint center, double power) const;
    QSharedPointer<PlayerController> getPlayerController() const;

public :
    void tick() const;
public :
};
}

#line 37 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\../controller/worldcontroller.h"
#line 5 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\testentity.h"



#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtCore\\QDebug"

#line 9 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\testentity.h"
#line 1 "C:\\Qt\\Qt5.14.2\\5.14.2\\msvc2017_64\\include\\QtGui\\QVector2D"

#line 10 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\testentity.h"

namespace parkour {

class TestEntity : public EntityPlayerLike {
    public: __pragma(warning(push))  static const QMetaObject staticMetaObject; virtual const QMetaObject *metaObject() const; virtual void *qt_metacast(const char *); virtual int qt_metacall(QMetaObject::Call, int, void **); static inline QString tr(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } __declspec(deprecated) static inline QString trUtf8(const char *s, const char *c = nullptr, int n = -1) { return staticMetaObject.tr(s, c, n); } private:   static void qt_static_metacall(QObject *, QMetaObject::Call, int, void **); __pragma(warning(pop)) struct QPrivateSignal {}; 
public:
    QString getName() const override;
    QString getResourceLocation() override;
    QVector2D getTextureDimensions() override;
    TestEntity() = default;

    QVector2D offset, dimensions;

    BoundingBox getBoundingBox() const override;

    void update() override;
};
}

#line 30 "c:\\users\\panda2134\\documents\\parkourgame\\src\\model\\testentity.h"
#line 2 "testentity.cpp"

namespace parkour {

QString TestEntity::getName() const {
    return "test";
}

QString TestEntity::getResourceLocation() {
    return ":/assets/entities/test.png";
}

QVector2D TestEntity::getTextureDimensions() {
    return QVector2D(1.0, 2.0);
}

BoundingBox TestEntity::getBoundingBox() const {
    return BoundingBox { { 0.05, 0.05 }, { 0.9, 1.9 } };
}

void TestEntity::update() {
    goRight();
    if (World::instance().getTicksFromBirth() / TICKS_PER_SEC > 3 && World::instance().getTicksFromBirth() % TICKS_PER_SEC == 0) {
        WorldController::instance().explode((getPosition()).toPoint(), 7);
    }
}
}
